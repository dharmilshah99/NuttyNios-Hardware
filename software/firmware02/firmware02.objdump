
firmware02.elf:     file format elf32-littlenios2
firmware02.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020228

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006604 memsz 0x00006604 flags r-x
    LOAD off    0x00007624 vaddr 0x00026624 paddr 0x00028120 align 2**12
         filesz 0x00001afc memsz 0x00001afc flags rw-
    LOAD off    0x00000c1c vaddr 0x00029c1c paddr 0x00029c1c align 2**12
         filesz 0x00000000 memsz 0x00000360 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000061bc  00020228  00020228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000240  000263e4  000263e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  00026624  00028120  00007624  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000360  00029c1c  00029c1c  00009c1c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00029f7c  00029f7c  00009120  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b00  00000000  00000000  00009150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00019884  00000000  00000000  00009c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000071d5  00000000  00000000  000234d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000a07d  00000000  00000000  0002a6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000019dc  00000000  00000000  00034728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002e57  00000000  00000000  00036104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00004991  00000000  00000000  00038f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003d8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0003d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00040e26  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00040e29  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00040e2c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00040e2d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00040e2e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00040e32  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00040e36  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00040e3a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00040e43  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00040e4c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00040e55  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  00040e60  2**0
                  CONTENTS, READONLY
 29 .jdi          00004881  00000000  00000000  00040e89  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00077db3  00000000  00000000  0004570a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020228 l    d  .text	00000000 .text
000263e4 l    d  .rodata	00000000 .rodata
00026624 l    d  .rwdata	00000000 .rwdata
00029c1c l    d  .bss	00000000 .bss
00029f7c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../firmware02_bsp//obj/HAL/src/crt0.o
00020260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00021568 l     F .text	00000008 __fp_lock
0002157c l     F .text	00000008 __fp_unlock
00021584 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00026688 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00022b28 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00022d90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022ea8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00022ed4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000231c0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000232ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
000236e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00028114 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023954 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023a94 l     F .text	00000034 alt_dev_reg
0002705c l     O .rwdata	00001060 jtag_uart
000280bc l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023da4 l     F .text	00000210 altera_avalon_jtag_uart_irq
00023fb4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000245f8 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024fb4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00025104 l     F .text	0000003c alt_get_errno
00025140 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00026200 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000262f8 l     F .text	0000003c alt_get_errno
00029c74 g     O .bss	00000004 alt_instruction_exception_handler
00025890 g     F .text	00000018 putchar
00026170 g     F .text	00000058 _isatty_r
000233c8 g     F .text	0000007c alt_main
0002038c g     F .text	00000064 read_accerometer
00029e7c g     O .bss	00000100 alt_irq
00022cc8 g     F .text	00000064 _lseek_r
00028120 g       *ABS*	00000000 __flash_rwdata_start
00029f7c g       *ABS*	00000000 __alt_heap_start
00026624 g     O .rwdata	00000064 filter_coeff_float
00022970 g     F .text	0000005c __sseek
000218cc g     F .text	00000010 __sinit
00025c04 g     F .text	00000148 __swbuf_r
00020920 g     F .text	00000050 get_accler_isr
000216ec g     F .text	00000078 __sfmoreglue
00023468 g     F .text	00000024 __malloc_unlock
00020630 g     F .text	0000004c fixed23_to_float
00020344 g     F .text	00000024 read_switches
00020cec g     F .text	000003f8 .hidden __divsf3
000204ac g     F .text	0000008c shiftBuffer
00029c64 g     O .bss	00000004 altera_avalon_timer_ts_freq
000218b8 g     F .text	00000014 _cleanup
0002554c g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
0002495c g     F .text	000000d4 alt_up_accelerometer_spi_read_x_axis
00020020 g       *ABS*	00000000 __flash_exceptions_start
00026110 g     F .text	00000060 _fstat_r
00029c4c g     O .bss	00000004 errno
000228e8 g     F .text	00000008 __seofread
00029c58 g     O .bss	00000004 alt_argv
000300e8 g       *ABS*	00000000 _gp
00029d8c g     O .bss	00000064 fir_mem_fixed_y
00026edc g     O .rwdata	00000180 alt_fd_list
00025888 g     F .text	00000008 _putchar_r
00029c84 g     O .bss	0000000c filtered_coords
00024f04 g     F .text	00000090 alt_find_dev
0002264c g     F .text	00000100 memcpy
000263e4 g     O .rodata	0000004b seven_seg_digits_decode_abcdefg
00021570 g     F .text	0000000c _cleanup_r
00025088 g     F .text	0000007c alt_io_redirect
000263e4 g       *ABS*	00000000 __DTOR_END__
0002067c g     F .text	0000010c fir_filter_fixed
00025730 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000241b0 g     F .text	00000220 altera_avalon_jtag_uart_read
00026334 g     F .text	000000b0 isatty
00020788 g     F .text	00000080 generate_fixed
00029c48 g     O .bss	00000004 __malloc_top_pad
00029c2c g     O .bss	00000004 coord_data_ready
0002283c g     F .text	00000058 _sbrk_r
00022d2c g     F .text	00000064 _read_r
00028108 g     O .rwdata	00000004 alt_max_fd
00022be8 g     F .text	00000070 _fclose_r
000214e4 g     F .text	00000084 fflush
00029c44 g     O .bss	00000004 __malloc_max_sbrked_mem
00023040 g     F .text	00000180 alt_irq_register
000203f0 g     F .text	00000064 decode_7seg
000232e8 g     F .text	000000e0 lseek
000280e8 g     O .rwdata	00000004 _global_impure_ptr
00029f7c g       *ABS*	00000000 __bss_end
00025420 g     F .text	0000012c alt_tick
000218ec g     F .text	00000014 __fp_lock_all
00029c1c g     O .bss	00000004 state
0002537c g     F .text	000000a4 alt_alarm_stop
00029c50 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000cc alt_irq_handler
00026eb4 g     O .rwdata	00000028 alt_dev_null
00024d38 g     F .text	00000020 alt_dcache_flush_all
00028120 g       *ABS*	00000000 __ram_rwdata_end
000208c0 g     F .text	00000060 update_leds
00020970 g     F .text	0000007c timer_init
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
00028100 g     O .rwdata	00000008 alt_dev_list
00023990 g     F .text	00000104 write
00025a58 g     F .text	000000cc _putc_r
000247ec g     F .text	00000020 alt_timestamp_freq
00026624 g       *ABS*	00000000 __ram_rodata_end
00029df0 g     O .bss	00000064 fir_mem_fixed_z
0002623c g     F .text	000000bc fstat
00020368 g     F .text	00000024 read_buttons
00020264 g     F .text	00000030 write_leds
00029f7c g       *ABS*	00000000 end
00029c28 g     O .bss	00000004 leds
00020294 g     F .text	000000b0 write_hex
00023cf0 g     F .text	000000b4 altera_avalon_jtag_uart_init
000201c8 g     F .exceptions	00000060 alt_instruction_exception_entry
00029c24 g     O .bss	00000004 switches
000263e4 g       *ABS*	00000000 __CTOR_LIST__
00035f90 g       *ABS*	00000000 __alt_stack_pointer
00024678 g     F .text	0000007c alt_avalon_timer_sc_init
00021208 g     F .text	00000054 .hidden __clzsi2
000243d0 g     F .text	00000228 altera_avalon_jtag_uart_write
000218dc g     F .text	00000004 __sfp_lock_acquire
00021a30 g     F .text	000002fc _free_r
0002348c g     F .text	0000022c alt_printf
00025938 g     F .text	00000120 __call_exitprocs
000280f0 g     O .rwdata	00000004 __malloc_sbrk_base
00020228 g     F .text	0000003c _start
00029c68 g     O .bss	00000004 _alt_tick_rate
00020808 g     F .text	000000b8 update_hex
00029c6c g     O .bss	00000008 _alt_nticks
00023724 g     F .text	00000108 read
00023b04 g     F .text	00000088 alt_sys_init
00024848 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
000210e4 g     F .text	00000124 .hidden __floatsisf
000258a8 g     F .text	00000090 __register_exitproc
00020538 g     F .text	00000040 getWindow
00024054 g     F .text	00000068 altera_avalon_jtag_uart_close
00020cc4 g     F .text	00000028 .hidden __mulsi3
00026624 g       *ABS*	00000000 __ram_rwdata_start
000263e4 g       *ABS*	00000000 __ram_rodata_start
00029e54 g     O .bss	00000028 __malloc_current_mallinfo
00023b8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025678 g     F .text	000000b8 alt_get_fd
00024a30 g     F .text	000000d4 alt_up_accelerometer_spi_read_y_axis
00022ad0 g     F .text	00000058 _close_r
00025810 g     F .text	00000078 memcmp
00023c4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00029f7c g       *ABS*	00000000 __alt_stack_base
00023c9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00025d64 g     F .text	00000164 __swsetup_r
00021764 g     F .text	00000154 __sfp
00026aac g     O .rwdata	00000408 __malloc_av_
000218e8 g     F .text	00000004 __sinit_lock_release
00022894 g     F .text	00000054 __sread
00025570 g     F .text	00000108 alt_find_file
00024d94 g     F .text	000000a8 alt_dev_llist_insert
00023444 g     F .text	00000024 __malloc_lock
0002389c g     F .text	000000b8 sbrk
00021484 g     F .text	00000060 _fflush_r
00029c1c g       *ABS*	00000000 __bss_start
0002274c g     F .text	000000f0 memset
000209ec g     F .text	000002d8 main
00029c5c g     O .bss	00000004 alt_envp
00029c40 g     O .bss	00000004 __malloc_max_total_mem
00023bec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00029c20 g     O .bss	00000004 buttons
00025d4c g     F .text	00000018 __swbuf
000229cc g     F .text	00000008 __sclose
00035f90 g       *ABS*	00000000 __alt_heap_limit
00022c58 g     F .text	00000070 fclose
000246f4 g     F .text	00000078 alt_timestamp_start
00021e6c g     F .text	000007e0 _malloc_r
0002810c g     O .rwdata	00000004 alt_errno
00021d2c g     F .text	00000098 _fwalk
00025b24 g     F .text	000000e0 putc
00021914 g     F .text	0000011c _malloc_trim_r
000263e4 g       *ABS*	00000000 __CTOR_END__
000263e4 g       *ABS*	00000000 __flash_rodata_start
000263e4 g       *ABS*	00000000 __DTOR_LIST__
00020454 g     F .text	00000058 setBuffer
00029c34 g     O .bss	00000004 delay
00029ca9 g     O .bss	00000019 display_buff
00023ac8 g     F .text	0000003c alt_irq_init
0002382c g     F .text	00000070 alt_release_fd
000264e0 g     O .rodata	00000100 .hidden __clz_tab
00026430 g     O .rodata	0000004b seven_seg_digits_decode_gfedcba
000257c8 g     F .text	00000014 atexit
00022a6c g     F .text	00000064 _write_r
000280ec g     O .rwdata	00000004 _impure_ptr
00029c54 g     O .bss	00000004 alt_argc
0002125c g     F .text	00000228 __sflush_r
00020578 g     F .text	000000b8 float_to_fixed23
00029d28 g     O .bss	00000064 fir_mem_fixed_x
00029c60 g     O .bss	00000004 altera_avalon_timer_ts_base
00024ea0 g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00021900 g     F .text	00000014 __fp_unlock_all
000280f8 g     O .rwdata	00000008 alt_fs_list
00029c78 g     O .bss	0000000c coords
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002480c g     F .text	0000003c alt_up_accelerometer_spi_open_dev
0002476c g     F .text	00000080 alt_timestamp
00026078 g     F .text	00000098 __swhatbuf_r
00028120 g       *ABS*	00000000 _edata
00029f7c g       *ABS*	00000000 _end
00020228 g       *ABS*	00000000 __ram_exceptions_end
000240bc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000228f0 g     F .text	00000080 __swrite
000280f4 g     O .rwdata	00000004 __malloc_trim_threshold
000257dc g     F .text	00000034 exit
00021dc4 g     F .text	000000a8 _fwalk_reent
00024b04 g     F .text	000000d4 alt_up_accelerometer_spi_read_z_axis
00035f90 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000218e0 g     F .text	00000004 __sfp_lock_release
00029c38 g     O .bss	00000006 window
000261c8 g     F .text	00000038 _exit
00024bd8 g     F .text	00000160 alt_alarm_start
0002488c g     F .text	00000068 alt_up_accelerometer_spi_read
000248f4 g     F .text	00000068 alt_up_accelerometer_spi_write
00025ec8 g     F .text	000001b0 __smakebuf_r
000229d4 g     F .text	00000098 strlen
0002521c g     F .text	00000160 open
000236b8 g     F .text	00000030 alt_putchar
00024f94 g     F .text	00000020 alt_icache_flush_all
00028110 g     O .rwdata	00000004 alt_priority_mask
00029cc4 g     O .bss	00000064 filter_coeff_fixed
00029c30 g     O .bss	00000004 acc_dev
00022f10 g     F .text	00000130 fcntl
00028118 g     O .rwdata	00000008 alt_alarm_list
00024e3c g     F .text	00000064 _do_ctors
00022dcc g     F .text	000000dc close
00029c90 g     O .bss	00000019 word
00023228 g     F .text	00000084 alt_load
000218e4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408a14 	ori	at,at,552
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c80 	call	201c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001226 	beq	r2,zero,20184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000f4 	movhi	r2,3
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10e79f17 	ldw	r3,-24964(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000f4 	movhi	r2,3
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10a7a017 	ldw	r2,-24960(r2)
   20164:	e17ffd17 	ldw	r5,-12(fp)
   20168:	1009883a 	mov	r4,r2
   2016c:	183ee83a 	callr	r3
#endif
        break;
   20170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20174:	0005313a 	rdctl	r2,ipending
   20178:	e0bffb15 	stw	r2,-20(fp)
  return active;
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	00000706 	br	201a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
   20184:	e0bffe17 	ldw	r2,-8(fp)
   20188:	1085883a 	add	r2,r2,r2
   2018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	10800044 	addi	r2,r2,1
   20198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   2019c:	003fe306 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   201a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a4:	e0bfff17 	ldw	r2,-4(fp)
   201a8:	103fdd1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201ac:	0001883a 	nop
}
   201b0:	0001883a 	nop
   201b4:	e037883a 	mov	sp,fp
   201b8:	dfc00117 	ldw	ra,4(sp)
   201bc:	df000017 	ldw	fp,0(sp)
   201c0:	dec00204 	addi	sp,sp,8
   201c4:	f800283a 	ret

000201c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c8:	defffb04 	addi	sp,sp,-20
   201cc:	dfc00415 	stw	ra,16(sp)
   201d0:	df000315 	stw	fp,12(sp)
   201d4:	df000304 	addi	fp,sp,12
   201d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201dc:	00bfffc4 	movi	r2,-1
   201e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e8:	d0a6e317 	ldw	r2,-25716(gp)
   201ec:	10000726 	beq	r2,zero,2020c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f0:	d0a6e317 	ldw	r2,-25716(gp)
   201f4:	e0ffff17 	ldw	r3,-4(fp)
   201f8:	e1bffe17 	ldw	r6,-8(fp)
   201fc:	e17ffd17 	ldw	r5,-12(fp)
   20200:	1809883a 	mov	r4,r3
   20204:	103ee83a 	callr	r2
   20208:	00000206 	br	20214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2020c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20210:	0005883a 	mov	r2,zero
}
   20214:	e037883a 	mov	sp,fp
   20218:	dfc00117 	ldw	ra,4(sp)
   2021c:	df000017 	ldw	fp,0(sp)
   20220:	dec00204 	addi	sp,sp,8
   20224:	f800283a 	ret

Disassembly of section .text:

00020228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20228:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   2022c:	ded7e414 	ori	sp,sp,24464
    movhi gp, %hi(_gp)
   20230:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20234:	d6803a14 	ori	gp,gp,232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20238:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   2023c:	10a70714 	ori	r2,r2,39964

    movhi r3, %hi(__bss_end)
   20240:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20244:	18e7df14 	ori	r3,r3,40828

    beq r2, r3, 1f
   20248:	10c00326 	beq	r2,r3,20258 <_start+0x30>

0:
    stw zero, (r2)
   2024c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20254:	10fffd36 	bltu	r2,r3,2024c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20258:	00232280 	call	23228 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   2025c:	00233c80 	call	233c8 <alt_main>

00020260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20260:	003fff06 	br	20260 <alt_after_alt_main>

00020264 <write_leds>:
#include "altera_avalon_pio_regs.h"

#ifndef UTILS_H_
#define UTILS_H_

void write_leds(int leds){
   20264:	defffe04 	addi	sp,sp,-8
   20268:	df000115 	stw	fp,4(sp)
   2026c:	df000104 	addi	fp,sp,4
   20270:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, leds);
   20274:	e0ffff17 	ldw	r3,-4(fp)
   20278:	00800134 	movhi	r2,4
   2027c:	10c43035 	stwio	r3,4288(r2)
}
   20280:	0001883a 	nop
   20284:	e037883a 	mov	sp,fp
   20288:	df000017 	ldw	fp,0(sp)
   2028c:	dec00104 	addi	sp,sp,4
   20290:	f800283a 	ret

00020294 <write_hex>:

void write_hex(unsigned char hex[6]) {
   20294:	defffe04 	addi	sp,sp,-8
   20298:	df000115 	stw	fp,4(sp)
   2029c:	df000104 	addi	fp,sp,4
   202a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, hex[5]);
   202a4:	e0bfff17 	ldw	r2,-4(fp)
   202a8:	10800144 	addi	r2,r2,5
   202ac:	10800003 	ldbu	r2,0(r2)
   202b0:	10c03fcc 	andi	r3,r2,255
   202b4:	00800134 	movhi	r2,4
   202b8:	10c42835 	stwio	r3,4256(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, hex[4]);
   202bc:	e0bfff17 	ldw	r2,-4(fp)
   202c0:	10800104 	addi	r2,r2,4
   202c4:	10800003 	ldbu	r2,0(r2)
   202c8:	10c03fcc 	andi	r3,r2,255
   202cc:	00800134 	movhi	r2,4
   202d0:	10c42435 	stwio	r3,4240(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, hex[3]);
   202d4:	e0bfff17 	ldw	r2,-4(fp)
   202d8:	108000c4 	addi	r2,r2,3
   202dc:	10800003 	ldbu	r2,0(r2)
   202e0:	10c03fcc 	andi	r3,r2,255
   202e4:	00800134 	movhi	r2,4
   202e8:	10c42035 	stwio	r3,4224(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, hex[2]);
   202ec:	e0bfff17 	ldw	r2,-4(fp)
   202f0:	10800084 	addi	r2,r2,2
   202f4:	10800003 	ldbu	r2,0(r2)
   202f8:	10c03fcc 	andi	r3,r2,255
   202fc:	00800134 	movhi	r2,4
   20300:	10c41c35 	stwio	r3,4208(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, hex[1]);
   20304:	e0bfff17 	ldw	r2,-4(fp)
   20308:	10800044 	addi	r2,r2,1
   2030c:	10800003 	ldbu	r2,0(r2)
   20310:	10c03fcc 	andi	r3,r2,255
   20314:	00800134 	movhi	r2,4
   20318:	10c41835 	stwio	r3,4192(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, hex[0]);
   2031c:	e0bfff17 	ldw	r2,-4(fp)
   20320:	10800003 	ldbu	r2,0(r2)
   20324:	10c03fcc 	andi	r3,r2,255
   20328:	00800134 	movhi	r2,4
   2032c:	10c41435 	stwio	r3,4176(r2)
}
   20330:	0001883a 	nop
   20334:	e037883a 	mov	sp,fp
   20338:	df000017 	ldw	fp,0(sp)
   2033c:	dec00104 	addi	sp,sp,4
   20340:	f800283a 	ret

00020344 <read_switches>:

int read_switches() {
   20344:	deffff04 	addi	sp,sp,-4
   20348:	df000015 	stw	fp,0(sp)
   2034c:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   20350:	00800134 	movhi	r2,4
   20354:	10842c37 	ldwio	r2,4272(r2)
}
   20358:	e037883a 	mov	sp,fp
   2035c:	df000017 	ldw	fp,0(sp)
   20360:	dec00104 	addi	sp,sp,4
   20364:	f800283a 	ret

00020368 <read_buttons>:

int read_buttons() {
   20368:	deffff04 	addi	sp,sp,-4
   2036c:	df000015 	stw	fp,0(sp)
   20370:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   20374:	00800134 	movhi	r2,4
   20378:	10841037 	ldwio	r2,4160(r2)
}
   2037c:	e037883a 	mov	sp,fp
   20380:	df000017 	ldw	fp,0(sp)
   20384:	dec00104 	addi	sp,sp,4
   20388:	f800283a 	ret

0002038c <read_accerometer>:

void read_accerometer(alt_up_accelerometer_spi_dev *acc_dev, alt_32 coords[3]) {
   2038c:	defffc04 	addi	sp,sp,-16
   20390:	dfc00315 	stw	ra,12(sp)
   20394:	df000215 	stw	fp,8(sp)
   20398:	df000204 	addi	fp,sp,8
   2039c:	e13fff15 	stw	r4,-4(fp)
   203a0:	e17ffe15 	stw	r5,-8(fp)
	alt_up_accelerometer_spi_read_x_axis(acc_dev, &coords[0]);
   203a4:	e17ffe17 	ldw	r5,-8(fp)
   203a8:	e13fff17 	ldw	r4,-4(fp)
   203ac:	002495c0 	call	2495c <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, &coords[1]);
   203b0:	e0bffe17 	ldw	r2,-8(fp)
   203b4:	10800104 	addi	r2,r2,4
   203b8:	100b883a 	mov	r5,r2
   203bc:	e13fff17 	ldw	r4,-4(fp)
   203c0:	0024a300 	call	24a30 <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, &coords[2]);
   203c4:	e0bffe17 	ldw	r2,-8(fp)
   203c8:	10800204 	addi	r2,r2,8
   203cc:	100b883a 	mov	r5,r2
   203d0:	e13fff17 	ldw	r4,-4(fp)
   203d4:	0024b040 	call	24b04 <alt_up_accelerometer_spi_read_z_axis>
}
   203d8:	0001883a 	nop
   203dc:	e037883a 	mov	sp,fp
   203e0:	dfc00117 	ldw	ra,4(sp)
   203e4:	df000017 	ldw	fp,0(sp)
   203e8:	dec00204 	addi	sp,sp,8
   203ec:	f800283a 	ret

000203f0 <decode_7seg>:
/*  x     y     z     */
    0x64, 0x6E, 0x5B
};

unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
   203f0:	defffe04 	addi	sp,sp,-8
   203f4:	df000115 	stw	fp,4(sp)
   203f8:	df000104 	addi	fp,sp,4
   203fc:	2005883a 	mov	r2,r4
   20400:	e0bfff05 	stb	r2,-4(fp)
	if (chr == ' ') return 0xFF;
   20404:	e0bfff03 	ldbu	r2,-4(fp)
   20408:	10800818 	cmpnei	r2,r2,32
   2040c:	1000021e 	bne	r2,zero,20418 <decode_7seg+0x28>
   20410:	00bfffc4 	movi	r2,-1
   20414:	00000b06 	br	20444 <decode_7seg+0x54>
    if (chr > (unsigned char)'z')
   20418:	e0bfff03 	ldbu	r2,-4(fp)
   2041c:	10801ef0 	cmpltui	r2,r2,123
   20420:	1000021e 	bne	r2,zero,2042c <decode_7seg+0x3c>
        return 0xFF;
   20424:	00bfffc4 	movi	r2,-1
   20428:	00000606 	br	20444 <decode_7seg+0x54>
//    return ~seven_seg_digits_decode_abcdefg[chr - '0'];
	return ~seven_seg_digits_decode_gfedcba[chr - '0'];
   2042c:	e0bfff03 	ldbu	r2,-4(fp)
   20430:	10fff404 	addi	r3,r2,-48
   20434:	008000b4 	movhi	r2,2
   20438:	1885883a 	add	r2,r3,r2
   2043c:	10990c03 	ldbu	r2,25648(r2)
   20440:	0084303a 	nor	r2,zero,r2
}
   20444:	e037883a 	mov	sp,fp
   20448:	df000017 	ldw	fp,0(sp)
   2044c:	dec00104 	addi	sp,sp,4
   20450:	f800283a 	ret

00020454 <setBuffer>:

void setBuffer(unsigned char* word, unsigned char buffer[25]){
   20454:	defffc04 	addi	sp,sp,-16
   20458:	dfc00315 	stw	ra,12(sp)
   2045c:	df000215 	stw	fp,8(sp)
   20460:	df000204 	addi	fp,sp,8
   20464:	e13fff15 	stw	r4,-4(fp)
   20468:	e17ffe15 	stw	r5,-8(fp)
	memset(buffer, 255, 25);
   2046c:	01800644 	movi	r6,25
   20470:	01403fc4 	movi	r5,255
   20474:	e13ffe17 	ldw	r4,-8(fp)
   20478:	002274c0 	call	2274c <memset>
	memcpy(buffer, word, strlen(word));
   2047c:	e13fff17 	ldw	r4,-4(fp)
   20480:	00229d40 	call	229d4 <strlen>
   20484:	100d883a 	mov	r6,r2
   20488:	e17fff17 	ldw	r5,-4(fp)
   2048c:	e13ffe17 	ldw	r4,-8(fp)
   20490:	002264c0 	call	2264c <memcpy>
}
   20494:	0001883a 	nop
   20498:	e037883a 	mov	sp,fp
   2049c:	dfc00117 	ldw	ra,4(sp)
   204a0:	df000017 	ldw	fp,0(sp)
   204a4:	dec00204 	addi	sp,sp,8
   204a8:	f800283a 	ret

000204ac <shiftBuffer>:

void shiftBuffer(unsigned char buffer[25]){
   204ac:	defffc04 	addi	sp,sp,-16
   204b0:	df000315 	stw	fp,12(sp)
   204b4:	df000304 	addi	fp,sp,12
   204b8:	e13ffd15 	stw	r4,-12(fp)
	int tmp = buffer[0];
   204bc:	e0bffd17 	ldw	r2,-12(fp)
   204c0:	10800003 	ldbu	r2,0(r2)
   204c4:	10803fcc 	andi	r2,r2,255
   204c8:	e0bffe15 	stw	r2,-8(fp)
	for(int i = 1; i < 25; i++){
   204cc:	00800044 	movi	r2,1
   204d0:	e0bfff15 	stw	r2,-4(fp)
   204d4:	00000c06 	br	20508 <shiftBuffer+0x5c>
		buffer[i-1] = buffer[i];
   204d8:	e0bfff17 	ldw	r2,-4(fp)
   204dc:	e0fffd17 	ldw	r3,-12(fp)
   204e0:	1887883a 	add	r3,r3,r2
   204e4:	e0bfff17 	ldw	r2,-4(fp)
   204e8:	10bfffc4 	addi	r2,r2,-1
   204ec:	e13ffd17 	ldw	r4,-12(fp)
   204f0:	2085883a 	add	r2,r4,r2
   204f4:	18c00003 	ldbu	r3,0(r3)
   204f8:	10c00005 	stb	r3,0(r2)
	for(int i = 1; i < 25; i++){
   204fc:	e0bfff17 	ldw	r2,-4(fp)
   20500:	10800044 	addi	r2,r2,1
   20504:	e0bfff15 	stw	r2,-4(fp)
   20508:	e0bfff17 	ldw	r2,-4(fp)
   2050c:	10800650 	cmplti	r2,r2,25
   20510:	103ff11e 	bne	r2,zero,204d8 <shiftBuffer+0x2c>
	}
	buffer[24] = tmp;
   20514:	e0bffd17 	ldw	r2,-12(fp)
   20518:	10800604 	addi	r2,r2,24
   2051c:	e0fffe17 	ldw	r3,-8(fp)
   20520:	10c00005 	stb	r3,0(r2)
}
   20524:	0001883a 	nop
   20528:	e037883a 	mov	sp,fp
   2052c:	df000017 	ldw	fp,0(sp)
   20530:	dec00104 	addi	sp,sp,4
   20534:	f800283a 	ret

00020538 <getWindow>:

void getWindow(unsigned char window[6], unsigned char buffer[25]){
   20538:	defffc04 	addi	sp,sp,-16
   2053c:	dfc00315 	stw	ra,12(sp)
   20540:	df000215 	stw	fp,8(sp)
   20544:	df000204 	addi	fp,sp,8
   20548:	e13fff15 	stw	r4,-4(fp)
   2054c:	e17ffe15 	stw	r5,-8(fp)
	memcpy(window, buffer, 6);
   20550:	01800184 	movi	r6,6
   20554:	e17ffe17 	ldw	r5,-8(fp)
   20558:	e13fff17 	ldw	r4,-4(fp)
   2055c:	002264c0 	call	2264c <memcpy>
}
   20560:	0001883a 	nop
   20564:	e037883a 	mov	sp,fp
   20568:	dfc00117 	ldw	ra,4(sp)
   2056c:	df000017 	ldw	fp,0(sp)
   20570:	dec00204 	addi	sp,sp,8
   20574:	f800283a 	ret

00020578 <float_to_fixed23>:

alt_32 fir_mem_fixed_x[FIR_FILTER_COEFF_NUM] = {0};
alt_32 fir_mem_fixed_y[FIR_FILTER_COEFF_NUM] = {0};
alt_32 fir_mem_fixed_z[FIR_FILTER_COEFF_NUM] = {0};

alt_32 float_to_fixed23(float f) {
   20578:	defff804 	addi	sp,sp,-32
   2057c:	df000715 	stw	fp,28(sp)
   20580:	df000704 	addi	fp,sp,28
   20584:	e13ff915 	stw	r4,-28(fp)
	alt_u32 f_bits = *(alt_u32*)(&f);
   20588:	e0bff904 	addi	r2,fp,-28
   2058c:	10800017 	ldw	r2,0(r2)
   20590:	e0bfff15 	stw	r2,-4(fp)
	alt_u32 sign = f_bits & (1 << 31); // gets sign bit
   20594:	e0bfff17 	ldw	r2,-4(fp)
   20598:	10a0002c 	andhi	r2,r2,32768
   2059c:	e0bffe15 	stw	r2,-8(fp)
	alt_32 exp = ((f_bits >> 23) & (0xFF)) - 127; // exponent
   205a0:	e0bfff17 	ldw	r2,-4(fp)
   205a4:	1004d5fa 	srli	r2,r2,23
   205a8:	10803fcc 	andi	r2,r2,255
   205ac:	10bfe044 	addi	r2,r2,-127
   205b0:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 fraction = f_bits & (0x007FFFFF); // fraction bit mask
   205b4:	e0ffff17 	ldw	r3,-4(fp)
   205b8:	00802034 	movhi	r2,128
   205bc:	10bfffc4 	addi	r2,r2,-1
   205c0:	1884703a 	and	r2,r3,r2
   205c4:	e0bffc15 	stw	r2,-16(fp)
	fraction = fraction | (1 << 23); // put back implicit 1 in float
   205c8:	e0bffc17 	ldw	r2,-16(fp)
   205cc:	10802034 	orhi	r2,r2,128
   205d0:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 fixed = (exp < 0) ? fraction >> -exp : fraction << exp;
   205d4:	e0bffd17 	ldw	r2,-12(fp)
   205d8:	1000050e 	bge	r2,zero,205f0 <float_to_fixed23+0x78>
   205dc:	e0bffd17 	ldw	r2,-12(fp)
   205e0:	0085c83a 	sub	r2,zero,r2
   205e4:	e0fffc17 	ldw	r3,-16(fp)
   205e8:	1884d83a 	srl	r2,r3,r2
   205ec:	00000306 	br	205fc <float_to_fixed23+0x84>
   205f0:	e0fffc17 	ldw	r3,-16(fp)
   205f4:	e0bffd17 	ldw	r2,-12(fp)
   205f8:	1884983a 	sll	r2,r3,r2
   205fc:	e0bffb15 	stw	r2,-20(fp)
	alt_32 signed_fixed = sign ? -fixed : fixed;
   20600:	e0bffe17 	ldw	r2,-8(fp)
   20604:	10000326 	beq	r2,zero,20614 <float_to_fixed23+0x9c>
   20608:	e0bffb17 	ldw	r2,-20(fp)
   2060c:	0085c83a 	sub	r2,zero,r2
   20610:	00000106 	br	20618 <float_to_fixed23+0xa0>
   20614:	e0bffb17 	ldw	r2,-20(fp)
   20618:	e0bffa15 	stw	r2,-24(fp)
	return signed_fixed;
   2061c:	e0bffa17 	ldw	r2,-24(fp)
}
   20620:	e037883a 	mov	sp,fp
   20624:	df000017 	ldw	fp,0(sp)
   20628:	dec00104 	addi	sp,sp,4
   2062c:	f800283a 	ret

00020630 <fixed23_to_float>:

float fixed23_to_float(alt_32 fixed){
   20630:	defffd04 	addi	sp,sp,-12
   20634:	dfc00215 	stw	ra,8(sp)
   20638:	df000115 	stw	fp,4(sp)
   2063c:	df000104 	addi	fp,sp,4
   20640:	e13fff15 	stw	r4,-4(fp)
	return (float)fixed / (float)(1<<23);
   20644:	e13fff17 	ldw	r4,-4(fp)
   20648:	00210e40 	call	210e4 <__floatsisf>
   2064c:	1007883a 	mov	r3,r2
   20650:	0152c034 	movhi	r5,19200
   20654:	1809883a 	mov	r4,r3
   20658:	0020cec0 	call	20cec <__divsf3>
   2065c:	1007883a 	mov	r3,r2
   20660:	1809883a 	mov	r4,r3
   20664:	2005883a 	mov	r2,r4
}
   20668:	e037883a 	mov	sp,fp
   2066c:	dfc00117 	ldw	ra,4(sp)
   20670:	df000017 	ldw	fp,0(sp)
   20674:	dec00204 	addi	sp,sp,8
   20678:	f800283a 	ret

0002067c <fir_filter_fixed>:

void fir_filter_fixed(alt_32 memory[FIR_FILTER_COEFF_NUM], alt_32 data, alt_32 *average){
   2067c:	defff804 	addi	sp,sp,-32
   20680:	dfc00715 	stw	ra,28(sp)
   20684:	df000615 	stw	fp,24(sp)
   20688:	df000604 	addi	fp,sp,24
   2068c:	e13ffc15 	stw	r4,-16(fp)
   20690:	e17ffb15 	stw	r5,-20(fp)
   20694:	e1bffa15 	stw	r6,-24(fp)
	memory[0] = data;
   20698:	e0bffc17 	ldw	r2,-16(fp)
   2069c:	e0fffb17 	ldw	r3,-20(fp)
   206a0:	10c00015 	stw	r3,0(r2)

	alt_32 acc = 0;
   206a4:	e03fff15 	stw	zero,-4(fp)
	for(int i = 0; i < FIR_FILTER_COEFF_NUM; i++){
   206a8:	e03ffe15 	stw	zero,-8(fp)
   206ac:	00001306 	br	206fc <fir_filter_fixed+0x80>
		acc += filter_coeff_fixed[i] * memory[i];
   206b0:	e0bffe17 	ldw	r2,-8(fp)
   206b4:	100690ba 	slli	r3,r2,2
   206b8:	008000f4 	movhi	r2,3
   206bc:	1885883a 	add	r2,r3,r2
   206c0:	11273117 	ldw	r4,-25404(r2)
   206c4:	e0bffe17 	ldw	r2,-8(fp)
   206c8:	100490ba 	slli	r2,r2,2
   206cc:	e0fffc17 	ldw	r3,-16(fp)
   206d0:	1885883a 	add	r2,r3,r2
   206d4:	10800017 	ldw	r2,0(r2)
   206d8:	100b883a 	mov	r5,r2
   206dc:	0020cc40 	call	20cc4 <__mulsi3>
   206e0:	1007883a 	mov	r3,r2
   206e4:	e0bfff17 	ldw	r2,-4(fp)
   206e8:	1885883a 	add	r2,r3,r2
   206ec:	e0bfff15 	stw	r2,-4(fp)
	for(int i = 0; i < FIR_FILTER_COEFF_NUM; i++){
   206f0:	e0bffe17 	ldw	r2,-8(fp)
   206f4:	10800044 	addi	r2,r2,1
   206f8:	e0bffe15 	stw	r2,-8(fp)
   206fc:	e0bffe17 	ldw	r2,-8(fp)
   20700:	10800650 	cmplti	r2,r2,25
   20704:	103fea1e 	bne	r2,zero,206b0 <fir_filter_fixed+0x34>
	}
	*average = acc;
   20708:	e0bffa17 	ldw	r2,-24(fp)
   2070c:	e0ffff17 	ldw	r3,-4(fp)
   20710:	10c00015 	stw	r3,0(r2)

	for(int i = 1; i < FIR_FILTER_COEFF_NUM; i++){
   20714:	00800044 	movi	r2,1
   20718:	e0bffd15 	stw	r2,-12(fp)
   2071c:	00001006 	br	20760 <fir_filter_fixed+0xe4>
		memory[i] = memory[i-1];
   20720:	e0fffd17 	ldw	r3,-12(fp)
   20724:	00900034 	movhi	r2,16384
   20728:	10bfffc4 	addi	r2,r2,-1
   2072c:	1885883a 	add	r2,r3,r2
   20730:	100490ba 	slli	r2,r2,2
   20734:	e0fffc17 	ldw	r3,-16(fp)
   20738:	1887883a 	add	r3,r3,r2
   2073c:	e0bffd17 	ldw	r2,-12(fp)
   20740:	100490ba 	slli	r2,r2,2
   20744:	e13ffc17 	ldw	r4,-16(fp)
   20748:	2085883a 	add	r2,r4,r2
   2074c:	18c00017 	ldw	r3,0(r3)
   20750:	10c00015 	stw	r3,0(r2)
	for(int i = 1; i < FIR_FILTER_COEFF_NUM; i++){
   20754:	e0bffd17 	ldw	r2,-12(fp)
   20758:	10800044 	addi	r2,r2,1
   2075c:	e0bffd15 	stw	r2,-12(fp)
   20760:	e0bffd17 	ldw	r2,-12(fp)
   20764:	10800650 	cmplti	r2,r2,25
   20768:	103fed1e 	bne	r2,zero,20720 <fir_filter_fixed+0xa4>
	}
}
   2076c:	0001883a 	nop
   20770:	0001883a 	nop
   20774:	e037883a 	mov	sp,fp
   20778:	dfc00117 	ldw	ra,4(sp)
   2077c:	df000017 	ldw	fp,0(sp)
   20780:	dec00204 	addi	sp,sp,8
   20784:	f800283a 	ret

00020788 <generate_fixed>:

void generate_fixed(){
   20788:	defffd04 	addi	sp,sp,-12
   2078c:	dfc00215 	stw	ra,8(sp)
   20790:	df000115 	stw	fp,4(sp)
   20794:	df000104 	addi	fp,sp,4
	for(int i = 0; i < FIR_FILTER_COEFF_NUM; i++){
   20798:	e03fff15 	stw	zero,-4(fp)
   2079c:	00001006 	br	207e0 <generate_fixed+0x58>
		filter_coeff_fixed[i] = float_to_fixed23(filter_coeff_float[i]);
   207a0:	e0bfff17 	ldw	r2,-4(fp)
   207a4:	100690ba 	slli	r3,r2,2
   207a8:	008000b4 	movhi	r2,2
   207ac:	1885883a 	add	r2,r3,r2
   207b0:	10998917 	ldw	r2,26148(r2)
   207b4:	1009883a 	mov	r4,r2
   207b8:	00205780 	call	20578 <float_to_fixed23>
   207bc:	1009883a 	mov	r4,r2
   207c0:	e0bfff17 	ldw	r2,-4(fp)
   207c4:	100690ba 	slli	r3,r2,2
   207c8:	008000f4 	movhi	r2,3
   207cc:	1885883a 	add	r2,r3,r2
   207d0:	11273115 	stw	r4,-25404(r2)
	for(int i = 0; i < FIR_FILTER_COEFF_NUM; i++){
   207d4:	e0bfff17 	ldw	r2,-4(fp)
   207d8:	10800044 	addi	r2,r2,1
   207dc:	e0bfff15 	stw	r2,-4(fp)
   207e0:	e0bfff17 	ldw	r2,-4(fp)
   207e4:	10800650 	cmplti	r2,r2,25
   207e8:	103fed1e 	bne	r2,zero,207a0 <generate_fixed+0x18>
	}
}
   207ec:	0001883a 	nop
   207f0:	0001883a 	nop
   207f4:	e037883a 	mov	sp,fp
   207f8:	dfc00117 	ldw	ra,4(sp)
   207fc:	df000017 	ldw	fp,0(sp)
   20800:	dec00204 	addi	sp,sp,8
   20804:	f800283a 	ret

00020808 <update_hex>:

void update_hex(){
   20808:	defffd04 	addi	sp,sp,-12
   2080c:	dfc00215 	stw	ra,8(sp)
   20810:	df000115 	stw	fp,4(sp)
   20814:	df000104 	addi	fp,sp,4
	if(delay == 0){
   20818:	d0a6d317 	ldw	r2,-25780(gp)
   2081c:	10001f1e 	bne	r2,zero,2089c <update_hex+0x94>
		getWindow(window, display_buff);
   20820:	014000f4 	movhi	r5,3
   20824:	29672a44 	addi	r5,r5,-25431
   20828:	d126d404 	addi	r4,gp,-25776
   2082c:	00205380 	call	20538 <getWindow>

		for(int j = 0; j < 6; j++){
   20830:	e03fff15 	stw	zero,-4(fp)
   20834:	00000f06 	br	20874 <update_hex+0x6c>
			window[j] = decode_7seg(window[j]);
   20838:	e0ffff17 	ldw	r3,-4(fp)
   2083c:	d0a6d404 	addi	r2,gp,-25776
   20840:	1885883a 	add	r2,r3,r2
   20844:	10800003 	ldbu	r2,0(r2)
   20848:	10803fcc 	andi	r2,r2,255
   2084c:	1009883a 	mov	r4,r2
   20850:	00203f00 	call	203f0 <decode_7seg>
   20854:	1009883a 	mov	r4,r2
   20858:	e0ffff17 	ldw	r3,-4(fp)
   2085c:	d0a6d404 	addi	r2,gp,-25776
   20860:	1885883a 	add	r2,r3,r2
   20864:	11000005 	stb	r4,0(r2)
		for(int j = 0; j < 6; j++){
   20868:	e0bfff17 	ldw	r2,-4(fp)
   2086c:	10800044 	addi	r2,r2,1
   20870:	e0bfff15 	stw	r2,-4(fp)
   20874:	e0bfff17 	ldw	r2,-4(fp)
   20878:	10800190 	cmplti	r2,r2,6
   2087c:	103fee1e 	bne	r2,zero,20838 <update_hex+0x30>
		}
		write_hex(window);
   20880:	d126d404 	addi	r4,gp,-25776
   20884:	00202940 	call	20294 <write_hex>
		shiftBuffer(display_buff);
   20888:	010000f4 	movhi	r4,3
   2088c:	21272a44 	addi	r4,r4,-25431
   20890:	00204ac0 	call	204ac <shiftBuffer>
		delay = HEX_DELAY;
   20894:	00800a04 	movi	r2,40
   20898:	d0a6d315 	stw	r2,-25780(gp)
	}
	delay--;
   2089c:	d0a6d317 	ldw	r2,-25780(gp)
   208a0:	10bfffc4 	addi	r2,r2,-1
   208a4:	d0a6d315 	stw	r2,-25780(gp)
}
   208a8:	0001883a 	nop
   208ac:	e037883a 	mov	sp,fp
   208b0:	dfc00117 	ldw	ra,4(sp)
   208b4:	df000017 	ldw	fp,0(sp)
   208b8:	dec00204 	addi	sp,sp,8
   208bc:	f800283a 	ret

000208c0 <update_leds>:

void update_leds(){
   208c0:	defffe04 	addi	sp,sp,-8
   208c4:	dfc00115 	stw	ra,4(sp)
   208c8:	df000015 	stw	fp,0(sp)
   208cc:	d839883a 	mov	fp,sp
	if(delay == 0){
   208d0:	d0a6d317 	ldw	r2,-25780(gp)
   208d4:	10000c1e 	bne	r2,zero,20908 <update_leds+0x48>
		leds |= (leds & 0x1) << 10;
   208d8:	d0a6d017 	ldw	r2,-25792(gp)
   208dc:	100492ba 	slli	r2,r2,10
   208e0:	10c1000c 	andi	r3,r2,1024
   208e4:	d0a6d017 	ldw	r2,-25792(gp)
   208e8:	1884b03a 	or	r2,r3,r2
   208ec:	d0a6d015 	stw	r2,-25792(gp)
		leds >>= 1;
   208f0:	d0a6d017 	ldw	r2,-25792(gp)
   208f4:	1004d07a 	srli	r2,r2,1
   208f8:	d0a6d015 	stw	r2,-25792(gp)
		write_leds(leds);
   208fc:	d0a6d017 	ldw	r2,-25792(gp)
   20900:	1009883a 	mov	r4,r2
   20904:	00202640 	call	20264 <write_leds>
	}
}
   20908:	0001883a 	nop
   2090c:	e037883a 	mov	sp,fp
   20910:	dfc00117 	ldw	ra,4(sp)
   20914:	df000017 	ldw	fp,0(sp)
   20918:	dec00204 	addi	sp,sp,8
   2091c:	f800283a 	ret

00020920 <get_accler_isr>:

void get_accler_isr() {
   20920:	defffe04 	addi	sp,sp,-8
   20924:	dfc00115 	stw	ra,4(sp)
   20928:	df000015 	stw	fp,0(sp)
   2092c:	d839883a 	mov	fp,sp
	// reset timer
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER0_BASE, 0);
   20930:	0007883a 	mov	r3,zero
   20934:	00800134 	movhi	r2,4
   20938:	10c40835 	stwio	r3,4128(r2)

	read_accerometer(acc_dev, coords);
   2093c:	d0a6d217 	ldw	r2,-25784(gp)
   20940:	014000f4 	movhi	r5,3
   20944:	29671e04 	addi	r5,r5,-25480
   20948:	1009883a 	mov	r4,r2
   2094c:	002038c0 	call	2038c <read_accerometer>
	coord_data_ready = 1;
   20950:	00800044 	movi	r2,1
   20954:	d0a6d115 	stw	r2,-25788(gp)
}
   20958:	0001883a 	nop
   2095c:	e037883a 	mov	sp,fp
   20960:	dfc00117 	ldw	ra,4(sp)
   20964:	df000017 	ldw	fp,0(sp)
   20968:	dec00204 	addi	sp,sp,8
   2096c:	f800283a 	ret

00020970 <timer_init>:



void timer_init(void *isr) {
   20970:	defffd04 	addi	sp,sp,-12
   20974:	dfc00215 	stw	ra,8(sp)
   20978:	df000115 	stw	fp,4(sp)
   2097c:	df000104 	addi	fp,sp,4
   20980:	e13fff15 	stw	r4,-4(fp)
	// timer0: 20000 ticks per sec, T = 50us.

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER0_BASE, 0x0003);
   20984:	00c000c4 	movi	r3,3
   20988:	00800134 	movhi	r2,4
   2098c:	10c40935 	stwio	r3,4132(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER0_BASE, 0);
   20990:	0007883a 	mov	r3,zero
   20994:	00800134 	movhi	r2,4
   20998:	10c40835 	stwio	r3,4128(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER0_BASE, 0xC4F0); // ~1000Hz Sampling
   2099c:	00f13c14 	movui	r3,50416
   209a0:	00800134 	movhi	r2,4
   209a4:	10c40a35 	stwio	r3,4136(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER0_BASE, 0x0000);
   209a8:	0007883a 	mov	r3,zero
   209ac:	00800134 	movhi	r2,4
   209b0:	10c40b35 	stwio	r3,4140(r2)
    alt_irq_register(TIMER0_IRQ, 0, isr);
   209b4:	e0bfff17 	ldw	r2,-4(fp)
   209b8:	100d883a 	mov	r6,r2
   209bc:	000b883a 	mov	r5,zero
   209c0:	01000084 	movi	r4,2
   209c4:	00230400 	call	23040 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER0_BASE, 0x0007);
   209c8:	00c001c4 	movi	r3,7
   209cc:	00800134 	movhi	r2,4
   209d0:	10c40935 	stwio	r3,4132(r2)

}
   209d4:	0001883a 	nop
   209d8:	e037883a 	mov	sp,fp
   209dc:	dfc00117 	ldw	ra,4(sp)
   209e0:	df000017 	ldw	fp,0(sp)
   209e4:	dec00204 	addi	sp,sp,8
   209e8:	f800283a 	ret

000209ec <main>:



int main() {
   209ec:	defdb804 	addi	sp,sp,-2336
   209f0:	dfc24715 	stw	ra,2332(sp)
   209f4:	df024615 	stw	fp,2328(sp)
   209f8:	df024604 	addi	fp,sp,2328

	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
   209fc:	01900004 	movi	r6,16384
   20a00:	01400104 	movi	r5,4
   20a04:	0009883a 	mov	r4,zero
   20a08:	0022f100 	call	22f10 <fcntl>

	// make fixed point filter coeff.
	generate_fixed();
   20a0c:	00207880 	call	20788 <generate_fixed>

	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   20a10:	010000b4 	movhi	r4,2
   20a14:	21191f04 	addi	r4,r4,25724
   20a18:	002480c0 	call	2480c <alt_up_accelerometer_spi_open_dev>
   20a1c:	d0a6d215 	stw	r2,-25784(gp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   20a20:	d0a6d217 	ldw	r2,-25784(gp)
   20a24:	1000051e 	bne	r2,zero,20a3c <main+0x50>
    	alt_printf("[ERROR] ACCELEROMETER MISSING\n");
   20a28:	010000b4 	movhi	r4,2
   20a2c:	21192504 	addi	r4,r4,25748
   20a30:	002348c0 	call	2348c <alt_printf>
    	return 1;
   20a34:	00800044 	movi	r2,1
   20a38:	00009d06 	br	20cb0 <main+0x2c4>
    }
    timer_init(get_accler_isr);
   20a3c:	010000b4 	movhi	r4,2
   20a40:	21024804 	addi	r4,r4,2336
   20a44:	00209700 	call	20970 <timer_init>

    if(alt_timestamp_start() < 0) {
   20a48:	00246f40 	call	246f4 <alt_timestamp_start>
   20a4c:	1000030e 	bge	r2,zero,20a5c <main+0x70>
    	alt_printf("[ERROR] NO TIMESTAMP TIMER\n");
   20a50:	010000b4 	movhi	r4,2
   20a54:	21192d04 	addi	r4,r4,25780
   20a58:	002348c0 	call	2348c <alt_printf>
    }

	char message[1024];

	char messagebuff[1024];
	int messagebuffind = 0;
   20a5c:	e03fff15 	stw	zero,-4(fp)

	int message_is_ready = 0;
   20a60:	e03ffe15 	stw	zero,-8(fp)
	char stdin_buff[256];

	int size;
	while(1) {
		// clear
		memset(stdin_buff, 0, 256);
   20a64:	e0bdbc04 	addi	r2,fp,-2320
   20a68:	01804004 	movi	r6,256
   20a6c:	000b883a 	mov	r5,zero
   20a70:	1009883a 	mov	r4,r2
   20a74:	002274c0 	call	2274c <memset>
		size = read(STDIN_FILENO, stdin_buff, 256);
   20a78:	e0bdbc04 	addi	r2,fp,-2320
   20a7c:	01804004 	movi	r6,256
   20a80:	100b883a 	mov	r5,r2
   20a84:	0009883a 	mov	r4,zero
   20a88:	00237240 	call	23724 <read>
   20a8c:	e0bffc15 	stw	r2,-16(fp)

		if(size != -1){	
   20a90:	e0bffc17 	ldw	r2,-16(fp)
   20a94:	10bfffe0 	cmpeqi	r2,r2,-1
   20a98:	10002c1e 	bne	r2,zero,20b4c <main+0x160>
			for(int i = 0; i < size; i++){
   20a9c:	e03ffd15 	stw	zero,-12(fp)
   20aa0:	00002706 	br	20b40 <main+0x154>
				// non-terminating character
				if(stdin_buff[i] != END_RECIEVE){
   20aa4:	e0bffd17 	ldw	r2,-12(fp)
   20aa8:	e085883a 	add	r2,fp,r2
   20aac:	10bdbc03 	ldbu	r2,-2320(r2)
   20ab0:	10803fcc 	andi	r2,r2,255
   20ab4:	1080201c 	xori	r2,r2,128
   20ab8:	10bfe004 	addi	r2,r2,-128
   20abc:	10800920 	cmpeqi	r2,r2,36
   20ac0:	10000a1e 	bne	r2,zero,20aec <main+0x100>
					messagebuff[messagebuffind] = stdin_buff[i];
   20ac4:	e0bffd17 	ldw	r2,-12(fp)
   20ac8:	e085883a 	add	r2,fp,r2
   20acc:	10fdbc03 	ldbu	r3,-2320(r2)
   20ad0:	e0bfff17 	ldw	r2,-4(fp)
   20ad4:	e085883a 	add	r2,fp,r2
   20ad8:	10fdfc05 	stb	r3,-2064(r2)
					messagebuffind++;
   20adc:	e0bfff17 	ldw	r2,-4(fp)
   20ae0:	10800044 	addi	r2,r2,1
   20ae4:	e0bfff15 	stw	r2,-4(fp)
   20ae8:	00001206 	br	20b34 <main+0x148>
				}
				// character is terminating
				else {
					memcpy(message, messagebuff, messagebuffind);
   20aec:	e13fff17 	ldw	r4,-4(fp)
   20af0:	e0fdfc04 	addi	r3,fp,-2064
   20af4:	e0befc04 	addi	r2,fp,-1040
   20af8:	200d883a 	mov	r6,r4
   20afc:	180b883a 	mov	r5,r3
   20b00:	1009883a 	mov	r4,r2
   20b04:	002264c0 	call	2264c <memcpy>
					message[messagebuffind] = '\0';
   20b08:	e0bfff17 	ldw	r2,-4(fp)
   20b0c:	e085883a 	add	r2,fp,r2
   20b10:	103efc05 	stb	zero,-1040(r2)
					message_is_ready = 1;
   20b14:	00800044 	movi	r2,1
   20b18:	e0bffe15 	stw	r2,-8(fp)

					// reset message buffer
					messagebuffind = 0;
   20b1c:	e03fff15 	stw	zero,-4(fp)
					memset(messagebuff, 0, 256);
   20b20:	e0bdfc04 	addi	r2,fp,-2064
   20b24:	01804004 	movi	r6,256
   20b28:	000b883a 	mov	r5,zero
   20b2c:	1009883a 	mov	r4,r2
   20b30:	002274c0 	call	2274c <memset>
			for(int i = 0; i < size; i++){
   20b34:	e0bffd17 	ldw	r2,-12(fp)
   20b38:	10800044 	addi	r2,r2,1
   20b3c:	e0bffd15 	stw	r2,-12(fp)
   20b40:	e0fffd17 	ldw	r3,-12(fp)
   20b44:	e0bffc17 	ldw	r2,-16(fp)
   20b48:	18bfd616 	blt	r3,r2,20aa4 <main+0xb8>
				}
			}
		}
		
		// [DEBUG] print message
		if(message_is_ready){
   20b4c:	e0bffe17 	ldw	r2,-8(fp)
   20b50:	10001f26 	beq	r2,zero,20bd0 <main+0x1e4>
			if(message[0] == '1'){
   20b54:	e0befc03 	ldbu	r2,-1040(fp)
   20b58:	10803fcc 	andi	r2,r2,255
   20b5c:	1080201c 	xori	r2,r2,128
   20b60:	10bfe004 	addi	r2,r2,-128
   20b64:	10800c58 	cmpnei	r2,r2,49
   20b68:	1000031e 	bne	r2,zero,20b78 <main+0x18c>
				leds = 0b1111111111;
   20b6c:	0080ffc4 	movi	r2,1023
   20b70:	d0a6d015 	stw	r2,-25792(gp)
   20b74:	00001506 	br	20bcc <main+0x1e0>
			} else if(message[0] == '0') {
   20b78:	e0befc03 	ldbu	r2,-1040(fp)
   20b7c:	10803fcc 	andi	r2,r2,255
   20b80:	1080201c 	xori	r2,r2,128
   20b84:	10bfe004 	addi	r2,r2,-128
   20b88:	10800c18 	cmpnei	r2,r2,48
   20b8c:	1000021e 	bne	r2,zero,20b98 <main+0x1ac>
				leds = 0b0000000000;
   20b90:	d026d015 	stw	zero,-25792(gp)
   20b94:	00000d06 	br	20bcc <main+0x1e0>
			} else {
				memcpy(word, message, 25);
   20b98:	008000f4 	movhi	r2,3
   20b9c:	10a72404 	addi	r2,r2,-25456
   20ba0:	e0fefc04 	addi	r3,fp,-1040
   20ba4:	01000644 	movi	r4,25
   20ba8:	200d883a 	mov	r6,r4
   20bac:	180b883a 	mov	r5,r3
   20bb0:	1009883a 	mov	r4,r2
   20bb4:	002264c0 	call	2264c <memcpy>
				setBuffer(word, display_buff);
   20bb8:	014000f4 	movhi	r5,3
   20bbc:	29672a44 	addi	r5,r5,-25431
   20bc0:	010000f4 	movhi	r4,3
   20bc4:	21272404 	addi	r4,r4,-25456
   20bc8:	00204540 	call	20454 <setBuffer>
			}
			message_is_ready = 0;
   20bcc:	e03ffe15 	stw	zero,-8(fp)
		}

		// only output if there is new sample
		if(coord_data_ready){
   20bd0:	d0a6d117 	ldw	r2,-25788(gp)
   20bd4:	103fa326 	beq	r2,zero,20a64 <main+0x78>

			// accelerometer input
			fir_filter_fixed(fir_mem_fixed_x, coords[0], filtered_coords);
   20bd8:	008000f4 	movhi	r2,3
   20bdc:	10a71e17 	ldw	r2,-25480(r2)
   20be0:	018000f4 	movhi	r6,3
   20be4:	31a72104 	addi	r6,r6,-25468
   20be8:	100b883a 	mov	r5,r2
   20bec:	010000f4 	movhi	r4,3
   20bf0:	21274a04 	addi	r4,r4,-25304
   20bf4:	002067c0 	call	2067c <fir_filter_fixed>
			fir_filter_fixed(fir_mem_fixed_y, coords[1], filtered_coords+1);
   20bf8:	008000f4 	movhi	r2,3
   20bfc:	10e71f17 	ldw	r3,-25476(r2)
   20c00:	008000f4 	movhi	r2,3
   20c04:	10a72204 	addi	r2,r2,-25464
   20c08:	100d883a 	mov	r6,r2
   20c0c:	180b883a 	mov	r5,r3
   20c10:	010000f4 	movhi	r4,3
   20c14:	21276304 	addi	r4,r4,-25204
   20c18:	002067c0 	call	2067c <fir_filter_fixed>
			fir_filter_fixed(fir_mem_fixed_z, coords[2], filtered_coords+2);
   20c1c:	008000f4 	movhi	r2,3
   20c20:	10e72017 	ldw	r3,-25472(r2)
   20c24:	008000f4 	movhi	r2,3
   20c28:	10a72304 	addi	r2,r2,-25460
   20c2c:	100d883a 	mov	r6,r2
   20c30:	180b883a 	mov	r5,r3
   20c34:	010000f4 	movhi	r4,3
   20c38:	21277c04 	addi	r4,r4,-25104
   20c3c:	002067c0 	call	2067c <fir_filter_fixed>

			// button & switch input
			buttons = read_buttons();
   20c40:	00203680 	call	20368 <read_buttons>
   20c44:	d0a6ce15 	stw	r2,-25800(gp)
			switches = read_switches();
   20c48:	00203440 	call	20344 <read_switches>
   20c4c:	d0a6cf15 	stw	r2,-25796(gp)

			alt_printf("%x,%x,%x,%x,%x\n",
   20c50:	008000f4 	movhi	r2,3
   20c54:	11272117 	ldw	r4,-25468(r2)
   20c58:	008000f4 	movhi	r2,3
   20c5c:	11672217 	ldw	r5,-25464(r2)
   20c60:	008000f4 	movhi	r2,3
   20c64:	11a72317 	ldw	r6,-25460(r2)
   20c68:	d0a6ce17 	ldw	r2,-25800(gp)
   20c6c:	d0e6cf17 	ldw	r3,-25796(gp)
   20c70:	d8c00115 	stw	r3,4(sp)
   20c74:	d8800015 	stw	r2,0(sp)
   20c78:	300f883a 	mov	r7,r6
   20c7c:	280d883a 	mov	r6,r5
   20c80:	200b883a 	mov	r5,r4
   20c84:	010000b4 	movhi	r4,2
   20c88:	21193404 	addi	r4,r4,25808
   20c8c:	002348c0 	call	2348c <alt_printf>
					filtered_coords[0], filtered_coords[1], filtered_coords[2],
						buttons, switches);
			fflush(stdout);
   20c90:	d0a00117 	ldw	r2,-32764(gp)
   20c94:	10800217 	ldw	r2,8(r2)
   20c98:	1009883a 	mov	r4,r2
   20c9c:	00214e40 	call	214e4 <fflush>

			update_hex();
   20ca0:	00208080 	call	20808 <update_hex>
			update_leds();
   20ca4:	00208c00 	call	208c0 <update_leds>

			coord_data_ready = 0;
   20ca8:	d026d115 	stw	zero,-25788(gp)
		memset(stdin_buff, 0, 256);
   20cac:	003f6d06 	br	20a64 <main+0x78>
//    alt_printf("\n\nTotal Running Time (HEX): 0x%x uS\n", totaltime_uS);
//    alt_printf("Average Time (HEX): 0x%x uS\n", averagetime_uS);
//    alt_printf("Sampling Rate (HEX): 0x%x Hz\n", 1000000/averagetime_uS);

    return 0;
}
   20cb0:	e037883a 	mov	sp,fp
   20cb4:	dfc00117 	ldw	ra,4(sp)
   20cb8:	df000017 	ldw	fp,0(sp)
   20cbc:	dec00204 	addi	sp,sp,8
   20cc0:	f800283a 	ret

00020cc4 <__mulsi3>:
   20cc4:	0005883a 	mov	r2,zero
   20cc8:	20000726 	beq	r4,zero,20ce8 <__mulsi3+0x24>
   20ccc:	20c0004c 	andi	r3,r4,1
   20cd0:	2008d07a 	srli	r4,r4,1
   20cd4:	18000126 	beq	r3,zero,20cdc <__mulsi3+0x18>
   20cd8:	1145883a 	add	r2,r2,r5
   20cdc:	294b883a 	add	r5,r5,r5
   20ce0:	203ffa1e 	bne	r4,zero,20ccc <__mulsi3+0x8>
   20ce4:	f800283a 	ret
   20ce8:	f800283a 	ret

00020cec <__divsf3>:
   20cec:	defff604 	addi	sp,sp,-40
   20cf0:	2006d5fa 	srli	r3,r4,23
   20cf4:	dd400615 	stw	r21,24(sp)
   20cf8:	202ad7fa 	srli	r21,r4,31
   20cfc:	00802034 	movhi	r2,128
   20d00:	dc800315 	stw	r18,12(sp)
   20d04:	dc000115 	stw	r16,4(sp)
   20d08:	10bfffc4 	addi	r2,r2,-1
   20d0c:	dfc00915 	stw	ra,36(sp)
   20d10:	ddc00815 	stw	r23,32(sp)
   20d14:	dd800715 	stw	r22,28(sp)
   20d18:	dd000515 	stw	r20,20(sp)
   20d1c:	dcc00415 	stw	r19,16(sp)
   20d20:	dc400215 	stw	r17,8(sp)
   20d24:	18c03fcc 	andi	r3,r3,255
   20d28:	1120703a 	and	r16,r2,r4
   20d2c:	a825883a 	mov	r18,r21
   20d30:	18007b26 	beq	r3,zero,20f20 <__divsf3+0x234>
   20d34:	18803fe0 	cmpeqi	r2,r3,255
   20d38:	10007e1e 	bne	r2,zero,20f34 <__divsf3+0x248>
   20d3c:	800490fa 	slli	r2,r16,3
   20d40:	1cffe044 	addi	r19,r3,-127
   20d44:	0023883a 	mov	r17,zero
   20d48:	14010034 	orhi	r16,r2,1024
   20d4c:	002d883a 	mov	r22,zero
   20d50:	2806d5fa 	srli	r3,r5,23
   20d54:	01002034 	movhi	r4,128
   20d58:	213fffc4 	addi	r4,r4,-1
   20d5c:	18c03fcc 	andi	r3,r3,255
   20d60:	282ed7fa 	srli	r23,r5,31
   20d64:	2168703a 	and	r20,r4,r5
   20d68:	18005326 	beq	r3,zero,20eb8 <__divsf3+0x1cc>
   20d6c:	18803fe0 	cmpeqi	r2,r3,255
   20d70:	10004d1e 	bne	r2,zero,20ea8 <__divsf3+0x1bc>
   20d74:	a00a90fa 	slli	r5,r20,3
   20d78:	18ffe044 	addi	r3,r3,-127
   20d7c:	000d883a 	mov	r6,zero
   20d80:	2d010034 	orhi	r20,r5,1024
   20d84:	3462b03a 	or	r17,r6,r17
   20d88:	882290ba 	slli	r17,r17,2
   20d8c:	008000b4 	movhi	r2,2
   20d90:	bd6af03a 	xor	r21,r23,r21
   20d94:	8885883a 	add	r2,r17,r2
   20d98:	10836a17 	ldw	r2,3496(r2)
   20d9c:	a809883a 	mov	r4,r21
   20da0:	98e7c83a 	sub	r19,r19,r3
   20da4:	1000683a 	jmp	r2
   20da8:	00021070 	cmpltui	zero,zero,2113
   20dac:	00020fb0 	cmpltui	zero,zero,2110
   20db0:	00020e5c 	xori	zero,zero,2105
   20db4:	00020dec 	andhi	zero,zero,2103
   20db8:	00020e5c 	xori	zero,zero,2105
   20dbc:	0002101c 	xori	zero,zero,2112
   20dc0:	00020e5c 	xori	zero,zero,2105
   20dc4:	00020dec 	andhi	zero,zero,2103
   20dc8:	00020fb0 	cmpltui	zero,zero,2110
   20dcc:	00020fb0 	cmpltui	zero,zero,2110
   20dd0:	0002101c 	xori	zero,zero,2112
   20dd4:	00020dec 	andhi	zero,zero,2103
   20dd8:	00020df8 	rdprs	zero,zero,2103
   20ddc:	00020df8 	rdprs	zero,zero,2103
   20de0:	00020df8 	rdprs	zero,zero,2103
   20de4:	00021034 	movhi	zero,2112
   20de8:	0029883a 	mov	r20,zero
   20dec:	b825883a 	mov	r18,r23
   20df0:	a021883a 	mov	r16,r20
   20df4:	302d883a 	mov	r22,r6
   20df8:	b08000a0 	cmpeqi	r2,r22,2
   20dfc:	1000841e 	bne	r2,zero,21010 <__divsf3+0x324>
   20e00:	b08000e0 	cmpeqi	r2,r22,3
   20e04:	1000951e 	bne	r2,zero,2105c <__divsf3+0x370>
   20e08:	b5800060 	cmpeqi	r22,r22,1
   20e0c:	b000141e 	bne	r22,zero,20e60 <__divsf3+0x174>
   20e10:	98801fc4 	addi	r2,r19,127
   20e14:	00806a0e 	bge	zero,r2,20fc0 <__divsf3+0x2d4>
   20e18:	80c001cc 	andi	r3,r16,7
   20e1c:	18000426 	beq	r3,zero,20e30 <__divsf3+0x144>
   20e20:	80c003cc 	andi	r3,r16,15
   20e24:	18c00120 	cmpeqi	r3,r3,4
   20e28:	1800011e 	bne	r3,zero,20e30 <__divsf3+0x144>
   20e2c:	84000104 	addi	r16,r16,4
   20e30:	80c2002c 	andhi	r3,r16,2048
   20e34:	18000426 	beq	r3,zero,20e48 <__divsf3+0x15c>
   20e38:	00be0034 	movhi	r2,63488
   20e3c:	10bfffc4 	addi	r2,r2,-1
   20e40:	80a0703a 	and	r16,r16,r2
   20e44:	98802004 	addi	r2,r19,128
   20e48:	10c03fc8 	cmpgei	r3,r2,255
   20e4c:	1800701e 	bne	r3,zero,21010 <__divsf3+0x324>
   20e50:	802091ba 	slli	r16,r16,6
   20e54:	8020d27a 	srli	r16,r16,9
   20e58:	00000306 	br	20e68 <__divsf3+0x17c>
   20e5c:	a825883a 	mov	r18,r21
   20e60:	0005883a 	mov	r2,zero
   20e64:	0021883a 	mov	r16,zero
   20e68:	10803fcc 	andi	r2,r2,255
   20e6c:	100495fa 	slli	r2,r2,23
   20e70:	902497fa 	slli	r18,r18,31
   20e74:	1404b03a 	or	r2,r2,r16
   20e78:	1484b03a 	or	r2,r2,r18
   20e7c:	dfc00917 	ldw	ra,36(sp)
   20e80:	ddc00817 	ldw	r23,32(sp)
   20e84:	dd800717 	ldw	r22,28(sp)
   20e88:	dd400617 	ldw	r21,24(sp)
   20e8c:	dd000517 	ldw	r20,20(sp)
   20e90:	dcc00417 	ldw	r19,16(sp)
   20e94:	dc800317 	ldw	r18,12(sp)
   20e98:	dc400217 	ldw	r17,8(sp)
   20e9c:	dc000117 	ldw	r16,4(sp)
   20ea0:	dec00a04 	addi	sp,sp,40
   20ea4:	f800283a 	ret
   20ea8:	a0003e1e 	bne	r20,zero,20fa4 <__divsf3+0x2b8>
   20eac:	9cffc044 	addi	r19,r19,-255
   20eb0:	01800084 	movi	r6,2
   20eb4:	00000206 	br	20ec0 <__divsf3+0x1d4>
   20eb8:	a000321e 	bne	r20,zero,20f84 <__divsf3+0x298>
   20ebc:	01800044 	movi	r6,1
   20ec0:	3462b03a 	or	r17,r6,r17
   20ec4:	882290ba 	slli	r17,r17,2
   20ec8:	008000b4 	movhi	r2,2
   20ecc:	bd6af03a 	xor	r21,r23,r21
   20ed0:	8885883a 	add	r2,r17,r2
   20ed4:	1083b817 	ldw	r2,3808(r2)
   20ed8:	a809883a 	mov	r4,r21
   20edc:	1000683a 	jmp	r2
   20ee0:	00020fb0 	cmpltui	zero,zero,2110
   20ee4:	00020fb0 	cmpltui	zero,zero,2110
   20ee8:	00020e5c 	xori	zero,zero,2105
   20eec:	00020de8 	cmpgeui	zero,zero,2103
   20ef0:	00020e5c 	xori	zero,zero,2105
   20ef4:	0002101c 	xori	zero,zero,2112
   20ef8:	00020e5c 	xori	zero,zero,2105
   20efc:	00020de8 	cmpgeui	zero,zero,2103
   20f00:	00020fb0 	cmpltui	zero,zero,2110
   20f04:	00020fb0 	cmpltui	zero,zero,2110
   20f08:	0002101c 	xori	zero,zero,2112
   20f0c:	00020de8 	cmpgeui	zero,zero,2103
   20f10:	00020df8 	rdprs	zero,zero,2103
   20f14:	00020df8 	rdprs	zero,zero,2103
   20f18:	00020df8 	rdprs	zero,zero,2103
   20f1c:	00021030 	cmpltui	zero,zero,2112
   20f20:	80000d1e 	bne	r16,zero,20f58 <__divsf3+0x26c>
   20f24:	04400104 	movi	r17,4
   20f28:	0027883a 	mov	r19,zero
   20f2c:	05800044 	movi	r22,1
   20f30:	003f8706 	br	20d50 <__divsf3+0x64>
   20f34:	8000041e 	bne	r16,zero,20f48 <__divsf3+0x25c>
   20f38:	04400204 	movi	r17,8
   20f3c:	04c03fc4 	movi	r19,255
   20f40:	05800084 	movi	r22,2
   20f44:	003f8206 	br	20d50 <__divsf3+0x64>
   20f48:	04400304 	movi	r17,12
   20f4c:	04c03fc4 	movi	r19,255
   20f50:	058000c4 	movi	r22,3
   20f54:	003f7e06 	br	20d50 <__divsf3+0x64>
   20f58:	8009883a 	mov	r4,r16
   20f5c:	d9400015 	stw	r5,0(sp)
   20f60:	00212080 	call	21208 <__clzsi2>
   20f64:	10fffec4 	addi	r3,r2,-5
   20f68:	80e0983a 	sll	r16,r16,r3
   20f6c:	00ffe284 	movi	r3,-118
   20f70:	d9400017 	ldw	r5,0(sp)
   20f74:	18a7c83a 	sub	r19,r3,r2
   20f78:	0023883a 	mov	r17,zero
   20f7c:	002d883a 	mov	r22,zero
   20f80:	003f7306 	br	20d50 <__divsf3+0x64>
   20f84:	a009883a 	mov	r4,r20
   20f88:	00212080 	call	21208 <__clzsi2>
   20f8c:	10fffec4 	addi	r3,r2,-5
   20f90:	a0e8983a 	sll	r20,r20,r3
   20f94:	00ffe284 	movi	r3,-118
   20f98:	1887c83a 	sub	r3,r3,r2
   20f9c:	000d883a 	mov	r6,zero
   20fa0:	003f7806 	br	20d84 <__divsf3+0x98>
   20fa4:	00c03fc4 	movi	r3,255
   20fa8:	018000c4 	movi	r6,3
   20fac:	003f7506 	br	20d84 <__divsf3+0x98>
   20fb0:	2025883a 	mov	r18,r4
   20fb4:	00bfffc4 	movi	r2,-1
   20fb8:	0021883a 	mov	r16,zero
   20fbc:	003faa06 	br	20e68 <__divsf3+0x17c>
   20fc0:	00c00044 	movi	r3,1
   20fc4:	1885c83a 	sub	r2,r3,r2
   20fc8:	10c00708 	cmpgei	r3,r2,28
   20fcc:	183fa41e 	bne	r3,zero,20e60 <__divsf3+0x174>
   20fd0:	98c02784 	addi	r3,r19,158
   20fd4:	80c6983a 	sll	r3,r16,r3
   20fd8:	8084d83a 	srl	r2,r16,r2
   20fdc:	1820c03a 	cmpne	r16,r3,zero
   20fe0:	1404b03a 	or	r2,r2,r16
   20fe4:	10c001cc 	andi	r3,r2,7
   20fe8:	18000426 	beq	r3,zero,20ffc <__divsf3+0x310>
   20fec:	10c003cc 	andi	r3,r2,15
   20ff0:	18c00120 	cmpeqi	r3,r3,4
   20ff4:	1800011e 	bne	r3,zero,20ffc <__divsf3+0x310>
   20ff8:	10800104 	addi	r2,r2,4
   20ffc:	10c1002c 	andhi	r3,r2,1024
   21000:	18003426 	beq	r3,zero,210d4 <__divsf3+0x3e8>
   21004:	00800044 	movi	r2,1
   21008:	0021883a 	mov	r16,zero
   2100c:	003f9606 	br	20e68 <__divsf3+0x17c>
   21010:	00bfffc4 	movi	r2,-1
   21014:	0021883a 	mov	r16,zero
   21018:	003f9306 	br	20e68 <__divsf3+0x17c>
   2101c:	04002034 	movhi	r16,128
   21020:	0025883a 	mov	r18,zero
   21024:	843fffc4 	addi	r16,r16,-1
   21028:	00bfffc4 	movi	r2,-1
   2102c:	003f8e06 	br	20e68 <__divsf3+0x17c>
   21030:	0029883a 	mov	r20,zero
   21034:	8080102c 	andhi	r2,r16,64
   21038:	10000826 	beq	r2,zero,2105c <__divsf3+0x370>
   2103c:	a080102c 	andhi	r2,r20,64
   21040:	1000061e 	bne	r2,zero,2105c <__divsf3+0x370>
   21044:	00802034 	movhi	r2,128
   21048:	a4001034 	orhi	r16,r20,64
   2104c:	10bfffc4 	addi	r2,r2,-1
   21050:	80a0703a 	and	r16,r16,r2
   21054:	b825883a 	mov	r18,r23
   21058:	003ff306 	br	21028 <__divsf3+0x33c>
   2105c:	00802034 	movhi	r2,128
   21060:	84001034 	orhi	r16,r16,64
   21064:	10bfffc4 	addi	r2,r2,-1
   21068:	80a0703a 	and	r16,r16,r2
   2106c:	003fee06 	br	21028 <__divsf3+0x33c>
   21070:	8004917a 	slli	r2,r16,5
   21074:	a00a917a 	slli	r5,r20,5
   21078:	1140122e 	bgeu	r2,r5,210c4 <__divsf3+0x3d8>
   2107c:	9cffffc4 	addi	r19,r19,-1
   21080:	010006c4 	movi	r4,27
   21084:	0021883a 	mov	r16,zero
   21088:	1007883a 	mov	r3,r2
   2108c:	213fffc4 	addi	r4,r4,-1
   21090:	1085883a 	add	r2,r2,r2
   21094:	8421883a 	add	r16,r16,r16
   21098:	18000116 	blt	r3,zero,210a0 <__divsf3+0x3b4>
   2109c:	11400236 	bltu	r2,r5,210a8 <__divsf3+0x3bc>
   210a0:	1145c83a 	sub	r2,r2,r5
   210a4:	84000054 	ori	r16,r16,1
   210a8:	203ff71e 	bne	r4,zero,21088 <__divsf3+0x39c>
   210ac:	1004c03a 	cmpne	r2,r2,zero
   210b0:	1420b03a 	or	r16,r2,r16
   210b4:	98801fc4 	addi	r2,r19,127
   210b8:	a825883a 	mov	r18,r21
   210bc:	00bf5616 	blt	zero,r2,20e18 <__divsf3+0x12c>
   210c0:	003fbf06 	br	20fc0 <__divsf3+0x2d4>
   210c4:	1145c83a 	sub	r2,r2,r5
   210c8:	01000684 	movi	r4,26
   210cc:	04000044 	movi	r16,1
   210d0:	003fed06 	br	21088 <__divsf3+0x39c>
   210d4:	102091ba 	slli	r16,r2,6
   210d8:	0005883a 	mov	r2,zero
   210dc:	8020d27a 	srli	r16,r16,9
   210e0:	003f6106 	br	20e68 <__divsf3+0x17c>

000210e4 <__floatsisf>:
   210e4:	defffd04 	addi	sp,sp,-12
   210e8:	dfc00215 	stw	ra,8(sp)
   210ec:	dc400115 	stw	r17,4(sp)
   210f0:	dc000015 	stw	r16,0(sp)
   210f4:	20001226 	beq	r4,zero,21140 <__floatsisf+0x5c>
   210f8:	2022d7fa 	srli	r17,r4,31
   210fc:	2021883a 	mov	r16,r4
   21100:	20003816 	blt	r4,zero,211e4 <__floatsisf+0x100>
   21104:	8009883a 	mov	r4,r16
   21108:	00212080 	call	21208 <__clzsi2>
   2110c:	1009883a 	mov	r4,r2
   21110:	00802784 	movi	r2,158
   21114:	1105c83a 	sub	r2,r2,r4
   21118:	10c025c8 	cmpgei	r3,r2,151
   2111c:	1800151e 	bne	r3,zero,21174 <__floatsisf+0x90>
   21120:	20c00248 	cmpgei	r3,r4,9
   21124:	18003126 	beq	r3,zero,211ec <__floatsisf+0x108>
   21128:	213ffe04 	addi	r4,r4,-8
   2112c:	8120983a 	sll	r16,r16,r4
   21130:	00c02034 	movhi	r3,128
   21134:	18ffffc4 	addi	r3,r3,-1
   21138:	80e0703a 	and	r16,r16,r3
   2113c:	00000306 	br	2114c <__floatsisf+0x68>
   21140:	0023883a 	mov	r17,zero
   21144:	0005883a 	mov	r2,zero
   21148:	0021883a 	mov	r16,zero
   2114c:	10803fcc 	andi	r2,r2,255
   21150:	100495fa 	slli	r2,r2,23
   21154:	882297fa 	slli	r17,r17,31
   21158:	1404b03a 	or	r2,r2,r16
   2115c:	1444b03a 	or	r2,r2,r17
   21160:	dfc00217 	ldw	ra,8(sp)
   21164:	dc400117 	ldw	r17,4(sp)
   21168:	dc000017 	ldw	r16,0(sp)
   2116c:	dec00304 	addi	sp,sp,12
   21170:	f800283a 	ret
   21174:	10c02690 	cmplti	r3,r2,154
   21178:	1800071e 	bne	r3,zero,21198 <__floatsisf+0xb4>
   2117c:	20c006c4 	addi	r3,r4,27
   21180:	01400144 	movi	r5,5
   21184:	80c6983a 	sll	r3,r16,r3
   21188:	290bc83a 	sub	r5,r5,r4
   2118c:	814ad83a 	srl	r5,r16,r5
   21190:	1806c03a 	cmpne	r3,r3,zero
   21194:	28e0b03a 	or	r16,r5,r3
   21198:	20c00188 	cmpgei	r3,r4,6
   2119c:	1800171e 	bne	r3,zero,211fc <__floatsisf+0x118>
   211a0:	00ff0034 	movhi	r3,64512
   211a4:	18ffffc4 	addi	r3,r3,-1
   211a8:	818001cc 	andi	r6,r16,7
   211ac:	80ca703a 	and	r5,r16,r3
   211b0:	30000926 	beq	r6,zero,211d8 <__floatsisf+0xf4>
   211b4:	818003cc 	andi	r6,r16,15
   211b8:	31800120 	cmpeqi	r6,r6,4
   211bc:	3000061e 	bne	r6,zero,211d8 <__floatsisf+0xf4>
   211c0:	29400104 	addi	r5,r5,4
   211c4:	2981002c 	andhi	r6,r5,1024
   211c8:	30000326 	beq	r6,zero,211d8 <__floatsisf+0xf4>
   211cc:	28ca703a 	and	r5,r5,r3
   211d0:	00c027c4 	movi	r3,159
   211d4:	1905c83a 	sub	r2,r3,r4
   211d8:	282091ba 	slli	r16,r5,6
   211dc:	8020d27a 	srli	r16,r16,9
   211e0:	003fda06 	br	2114c <__floatsisf+0x68>
   211e4:	0121c83a 	sub	r16,zero,r4
   211e8:	003fc606 	br	21104 <__floatsisf+0x20>
   211ec:	01002034 	movhi	r4,128
   211f0:	213fffc4 	addi	r4,r4,-1
   211f4:	8120703a 	and	r16,r16,r4
   211f8:	003fd406 	br	2114c <__floatsisf+0x68>
   211fc:	20fffec4 	addi	r3,r4,-5
   21200:	80e0983a 	sll	r16,r16,r3
   21204:	003fe606 	br	211a0 <__floatsisf+0xbc>

00021208 <__clzsi2>:
   21208:	00bfffd4 	movui	r2,65535
   2120c:	11000436 	bltu	r2,r4,21220 <__clzsi2+0x18>
   21210:	20804030 	cmpltui	r2,r4,256
   21214:	10000e26 	beq	r2,zero,21250 <__clzsi2+0x48>
   21218:	01400804 	movi	r5,32
   2121c:	00000406 	br	21230 <__clzsi2+0x28>
   21220:	00804034 	movhi	r2,256
   21224:	20800736 	bltu	r4,r2,21244 <__clzsi2+0x3c>
   21228:	2008d63a 	srli	r4,r4,24
   2122c:	01400204 	movi	r5,8
   21230:	00c000b4 	movhi	r3,2
   21234:	20c7883a 	add	r3,r4,r3
   21238:	18993803 	ldbu	r2,25824(r3)
   2123c:	2885c83a 	sub	r2,r5,r2
   21240:	f800283a 	ret
   21244:	2008d43a 	srli	r4,r4,16
   21248:	01400404 	movi	r5,16
   2124c:	003ff806 	br	21230 <__clzsi2+0x28>
   21250:	2008d23a 	srli	r4,r4,8
   21254:	01400604 	movi	r5,24
   21258:	003ff506 	br	21230 <__clzsi2+0x28>

0002125c <__sflush_r>:
   2125c:	2880030b 	ldhu	r2,12(r5)
   21260:	defffb04 	addi	sp,sp,-20
   21264:	dcc00315 	stw	r19,12(sp)
   21268:	dc000015 	stw	r16,0(sp)
   2126c:	dfc00415 	stw	ra,16(sp)
   21270:	dc800215 	stw	r18,8(sp)
   21274:	dc400115 	stw	r17,4(sp)
   21278:	10c0020c 	andi	r3,r2,8
   2127c:	2821883a 	mov	r16,r5
   21280:	2027883a 	mov	r19,r4
   21284:	18003f1e 	bne	r3,zero,21384 <__sflush_r+0x128>
   21288:	28c00117 	ldw	r3,4(r5)
   2128c:	10820014 	ori	r2,r2,2048
   21290:	2880030d 	sth	r2,12(r5)
   21294:	00c0550e 	bge	zero,r3,213ec <__sflush_r+0x190>
   21298:	82000a17 	ldw	r8,40(r16)
   2129c:	40003126 	beq	r8,zero,21364 <__sflush_r+0x108>
   212a0:	9c400017 	ldw	r17,0(r19)
   212a4:	1104000c 	andi	r4,r2,4096
   212a8:	98000015 	stw	zero,0(r19)
   212ac:	1007883a 	mov	r3,r2
   212b0:	2000531e 	bne	r4,zero,21400 <__sflush_r+0x1a4>
   212b4:	81400717 	ldw	r5,28(r16)
   212b8:	01c00044 	movi	r7,1
   212bc:	000d883a 	mov	r6,zero
   212c0:	9809883a 	mov	r4,r19
   212c4:	403ee83a 	callr	r8
   212c8:	10ffffd8 	cmpnei	r3,r2,-1
   212cc:	18005826 	beq	r3,zero,21430 <__sflush_r+0x1d4>
   212d0:	80c0030b 	ldhu	r3,12(r16)
   212d4:	82000a17 	ldw	r8,40(r16)
   212d8:	18c0010c 	andi	r3,r3,4
   212dc:	18000626 	beq	r3,zero,212f8 <__sflush_r+0x9c>
   212e0:	81000117 	ldw	r4,4(r16)
   212e4:	80c00c17 	ldw	r3,48(r16)
   212e8:	1105c83a 	sub	r2,r2,r4
   212ec:	18000226 	beq	r3,zero,212f8 <__sflush_r+0x9c>
   212f0:	80c00f17 	ldw	r3,60(r16)
   212f4:	10c5c83a 	sub	r2,r2,r3
   212f8:	81400717 	ldw	r5,28(r16)
   212fc:	100d883a 	mov	r6,r2
   21300:	000f883a 	mov	r7,zero
   21304:	9809883a 	mov	r4,r19
   21308:	403ee83a 	callr	r8
   2130c:	10ffffd8 	cmpnei	r3,r2,-1
   21310:	18003d1e 	bne	r3,zero,21408 <__sflush_r+0x1ac>
   21314:	99000017 	ldw	r4,0(r19)
   21318:	80c0030b 	ldhu	r3,12(r16)
   2131c:	20004e26 	beq	r4,zero,21458 <__sflush_r+0x1fc>
   21320:	21400760 	cmpeqi	r5,r4,29
   21324:	2800021e 	bne	r5,zero,21330 <__sflush_r+0xd4>
   21328:	210005a0 	cmpeqi	r4,r4,22
   2132c:	20002c26 	beq	r4,zero,213e0 <__sflush_r+0x184>
   21330:	80800417 	ldw	r2,16(r16)
   21334:	18fdffcc 	andi	r3,r3,63487
   21338:	80c0030d 	sth	r3,12(r16)
   2133c:	80000115 	stw	zero,4(r16)
   21340:	80800015 	stw	r2,0(r16)
   21344:	81400c17 	ldw	r5,48(r16)
   21348:	9c400015 	stw	r17,0(r19)
   2134c:	28000526 	beq	r5,zero,21364 <__sflush_r+0x108>
   21350:	80801004 	addi	r2,r16,64
   21354:	28800226 	beq	r5,r2,21360 <__sflush_r+0x104>
   21358:	9809883a 	mov	r4,r19
   2135c:	0021a300 	call	21a30 <_free_r>
   21360:	80000c15 	stw	zero,48(r16)
   21364:	0005883a 	mov	r2,zero
   21368:	dfc00417 	ldw	ra,16(sp)
   2136c:	dcc00317 	ldw	r19,12(sp)
   21370:	dc800217 	ldw	r18,8(sp)
   21374:	dc400117 	ldw	r17,4(sp)
   21378:	dc000017 	ldw	r16,0(sp)
   2137c:	dec00504 	addi	sp,sp,20
   21380:	f800283a 	ret
   21384:	2c800417 	ldw	r18,16(r5)
   21388:	903ff626 	beq	r18,zero,21364 <__sflush_r+0x108>
   2138c:	2c400017 	ldw	r17,0(r5)
   21390:	108000cc 	andi	r2,r2,3
   21394:	2c800015 	stw	r18,0(r5)
   21398:	8ca3c83a 	sub	r17,r17,r18
   2139c:	1000161e 	bne	r2,zero,213f8 <__sflush_r+0x19c>
   213a0:	28800517 	ldw	r2,20(r5)
   213a4:	80800215 	stw	r2,8(r16)
   213a8:	04400316 	blt	zero,r17,213b8 <__sflush_r+0x15c>
   213ac:	003fed06 	br	21364 <__sflush_r+0x108>
   213b0:	90a5883a 	add	r18,r18,r2
   213b4:	047feb0e 	bge	zero,r17,21364 <__sflush_r+0x108>
   213b8:	80800917 	ldw	r2,36(r16)
   213bc:	81400717 	ldw	r5,28(r16)
   213c0:	880f883a 	mov	r7,r17
   213c4:	900d883a 	mov	r6,r18
   213c8:	9809883a 	mov	r4,r19
   213cc:	103ee83a 	callr	r2
   213d0:	88a3c83a 	sub	r17,r17,r2
   213d4:	00bff616 	blt	zero,r2,213b0 <__sflush_r+0x154>
   213d8:	80c0030b 	ldhu	r3,12(r16)
   213dc:	00bfffc4 	movi	r2,-1
   213e0:	18c01014 	ori	r3,r3,64
   213e4:	80c0030d 	sth	r3,12(r16)
   213e8:	003fdf06 	br	21368 <__sflush_r+0x10c>
   213ec:	28c00f17 	ldw	r3,60(r5)
   213f0:	00ffa916 	blt	zero,r3,21298 <__sflush_r+0x3c>
   213f4:	003fdb06 	br	21364 <__sflush_r+0x108>
   213f8:	0005883a 	mov	r2,zero
   213fc:	003fe906 	br	213a4 <__sflush_r+0x148>
   21400:	80801417 	ldw	r2,80(r16)
   21404:	003fb406 	br	212d8 <__sflush_r+0x7c>
   21408:	80c0030b 	ldhu	r3,12(r16)
   2140c:	81000417 	ldw	r4,16(r16)
   21410:	80000115 	stw	zero,4(r16)
   21414:	197dffcc 	andi	r5,r3,63487
   21418:	8140030d 	sth	r5,12(r16)
   2141c:	81000015 	stw	r4,0(r16)
   21420:	18c4000c 	andi	r3,r3,4096
   21424:	183fc726 	beq	r3,zero,21344 <__sflush_r+0xe8>
   21428:	80801415 	stw	r2,80(r16)
   2142c:	003fc506 	br	21344 <__sflush_r+0xe8>
   21430:	98c00017 	ldw	r3,0(r19)
   21434:	183fa626 	beq	r3,zero,212d0 <__sflush_r+0x74>
   21438:	19000760 	cmpeqi	r4,r3,29
   2143c:	20000e1e 	bne	r4,zero,21478 <__sflush_r+0x21c>
   21440:	18c00598 	cmpnei	r3,r3,22
   21444:	18000c26 	beq	r3,zero,21478 <__sflush_r+0x21c>
   21448:	80c0030b 	ldhu	r3,12(r16)
   2144c:	18c01014 	ori	r3,r3,64
   21450:	80c0030d 	sth	r3,12(r16)
   21454:	003fc406 	br	21368 <__sflush_r+0x10c>
   21458:	81000417 	ldw	r4,16(r16)
   2145c:	197dffcc 	andi	r5,r3,63487
   21460:	8140030d 	sth	r5,12(r16)
   21464:	80000115 	stw	zero,4(r16)
   21468:	81000015 	stw	r4,0(r16)
   2146c:	18c4000c 	andi	r3,r3,4096
   21470:	183fb426 	beq	r3,zero,21344 <__sflush_r+0xe8>
   21474:	003fec06 	br	21428 <__sflush_r+0x1cc>
   21478:	9c400015 	stw	r17,0(r19)
   2147c:	0005883a 	mov	r2,zero
   21480:	003fb906 	br	21368 <__sflush_r+0x10c>

00021484 <_fflush_r>:
   21484:	defffd04 	addi	sp,sp,-12
   21488:	dc000115 	stw	r16,4(sp)
   2148c:	dfc00215 	stw	ra,8(sp)
   21490:	2021883a 	mov	r16,r4
   21494:	20000226 	beq	r4,zero,214a0 <_fflush_r+0x1c>
   21498:	20800e17 	ldw	r2,56(r4)
   2149c:	10000726 	beq	r2,zero,214bc <_fflush_r+0x38>
   214a0:	2880030f 	ldh	r2,12(r5)
   214a4:	10000a1e 	bne	r2,zero,214d0 <_fflush_r+0x4c>
   214a8:	0005883a 	mov	r2,zero
   214ac:	dfc00217 	ldw	ra,8(sp)
   214b0:	dc000117 	ldw	r16,4(sp)
   214b4:	dec00304 	addi	sp,sp,12
   214b8:	f800283a 	ret
   214bc:	d9400015 	stw	r5,0(sp)
   214c0:	00218cc0 	call	218cc <__sinit>
   214c4:	d9400017 	ldw	r5,0(sp)
   214c8:	2880030f 	ldh	r2,12(r5)
   214cc:	103ff626 	beq	r2,zero,214a8 <_fflush_r+0x24>
   214d0:	8009883a 	mov	r4,r16
   214d4:	dfc00217 	ldw	ra,8(sp)
   214d8:	dc000117 	ldw	r16,4(sp)
   214dc:	dec00304 	addi	sp,sp,12
   214e0:	002125c1 	jmpi	2125c <__sflush_r>

000214e4 <fflush>:
   214e4:	20001726 	beq	r4,zero,21544 <fflush+0x60>
   214e8:	008000f4 	movhi	r2,3
   214ec:	200b883a 	mov	r5,r4
   214f0:	11203b17 	ldw	r4,-32532(r2)
   214f4:	20000226 	beq	r4,zero,21500 <fflush+0x1c>
   214f8:	20800e17 	ldw	r2,56(r4)
   214fc:	10000526 	beq	r2,zero,21514 <fflush+0x30>
   21500:	2880030f 	ldh	r2,12(r5)
   21504:	1000021e 	bne	r2,zero,21510 <fflush+0x2c>
   21508:	0005883a 	mov	r2,zero
   2150c:	f800283a 	ret
   21510:	002125c1 	jmpi	2125c <__sflush_r>
   21514:	defffd04 	addi	sp,sp,-12
   21518:	d9400115 	stw	r5,4(sp)
   2151c:	d9000015 	stw	r4,0(sp)
   21520:	dfc00215 	stw	ra,8(sp)
   21524:	00218cc0 	call	218cc <__sinit>
   21528:	d9400117 	ldw	r5,4(sp)
   2152c:	d9000017 	ldw	r4,0(sp)
   21530:	2880030f 	ldh	r2,12(r5)
   21534:	10000826 	beq	r2,zero,21558 <fflush+0x74>
   21538:	dfc00217 	ldw	ra,8(sp)
   2153c:	dec00304 	addi	sp,sp,12
   21540:	002125c1 	jmpi	2125c <__sflush_r>
   21544:	008000f4 	movhi	r2,3
   21548:	11203a17 	ldw	r4,-32536(r2)
   2154c:	014000b4 	movhi	r5,2
   21550:	29452104 	addi	r5,r5,5252
   21554:	0021dc41 	jmpi	21dc4 <_fwalk_reent>
   21558:	0005883a 	mov	r2,zero
   2155c:	dfc00217 	ldw	ra,8(sp)
   21560:	dec00304 	addi	sp,sp,12
   21564:	f800283a 	ret

00021568 <__fp_lock>:
   21568:	0005883a 	mov	r2,zero
   2156c:	f800283a 	ret

00021570 <_cleanup_r>:
   21570:	014000b4 	movhi	r5,2
   21574:	294afa04 	addi	r5,r5,11240
   21578:	0021dc41 	jmpi	21dc4 <_fwalk_reent>

0002157c <__fp_unlock>:
   2157c:	0005883a 	mov	r2,zero
   21580:	f800283a 	ret

00021584 <__sinit.part.0>:
   21584:	00c000b4 	movhi	r3,2
   21588:	20800117 	ldw	r2,4(r4)
   2158c:	18c55c04 	addi	r3,r3,5488
   21590:	20c00f15 	stw	r3,60(r4)
   21594:	2140bb04 	addi	r5,r4,748
   21598:	00c000c4 	movi	r3,3
   2159c:	20c0b915 	stw	r3,740(r4)
   215a0:	2140ba15 	stw	r5,744(r4)
   215a4:	2000b815 	stw	zero,736(r4)
   215a8:	10001705 	stb	zero,92(r2)
   215ac:	10001745 	stb	zero,93(r2)
   215b0:	10001785 	stb	zero,94(r2)
   215b4:	100017c5 	stb	zero,95(r2)
   215b8:	10001805 	stb	zero,96(r2)
   215bc:	10001845 	stb	zero,97(r2)
   215c0:	10001885 	stb	zero,98(r2)
   215c4:	100018c5 	stb	zero,99(r2)
   215c8:	00c00104 	movi	r3,4
   215cc:	10c00315 	stw	r3,12(r2)
   215d0:	020000b4 	movhi	r8,2
   215d4:	20c00217 	ldw	r3,8(r4)
   215d8:	01c000b4 	movhi	r7,2
   215dc:	018000b4 	movhi	r6,2
   215e0:	014000b4 	movhi	r5,2
   215e4:	420a2504 	addi	r8,r8,10388
   215e8:	39ca3c04 	addi	r7,r7,10480
   215ec:	318a5c04 	addi	r6,r6,10608
   215f0:	294a7304 	addi	r5,r5,10700
   215f4:	02400074 	movhi	r9,1
   215f8:	10001915 	stw	zero,100(r2)
   215fc:	10000015 	stw	zero,0(r2)
   21600:	10000115 	stw	zero,4(r2)
   21604:	10000215 	stw	zero,8(r2)
   21608:	10000415 	stw	zero,16(r2)
   2160c:	10000515 	stw	zero,20(r2)
   21610:	10000615 	stw	zero,24(r2)
   21614:	10800715 	stw	r2,28(r2)
   21618:	12000815 	stw	r8,32(r2)
   2161c:	11c00915 	stw	r7,36(r2)
   21620:	11800a15 	stw	r6,40(r2)
   21624:	11400b15 	stw	r5,44(r2)
   21628:	4a400284 	addi	r9,r9,10
   2162c:	1a400315 	stw	r9,12(r3)
   21630:	18001915 	stw	zero,100(r3)
   21634:	18000015 	stw	zero,0(r3)
   21638:	18000115 	stw	zero,4(r3)
   2163c:	18000215 	stw	zero,8(r3)
   21640:	18000415 	stw	zero,16(r3)
   21644:	18001705 	stb	zero,92(r3)
   21648:	18001745 	stb	zero,93(r3)
   2164c:	18001785 	stb	zero,94(r3)
   21650:	180017c5 	stb	zero,95(r3)
   21654:	18001805 	stb	zero,96(r3)
   21658:	18001845 	stb	zero,97(r3)
   2165c:	18001885 	stb	zero,98(r3)
   21660:	180018c5 	stb	zero,99(r3)
   21664:	20800317 	ldw	r2,12(r4)
   21668:	024000b4 	movhi	r9,2
   2166c:	18000515 	stw	zero,20(r3)
   21670:	18000615 	stw	zero,24(r3)
   21674:	18c00715 	stw	r3,28(r3)
   21678:	1a000815 	stw	r8,32(r3)
   2167c:	19c00915 	stw	r7,36(r3)
   21680:	19800a15 	stw	r6,40(r3)
   21684:	19400b15 	stw	r5,44(r3)
   21688:	4a400484 	addi	r9,r9,18
   2168c:	10001915 	stw	zero,100(r2)
   21690:	10000015 	stw	zero,0(r2)
   21694:	10000115 	stw	zero,4(r2)
   21698:	10000215 	stw	zero,8(r2)
   2169c:	12400315 	stw	r9,12(r2)
   216a0:	10000415 	stw	zero,16(r2)
   216a4:	10000515 	stw	zero,20(r2)
   216a8:	10000615 	stw	zero,24(r2)
   216ac:	10001705 	stb	zero,92(r2)
   216b0:	10001745 	stb	zero,93(r2)
   216b4:	10001785 	stb	zero,94(r2)
   216b8:	100017c5 	stb	zero,95(r2)
   216bc:	10001805 	stb	zero,96(r2)
   216c0:	10001845 	stb	zero,97(r2)
   216c4:	10001885 	stb	zero,98(r2)
   216c8:	100018c5 	stb	zero,99(r2)
   216cc:	10800715 	stw	r2,28(r2)
   216d0:	12000815 	stw	r8,32(r2)
   216d4:	11c00915 	stw	r7,36(r2)
   216d8:	11800a15 	stw	r6,40(r2)
   216dc:	11400b15 	stw	r5,44(r2)
   216e0:	00800044 	movi	r2,1
   216e4:	20800e15 	stw	r2,56(r4)
   216e8:	f800283a 	ret

000216ec <__sfmoreglue>:
   216ec:	defffc04 	addi	sp,sp,-16
   216f0:	dc800215 	stw	r18,8(sp)
   216f4:	2825883a 	mov	r18,r5
   216f8:	dc000015 	stw	r16,0(sp)
   216fc:	01401a04 	movi	r5,104
   21700:	2021883a 	mov	r16,r4
   21704:	913fffc4 	addi	r4,r18,-1
   21708:	dfc00315 	stw	ra,12(sp)
   2170c:	dc400115 	stw	r17,4(sp)
   21710:	0020cc40 	call	20cc4 <__mulsi3>
   21714:	8009883a 	mov	r4,r16
   21718:	11401d04 	addi	r5,r2,116
   2171c:	1023883a 	mov	r17,r2
   21720:	0021e6c0 	call	21e6c <_malloc_r>
   21724:	1021883a 	mov	r16,r2
   21728:	10000726 	beq	r2,zero,21748 <__sfmoreglue+0x5c>
   2172c:	11000304 	addi	r4,r2,12
   21730:	10000015 	stw	zero,0(r2)
   21734:	14800115 	stw	r18,4(r2)
   21738:	11000215 	stw	r4,8(r2)
   2173c:	89801a04 	addi	r6,r17,104
   21740:	000b883a 	mov	r5,zero
   21744:	002274c0 	call	2274c <memset>
   21748:	8005883a 	mov	r2,r16
   2174c:	dfc00317 	ldw	ra,12(sp)
   21750:	dc800217 	ldw	r18,8(sp)
   21754:	dc400117 	ldw	r17,4(sp)
   21758:	dc000017 	ldw	r16,0(sp)
   2175c:	dec00404 	addi	sp,sp,16
   21760:	f800283a 	ret

00021764 <__sfp>:
   21764:	defffb04 	addi	sp,sp,-20
   21768:	008000f4 	movhi	r2,3
   2176c:	dc000015 	stw	r16,0(sp)
   21770:	14203a17 	ldw	r16,-32536(r2)
   21774:	dc400115 	stw	r17,4(sp)
   21778:	dfc00415 	stw	ra,16(sp)
   2177c:	80800e17 	ldw	r2,56(r16)
   21780:	dcc00315 	stw	r19,12(sp)
   21784:	dc800215 	stw	r18,8(sp)
   21788:	2023883a 	mov	r17,r4
   2178c:	10003126 	beq	r2,zero,21854 <__sfp+0xf0>
   21790:	8100ba17 	ldw	r4,744(r16)
   21794:	8140b917 	ldw	r5,740(r16)
   21798:	04c00104 	movi	r19,4
   2179c:	8400b804 	addi	r16,r16,736
   217a0:	297fffc4 	addi	r5,r5,-1
   217a4:	2800050e 	bge	r5,zero,217bc <__sfp+0x58>
   217a8:	00002406 	br	2183c <__sfp+0xd8>
   217ac:	297fffc4 	addi	r5,r5,-1
   217b0:	28bfffd8 	cmpnei	r2,r5,-1
   217b4:	21001a04 	addi	r4,r4,104
   217b8:	10002026 	beq	r2,zero,2183c <__sfp+0xd8>
   217bc:	2080030f 	ldh	r2,12(r4)
   217c0:	103ffa1e 	bne	r2,zero,217ac <__sfp+0x48>
   217c4:	00bffff4 	movhi	r2,65535
   217c8:	10800044 	addi	r2,r2,1
   217cc:	20001915 	stw	zero,100(r4)
   217d0:	20000015 	stw	zero,0(r4)
   217d4:	20000115 	stw	zero,4(r4)
   217d8:	20000215 	stw	zero,8(r4)
   217dc:	20800315 	stw	r2,12(r4)
   217e0:	20000415 	stw	zero,16(r4)
   217e4:	20000515 	stw	zero,20(r4)
   217e8:	20000615 	stw	zero,24(r4)
   217ec:	20001705 	stb	zero,92(r4)
   217f0:	20001745 	stb	zero,93(r4)
   217f4:	20001785 	stb	zero,94(r4)
   217f8:	200017c5 	stb	zero,95(r4)
   217fc:	20001805 	stb	zero,96(r4)
   21800:	20001845 	stb	zero,97(r4)
   21804:	20001885 	stb	zero,98(r4)
   21808:	200018c5 	stb	zero,99(r4)
   2180c:	20000c15 	stw	zero,48(r4)
   21810:	20000d15 	stw	zero,52(r4)
   21814:	20001115 	stw	zero,68(r4)
   21818:	20001215 	stw	zero,72(r4)
   2181c:	2005883a 	mov	r2,r4
   21820:	dfc00417 	ldw	ra,16(sp)
   21824:	dcc00317 	ldw	r19,12(sp)
   21828:	dc800217 	ldw	r18,8(sp)
   2182c:	dc400117 	ldw	r17,4(sp)
   21830:	dc000017 	ldw	r16,0(sp)
   21834:	dec00504 	addi	sp,sp,20
   21838:	f800283a 	ret
   2183c:	80800017 	ldw	r2,0(r16)
   21840:	10000726 	beq	r2,zero,21860 <__sfp+0xfc>
   21844:	11000217 	ldw	r4,8(r2)
   21848:	11400117 	ldw	r5,4(r2)
   2184c:	1021883a 	mov	r16,r2
   21850:	003fd306 	br	217a0 <__sfp+0x3c>
   21854:	8009883a 	mov	r4,r16
   21858:	00215840 	call	21584 <__sinit.part.0>
   2185c:	003fcc06 	br	21790 <__sfp+0x2c>
   21860:	01406b04 	movi	r5,428
   21864:	8809883a 	mov	r4,r17
   21868:	0021e6c0 	call	21e6c <_malloc_r>
   2186c:	1025883a 	mov	r18,r2
   21870:	10000c26 	beq	r2,zero,218a4 <__sfp+0x140>
   21874:	11000304 	addi	r4,r2,12
   21878:	11000215 	stw	r4,8(r2)
   2187c:	000b883a 	mov	r5,zero
   21880:	10000015 	stw	zero,0(r2)
   21884:	14c00115 	stw	r19,4(r2)
   21888:	01806804 	movi	r6,416
   2188c:	002274c0 	call	2274c <memset>
   21890:	1009883a 	mov	r4,r2
   21894:	84800015 	stw	r18,0(r16)
   21898:	014000c4 	movi	r5,3
   2189c:	9021883a 	mov	r16,r18
   218a0:	003fc606 	br	217bc <__sfp+0x58>
   218a4:	80000015 	stw	zero,0(r16)
   218a8:	00800304 	movi	r2,12
   218ac:	88800015 	stw	r2,0(r17)
   218b0:	0009883a 	mov	r4,zero
   218b4:	003fd906 	br	2181c <__sfp+0xb8>

000218b8 <_cleanup>:
   218b8:	008000f4 	movhi	r2,3
   218bc:	11203a17 	ldw	r4,-32536(r2)
   218c0:	014000b4 	movhi	r5,2
   218c4:	294afa04 	addi	r5,r5,11240
   218c8:	0021dc41 	jmpi	21dc4 <_fwalk_reent>

000218cc <__sinit>:
   218cc:	20800e17 	ldw	r2,56(r4)
   218d0:	10000126 	beq	r2,zero,218d8 <__sinit+0xc>
   218d4:	f800283a 	ret
   218d8:	00215841 	jmpi	21584 <__sinit.part.0>

000218dc <__sfp_lock_acquire>:
   218dc:	f800283a 	ret

000218e0 <__sfp_lock_release>:
   218e0:	f800283a 	ret

000218e4 <__sinit_lock_acquire>:
   218e4:	f800283a 	ret

000218e8 <__sinit_lock_release>:
   218e8:	f800283a 	ret

000218ec <__fp_lock_all>:
   218ec:	008000f4 	movhi	r2,3
   218f0:	11203b17 	ldw	r4,-32532(r2)
   218f4:	014000b4 	movhi	r5,2
   218f8:	29455a04 	addi	r5,r5,5480
   218fc:	0021d2c1 	jmpi	21d2c <_fwalk>

00021900 <__fp_unlock_all>:
   21900:	008000f4 	movhi	r2,3
   21904:	11203b17 	ldw	r4,-32532(r2)
   21908:	014000b4 	movhi	r5,2
   2190c:	29455f04 	addi	r5,r5,5500
   21910:	0021d2c1 	jmpi	21d2c <_fwalk>

00021914 <_malloc_trim_r>:
   21914:	defffb04 	addi	sp,sp,-20
   21918:	dcc00315 	stw	r19,12(sp)
   2191c:	04c000b4 	movhi	r19,2
   21920:	dc800215 	stw	r18,8(sp)
   21924:	dc400115 	stw	r17,4(sp)
   21928:	dc000015 	stw	r16,0(sp)
   2192c:	dfc00415 	stw	ra,16(sp)
   21930:	2821883a 	mov	r16,r5
   21934:	9cdaab04 	addi	r19,r19,27308
   21938:	2025883a 	mov	r18,r4
   2193c:	00234440 	call	23444 <__malloc_lock>
   21940:	98800217 	ldw	r2,8(r19)
   21944:	14400117 	ldw	r17,4(r2)
   21948:	00bfff04 	movi	r2,-4
   2194c:	88a2703a 	and	r17,r17,r2
   21950:	8c21c83a 	sub	r16,r17,r16
   21954:	8403fbc4 	addi	r16,r16,4079
   21958:	8020d33a 	srli	r16,r16,12
   2195c:	843fffc4 	addi	r16,r16,-1
   21960:	8020933a 	slli	r16,r16,12
   21964:	80840008 	cmpgei	r2,r16,4096
   21968:	10000626 	beq	r2,zero,21984 <_malloc_trim_r+0x70>
   2196c:	000b883a 	mov	r5,zero
   21970:	9009883a 	mov	r4,r18
   21974:	002283c0 	call	2283c <_sbrk_r>
   21978:	98c00217 	ldw	r3,8(r19)
   2197c:	1c47883a 	add	r3,r3,r17
   21980:	10c00a26 	beq	r2,r3,219ac <_malloc_trim_r+0x98>
   21984:	9009883a 	mov	r4,r18
   21988:	00234680 	call	23468 <__malloc_unlock>
   2198c:	0005883a 	mov	r2,zero
   21990:	dfc00417 	ldw	ra,16(sp)
   21994:	dcc00317 	ldw	r19,12(sp)
   21998:	dc800217 	ldw	r18,8(sp)
   2199c:	dc400117 	ldw	r17,4(sp)
   219a0:	dc000017 	ldw	r16,0(sp)
   219a4:	dec00504 	addi	sp,sp,20
   219a8:	f800283a 	ret
   219ac:	040bc83a 	sub	r5,zero,r16
   219b0:	9009883a 	mov	r4,r18
   219b4:	002283c0 	call	2283c <_sbrk_r>
   219b8:	10bfffd8 	cmpnei	r2,r2,-1
   219bc:	10000d26 	beq	r2,zero,219f4 <_malloc_trim_r+0xe0>
   219c0:	008000f4 	movhi	r2,3
   219c4:	10a79517 	ldw	r2,-25004(r2)
   219c8:	98c00217 	ldw	r3,8(r19)
   219cc:	8c23c83a 	sub	r17,r17,r16
   219d0:	8c400054 	ori	r17,r17,1
   219d4:	1421c83a 	sub	r16,r2,r16
   219d8:	1c400115 	stw	r17,4(r3)
   219dc:	008000f4 	movhi	r2,3
   219e0:	9009883a 	mov	r4,r18
   219e4:	14279515 	stw	r16,-25004(r2)
   219e8:	00234680 	call	23468 <__malloc_unlock>
   219ec:	00800044 	movi	r2,1
   219f0:	003fe706 	br	21990 <_malloc_trim_r+0x7c>
   219f4:	000b883a 	mov	r5,zero
   219f8:	9009883a 	mov	r4,r18
   219fc:	002283c0 	call	2283c <_sbrk_r>
   21a00:	99000217 	ldw	r4,8(r19)
   21a04:	1107c83a 	sub	r3,r2,r4
   21a08:	19400410 	cmplti	r5,r3,16
   21a0c:	283fdd1e 	bne	r5,zero,21984 <_malloc_trim_r+0x70>
   21a10:	014000f4 	movhi	r5,3
   21a14:	29603c17 	ldw	r5,-32528(r5)
   21a18:	18c00054 	ori	r3,r3,1
   21a1c:	20c00115 	stw	r3,4(r4)
   21a20:	1145c83a 	sub	r2,r2,r5
   21a24:	014000f4 	movhi	r5,3
   21a28:	28a79515 	stw	r2,-25004(r5)
   21a2c:	003fd506 	br	21984 <_malloc_trim_r+0x70>

00021a30 <_free_r>:
   21a30:	28004f26 	beq	r5,zero,21b70 <_free_r+0x140>
   21a34:	defffd04 	addi	sp,sp,-12
   21a38:	dc400115 	stw	r17,4(sp)
   21a3c:	dc000015 	stw	r16,0(sp)
   21a40:	2023883a 	mov	r17,r4
   21a44:	2821883a 	mov	r16,r5
   21a48:	dfc00215 	stw	ra,8(sp)
   21a4c:	00234440 	call	23444 <__malloc_lock>
   21a50:	81ffff17 	ldw	r7,-4(r16)
   21a54:	00bfff84 	movi	r2,-2
   21a58:	80fffe04 	addi	r3,r16,-8
   21a5c:	3884703a 	and	r2,r7,r2
   21a60:	010000b4 	movhi	r4,2
   21a64:	188d883a 	add	r6,r3,r2
   21a68:	211aab04 	addi	r4,r4,27308
   21a6c:	31400117 	ldw	r5,4(r6)
   21a70:	22000217 	ldw	r8,8(r4)
   21a74:	027fff04 	movi	r9,-4
   21a78:	2a4a703a 	and	r5,r5,r9
   21a7c:	41806426 	beq	r8,r6,21c10 <_free_r+0x1e0>
   21a80:	31400115 	stw	r5,4(r6)
   21a84:	39c0004c 	andi	r7,r7,1
   21a88:	3151883a 	add	r8,r6,r5
   21a8c:	3800281e 	bne	r7,zero,21b30 <_free_r+0x100>
   21a90:	82bffe17 	ldw	r10,-8(r16)
   21a94:	42000117 	ldw	r8,4(r8)
   21a98:	01c000b4 	movhi	r7,2
   21a9c:	1a87c83a 	sub	r3,r3,r10
   21aa0:	1a400217 	ldw	r9,8(r3)
   21aa4:	39daad04 	addi	r7,r7,27316
   21aa8:	1285883a 	add	r2,r2,r10
   21aac:	4200004c 	andi	r8,r8,1
   21ab0:	49c04c26 	beq	r9,r7,21be4 <_free_r+0x1b4>
   21ab4:	1a800317 	ldw	r10,12(r3)
   21ab8:	4a800315 	stw	r10,12(r9)
   21abc:	52400215 	stw	r9,8(r10)
   21ac0:	40007126 	beq	r8,zero,21c88 <_free_r+0x258>
   21ac4:	11400054 	ori	r5,r2,1
   21ac8:	19400115 	stw	r5,4(r3)
   21acc:	30800015 	stw	r2,0(r6)
   21ad0:	11408028 	cmpgeui	r5,r2,512
   21ad4:	28002c1e 	bne	r5,zero,21b88 <_free_r+0x158>
   21ad8:	100ad0fa 	srli	r5,r2,3
   21adc:	100cd17a 	srli	r6,r2,5
   21ae0:	00800044 	movi	r2,1
   21ae4:	29400044 	addi	r5,r5,1
   21ae8:	280a90fa 	slli	r5,r5,3
   21aec:	21c00117 	ldw	r7,4(r4)
   21af0:	1184983a 	sll	r2,r2,r6
   21af4:	214b883a 	add	r5,r4,r5
   21af8:	29800017 	ldw	r6,0(r5)
   21afc:	11c4b03a 	or	r2,r2,r7
   21b00:	29fffe04 	addi	r7,r5,-8
   21b04:	19c00315 	stw	r7,12(r3)
   21b08:	19800215 	stw	r6,8(r3)
   21b0c:	20800115 	stw	r2,4(r4)
   21b10:	28c00015 	stw	r3,0(r5)
   21b14:	30c00315 	stw	r3,12(r6)
   21b18:	8809883a 	mov	r4,r17
   21b1c:	dfc00217 	ldw	ra,8(sp)
   21b20:	dc400117 	ldw	r17,4(sp)
   21b24:	dc000017 	ldw	r16,0(sp)
   21b28:	dec00304 	addi	sp,sp,12
   21b2c:	00234681 	jmpi	23468 <__malloc_unlock>
   21b30:	41c00117 	ldw	r7,4(r8)
   21b34:	39c0004c 	andi	r7,r7,1
   21b38:	38000e1e 	bne	r7,zero,21b74 <_free_r+0x144>
   21b3c:	01c000b4 	movhi	r7,2
   21b40:	1145883a 	add	r2,r2,r5
   21b44:	39daad04 	addi	r7,r7,27316
   21b48:	31400217 	ldw	r5,8(r6)
   21b4c:	12400054 	ori	r9,r2,1
   21b50:	1891883a 	add	r8,r3,r2
   21b54:	29c05226 	beq	r5,r7,21ca0 <_free_r+0x270>
   21b58:	31800317 	ldw	r6,12(r6)
   21b5c:	29800315 	stw	r6,12(r5)
   21b60:	31400215 	stw	r5,8(r6)
   21b64:	1a400115 	stw	r9,4(r3)
   21b68:	40800015 	stw	r2,0(r8)
   21b6c:	003fd806 	br	21ad0 <_free_r+0xa0>
   21b70:	f800283a 	ret
   21b74:	11400054 	ori	r5,r2,1
   21b78:	817fff15 	stw	r5,-4(r16)
   21b7c:	30800015 	stw	r2,0(r6)
   21b80:	11408028 	cmpgeui	r5,r2,512
   21b84:	283fd426 	beq	r5,zero,21ad8 <_free_r+0xa8>
   21b88:	100ad27a 	srli	r5,r2,9
   21b8c:	29800168 	cmpgeui	r6,r5,5
   21b90:	3000341e 	bne	r6,zero,21c64 <_free_r+0x234>
   21b94:	100ad1ba 	srli	r5,r2,6
   21b98:	29800e44 	addi	r6,r5,57
   21b9c:	300c90fa 	slli	r6,r6,3
   21ba0:	29c00e04 	addi	r7,r5,56
   21ba4:	218d883a 	add	r6,r4,r6
   21ba8:	31400017 	ldw	r5,0(r6)
   21bac:	31bffe04 	addi	r6,r6,-8
   21bb0:	31404226 	beq	r6,r5,21cbc <_free_r+0x28c>
   21bb4:	01ffff04 	movi	r7,-4
   21bb8:	29000117 	ldw	r4,4(r5)
   21bbc:	21c8703a 	and	r4,r4,r7
   21bc0:	1100022e 	bgeu	r2,r4,21bcc <_free_r+0x19c>
   21bc4:	29400217 	ldw	r5,8(r5)
   21bc8:	317ffb1e 	bne	r6,r5,21bb8 <_free_r+0x188>
   21bcc:	29800317 	ldw	r6,12(r5)
   21bd0:	19800315 	stw	r6,12(r3)
   21bd4:	19400215 	stw	r5,8(r3)
   21bd8:	30c00215 	stw	r3,8(r6)
   21bdc:	28c00315 	stw	r3,12(r5)
   21be0:	003fcd06 	br	21b18 <_free_r+0xe8>
   21be4:	40004d1e 	bne	r8,zero,21d1c <_free_r+0x2ec>
   21be8:	31000317 	ldw	r4,12(r6)
   21bec:	31800217 	ldw	r6,8(r6)
   21bf0:	2885883a 	add	r2,r5,r2
   21bf4:	11400054 	ori	r5,r2,1
   21bf8:	31000315 	stw	r4,12(r6)
   21bfc:	21800215 	stw	r6,8(r4)
   21c00:	19400115 	stw	r5,4(r3)
   21c04:	1887883a 	add	r3,r3,r2
   21c08:	18800015 	stw	r2,0(r3)
   21c0c:	003fc206 	br	21b18 <_free_r+0xe8>
   21c10:	39c0004c 	andi	r7,r7,1
   21c14:	1145883a 	add	r2,r2,r5
   21c18:	3800071e 	bne	r7,zero,21c38 <_free_r+0x208>
   21c1c:	81fffe17 	ldw	r7,-8(r16)
   21c20:	19c7c83a 	sub	r3,r3,r7
   21c24:	19400317 	ldw	r5,12(r3)
   21c28:	19800217 	ldw	r6,8(r3)
   21c2c:	11c5883a 	add	r2,r2,r7
   21c30:	31400315 	stw	r5,12(r6)
   21c34:	29800215 	stw	r6,8(r5)
   21c38:	014000f4 	movhi	r5,3
   21c3c:	11800054 	ori	r6,r2,1
   21c40:	29603d17 	ldw	r5,-32524(r5)
   21c44:	19800115 	stw	r6,4(r3)
   21c48:	20c00215 	stw	r3,8(r4)
   21c4c:	117fb236 	bltu	r2,r5,21b18 <_free_r+0xe8>
   21c50:	008000f4 	movhi	r2,3
   21c54:	11671217 	ldw	r5,-25528(r2)
   21c58:	8809883a 	mov	r4,r17
   21c5c:	00219140 	call	21914 <_malloc_trim_r>
   21c60:	003fad06 	br	21b18 <_free_r+0xe8>
   21c64:	29800568 	cmpgeui	r6,r5,21
   21c68:	30000926 	beq	r6,zero,21c90 <_free_r+0x260>
   21c6c:	29801568 	cmpgeui	r6,r5,85
   21c70:	3000191e 	bne	r6,zero,21cd8 <_free_r+0x2a8>
   21c74:	100ad33a 	srli	r5,r2,12
   21c78:	29801bc4 	addi	r6,r5,111
   21c7c:	300c90fa 	slli	r6,r6,3
   21c80:	29c01b84 	addi	r7,r5,110
   21c84:	003fc706 	br	21ba4 <_free_r+0x174>
   21c88:	1145883a 	add	r2,r2,r5
   21c8c:	003fae06 	br	21b48 <_free_r+0x118>
   21c90:	29801704 	addi	r6,r5,92
   21c94:	300c90fa 	slli	r6,r6,3
   21c98:	29c016c4 	addi	r7,r5,91
   21c9c:	003fc106 	br	21ba4 <_free_r+0x174>
   21ca0:	20c00515 	stw	r3,20(r4)
   21ca4:	20c00415 	stw	r3,16(r4)
   21ca8:	19c00315 	stw	r7,12(r3)
   21cac:	19c00215 	stw	r7,8(r3)
   21cb0:	1a400115 	stw	r9,4(r3)
   21cb4:	40800015 	stw	r2,0(r8)
   21cb8:	003f9706 	br	21b18 <_free_r+0xe8>
   21cbc:	380fd0ba 	srai	r7,r7,2
   21cc0:	00800044 	movi	r2,1
   21cc4:	22000117 	ldw	r8,4(r4)
   21cc8:	11ce983a 	sll	r7,r2,r7
   21ccc:	3a0eb03a 	or	r7,r7,r8
   21cd0:	21c00115 	stw	r7,4(r4)
   21cd4:	003fbe06 	br	21bd0 <_free_r+0x1a0>
   21cd8:	29805568 	cmpgeui	r6,r5,341
   21cdc:	3000051e 	bne	r6,zero,21cf4 <_free_r+0x2c4>
   21ce0:	100ad3fa 	srli	r5,r2,15
   21ce4:	29801e04 	addi	r6,r5,120
   21ce8:	300c90fa 	slli	r6,r6,3
   21cec:	29c01dc4 	addi	r7,r5,119
   21cf0:	003fac06 	br	21ba4 <_free_r+0x174>
   21cf4:	29415568 	cmpgeui	r5,r5,1365
   21cf8:	2800051e 	bne	r5,zero,21d10 <_free_r+0x2e0>
   21cfc:	100ad4ba 	srli	r5,r2,18
   21d00:	29801f44 	addi	r6,r5,125
   21d04:	300c90fa 	slli	r6,r6,3
   21d08:	29c01f04 	addi	r7,r5,124
   21d0c:	003fa506 	br	21ba4 <_free_r+0x174>
   21d10:	0180fe04 	movi	r6,1016
   21d14:	01c01f84 	movi	r7,126
   21d18:	003fa206 	br	21ba4 <_free_r+0x174>
   21d1c:	11000054 	ori	r4,r2,1
   21d20:	19000115 	stw	r4,4(r3)
   21d24:	30800015 	stw	r2,0(r6)
   21d28:	003f7b06 	br	21b18 <_free_r+0xe8>

00021d2c <_fwalk>:
   21d2c:	defffa04 	addi	sp,sp,-24
   21d30:	dd000415 	stw	r20,16(sp)
   21d34:	dcc00315 	stw	r19,12(sp)
   21d38:	dc800215 	stw	r18,8(sp)
   21d3c:	dfc00515 	stw	ra,20(sp)
   21d40:	dc400115 	stw	r17,4(sp)
   21d44:	dc000015 	stw	r16,0(sp)
   21d48:	2827883a 	mov	r19,r5
   21d4c:	2480b804 	addi	r18,r4,736
   21d50:	0029883a 	mov	r20,zero
   21d54:	94400117 	ldw	r17,4(r18)
   21d58:	94000217 	ldw	r16,8(r18)
   21d5c:	8c7fffc4 	addi	r17,r17,-1
   21d60:	88000d16 	blt	r17,zero,21d98 <_fwalk+0x6c>
   21d64:	8080030b 	ldhu	r2,12(r16)
   21d68:	8c7fffc4 	addi	r17,r17,-1
   21d6c:	108000b0 	cmpltui	r2,r2,2
   21d70:	1000061e 	bne	r2,zero,21d8c <_fwalk+0x60>
   21d74:	8080038f 	ldh	r2,14(r16)
   21d78:	8009883a 	mov	r4,r16
   21d7c:	10bfffe0 	cmpeqi	r2,r2,-1
   21d80:	1000021e 	bne	r2,zero,21d8c <_fwalk+0x60>
   21d84:	983ee83a 	callr	r19
   21d88:	a0a8b03a 	or	r20,r20,r2
   21d8c:	88bfffd8 	cmpnei	r2,r17,-1
   21d90:	84001a04 	addi	r16,r16,104
   21d94:	103ff31e 	bne	r2,zero,21d64 <_fwalk+0x38>
   21d98:	94800017 	ldw	r18,0(r18)
   21d9c:	903fed1e 	bne	r18,zero,21d54 <_fwalk+0x28>
   21da0:	a005883a 	mov	r2,r20
   21da4:	dfc00517 	ldw	ra,20(sp)
   21da8:	dd000417 	ldw	r20,16(sp)
   21dac:	dcc00317 	ldw	r19,12(sp)
   21db0:	dc800217 	ldw	r18,8(sp)
   21db4:	dc400117 	ldw	r17,4(sp)
   21db8:	dc000017 	ldw	r16,0(sp)
   21dbc:	dec00604 	addi	sp,sp,24
   21dc0:	f800283a 	ret

00021dc4 <_fwalk_reent>:
   21dc4:	defff904 	addi	sp,sp,-28
   21dc8:	dd400515 	stw	r21,20(sp)
   21dcc:	dd000415 	stw	r20,16(sp)
   21dd0:	dcc00315 	stw	r19,12(sp)
   21dd4:	dc800215 	stw	r18,8(sp)
   21dd8:	dfc00615 	stw	ra,24(sp)
   21ddc:	dc400115 	stw	r17,4(sp)
   21de0:	dc000015 	stw	r16,0(sp)
   21de4:	202b883a 	mov	r21,r4
   21de8:	2827883a 	mov	r19,r5
   21dec:	2480b804 	addi	r18,r4,736
   21df0:	0029883a 	mov	r20,zero
   21df4:	94400117 	ldw	r17,4(r18)
   21df8:	94000217 	ldw	r16,8(r18)
   21dfc:	8c7fffc4 	addi	r17,r17,-1
   21e00:	88000e16 	blt	r17,zero,21e3c <_fwalk_reent+0x78>
   21e04:	8080030b 	ldhu	r2,12(r16)
   21e08:	8c7fffc4 	addi	r17,r17,-1
   21e0c:	108000b0 	cmpltui	r2,r2,2
   21e10:	1000071e 	bne	r2,zero,21e30 <_fwalk_reent+0x6c>
   21e14:	8080038f 	ldh	r2,14(r16)
   21e18:	800b883a 	mov	r5,r16
   21e1c:	a809883a 	mov	r4,r21
   21e20:	10bfffe0 	cmpeqi	r2,r2,-1
   21e24:	1000021e 	bne	r2,zero,21e30 <_fwalk_reent+0x6c>
   21e28:	983ee83a 	callr	r19
   21e2c:	a0a8b03a 	or	r20,r20,r2
   21e30:	88bfffd8 	cmpnei	r2,r17,-1
   21e34:	84001a04 	addi	r16,r16,104
   21e38:	103ff21e 	bne	r2,zero,21e04 <_fwalk_reent+0x40>
   21e3c:	94800017 	ldw	r18,0(r18)
   21e40:	903fec1e 	bne	r18,zero,21df4 <_fwalk_reent+0x30>
   21e44:	a005883a 	mov	r2,r20
   21e48:	dfc00617 	ldw	ra,24(sp)
   21e4c:	dd400517 	ldw	r21,20(sp)
   21e50:	dd000417 	ldw	r20,16(sp)
   21e54:	dcc00317 	ldw	r19,12(sp)
   21e58:	dc800217 	ldw	r18,8(sp)
   21e5c:	dc400117 	ldw	r17,4(sp)
   21e60:	dc000017 	ldw	r16,0(sp)
   21e64:	dec00704 	addi	sp,sp,28
   21e68:	f800283a 	ret

00021e6c <_malloc_r>:
   21e6c:	defff604 	addi	sp,sp,-40
   21e70:	dc400115 	stw	r17,4(sp)
   21e74:	2c4002c4 	addi	r17,r5,11
   21e78:	dc800215 	stw	r18,8(sp)
   21e7c:	dfc00915 	stw	ra,36(sp)
   21e80:	df000815 	stw	fp,32(sp)
   21e84:	ddc00715 	stw	r23,28(sp)
   21e88:	dd800615 	stw	r22,24(sp)
   21e8c:	dd400515 	stw	r21,20(sp)
   21e90:	dd000415 	stw	r20,16(sp)
   21e94:	dcc00315 	stw	r19,12(sp)
   21e98:	dc000015 	stw	r16,0(sp)
   21e9c:	888005e8 	cmpgeui	r2,r17,23
   21ea0:	2025883a 	mov	r18,r4
   21ea4:	10001b1e 	bne	r2,zero,21f14 <_malloc_r+0xa8>
   21ea8:	29400468 	cmpgeui	r5,r5,17
   21eac:	2800821e 	bne	r5,zero,220b8 <_malloc_r+0x24c>
   21eb0:	00234440 	call	23444 <__malloc_lock>
   21eb4:	04400404 	movi	r17,16
   21eb8:	00800604 	movi	r2,24
   21ebc:	01c00084 	movi	r7,2
   21ec0:	04c000b4 	movhi	r19,2
   21ec4:	9cdaab04 	addi	r19,r19,27308
   21ec8:	9885883a 	add	r2,r19,r2
   21ecc:	14000117 	ldw	r16,4(r2)
   21ed0:	10fffe04 	addi	r3,r2,-8
   21ed4:	80c08b26 	beq	r16,r3,22104 <_malloc_r+0x298>
   21ed8:	80800117 	ldw	r2,4(r16)
   21edc:	81000317 	ldw	r4,12(r16)
   21ee0:	00ffff04 	movi	r3,-4
   21ee4:	10c4703a 	and	r2,r2,r3
   21ee8:	81400217 	ldw	r5,8(r16)
   21eec:	8085883a 	add	r2,r16,r2
   21ef0:	10c00117 	ldw	r3,4(r2)
   21ef4:	29000315 	stw	r4,12(r5)
   21ef8:	21400215 	stw	r5,8(r4)
   21efc:	18c00054 	ori	r3,r3,1
   21f00:	10c00115 	stw	r3,4(r2)
   21f04:	9009883a 	mov	r4,r18
   21f08:	00234680 	call	23468 <__malloc_unlock>
   21f0c:	80800204 	addi	r2,r16,8
   21f10:	00006c06 	br	220c4 <_malloc_r+0x258>
   21f14:	00bffe04 	movi	r2,-8
   21f18:	88a2703a 	and	r17,r17,r2
   21f1c:	88006616 	blt	r17,zero,220b8 <_malloc_r+0x24c>
   21f20:	89406536 	bltu	r17,r5,220b8 <_malloc_r+0x24c>
   21f24:	00234440 	call	23444 <__malloc_lock>
   21f28:	88807e28 	cmpgeui	r2,r17,504
   21f2c:	10012226 	beq	r2,zero,223b8 <_malloc_r+0x54c>
   21f30:	8804d27a 	srli	r2,r17,9
   21f34:	10006f26 	beq	r2,zero,220f4 <_malloc_r+0x288>
   21f38:	10c00168 	cmpgeui	r3,r2,5
   21f3c:	1800fe1e 	bne	r3,zero,22338 <_malloc_r+0x4cc>
   21f40:	8804d1ba 	srli	r2,r17,6
   21f44:	11c00e44 	addi	r7,r2,57
   21f48:	380890fa 	slli	r4,r7,3
   21f4c:	12000e04 	addi	r8,r2,56
   21f50:	04c000b4 	movhi	r19,2
   21f54:	9cdaab04 	addi	r19,r19,27308
   21f58:	9909883a 	add	r4,r19,r4
   21f5c:	24000117 	ldw	r16,4(r4)
   21f60:	213ffe04 	addi	r4,r4,-8
   21f64:	24000b26 	beq	r4,r16,21f94 <_malloc_r+0x128>
   21f68:	01bfff04 	movi	r6,-4
   21f6c:	00000306 	br	21f7c <_malloc_r+0x110>
   21f70:	1800d60e 	bge	r3,zero,222cc <_malloc_r+0x460>
   21f74:	84000317 	ldw	r16,12(r16)
   21f78:	24000626 	beq	r4,r16,21f94 <_malloc_r+0x128>
   21f7c:	80800117 	ldw	r2,4(r16)
   21f80:	1184703a 	and	r2,r2,r6
   21f84:	1447c83a 	sub	r3,r2,r17
   21f88:	19400408 	cmpgei	r5,r3,16
   21f8c:	283ff826 	beq	r5,zero,21f70 <_malloc_r+0x104>
   21f90:	400f883a 	mov	r7,r8
   21f94:	9c000417 	ldw	r16,16(r19)
   21f98:	024000b4 	movhi	r9,2
   21f9c:	4a5aad04 	addi	r9,r9,27316
   21fa0:	82405f26 	beq	r16,r9,22120 <_malloc_r+0x2b4>
   21fa4:	80c00117 	ldw	r3,4(r16)
   21fa8:	00bfff04 	movi	r2,-4
   21fac:	1884703a 	and	r2,r3,r2
   21fb0:	1447c83a 	sub	r3,r2,r17
   21fb4:	19000410 	cmplti	r4,r3,16
   21fb8:	20010a26 	beq	r4,zero,223e4 <_malloc_r+0x578>
   21fbc:	9a400515 	stw	r9,20(r19)
   21fc0:	9a400415 	stw	r9,16(r19)
   21fc4:	1800ff0e 	bge	r3,zero,223c4 <_malloc_r+0x558>
   21fc8:	10c08028 	cmpgeui	r3,r2,512
   21fcc:	1800c11e 	bne	r3,zero,222d4 <_malloc_r+0x468>
   21fd0:	1006d0fa 	srli	r3,r2,3
   21fd4:	1008d17a 	srli	r4,r2,5
   21fd8:	00800044 	movi	r2,1
   21fdc:	18c00044 	addi	r3,r3,1
   21fe0:	180690fa 	slli	r3,r3,3
   21fe4:	99400117 	ldw	r5,4(r19)
   21fe8:	1104983a 	sll	r2,r2,r4
   21fec:	98c7883a 	add	r3,r19,r3
   21ff0:	19000017 	ldw	r4,0(r3)
   21ff4:	1144b03a 	or	r2,r2,r5
   21ff8:	197ffe04 	addi	r5,r3,-8
   21ffc:	81400315 	stw	r5,12(r16)
   22000:	81000215 	stw	r4,8(r16)
   22004:	98800115 	stw	r2,4(r19)
   22008:	1c000015 	stw	r16,0(r3)
   2200c:	24000315 	stw	r16,12(r4)
   22010:	3807d0ba 	srai	r3,r7,2
   22014:	01000044 	movi	r4,1
   22018:	20c8983a 	sll	r4,r4,r3
   2201c:	11004536 	bltu	r2,r4,22134 <_malloc_r+0x2c8>
   22020:	2086703a 	and	r3,r4,r2
   22024:	18000a1e 	bne	r3,zero,22050 <_malloc_r+0x1e4>
   22028:	00ffff04 	movi	r3,-4
   2202c:	2109883a 	add	r4,r4,r4
   22030:	38ce703a 	and	r7,r7,r3
   22034:	2086703a 	and	r3,r4,r2
   22038:	39c00104 	addi	r7,r7,4
   2203c:	1800041e 	bne	r3,zero,22050 <_malloc_r+0x1e4>
   22040:	2109883a 	add	r4,r4,r4
   22044:	2086703a 	and	r3,r4,r2
   22048:	39c00104 	addi	r7,r7,4
   2204c:	183ffc26 	beq	r3,zero,22040 <_malloc_r+0x1d4>
   22050:	02bfff04 	movi	r10,-4
   22054:	381690fa 	slli	r11,r7,3
   22058:	3819883a 	mov	r12,r7
   2205c:	9ad7883a 	add	r11,r19,r11
   22060:	5811883a 	mov	r8,r11
   22064:	40800317 	ldw	r2,12(r8)
   22068:	4080bc26 	beq	r8,r2,2235c <_malloc_r+0x4f0>
   2206c:	10c00117 	ldw	r3,4(r2)
   22070:	1021883a 	mov	r16,r2
   22074:	10800317 	ldw	r2,12(r2)
   22078:	1a86703a 	and	r3,r3,r10
   2207c:	1c4bc83a 	sub	r5,r3,r17
   22080:	29800410 	cmplti	r6,r5,16
   22084:	3000ba26 	beq	r6,zero,22370 <_malloc_r+0x504>
   22088:	283ff716 	blt	r5,zero,22068 <_malloc_r+0x1fc>
   2208c:	80c7883a 	add	r3,r16,r3
   22090:	19400117 	ldw	r5,4(r3)
   22094:	81800217 	ldw	r6,8(r16)
   22098:	9009883a 	mov	r4,r18
   2209c:	29400054 	ori	r5,r5,1
   220a0:	19400115 	stw	r5,4(r3)
   220a4:	30800315 	stw	r2,12(r6)
   220a8:	11800215 	stw	r6,8(r2)
   220ac:	00234680 	call	23468 <__malloc_unlock>
   220b0:	80800204 	addi	r2,r16,8
   220b4:	00000306 	br	220c4 <_malloc_r+0x258>
   220b8:	00800304 	movi	r2,12
   220bc:	90800015 	stw	r2,0(r18)
   220c0:	0005883a 	mov	r2,zero
   220c4:	dfc00917 	ldw	ra,36(sp)
   220c8:	df000817 	ldw	fp,32(sp)
   220cc:	ddc00717 	ldw	r23,28(sp)
   220d0:	dd800617 	ldw	r22,24(sp)
   220d4:	dd400517 	ldw	r21,20(sp)
   220d8:	dd000417 	ldw	r20,16(sp)
   220dc:	dcc00317 	ldw	r19,12(sp)
   220e0:	dc800217 	ldw	r18,8(sp)
   220e4:	dc400117 	ldw	r17,4(sp)
   220e8:	dc000017 	ldw	r16,0(sp)
   220ec:	dec00a04 	addi	sp,sp,40
   220f0:	f800283a 	ret
   220f4:	01008004 	movi	r4,512
   220f8:	01c01004 	movi	r7,64
   220fc:	02000fc4 	movi	r8,63
   22100:	003f9306 	br	21f50 <_malloc_r+0xe4>
   22104:	14000317 	ldw	r16,12(r2)
   22108:	39c00084 	addi	r7,r7,2
   2210c:	143f721e 	bne	r2,r16,21ed8 <_malloc_r+0x6c>
   22110:	9c000417 	ldw	r16,16(r19)
   22114:	024000b4 	movhi	r9,2
   22118:	4a5aad04 	addi	r9,r9,27316
   2211c:	827fa11e 	bne	r16,r9,21fa4 <_malloc_r+0x138>
   22120:	3807d0ba 	srai	r3,r7,2
   22124:	01000044 	movi	r4,1
   22128:	98800117 	ldw	r2,4(r19)
   2212c:	20c8983a 	sll	r4,r4,r3
   22130:	113fbb2e 	bgeu	r2,r4,22020 <_malloc_r+0x1b4>
   22134:	9c000217 	ldw	r16,8(r19)
   22138:	00bfff04 	movi	r2,-4
   2213c:	85400117 	ldw	r21,4(r16)
   22140:	a8ac703a 	and	r22,r21,r2
   22144:	b4400336 	bltu	r22,r17,22154 <_malloc_r+0x2e8>
   22148:	b445c83a 	sub	r2,r22,r17
   2214c:	10c00408 	cmpgei	r3,r2,16
   22150:	1800541e 	bne	r3,zero,222a4 <_malloc_r+0x438>
   22154:	008000f4 	movhi	r2,3
   22158:	10a03c17 	ldw	r2,-32528(r2)
   2215c:	00c000f4 	movhi	r3,3
   22160:	1d671217 	ldw	r21,-25528(r3)
   22164:	10bfffd8 	cmpnei	r2,r2,-1
   22168:	85b9883a 	add	fp,r16,r22
   2216c:	8d6b883a 	add	r21,r17,r21
   22170:	1000d626 	beq	r2,zero,224cc <_malloc_r+0x660>
   22174:	ad4403c4 	addi	r21,r21,4111
   22178:	00bc0004 	movi	r2,-4096
   2217c:	a8aa703a 	and	r21,r21,r2
   22180:	a80b883a 	mov	r5,r21
   22184:	9009883a 	mov	r4,r18
   22188:	002283c0 	call	2283c <_sbrk_r>
   2218c:	102f883a 	mov	r23,r2
   22190:	10bfffd8 	cmpnei	r2,r2,-1
   22194:	1000a826 	beq	r2,zero,22438 <_malloc_r+0x5cc>
   22198:	bf00a636 	bltu	r23,fp,22434 <_malloc_r+0x5c8>
   2219c:	008000f4 	movhi	r2,3
   221a0:	15279517 	ldw	r20,-25004(r2)
   221a4:	ad29883a 	add	r20,r21,r20
   221a8:	15279515 	stw	r20,-25004(r2)
   221ac:	a007883a 	mov	r3,r20
   221b0:	e5c0ec26 	beq	fp,r23,22564 <_malloc_r+0x6f8>
   221b4:	008000f4 	movhi	r2,3
   221b8:	10a03c17 	ldw	r2,-32528(r2)
   221bc:	10bfffd8 	cmpnei	r2,r2,-1
   221c0:	1000ef26 	beq	r2,zero,22580 <_malloc_r+0x714>
   221c4:	bf39c83a 	sub	fp,r23,fp
   221c8:	e0c7883a 	add	r3,fp,r3
   221cc:	008000f4 	movhi	r2,3
   221d0:	10e79515 	stw	r3,-25004(r2)
   221d4:	bf0001cc 	andi	fp,r23,7
   221d8:	e000c526 	beq	fp,zero,224f0 <_malloc_r+0x684>
   221dc:	bf2fc83a 	sub	r23,r23,fp
   221e0:	bdc00204 	addi	r23,r23,8
   221e4:	05040204 	movi	r20,4104
   221e8:	a729c83a 	sub	r20,r20,fp
   221ec:	bd6b883a 	add	r21,r23,r21
   221f0:	a569c83a 	sub	r20,r20,r21
   221f4:	a503ffcc 	andi	r20,r20,4095
   221f8:	a00b883a 	mov	r5,r20
   221fc:	9009883a 	mov	r4,r18
   22200:	002283c0 	call	2283c <_sbrk_r>
   22204:	10ffffe0 	cmpeqi	r3,r2,-1
   22208:	1800f31e 	bne	r3,zero,225d8 <_malloc_r+0x76c>
   2220c:	15c5c83a 	sub	r2,r2,r23
   22210:	152b883a 	add	r21,r2,r20
   22214:	008000f4 	movhi	r2,3
   22218:	11679517 	ldw	r5,-25004(r2)
   2221c:	9dc00215 	stw	r23,8(r19)
   22220:	ad400054 	ori	r21,r21,1
   22224:	a169883a 	add	r20,r20,r5
   22228:	15279515 	stw	r20,-25004(r2)
   2222c:	bd400115 	stw	r21,4(r23)
   22230:	84c0d626 	beq	r16,r19,2258c <_malloc_r+0x720>
   22234:	b0800428 	cmpgeui	r2,r22,16
   22238:	1000d626 	beq	r2,zero,22594 <_malloc_r+0x728>
   2223c:	80c00117 	ldw	r3,4(r16)
   22240:	013ffe04 	movi	r4,-8
   22244:	b0bffd04 	addi	r2,r22,-12
   22248:	1104703a 	and	r2,r2,r4
   2224c:	18c0004c 	andi	r3,r3,1
   22250:	1886b03a 	or	r3,r3,r2
   22254:	80c00115 	stw	r3,4(r16)
   22258:	01000144 	movi	r4,5
   2225c:	8087883a 	add	r3,r16,r2
   22260:	19000115 	stw	r4,4(r3)
   22264:	19000215 	stw	r4,8(r3)
   22268:	10800428 	cmpgeui	r2,r2,16
   2226c:	1000df1e 	bne	r2,zero,225ec <_malloc_r+0x780>
   22270:	bd400117 	ldw	r21,4(r23)
   22274:	b821883a 	mov	r16,r23
   22278:	008000f4 	movhi	r2,3
   2227c:	10a71117 	ldw	r2,-25532(r2)
   22280:	1500022e 	bgeu	r2,r20,2228c <_malloc_r+0x420>
   22284:	008000f4 	movhi	r2,3
   22288:	15271115 	stw	r20,-25532(r2)
   2228c:	008000f4 	movhi	r2,3
   22290:	10a71017 	ldw	r2,-25536(r2)
   22294:	15006a2e 	bgeu	r2,r20,22440 <_malloc_r+0x5d4>
   22298:	008000f4 	movhi	r2,3
   2229c:	15271015 	stw	r20,-25536(r2)
   222a0:	00006706 	br	22440 <_malloc_r+0x5d4>
   222a4:	88c00054 	ori	r3,r17,1
   222a8:	80c00115 	stw	r3,4(r16)
   222ac:	8463883a 	add	r17,r16,r17
   222b0:	10800054 	ori	r2,r2,1
   222b4:	9c400215 	stw	r17,8(r19)
   222b8:	88800115 	stw	r2,4(r17)
   222bc:	9009883a 	mov	r4,r18
   222c0:	00234680 	call	23468 <__malloc_unlock>
   222c4:	80800204 	addi	r2,r16,8
   222c8:	003f7e06 	br	220c4 <_malloc_r+0x258>
   222cc:	81000317 	ldw	r4,12(r16)
   222d0:	003f0506 	br	21ee8 <_malloc_r+0x7c>
   222d4:	1006d27a 	srli	r3,r2,9
   222d8:	19000168 	cmpgeui	r4,r3,5
   222dc:	20005026 	beq	r4,zero,22420 <_malloc_r+0x5b4>
   222e0:	19000568 	cmpgeui	r4,r3,21
   222e4:	20008c1e 	bne	r4,zero,22518 <_malloc_r+0x6ac>
   222e8:	19401704 	addi	r5,r3,92
   222ec:	280a90fa 	slli	r5,r5,3
   222f0:	190016c4 	addi	r4,r3,91
   222f4:	994b883a 	add	r5,r19,r5
   222f8:	28c00017 	ldw	r3,0(r5)
   222fc:	297ffe04 	addi	r5,r5,-8
   22300:	28c07426 	beq	r5,r3,224d4 <_malloc_r+0x668>
   22304:	01bfff04 	movi	r6,-4
   22308:	19000117 	ldw	r4,4(r3)
   2230c:	2188703a 	and	r4,r4,r6
   22310:	1100022e 	bgeu	r2,r4,2231c <_malloc_r+0x4b0>
   22314:	18c00217 	ldw	r3,8(r3)
   22318:	28fffb1e 	bne	r5,r3,22308 <_malloc_r+0x49c>
   2231c:	19400317 	ldw	r5,12(r3)
   22320:	98800117 	ldw	r2,4(r19)
   22324:	81400315 	stw	r5,12(r16)
   22328:	80c00215 	stw	r3,8(r16)
   2232c:	2c000215 	stw	r16,8(r5)
   22330:	1c000315 	stw	r16,12(r3)
   22334:	003f3606 	br	22010 <_malloc_r+0x1a4>
   22338:	10c00568 	cmpgeui	r3,r2,21
   2233c:	18004a26 	beq	r3,zero,22468 <_malloc_r+0x5fc>
   22340:	10c01568 	cmpgeui	r3,r2,85
   22344:	18007b1e 	bne	r3,zero,22534 <_malloc_r+0x6c8>
   22348:	8804d33a 	srli	r2,r17,12
   2234c:	11c01bc4 	addi	r7,r2,111
   22350:	380890fa 	slli	r4,r7,3
   22354:	12001b84 	addi	r8,r2,110
   22358:	003efd06 	br	21f50 <_malloc_r+0xe4>
   2235c:	63000044 	addi	r12,r12,1
   22360:	608000cc 	andi	r2,r12,3
   22364:	42000204 	addi	r8,r8,8
   22368:	103f3e1e 	bne	r2,zero,22064 <_malloc_r+0x1f8>
   2236c:	00004506 	br	22484 <_malloc_r+0x618>
   22370:	81000217 	ldw	r4,8(r16)
   22374:	89800054 	ori	r6,r17,1
   22378:	81800115 	stw	r6,4(r16)
   2237c:	20800315 	stw	r2,12(r4)
   22380:	11000215 	stw	r4,8(r2)
   22384:	8463883a 	add	r17,r16,r17
   22388:	9c400515 	stw	r17,20(r19)
   2238c:	9c400415 	stw	r17,16(r19)
   22390:	28800054 	ori	r2,r5,1
   22394:	88800115 	stw	r2,4(r17)
   22398:	8a400315 	stw	r9,12(r17)
   2239c:	8a400215 	stw	r9,8(r17)
   223a0:	80c7883a 	add	r3,r16,r3
   223a4:	19400015 	stw	r5,0(r3)
   223a8:	9009883a 	mov	r4,r18
   223ac:	00234680 	call	23468 <__malloc_unlock>
   223b0:	80800204 	addi	r2,r16,8
   223b4:	003f4306 	br	220c4 <_malloc_r+0x258>
   223b8:	880ed0fa 	srli	r7,r17,3
   223bc:	88800204 	addi	r2,r17,8
   223c0:	003ebf06 	br	21ec0 <_malloc_r+0x54>
   223c4:	8085883a 	add	r2,r16,r2
   223c8:	10c00117 	ldw	r3,4(r2)
   223cc:	9009883a 	mov	r4,r18
   223d0:	18c00054 	ori	r3,r3,1
   223d4:	10c00115 	stw	r3,4(r2)
   223d8:	00234680 	call	23468 <__malloc_unlock>
   223dc:	80800204 	addi	r2,r16,8
   223e0:	003f3806 	br	220c4 <_malloc_r+0x258>
   223e4:	89000054 	ori	r4,r17,1
   223e8:	81000115 	stw	r4,4(r16)
   223ec:	8463883a 	add	r17,r16,r17
   223f0:	9c400515 	stw	r17,20(r19)
   223f4:	9c400415 	stw	r17,16(r19)
   223f8:	19000054 	ori	r4,r3,1
   223fc:	89000115 	stw	r4,4(r17)
   22400:	8085883a 	add	r2,r16,r2
   22404:	8a400315 	stw	r9,12(r17)
   22408:	8a400215 	stw	r9,8(r17)
   2240c:	10c00015 	stw	r3,0(r2)
   22410:	9009883a 	mov	r4,r18
   22414:	00234680 	call	23468 <__malloc_unlock>
   22418:	80800204 	addi	r2,r16,8
   2241c:	003f2906 	br	220c4 <_malloc_r+0x258>
   22420:	1006d1ba 	srli	r3,r2,6
   22424:	19400e44 	addi	r5,r3,57
   22428:	280a90fa 	slli	r5,r5,3
   2242c:	19000e04 	addi	r4,r3,56
   22430:	003fb006 	br	222f4 <_malloc_r+0x488>
   22434:	84c04626 	beq	r16,r19,22550 <_malloc_r+0x6e4>
   22438:	9c000217 	ldw	r16,8(r19)
   2243c:	85400117 	ldw	r21,4(r16)
   22440:	00bfff04 	movi	r2,-4
   22444:	a8aa703a 	and	r21,r21,r2
   22448:	ac45c83a 	sub	r2,r21,r17
   2244c:	ac400236 	bltu	r21,r17,22458 <_malloc_r+0x5ec>
   22450:	10c00408 	cmpgei	r3,r2,16
   22454:	183f931e 	bne	r3,zero,222a4 <_malloc_r+0x438>
   22458:	9009883a 	mov	r4,r18
   2245c:	00234680 	call	23468 <__malloc_unlock>
   22460:	0005883a 	mov	r2,zero
   22464:	003f1706 	br	220c4 <_malloc_r+0x258>
   22468:	11c01704 	addi	r7,r2,92
   2246c:	380890fa 	slli	r4,r7,3
   22470:	120016c4 	addi	r8,r2,91
   22474:	003eb606 	br	21f50 <_malloc_r+0xe4>
   22478:	58800217 	ldw	r2,8(r11)
   2247c:	39ffffc4 	addi	r7,r7,-1
   22480:	12c0701e 	bne	r2,r11,22644 <_malloc_r+0x7d8>
   22484:	388000cc 	andi	r2,r7,3
   22488:	5afffe04 	addi	r11,r11,-8
   2248c:	103ffa1e 	bne	r2,zero,22478 <_malloc_r+0x60c>
   22490:	98c00117 	ldw	r3,4(r19)
   22494:	0104303a 	nor	r2,zero,r4
   22498:	10c4703a 	and	r2,r2,r3
   2249c:	98800115 	stw	r2,4(r19)
   224a0:	2109883a 	add	r4,r4,r4
   224a4:	113f2336 	bltu	r2,r4,22134 <_malloc_r+0x2c8>
   224a8:	203f2226 	beq	r4,zero,22134 <_malloc_r+0x2c8>
   224ac:	2086703a 	and	r3,r4,r2
   224b0:	1800041e 	bne	r3,zero,224c4 <_malloc_r+0x658>
   224b4:	2109883a 	add	r4,r4,r4
   224b8:	2086703a 	and	r3,r4,r2
   224bc:	63000104 	addi	r12,r12,4
   224c0:	183ffc26 	beq	r3,zero,224b4 <_malloc_r+0x648>
   224c4:	600f883a 	mov	r7,r12
   224c8:	003ee206 	br	22054 <_malloc_r+0x1e8>
   224cc:	ad400404 	addi	r21,r21,16
   224d0:	003f2b06 	br	22180 <_malloc_r+0x314>
   224d4:	2009d0ba 	srai	r4,r4,2
   224d8:	00800044 	movi	r2,1
   224dc:	99800117 	ldw	r6,4(r19)
   224e0:	1104983a 	sll	r2,r2,r4
   224e4:	1184b03a 	or	r2,r2,r6
   224e8:	98800115 	stw	r2,4(r19)
   224ec:	003f8d06 	br	22324 <_malloc_r+0x4b8>
   224f0:	bd69883a 	add	r20,r23,r21
   224f4:	0529c83a 	sub	r20,zero,r20
   224f8:	a503ffcc 	andi	r20,r20,4095
   224fc:	a00b883a 	mov	r5,r20
   22500:	9009883a 	mov	r4,r18
   22504:	002283c0 	call	2283c <_sbrk_r>
   22508:	10ffffe0 	cmpeqi	r3,r2,-1
   2250c:	183f3f26 	beq	r3,zero,2220c <_malloc_r+0x3a0>
   22510:	0029883a 	mov	r20,zero
   22514:	003f3f06 	br	22214 <_malloc_r+0x3a8>
   22518:	19001568 	cmpgeui	r4,r3,85
   2251c:	2000201e 	bne	r4,zero,225a0 <_malloc_r+0x734>
   22520:	1006d33a 	srli	r3,r2,12
   22524:	19401bc4 	addi	r5,r3,111
   22528:	280a90fa 	slli	r5,r5,3
   2252c:	19001b84 	addi	r4,r3,110
   22530:	003f7006 	br	222f4 <_malloc_r+0x488>
   22534:	10c05568 	cmpgeui	r3,r2,341
   22538:	1800201e 	bne	r3,zero,225bc <_malloc_r+0x750>
   2253c:	8804d3fa 	srli	r2,r17,15
   22540:	11c01e04 	addi	r7,r2,120
   22544:	380890fa 	slli	r4,r7,3
   22548:	12001dc4 	addi	r8,r2,119
   2254c:	003e8006 	br	21f50 <_malloc_r+0xe4>
   22550:	008000f4 	movhi	r2,3
   22554:	10e79517 	ldw	r3,-25004(r2)
   22558:	a8c7883a 	add	r3,r21,r3
   2255c:	10e79515 	stw	r3,-25004(r2)
   22560:	003f1406 	br	221b4 <_malloc_r+0x348>
   22564:	e083ffcc 	andi	r2,fp,4095
   22568:	103f121e 	bne	r2,zero,221b4 <_malloc_r+0x348>
   2256c:	9c000217 	ldw	r16,8(r19)
   22570:	b56b883a 	add	r21,r22,r21
   22574:	ad400054 	ori	r21,r21,1
   22578:	85400115 	stw	r21,4(r16)
   2257c:	003f3e06 	br	22278 <_malloc_r+0x40c>
   22580:	008000f4 	movhi	r2,3
   22584:	15e03c15 	stw	r23,-32528(r2)
   22588:	003f1206 	br	221d4 <_malloc_r+0x368>
   2258c:	b821883a 	mov	r16,r23
   22590:	003f3906 	br	22278 <_malloc_r+0x40c>
   22594:	00800044 	movi	r2,1
   22598:	b8800115 	stw	r2,4(r23)
   2259c:	003fae06 	br	22458 <_malloc_r+0x5ec>
   225a0:	19005568 	cmpgeui	r4,r3,341
   225a4:	2000191e 	bne	r4,zero,2260c <_malloc_r+0x7a0>
   225a8:	1006d3fa 	srli	r3,r2,15
   225ac:	19401e04 	addi	r5,r3,120
   225b0:	280a90fa 	slli	r5,r5,3
   225b4:	19001dc4 	addi	r4,r3,119
   225b8:	003f4e06 	br	222f4 <_malloc_r+0x488>
   225bc:	10815568 	cmpgeui	r2,r2,1365
   225c0:	1000191e 	bne	r2,zero,22628 <_malloc_r+0x7bc>
   225c4:	8804d4ba 	srli	r2,r17,18
   225c8:	11c01f44 	addi	r7,r2,125
   225cc:	380890fa 	slli	r4,r7,3
   225d0:	12001f04 	addi	r8,r2,124
   225d4:	003e5e06 	br	21f50 <_malloc_r+0xe4>
   225d8:	e73ffe04 	addi	fp,fp,-8
   225dc:	af2b883a 	add	r21,r21,fp
   225e0:	adebc83a 	sub	r21,r21,r23
   225e4:	0029883a 	mov	r20,zero
   225e8:	003f0a06 	br	22214 <_malloc_r+0x3a8>
   225ec:	81400204 	addi	r5,r16,8
   225f0:	9009883a 	mov	r4,r18
   225f4:	0021a300 	call	21a30 <_free_r>
   225f8:	9c000217 	ldw	r16,8(r19)
   225fc:	008000f4 	movhi	r2,3
   22600:	15279517 	ldw	r20,-25004(r2)
   22604:	85400117 	ldw	r21,4(r16)
   22608:	003f1b06 	br	22278 <_malloc_r+0x40c>
   2260c:	18c15568 	cmpgeui	r3,r3,1365
   22610:	1800091e 	bne	r3,zero,22638 <_malloc_r+0x7cc>
   22614:	1006d4ba 	srli	r3,r2,18
   22618:	19401f44 	addi	r5,r3,125
   2261c:	280a90fa 	slli	r5,r5,3
   22620:	19001f04 	addi	r4,r3,124
   22624:	003f3306 	br	222f4 <_malloc_r+0x488>
   22628:	0100fe04 	movi	r4,1016
   2262c:	01c01fc4 	movi	r7,127
   22630:	02001f84 	movi	r8,126
   22634:	003e4606 	br	21f50 <_malloc_r+0xe4>
   22638:	0140fe04 	movi	r5,1016
   2263c:	01001f84 	movi	r4,126
   22640:	003f2c06 	br	222f4 <_malloc_r+0x488>
   22644:	98800117 	ldw	r2,4(r19)
   22648:	003f9506 	br	224a0 <_malloc_r+0x634>

0002264c <memcpy>:
   2264c:	30c00430 	cmpltui	r3,r6,16
   22650:	2005883a 	mov	r2,r4
   22654:	18002d1e 	bne	r3,zero,2270c <memcpy+0xc0>
   22658:	2906b03a 	or	r3,r5,r4
   2265c:	18c000cc 	andi	r3,r3,3
   22660:	1800351e 	bne	r3,zero,22738 <memcpy+0xec>
   22664:	32fffc04 	addi	r11,r6,-16
   22668:	5816d13a 	srli	r11,r11,4
   2266c:	280f883a 	mov	r7,r5
   22670:	2007883a 	mov	r3,r4
   22674:	5ac00044 	addi	r11,r11,1
   22678:	5816913a 	slli	r11,r11,4
   2267c:	22d5883a 	add	r10,r4,r11
   22680:	39000117 	ldw	r4,4(r7)
   22684:	3a400017 	ldw	r9,0(r7)
   22688:	3a000217 	ldw	r8,8(r7)
   2268c:	19000115 	stw	r4,4(r3)
   22690:	39000317 	ldw	r4,12(r7)
   22694:	1a400015 	stw	r9,0(r3)
   22698:	1a000215 	stw	r8,8(r3)
   2269c:	19000315 	stw	r4,12(r3)
   226a0:	18c00404 	addi	r3,r3,16
   226a4:	39c00404 	addi	r7,r7,16
   226a8:	50fff51e 	bne	r10,r3,22680 <memcpy+0x34>
   226ac:	3100030c 	andi	r4,r6,12
   226b0:	2acb883a 	add	r5,r5,r11
   226b4:	320003cc 	andi	r8,r6,15
   226b8:	20002226 	beq	r4,zero,22744 <memcpy+0xf8>
   226bc:	280f883a 	mov	r7,r5
   226c0:	1813883a 	mov	r9,r3
   226c4:	39c00104 	addi	r7,r7,4
   226c8:	3abfff17 	ldw	r10,-4(r7)
   226cc:	41c9c83a 	sub	r4,r8,r7
   226d0:	2909883a 	add	r4,r5,r4
   226d4:	4a800015 	stw	r10,0(r9)
   226d8:	21000128 	cmpgeui	r4,r4,4
   226dc:	4a400104 	addi	r9,r9,4
   226e0:	203ff81e 	bne	r4,zero,226c4 <memcpy+0x78>
   226e4:	413fff04 	addi	r4,r8,-4
   226e8:	2008d0ba 	srli	r4,r4,2
   226ec:	318000cc 	andi	r6,r6,3
   226f0:	31ffffc4 	addi	r7,r6,-1
   226f4:	21000044 	addi	r4,r4,1
   226f8:	200890ba 	slli	r4,r4,2
   226fc:	1907883a 	add	r3,r3,r4
   22700:	290b883a 	add	r5,r5,r4
   22704:	3000041e 	bne	r6,zero,22718 <memcpy+0xcc>
   22708:	f800283a 	ret
   2270c:	2007883a 	mov	r3,r4
   22710:	31ffffc4 	addi	r7,r6,-1
   22714:	303ffc26 	beq	r6,zero,22708 <memcpy+0xbc>
   22718:	39c00044 	addi	r7,r7,1
   2271c:	19cf883a 	add	r7,r3,r7
   22720:	29800003 	ldbu	r6,0(r5)
   22724:	18c00044 	addi	r3,r3,1
   22728:	29400044 	addi	r5,r5,1
   2272c:	19bfffc5 	stb	r6,-1(r3)
   22730:	38fffb1e 	bne	r7,r3,22720 <memcpy+0xd4>
   22734:	f800283a 	ret
   22738:	31ffffc4 	addi	r7,r6,-1
   2273c:	2007883a 	mov	r3,r4
   22740:	003ff506 	br	22718 <memcpy+0xcc>
   22744:	400d883a 	mov	r6,r8
   22748:	003ff106 	br	22710 <memcpy+0xc4>

0002274c <memset>:
   2274c:	20c000cc 	andi	r3,r4,3
   22750:	2005883a 	mov	r2,r4
   22754:	18003626 	beq	r3,zero,22830 <memset+0xe4>
   22758:	31ffffc4 	addi	r7,r6,-1
   2275c:	30003326 	beq	r6,zero,2282c <memset+0xe0>
   22760:	2811883a 	mov	r8,r5
   22764:	2007883a 	mov	r3,r4
   22768:	00000306 	br	22778 <memset+0x2c>
   2276c:	39ffffc4 	addi	r7,r7,-1
   22770:	39bfffe0 	cmpeqi	r6,r7,-1
   22774:	30002d1e 	bne	r6,zero,2282c <memset+0xe0>
   22778:	18c00044 	addi	r3,r3,1
   2277c:	198000cc 	andi	r6,r3,3
   22780:	1a3fffc5 	stb	r8,-1(r3)
   22784:	303ff91e 	bne	r6,zero,2276c <memset+0x20>
   22788:	39000130 	cmpltui	r4,r7,4
   2278c:	2000221e 	bne	r4,zero,22818 <memset+0xcc>
   22790:	29003fcc 	andi	r4,r5,255
   22794:	200c923a 	slli	r6,r4,8
   22798:	3a000430 	cmpltui	r8,r7,16
   2279c:	3108b03a 	or	r4,r6,r4
   227a0:	200c943a 	slli	r6,r4,16
   227a4:	310cb03a 	or	r6,r6,r4
   227a8:	40000e1e 	bne	r8,zero,227e4 <memset+0x98>
   227ac:	393ffc04 	addi	r4,r7,-16
   227b0:	2008d13a 	srli	r4,r4,4
   227b4:	21000044 	addi	r4,r4,1
   227b8:	2008913a 	slli	r4,r4,4
   227bc:	1909883a 	add	r4,r3,r4
   227c0:	19800015 	stw	r6,0(r3)
   227c4:	19800115 	stw	r6,4(r3)
   227c8:	19800215 	stw	r6,8(r3)
   227cc:	19800315 	stw	r6,12(r3)
   227d0:	18c00404 	addi	r3,r3,16
   227d4:	20fffa1e 	bne	r4,r3,227c0 <memset+0x74>
   227d8:	3900030c 	andi	r4,r7,12
   227dc:	39c003cc 	andi	r7,r7,15
   227e0:	20000d26 	beq	r4,zero,22818 <memset+0xcc>
   227e4:	1811883a 	mov	r8,r3
   227e8:	42000104 	addi	r8,r8,4
   227ec:	3a09c83a 	sub	r4,r7,r8
   227f0:	1909883a 	add	r4,r3,r4
   227f4:	21000128 	cmpgeui	r4,r4,4
   227f8:	41bfff15 	stw	r6,-4(r8)
   227fc:	203ffa1e 	bne	r4,zero,227e8 <memset+0x9c>
   22800:	393fff04 	addi	r4,r7,-4
   22804:	2008d0ba 	srli	r4,r4,2
   22808:	39c000cc 	andi	r7,r7,3
   2280c:	21000044 	addi	r4,r4,1
   22810:	200890ba 	slli	r4,r4,2
   22814:	1907883a 	add	r3,r3,r4
   22818:	38000426 	beq	r7,zero,2282c <memset+0xe0>
   2281c:	19cf883a 	add	r7,r3,r7
   22820:	18c00044 	addi	r3,r3,1
   22824:	197fffc5 	stb	r5,-1(r3)
   22828:	38fffd1e 	bne	r7,r3,22820 <memset+0xd4>
   2282c:	f800283a 	ret
   22830:	2007883a 	mov	r3,r4
   22834:	300f883a 	mov	r7,r6
   22838:	003fd306 	br	22788 <memset+0x3c>

0002283c <_sbrk_r>:
   2283c:	defffe04 	addi	sp,sp,-8
   22840:	dc000015 	stw	r16,0(sp)
   22844:	008000f4 	movhi	r2,3
   22848:	2021883a 	mov	r16,r4
   2284c:	2809883a 	mov	r4,r5
   22850:	dfc00115 	stw	ra,4(sp)
   22854:	10271315 	stw	zero,-25524(r2)
   22858:	002389c0 	call	2389c <sbrk>
   2285c:	10ffffd8 	cmpnei	r3,r2,-1
   22860:	18000426 	beq	r3,zero,22874 <_sbrk_r+0x38>
   22864:	dfc00117 	ldw	ra,4(sp)
   22868:	dc000017 	ldw	r16,0(sp)
   2286c:	dec00204 	addi	sp,sp,8
   22870:	f800283a 	ret
   22874:	00c000f4 	movhi	r3,3
   22878:	18e71317 	ldw	r3,-25524(r3)
   2287c:	183ff926 	beq	r3,zero,22864 <_sbrk_r+0x28>
   22880:	80c00015 	stw	r3,0(r16)
   22884:	dfc00117 	ldw	ra,4(sp)
   22888:	dc000017 	ldw	r16,0(sp)
   2288c:	dec00204 	addi	sp,sp,8
   22890:	f800283a 	ret

00022894 <__sread>:
   22894:	defffe04 	addi	sp,sp,-8
   22898:	dc000015 	stw	r16,0(sp)
   2289c:	2821883a 	mov	r16,r5
   228a0:	2940038f 	ldh	r5,14(r5)
   228a4:	dfc00115 	stw	ra,4(sp)
   228a8:	0022d2c0 	call	22d2c <_read_r>
   228ac:	10000716 	blt	r2,zero,228cc <__sread+0x38>
   228b0:	80c01417 	ldw	r3,80(r16)
   228b4:	1887883a 	add	r3,r3,r2
   228b8:	80c01415 	stw	r3,80(r16)
   228bc:	dfc00117 	ldw	ra,4(sp)
   228c0:	dc000017 	ldw	r16,0(sp)
   228c4:	dec00204 	addi	sp,sp,8
   228c8:	f800283a 	ret
   228cc:	80c0030b 	ldhu	r3,12(r16)
   228d0:	18fbffcc 	andi	r3,r3,61439
   228d4:	80c0030d 	sth	r3,12(r16)
   228d8:	dfc00117 	ldw	ra,4(sp)
   228dc:	dc000017 	ldw	r16,0(sp)
   228e0:	dec00204 	addi	sp,sp,8
   228e4:	f800283a 	ret

000228e8 <__seofread>:
   228e8:	0005883a 	mov	r2,zero
   228ec:	f800283a 	ret

000228f0 <__swrite>:
   228f0:	2880030b 	ldhu	r2,12(r5)
   228f4:	defffb04 	addi	sp,sp,-20
   228f8:	dcc00315 	stw	r19,12(sp)
   228fc:	dc800215 	stw	r18,8(sp)
   22900:	dc400115 	stw	r17,4(sp)
   22904:	dc000015 	stw	r16,0(sp)
   22908:	dfc00415 	stw	ra,16(sp)
   2290c:	10c0400c 	andi	r3,r2,256
   22910:	2821883a 	mov	r16,r5
   22914:	2023883a 	mov	r17,r4
   22918:	3025883a 	mov	r18,r6
   2291c:	3827883a 	mov	r19,r7
   22920:	18000d1e 	bne	r3,zero,22958 <__swrite+0x68>
   22924:	8140038f 	ldh	r5,14(r16)
   22928:	10bbffcc 	andi	r2,r2,61439
   2292c:	980f883a 	mov	r7,r19
   22930:	900d883a 	mov	r6,r18
   22934:	8809883a 	mov	r4,r17
   22938:	8080030d 	sth	r2,12(r16)
   2293c:	dfc00417 	ldw	ra,16(sp)
   22940:	dcc00317 	ldw	r19,12(sp)
   22944:	dc800217 	ldw	r18,8(sp)
   22948:	dc400117 	ldw	r17,4(sp)
   2294c:	dc000017 	ldw	r16,0(sp)
   22950:	dec00504 	addi	sp,sp,20
   22954:	0022a6c1 	jmpi	22a6c <_write_r>
   22958:	2940038f 	ldh	r5,14(r5)
   2295c:	01c00084 	movi	r7,2
   22960:	000d883a 	mov	r6,zero
   22964:	0022cc80 	call	22cc8 <_lseek_r>
   22968:	8080030b 	ldhu	r2,12(r16)
   2296c:	003fed06 	br	22924 <__swrite+0x34>

00022970 <__sseek>:
   22970:	defffe04 	addi	sp,sp,-8
   22974:	dc000015 	stw	r16,0(sp)
   22978:	2821883a 	mov	r16,r5
   2297c:	2940038f 	ldh	r5,14(r5)
   22980:	dfc00115 	stw	ra,4(sp)
   22984:	0022cc80 	call	22cc8 <_lseek_r>
   22988:	10ffffd8 	cmpnei	r3,r2,-1
   2298c:	18000826 	beq	r3,zero,229b0 <__sseek+0x40>
   22990:	80c0030b 	ldhu	r3,12(r16)
   22994:	80801415 	stw	r2,80(r16)
   22998:	18c40014 	ori	r3,r3,4096
   2299c:	80c0030d 	sth	r3,12(r16)
   229a0:	dfc00117 	ldw	ra,4(sp)
   229a4:	dc000017 	ldw	r16,0(sp)
   229a8:	dec00204 	addi	sp,sp,8
   229ac:	f800283a 	ret
   229b0:	80c0030b 	ldhu	r3,12(r16)
   229b4:	18fbffcc 	andi	r3,r3,61439
   229b8:	80c0030d 	sth	r3,12(r16)
   229bc:	dfc00117 	ldw	ra,4(sp)
   229c0:	dc000017 	ldw	r16,0(sp)
   229c4:	dec00204 	addi	sp,sp,8
   229c8:	f800283a 	ret

000229cc <__sclose>:
   229cc:	2940038f 	ldh	r5,14(r5)
   229d0:	0022ad01 	jmpi	22ad0 <_close_r>

000229d4 <strlen>:
   229d4:	208000cc 	andi	r2,r4,3
   229d8:	10000926 	beq	r2,zero,22a00 <strlen+0x2c>
   229dc:	2005883a 	mov	r2,r4
   229e0:	00000306 	br	229f0 <strlen+0x1c>
   229e4:	10800044 	addi	r2,r2,1
   229e8:	10c000cc 	andi	r3,r2,3
   229ec:	18000526 	beq	r3,zero,22a04 <strlen+0x30>
   229f0:	10c00007 	ldb	r3,0(r2)
   229f4:	183ffb1e 	bne	r3,zero,229e4 <strlen+0x10>
   229f8:	1105c83a 	sub	r2,r2,r4
   229fc:	f800283a 	ret
   22a00:	2005883a 	mov	r2,r4
   22a04:	11400017 	ldw	r5,0(r2)
   22a08:	01ffbff4 	movhi	r7,65279
   22a0c:	39ffbfc4 	addi	r7,r7,-257
   22a10:	29c7883a 	add	r3,r5,r7
   22a14:	01a02074 	movhi	r6,32897
   22a18:	014a303a 	nor	r5,zero,r5
   22a1c:	1946703a 	and	r3,r3,r5
   22a20:	31a02004 	addi	r6,r6,-32640
   22a24:	1986703a 	and	r3,r3,r6
   22a28:	1800071e 	bne	r3,zero,22a48 <strlen+0x74>
   22a2c:	11400117 	ldw	r5,4(r2)
   22a30:	10800104 	addi	r2,r2,4
   22a34:	29c7883a 	add	r3,r5,r7
   22a38:	014a303a 	nor	r5,zero,r5
   22a3c:	1946703a 	and	r3,r3,r5
   22a40:	1986703a 	and	r3,r3,r6
   22a44:	183ff926 	beq	r3,zero,22a2c <strlen+0x58>
   22a48:	10c00007 	ldb	r3,0(r2)
   22a4c:	183fea26 	beq	r3,zero,229f8 <strlen+0x24>
   22a50:	10c00047 	ldb	r3,1(r2)
   22a54:	10800044 	addi	r2,r2,1
   22a58:	183fe726 	beq	r3,zero,229f8 <strlen+0x24>
   22a5c:	10c00047 	ldb	r3,1(r2)
   22a60:	10800044 	addi	r2,r2,1
   22a64:	183ffa1e 	bne	r3,zero,22a50 <strlen+0x7c>
   22a68:	003fe306 	br	229f8 <strlen+0x24>

00022a6c <_write_r>:
   22a6c:	2807883a 	mov	r3,r5
   22a70:	defffe04 	addi	sp,sp,-8
   22a74:	dc000015 	stw	r16,0(sp)
   22a78:	300b883a 	mov	r5,r6
   22a7c:	008000f4 	movhi	r2,3
   22a80:	380d883a 	mov	r6,r7
   22a84:	2021883a 	mov	r16,r4
   22a88:	1809883a 	mov	r4,r3
   22a8c:	dfc00115 	stw	ra,4(sp)
   22a90:	10271315 	stw	zero,-25524(r2)
   22a94:	00239900 	call	23990 <write>
   22a98:	10ffffd8 	cmpnei	r3,r2,-1
   22a9c:	18000426 	beq	r3,zero,22ab0 <_write_r+0x44>
   22aa0:	dfc00117 	ldw	ra,4(sp)
   22aa4:	dc000017 	ldw	r16,0(sp)
   22aa8:	dec00204 	addi	sp,sp,8
   22aac:	f800283a 	ret
   22ab0:	00c000f4 	movhi	r3,3
   22ab4:	18e71317 	ldw	r3,-25524(r3)
   22ab8:	183ff926 	beq	r3,zero,22aa0 <_write_r+0x34>
   22abc:	80c00015 	stw	r3,0(r16)
   22ac0:	dfc00117 	ldw	ra,4(sp)
   22ac4:	dc000017 	ldw	r16,0(sp)
   22ac8:	dec00204 	addi	sp,sp,8
   22acc:	f800283a 	ret

00022ad0 <_close_r>:
   22ad0:	defffe04 	addi	sp,sp,-8
   22ad4:	dc000015 	stw	r16,0(sp)
   22ad8:	008000f4 	movhi	r2,3
   22adc:	2021883a 	mov	r16,r4
   22ae0:	2809883a 	mov	r4,r5
   22ae4:	dfc00115 	stw	ra,4(sp)
   22ae8:	10271315 	stw	zero,-25524(r2)
   22aec:	0022dcc0 	call	22dcc <close>
   22af0:	10ffffd8 	cmpnei	r3,r2,-1
   22af4:	18000426 	beq	r3,zero,22b08 <_close_r+0x38>
   22af8:	dfc00117 	ldw	ra,4(sp)
   22afc:	dc000017 	ldw	r16,0(sp)
   22b00:	dec00204 	addi	sp,sp,8
   22b04:	f800283a 	ret
   22b08:	00c000f4 	movhi	r3,3
   22b0c:	18e71317 	ldw	r3,-25524(r3)
   22b10:	183ff926 	beq	r3,zero,22af8 <_close_r+0x28>
   22b14:	80c00015 	stw	r3,0(r16)
   22b18:	dfc00117 	ldw	ra,4(sp)
   22b1c:	dc000017 	ldw	r16,0(sp)
   22b20:	dec00204 	addi	sp,sp,8
   22b24:	f800283a 	ret

00022b28 <_fclose_r.part.0>:
   22b28:	defffc04 	addi	sp,sp,-16
   22b2c:	dc800215 	stw	r18,8(sp)
   22b30:	dc400115 	stw	r17,4(sp)
   22b34:	dc000015 	stw	r16,0(sp)
   22b38:	dfc00315 	stw	ra,12(sp)
   22b3c:	2821883a 	mov	r16,r5
   22b40:	2023883a 	mov	r17,r4
   22b44:	002125c0 	call	2125c <__sflush_r>
   22b48:	80c00b17 	ldw	r3,44(r16)
   22b4c:	1025883a 	mov	r18,r2
   22b50:	18000426 	beq	r3,zero,22b64 <_fclose_r.part.0+0x3c>
   22b54:	81400717 	ldw	r5,28(r16)
   22b58:	8809883a 	mov	r4,r17
   22b5c:	183ee83a 	callr	r3
   22b60:	10001916 	blt	r2,zero,22bc8 <_fclose_r.part.0+0xa0>
   22b64:	8080030b 	ldhu	r2,12(r16)
   22b68:	1080200c 	andi	r2,r2,128
   22b6c:	10001a1e 	bne	r2,zero,22bd8 <_fclose_r.part.0+0xb0>
   22b70:	81400c17 	ldw	r5,48(r16)
   22b74:	28000526 	beq	r5,zero,22b8c <_fclose_r.part.0+0x64>
   22b78:	80801004 	addi	r2,r16,64
   22b7c:	28800226 	beq	r5,r2,22b88 <_fclose_r.part.0+0x60>
   22b80:	8809883a 	mov	r4,r17
   22b84:	0021a300 	call	21a30 <_free_r>
   22b88:	80000c15 	stw	zero,48(r16)
   22b8c:	81401117 	ldw	r5,68(r16)
   22b90:	28000326 	beq	r5,zero,22ba0 <_fclose_r.part.0+0x78>
   22b94:	8809883a 	mov	r4,r17
   22b98:	0021a300 	call	21a30 <_free_r>
   22b9c:	80001115 	stw	zero,68(r16)
   22ba0:	00218dc0 	call	218dc <__sfp_lock_acquire>
   22ba4:	8000030d 	sth	zero,12(r16)
   22ba8:	00218e00 	call	218e0 <__sfp_lock_release>
   22bac:	9005883a 	mov	r2,r18
   22bb0:	dfc00317 	ldw	ra,12(sp)
   22bb4:	dc800217 	ldw	r18,8(sp)
   22bb8:	dc400117 	ldw	r17,4(sp)
   22bbc:	dc000017 	ldw	r16,0(sp)
   22bc0:	dec00404 	addi	sp,sp,16
   22bc4:	f800283a 	ret
   22bc8:	8080030b 	ldhu	r2,12(r16)
   22bcc:	04bfffc4 	movi	r18,-1
   22bd0:	1080200c 	andi	r2,r2,128
   22bd4:	103fe626 	beq	r2,zero,22b70 <_fclose_r.part.0+0x48>
   22bd8:	81400417 	ldw	r5,16(r16)
   22bdc:	8809883a 	mov	r4,r17
   22be0:	0021a300 	call	21a30 <_free_r>
   22be4:	003fe206 	br	22b70 <_fclose_r.part.0+0x48>

00022be8 <_fclose_r>:
   22be8:	28001926 	beq	r5,zero,22c50 <_fclose_r+0x68>
   22bec:	defffd04 	addi	sp,sp,-12
   22bf0:	dc000115 	stw	r16,4(sp)
   22bf4:	dfc00215 	stw	ra,8(sp)
   22bf8:	2021883a 	mov	r16,r4
   22bfc:	20000226 	beq	r4,zero,22c08 <_fclose_r+0x20>
   22c00:	20800e17 	ldw	r2,56(r4)
   22c04:	10000c26 	beq	r2,zero,22c38 <_fclose_r+0x50>
   22c08:	2880030f 	ldh	r2,12(r5)
   22c0c:	1000051e 	bne	r2,zero,22c24 <_fclose_r+0x3c>
   22c10:	0005883a 	mov	r2,zero
   22c14:	dfc00217 	ldw	ra,8(sp)
   22c18:	dc000117 	ldw	r16,4(sp)
   22c1c:	dec00304 	addi	sp,sp,12
   22c20:	f800283a 	ret
   22c24:	8009883a 	mov	r4,r16
   22c28:	dfc00217 	ldw	ra,8(sp)
   22c2c:	dc000117 	ldw	r16,4(sp)
   22c30:	dec00304 	addi	sp,sp,12
   22c34:	0022b281 	jmpi	22b28 <_fclose_r.part.0>
   22c38:	d9400015 	stw	r5,0(sp)
   22c3c:	00218cc0 	call	218cc <__sinit>
   22c40:	d9400017 	ldw	r5,0(sp)
   22c44:	2880030f 	ldh	r2,12(r5)
   22c48:	103ff126 	beq	r2,zero,22c10 <_fclose_r+0x28>
   22c4c:	003ff506 	br	22c24 <_fclose_r+0x3c>
   22c50:	0005883a 	mov	r2,zero
   22c54:	f800283a 	ret

00022c58 <fclose>:
   22c58:	20000826 	beq	r4,zero,22c7c <fclose+0x24>
   22c5c:	008000f4 	movhi	r2,3
   22c60:	200b883a 	mov	r5,r4
   22c64:	11203b17 	ldw	r4,-32532(r2)
   22c68:	20000226 	beq	r4,zero,22c74 <fclose+0x1c>
   22c6c:	20800e17 	ldw	r2,56(r4)
   22c70:	10000526 	beq	r2,zero,22c88 <fclose+0x30>
   22c74:	2880030f 	ldh	r2,12(r5)
   22c78:	1000021e 	bne	r2,zero,22c84 <fclose+0x2c>
   22c7c:	0005883a 	mov	r2,zero
   22c80:	f800283a 	ret
   22c84:	0022b281 	jmpi	22b28 <_fclose_r.part.0>
   22c88:	defffd04 	addi	sp,sp,-12
   22c8c:	d9400115 	stw	r5,4(sp)
   22c90:	d9000015 	stw	r4,0(sp)
   22c94:	dfc00215 	stw	ra,8(sp)
   22c98:	00218cc0 	call	218cc <__sinit>
   22c9c:	d9400117 	ldw	r5,4(sp)
   22ca0:	d9000017 	ldw	r4,0(sp)
   22ca4:	2880030f 	ldh	r2,12(r5)
   22ca8:	10000326 	beq	r2,zero,22cb8 <fclose+0x60>
   22cac:	dfc00217 	ldw	ra,8(sp)
   22cb0:	dec00304 	addi	sp,sp,12
   22cb4:	0022b281 	jmpi	22b28 <_fclose_r.part.0>
   22cb8:	0005883a 	mov	r2,zero
   22cbc:	dfc00217 	ldw	ra,8(sp)
   22cc0:	dec00304 	addi	sp,sp,12
   22cc4:	f800283a 	ret

00022cc8 <_lseek_r>:
   22cc8:	2807883a 	mov	r3,r5
   22ccc:	defffe04 	addi	sp,sp,-8
   22cd0:	dc000015 	stw	r16,0(sp)
   22cd4:	300b883a 	mov	r5,r6
   22cd8:	008000f4 	movhi	r2,3
   22cdc:	380d883a 	mov	r6,r7
   22ce0:	2021883a 	mov	r16,r4
   22ce4:	1809883a 	mov	r4,r3
   22ce8:	dfc00115 	stw	ra,4(sp)
   22cec:	10271315 	stw	zero,-25524(r2)
   22cf0:	00232e80 	call	232e8 <lseek>
   22cf4:	10ffffd8 	cmpnei	r3,r2,-1
   22cf8:	18000426 	beq	r3,zero,22d0c <_lseek_r+0x44>
   22cfc:	dfc00117 	ldw	ra,4(sp)
   22d00:	dc000017 	ldw	r16,0(sp)
   22d04:	dec00204 	addi	sp,sp,8
   22d08:	f800283a 	ret
   22d0c:	00c000f4 	movhi	r3,3
   22d10:	18e71317 	ldw	r3,-25524(r3)
   22d14:	183ff926 	beq	r3,zero,22cfc <_lseek_r+0x34>
   22d18:	80c00015 	stw	r3,0(r16)
   22d1c:	dfc00117 	ldw	ra,4(sp)
   22d20:	dc000017 	ldw	r16,0(sp)
   22d24:	dec00204 	addi	sp,sp,8
   22d28:	f800283a 	ret

00022d2c <_read_r>:
   22d2c:	2807883a 	mov	r3,r5
   22d30:	defffe04 	addi	sp,sp,-8
   22d34:	dc000015 	stw	r16,0(sp)
   22d38:	300b883a 	mov	r5,r6
   22d3c:	008000f4 	movhi	r2,3
   22d40:	380d883a 	mov	r6,r7
   22d44:	2021883a 	mov	r16,r4
   22d48:	1809883a 	mov	r4,r3
   22d4c:	dfc00115 	stw	ra,4(sp)
   22d50:	10271315 	stw	zero,-25524(r2)
   22d54:	00237240 	call	23724 <read>
   22d58:	10ffffd8 	cmpnei	r3,r2,-1
   22d5c:	18000426 	beq	r3,zero,22d70 <_read_r+0x44>
   22d60:	dfc00117 	ldw	ra,4(sp)
   22d64:	dc000017 	ldw	r16,0(sp)
   22d68:	dec00204 	addi	sp,sp,8
   22d6c:	f800283a 	ret
   22d70:	00c000f4 	movhi	r3,3
   22d74:	18e71317 	ldw	r3,-25524(r3)
   22d78:	183ff926 	beq	r3,zero,22d60 <_read_r+0x34>
   22d7c:	80c00015 	stw	r3,0(r16)
   22d80:	dfc00117 	ldw	ra,4(sp)
   22d84:	dc000017 	ldw	r16,0(sp)
   22d88:	dec00204 	addi	sp,sp,8
   22d8c:	f800283a 	ret

00022d90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22d90:	defffe04 	addi	sp,sp,-8
   22d94:	dfc00115 	stw	ra,4(sp)
   22d98:	df000015 	stw	fp,0(sp)
   22d9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22da0:	d0a00917 	ldw	r2,-32732(gp)
   22da4:	10000326 	beq	r2,zero,22db4 <alt_get_errno+0x24>
   22da8:	d0a00917 	ldw	r2,-32732(gp)
   22dac:	103ee83a 	callr	r2
   22db0:	00000106 	br	22db8 <alt_get_errno+0x28>
   22db4:	d0a6d904 	addi	r2,gp,-25756
}
   22db8:	e037883a 	mov	sp,fp
   22dbc:	dfc00117 	ldw	ra,4(sp)
   22dc0:	df000017 	ldw	fp,0(sp)
   22dc4:	dec00204 	addi	sp,sp,8
   22dc8:	f800283a 	ret

00022dcc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22dcc:	defffb04 	addi	sp,sp,-20
   22dd0:	dfc00415 	stw	ra,16(sp)
   22dd4:	df000315 	stw	fp,12(sp)
   22dd8:	df000304 	addi	fp,sp,12
   22ddc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22de0:	e0bffd17 	ldw	r2,-12(fp)
   22de4:	10000916 	blt	r2,zero,22e0c <close+0x40>
   22de8:	e0fffd17 	ldw	r3,-12(fp)
   22dec:	1805883a 	mov	r2,r3
   22df0:	1085883a 	add	r2,r2,r2
   22df4:	10c5883a 	add	r2,r2,r3
   22df8:	100490ba 	slli	r2,r2,2
   22dfc:	00c000b4 	movhi	r3,2
   22e00:	18dbb704 	addi	r3,r3,28380
   22e04:	10c5883a 	add	r2,r2,r3
   22e08:	00000106 	br	22e10 <close+0x44>
   22e0c:	0005883a 	mov	r2,zero
   22e10:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   22e14:	e0bfff17 	ldw	r2,-4(fp)
   22e18:	10001926 	beq	r2,zero,22e80 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22e1c:	e0bfff17 	ldw	r2,-4(fp)
   22e20:	10800017 	ldw	r2,0(r2)
   22e24:	10800417 	ldw	r2,16(r2)
   22e28:	10000626 	beq	r2,zero,22e44 <close+0x78>
   22e2c:	e0bfff17 	ldw	r2,-4(fp)
   22e30:	10800017 	ldw	r2,0(r2)
   22e34:	10800417 	ldw	r2,16(r2)
   22e38:	e13fff17 	ldw	r4,-4(fp)
   22e3c:	103ee83a 	callr	r2
   22e40:	00000106 	br	22e48 <close+0x7c>
   22e44:	0005883a 	mov	r2,zero
   22e48:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22e4c:	e13ffd17 	ldw	r4,-12(fp)
   22e50:	002382c0 	call	2382c <alt_release_fd>
    if (rval < 0)
   22e54:	e0bffe17 	ldw	r2,-8(fp)
   22e58:	1000070e 	bge	r2,zero,22e78 <close+0xac>
    {
      ALT_ERRNO = -rval;
   22e5c:	0022d900 	call	22d90 <alt_get_errno>
   22e60:	1007883a 	mov	r3,r2
   22e64:	e0bffe17 	ldw	r2,-8(fp)
   22e68:	0085c83a 	sub	r2,zero,r2
   22e6c:	18800015 	stw	r2,0(r3)
      return -1;
   22e70:	00bfffc4 	movi	r2,-1
   22e74:	00000706 	br	22e94 <close+0xc8>
    }
    return 0;
   22e78:	0005883a 	mov	r2,zero
   22e7c:	00000506 	br	22e94 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22e80:	0022d900 	call	22d90 <alt_get_errno>
   22e84:	1007883a 	mov	r3,r2
   22e88:	00801444 	movi	r2,81
   22e8c:	18800015 	stw	r2,0(r3)
    return -1;
   22e90:	00bfffc4 	movi	r2,-1
  }
}
   22e94:	e037883a 	mov	sp,fp
   22e98:	dfc00117 	ldw	ra,4(sp)
   22e9c:	df000017 	ldw	fp,0(sp)
   22ea0:	dec00204 	addi	sp,sp,8
   22ea4:	f800283a 	ret

00022ea8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22ea8:	defffc04 	addi	sp,sp,-16
   22eac:	df000315 	stw	fp,12(sp)
   22eb0:	df000304 	addi	fp,sp,12
   22eb4:	e13fff15 	stw	r4,-4(fp)
   22eb8:	e17ffe15 	stw	r5,-8(fp)
   22ebc:	e1bffd15 	stw	r6,-12(fp)
  return len;
   22ec0:	e0bffd17 	ldw	r2,-12(fp)
}
   22ec4:	e037883a 	mov	sp,fp
   22ec8:	df000017 	ldw	fp,0(sp)
   22ecc:	dec00104 	addi	sp,sp,4
   22ed0:	f800283a 	ret

00022ed4 <alt_get_errno>:
{
   22ed4:	defffe04 	addi	sp,sp,-8
   22ed8:	dfc00115 	stw	ra,4(sp)
   22edc:	df000015 	stw	fp,0(sp)
   22ee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22ee4:	d0a00917 	ldw	r2,-32732(gp)
   22ee8:	10000326 	beq	r2,zero,22ef8 <alt_get_errno+0x24>
   22eec:	d0a00917 	ldw	r2,-32732(gp)
   22ef0:	103ee83a 	callr	r2
   22ef4:	00000106 	br	22efc <alt_get_errno+0x28>
   22ef8:	d0a6d904 	addi	r2,gp,-25756
}
   22efc:	e037883a 	mov	sp,fp
   22f00:	dfc00117 	ldw	ra,4(sp)
   22f04:	df000017 	ldw	fp,0(sp)
   22f08:	dec00204 	addi	sp,sp,8
   22f0c:	f800283a 	ret

00022f10 <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
   22f10:	defff704 	addi	sp,sp,-36
   22f14:	dfc00615 	stw	ra,24(sp)
   22f18:	df000515 	stw	fp,20(sp)
   22f1c:	df000504 	addi	fp,sp,20
   22f20:	e13ffc15 	stw	r4,-16(fp)
   22f24:	e17ffb15 	stw	r5,-20(fp)
   22f28:	e1800215 	stw	r6,8(fp)
   22f2c:	e1c00315 	stw	r7,12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22f30:	e0bffc17 	ldw	r2,-16(fp)
   22f34:	10000916 	blt	r2,zero,22f5c <fcntl+0x4c>
   22f38:	e0fffc17 	ldw	r3,-16(fp)
   22f3c:	1805883a 	mov	r2,r3
   22f40:	1085883a 	add	r2,r2,r2
   22f44:	10c5883a 	add	r2,r2,r3
   22f48:	100490ba 	slli	r2,r2,2
   22f4c:	00c000b4 	movhi	r3,2
   22f50:	18dbb704 	addi	r3,r3,28380
   22f54:	10c5883a 	add	r2,r2,r3
   22f58:	00000106 	br	22f60 <fcntl+0x50>
   22f5c:	0005883a 	mov	r2,zero
   22f60:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   22f64:	e0bfff17 	ldw	r2,-4(fp)
   22f68:	10002b26 	beq	r2,zero,23018 <fcntl+0x108>
  {
    switch (cmd)
   22f6c:	e0bffb17 	ldw	r2,-20(fp)
   22f70:	108000e0 	cmpeqi	r2,r2,3
   22f74:	1000041e 	bne	r2,zero,22f88 <fcntl+0x78>
   22f78:	e0bffb17 	ldw	r2,-20(fp)
   22f7c:	10800120 	cmpeqi	r2,r2,4
   22f80:	1000071e 	bne	r2,zero,22fa0 <fcntl+0x90>
   22f84:	00001e06 	br	23000 <fcntl+0xf0>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
   22f88:	e0bfff17 	ldw	r2,-4(fp)
   22f8c:	10c00217 	ldw	r3,8(r2)
   22f90:	00900034 	movhi	r2,16384
   22f94:	10bfffc4 	addi	r2,r2,-1
   22f98:	1884703a 	and	r2,r3,r2
   22f9c:	00002306 	br	2302c <fcntl+0x11c>
    case F_SETFL:
      va_start(argp, cmd);
   22fa0:	e0800204 	addi	r2,fp,8
   22fa4:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
   22fa8:	e0bffd17 	ldw	r2,-12(fp)
   22fac:	10c00104 	addi	r3,r2,4
   22fb0:	e0fffd15 	stw	r3,-12(fp)
   22fb4:	10800017 	ldw	r2,0(r2)
   22fb8:	e0bffe15 	stw	r2,-8(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
   22fbc:	e0bfff17 	ldw	r2,-4(fp)
   22fc0:	10c00217 	ldw	r3,8(r2)
   22fc4:	00affdc4 	movi	r2,-16393
   22fc8:	1886703a 	and	r3,r3,r2
   22fcc:	e0bfff17 	ldw	r2,-4(fp)
   22fd0:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
   22fd4:	e0bfff17 	ldw	r2,-4(fp)
   22fd8:	10800217 	ldw	r2,8(r2)
   22fdc:	1007883a 	mov	r3,r2
   22fe0:	e0bffe17 	ldw	r2,-8(fp)
   22fe4:	1090020c 	andi	r2,r2,16392
   22fe8:	1884b03a 	or	r2,r3,r2
   22fec:	1007883a 	mov	r3,r2
   22ff0:	e0bfff17 	ldw	r2,-4(fp)
   22ff4:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
   22ff8:	0005883a 	mov	r2,zero
   22ffc:	00000b06 	br	2302c <fcntl+0x11c>
    default:
      ALT_ERRNO = EINVAL;
   23000:	0022ed40 	call	22ed4 <alt_get_errno>
   23004:	1007883a 	mov	r3,r2
   23008:	00800584 	movi	r2,22
   2300c:	18800015 	stw	r2,0(r3)
      return -1;
   23010:	00bfffc4 	movi	r2,-1
   23014:	00000506 	br	2302c <fcntl+0x11c>
    }
  }

  ALT_ERRNO = EBADFD;
   23018:	0022ed40 	call	22ed4 <alt_get_errno>
   2301c:	1007883a 	mov	r3,r2
   23020:	00801444 	movi	r2,81
   23024:	18800015 	stw	r2,0(r3)
  return -1;
   23028:	00bfffc4 	movi	r2,-1
}
   2302c:	e037883a 	mov	sp,fp
   23030:	dfc00117 	ldw	ra,4(sp)
   23034:	df000017 	ldw	fp,0(sp)
   23038:	dec00404 	addi	sp,sp,16
   2303c:	f800283a 	ret

00023040 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   23040:	defff004 	addi	sp,sp,-64
   23044:	df000f15 	stw	fp,60(sp)
   23048:	df000f04 	addi	fp,sp,60
   2304c:	e13ff315 	stw	r4,-52(fp)
   23050:	e17ff215 	stw	r5,-56(fp)
   23054:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   23058:	00bffa84 	movi	r2,-22
   2305c:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23060:	e0bff317 	ldw	r2,-52(fp)
   23064:	10800828 	cmpgeui	r2,r2,32
   23068:	1000501e 	bne	r2,zero,231ac <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   2306c:	0005303a 	rdctl	r2,status
   23070:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23074:	e0fffd17 	ldw	r3,-12(fp)
   23078:	00bfff84 	movi	r2,-2
   2307c:	1884703a 	and	r2,r3,r2
   23080:	1001703a 	wrctl	status,r2
  return context;
   23084:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   23088:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   2308c:	e0bff317 	ldw	r2,-52(fp)
   23090:	100890fa 	slli	r4,r2,3
   23094:	e0fff117 	ldw	r3,-60(fp)
   23098:	008000f4 	movhi	r2,3
   2309c:	2085883a 	add	r2,r4,r2
   230a0:	10e79f15 	stw	r3,-24964(r2)
    alt_irq[id].context = context;
   230a4:	e0bff317 	ldw	r2,-52(fp)
   230a8:	100890fa 	slli	r4,r2,3
   230ac:	e0fff217 	ldw	r3,-56(fp)
   230b0:	008000f4 	movhi	r2,3
   230b4:	2085883a 	add	r2,r4,r2
   230b8:	10e7a015 	stw	r3,-24960(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   230bc:	e0bff117 	ldw	r2,-60(fp)
   230c0:	10001a26 	beq	r2,zero,2312c <alt_irq_register+0xec>
   230c4:	e0bff317 	ldw	r2,-52(fp)
   230c8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   230cc:	0005303a 	rdctl	r2,status
   230d0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   230d4:	e0fffb17 	ldw	r3,-20(fp)
   230d8:	00bfff84 	movi	r2,-2
   230dc:	1884703a 	and	r2,r3,r2
   230e0:	1001703a 	wrctl	status,r2
  return context;
   230e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   230e8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   230ec:	00c00044 	movi	r3,1
   230f0:	e0bffc17 	ldw	r2,-16(fp)
   230f4:	1884983a 	sll	r2,r3,r2
   230f8:	1007883a 	mov	r3,r2
   230fc:	d0a6da17 	ldw	r2,-25752(gp)
   23100:	1884b03a 	or	r2,r3,r2
   23104:	d0a6da15 	stw	r2,-25752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23108:	d0a6da17 	ldw	r2,-25752(gp)
   2310c:	100170fa 	wrctl	ienable,r2
   23110:	e0bffa17 	ldw	r2,-24(fp)
   23114:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   23118:	e0bff917 	ldw	r2,-28(fp)
   2311c:	1001703a 	wrctl	status,r2
}
   23120:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   23124:	0005883a 	mov	r2,zero
   23128:	00001a06 	br	23194 <alt_irq_register+0x154>
   2312c:	e0bff317 	ldw	r2,-52(fp)
   23130:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   23134:	0005303a 	rdctl	r2,status
   23138:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2313c:	e0fff717 	ldw	r3,-36(fp)
   23140:	00bfff84 	movi	r2,-2
   23144:	1884703a 	and	r2,r3,r2
   23148:	1001703a 	wrctl	status,r2
  return context;
   2314c:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   23150:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   23154:	00c00044 	movi	r3,1
   23158:	e0bff817 	ldw	r2,-32(fp)
   2315c:	1884983a 	sll	r2,r3,r2
   23160:	0084303a 	nor	r2,zero,r2
   23164:	1007883a 	mov	r3,r2
   23168:	d0a6da17 	ldw	r2,-25752(gp)
   2316c:	1884703a 	and	r2,r3,r2
   23170:	d0a6da15 	stw	r2,-25752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23174:	d0a6da17 	ldw	r2,-25752(gp)
   23178:	100170fa 	wrctl	ienable,r2
   2317c:	e0bff617 	ldw	r2,-40(fp)
   23180:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   23184:	e0bff517 	ldw	r2,-44(fp)
   23188:	1001703a 	wrctl	status,r2
}
   2318c:	0001883a 	nop
  return 0;
   23190:	0005883a 	mov	r2,zero
   23194:	e0bfff15 	stw	r2,-4(fp)
   23198:	e0bffe17 	ldw	r2,-8(fp)
   2319c:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   231a0:	e0bff417 	ldw	r2,-48(fp)
   231a4:	1001703a 	wrctl	status,r2
}
   231a8:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   231ac:	e0bfff17 	ldw	r2,-4(fp)
}
   231b0:	e037883a 	mov	sp,fp
   231b4:	df000017 	ldw	fp,0(sp)
   231b8:	dec00104 	addi	sp,sp,4
   231bc:	f800283a 	ret

000231c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   231c0:	defffc04 	addi	sp,sp,-16
   231c4:	df000315 	stw	fp,12(sp)
   231c8:	df000304 	addi	fp,sp,12
   231cc:	e13fff15 	stw	r4,-4(fp)
   231d0:	e17ffe15 	stw	r5,-8(fp)
   231d4:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   231d8:	e0fffe17 	ldw	r3,-8(fp)
   231dc:	e0bfff17 	ldw	r2,-4(fp)
   231e0:	18800c26 	beq	r3,r2,23214 <alt_load_section+0x54>
  {
    while( to != end )
   231e4:	00000806 	br	23208 <alt_load_section+0x48>
    {
      *to++ = *from++;
   231e8:	e0ffff17 	ldw	r3,-4(fp)
   231ec:	18800104 	addi	r2,r3,4
   231f0:	e0bfff15 	stw	r2,-4(fp)
   231f4:	e0bffe17 	ldw	r2,-8(fp)
   231f8:	11000104 	addi	r4,r2,4
   231fc:	e13ffe15 	stw	r4,-8(fp)
   23200:	18c00017 	ldw	r3,0(r3)
   23204:	10c00015 	stw	r3,0(r2)
    while( to != end )
   23208:	e0fffe17 	ldw	r3,-8(fp)
   2320c:	e0bffd17 	ldw	r2,-12(fp)
   23210:	18bff51e 	bne	r3,r2,231e8 <alt_load_section+0x28>
    }
  }
}
   23214:	0001883a 	nop
   23218:	e037883a 	mov	sp,fp
   2321c:	df000017 	ldw	fp,0(sp)
   23220:	dec00104 	addi	sp,sp,4
   23224:	f800283a 	ret

00023228 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23228:	defffe04 	addi	sp,sp,-8
   2322c:	dfc00115 	stw	ra,4(sp)
   23230:	df000015 	stw	fp,0(sp)
   23234:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23238:	018000f4 	movhi	r6,3
   2323c:	31a04804 	addi	r6,r6,-32480
   23240:	014000b4 	movhi	r5,2
   23244:	29598904 	addi	r5,r5,26148
   23248:	010000f4 	movhi	r4,3
   2324c:	21204804 	addi	r4,r4,-32480
   23250:	00231c00 	call	231c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23254:	018000b4 	movhi	r6,2
   23258:	31808a04 	addi	r6,r6,552
   2325c:	014000b4 	movhi	r5,2
   23260:	29400804 	addi	r5,r5,32
   23264:	010000b4 	movhi	r4,2
   23268:	21000804 	addi	r4,r4,32
   2326c:	00231c00 	call	231c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23270:	018000b4 	movhi	r6,2
   23274:	31998904 	addi	r6,r6,26148
   23278:	014000b4 	movhi	r5,2
   2327c:	2958f904 	addi	r5,r5,25572
   23280:	010000b4 	movhi	r4,2
   23284:	2118f904 	addi	r4,r4,25572
   23288:	00231c00 	call	231c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2328c:	0024d380 	call	24d38 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23290:	0024f940 	call	24f94 <alt_icache_flush_all>
}
   23294:	0001883a 	nop
   23298:	e037883a 	mov	sp,fp
   2329c:	dfc00117 	ldw	ra,4(sp)
   232a0:	df000017 	ldw	fp,0(sp)
   232a4:	dec00204 	addi	sp,sp,8
   232a8:	f800283a 	ret

000232ac <alt_get_errno>:
{
   232ac:	defffe04 	addi	sp,sp,-8
   232b0:	dfc00115 	stw	ra,4(sp)
   232b4:	df000015 	stw	fp,0(sp)
   232b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   232bc:	d0a00917 	ldw	r2,-32732(gp)
   232c0:	10000326 	beq	r2,zero,232d0 <alt_get_errno+0x24>
   232c4:	d0a00917 	ldw	r2,-32732(gp)
   232c8:	103ee83a 	callr	r2
   232cc:	00000106 	br	232d4 <alt_get_errno+0x28>
   232d0:	d0a6d904 	addi	r2,gp,-25756
}
   232d4:	e037883a 	mov	sp,fp
   232d8:	dfc00117 	ldw	ra,4(sp)
   232dc:	df000017 	ldw	fp,0(sp)
   232e0:	dec00204 	addi	sp,sp,8
   232e4:	f800283a 	ret

000232e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   232e8:	defff904 	addi	sp,sp,-28
   232ec:	dfc00615 	stw	ra,24(sp)
   232f0:	df000515 	stw	fp,20(sp)
   232f4:	df000504 	addi	fp,sp,20
   232f8:	e13ffd15 	stw	r4,-12(fp)
   232fc:	e17ffc15 	stw	r5,-16(fp)
   23300:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23304:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23308:	e0bffd17 	ldw	r2,-12(fp)
   2330c:	10000916 	blt	r2,zero,23334 <lseek+0x4c>
   23310:	e0fffd17 	ldw	r3,-12(fp)
   23314:	1805883a 	mov	r2,r3
   23318:	1085883a 	add	r2,r2,r2
   2331c:	10c5883a 	add	r2,r2,r3
   23320:	100490ba 	slli	r2,r2,2
   23324:	00c000b4 	movhi	r3,2
   23328:	18dbb704 	addi	r3,r3,28380
   2332c:	10c5883a 	add	r2,r2,r3
   23330:	00000106 	br	23338 <lseek+0x50>
   23334:	0005883a 	mov	r2,zero
   23338:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   2333c:	e0bffe17 	ldw	r2,-8(fp)
   23340:	10001026 	beq	r2,zero,23384 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23344:	e0bffe17 	ldw	r2,-8(fp)
   23348:	10800017 	ldw	r2,0(r2)
   2334c:	10800717 	ldw	r2,28(r2)
   23350:	10000926 	beq	r2,zero,23378 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23354:	e0bffe17 	ldw	r2,-8(fp)
   23358:	10800017 	ldw	r2,0(r2)
   2335c:	10800717 	ldw	r2,28(r2)
   23360:	e1bffb17 	ldw	r6,-20(fp)
   23364:	e17ffc17 	ldw	r5,-16(fp)
   23368:	e13ffe17 	ldw	r4,-8(fp)
   2336c:	103ee83a 	callr	r2
   23370:	e0bfff15 	stw	r2,-4(fp)
   23374:	00000506 	br	2338c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23378:	00bfde84 	movi	r2,-134
   2337c:	e0bfff15 	stw	r2,-4(fp)
   23380:	00000206 	br	2338c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   23384:	00bfebc4 	movi	r2,-81
   23388:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   2338c:	e0bfff17 	ldw	r2,-4(fp)
   23390:	1000070e 	bge	r2,zero,233b0 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   23394:	00232ac0 	call	232ac <alt_get_errno>
   23398:	1007883a 	mov	r3,r2
   2339c:	e0bfff17 	ldw	r2,-4(fp)
   233a0:	0085c83a 	sub	r2,zero,r2
   233a4:	18800015 	stw	r2,0(r3)
    rc = -1;
   233a8:	00bfffc4 	movi	r2,-1
   233ac:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   233b0:	e0bfff17 	ldw	r2,-4(fp)
}
   233b4:	e037883a 	mov	sp,fp
   233b8:	dfc00117 	ldw	ra,4(sp)
   233bc:	df000017 	ldw	fp,0(sp)
   233c0:	dec00204 	addi	sp,sp,8
   233c4:	f800283a 	ret

000233c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   233c8:	defffd04 	addi	sp,sp,-12
   233cc:	dfc00215 	stw	ra,8(sp)
   233d0:	df000115 	stw	fp,4(sp)
   233d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   233d8:	0009883a 	mov	r4,zero
   233dc:	0023ac80 	call	23ac8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   233e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   233e4:	0023b040 	call	23b04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   233e8:	018000b4 	movhi	r6,2
   233ec:	31997b04 	addi	r6,r6,26092
   233f0:	014000b4 	movhi	r5,2
   233f4:	29597b04 	addi	r5,r5,26092
   233f8:	010000b4 	movhi	r4,2
   233fc:	21197b04 	addi	r4,r4,26092
   23400:	00250880 	call	25088 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23404:	0024e3c0 	call	24e3c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23408:	010000b4 	movhi	r4,2
   2340c:	2113a804 	addi	r4,r4,20128
   23410:	00257c80 	call	257c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23414:	d0a6db17 	ldw	r2,-25748(gp)
   23418:	d0e6dc17 	ldw	r3,-25744(gp)
   2341c:	d126dd17 	ldw	r4,-25740(gp)
   23420:	200d883a 	mov	r6,r4
   23424:	180b883a 	mov	r5,r3
   23428:	1009883a 	mov	r4,r2
   2342c:	00209ec0 	call	209ec <main>
   23430:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23434:	01000044 	movi	r4,1
   23438:	0022dcc0 	call	22dcc <close>
  exit (result);
   2343c:	e13fff17 	ldw	r4,-4(fp)
   23440:	00257dc0 	call	257dc <exit>

00023444 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23444:	defffe04 	addi	sp,sp,-8
   23448:	df000115 	stw	fp,4(sp)
   2344c:	df000104 	addi	fp,sp,4
   23450:	e13fff15 	stw	r4,-4(fp)
}
   23454:	0001883a 	nop
   23458:	e037883a 	mov	sp,fp
   2345c:	df000017 	ldw	fp,0(sp)
   23460:	dec00104 	addi	sp,sp,4
   23464:	f800283a 	ret

00023468 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23468:	defffe04 	addi	sp,sp,-8
   2346c:	df000115 	stw	fp,4(sp)
   23470:	df000104 	addi	fp,sp,4
   23474:	e13fff15 	stw	r4,-4(fp)
}
   23478:	0001883a 	nop
   2347c:	e037883a 	mov	sp,fp
   23480:	df000017 	ldw	fp,0(sp)
   23484:	dec00104 	addi	sp,sp,4
   23488:	f800283a 	ret

0002348c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   2348c:	defff204 	addi	sp,sp,-56
   23490:	dfc00a15 	stw	ra,40(sp)
   23494:	df000915 	stw	fp,36(sp)
   23498:	df000904 	addi	fp,sp,36
   2349c:	e13ff715 	stw	r4,-36(fp)
   234a0:	e1400215 	stw	r5,8(fp)
   234a4:	e1800315 	stw	r6,12(fp)
   234a8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   234ac:	e0800204 	addi	r2,fp,8
   234b0:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   234b4:	e0bff717 	ldw	r2,-36(fp)
   234b8:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   234bc:	00006f06 	br	2367c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   234c0:	e0bffec7 	ldb	r2,-5(fp)
   234c4:	10800960 	cmpeqi	r2,r2,37
   234c8:	1000041e 	bne	r2,zero,234dc <alt_printf+0x50>
        {
            alt_putchar(c);
   234cc:	e0bffec7 	ldb	r2,-5(fp)
   234d0:	1009883a 	mov	r4,r2
   234d4:	00236b80 	call	236b8 <alt_putchar>
   234d8:	00006806 	br	2367c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   234dc:	e0bfff17 	ldw	r2,-4(fp)
   234e0:	10c00044 	addi	r3,r2,1
   234e4:	e0ffff15 	stw	r3,-4(fp)
   234e8:	10800003 	ldbu	r2,0(r2)
   234ec:	e0bffec5 	stb	r2,-5(fp)
   234f0:	e0bffec7 	ldb	r2,-5(fp)
   234f4:	10006926 	beq	r2,zero,2369c <alt_printf+0x210>
            {
                if (c == '%')
   234f8:	e0bffec7 	ldb	r2,-5(fp)
   234fc:	10800958 	cmpnei	r2,r2,37
   23500:	1000041e 	bne	r2,zero,23514 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   23504:	e0bffec7 	ldb	r2,-5(fp)
   23508:	1009883a 	mov	r4,r2
   2350c:	00236b80 	call	236b8 <alt_putchar>
   23510:	00005a06 	br	2367c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   23514:	e0bffec7 	ldb	r2,-5(fp)
   23518:	108018d8 	cmpnei	r2,r2,99
   2351c:	1000081e 	bne	r2,zero,23540 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   23520:	e0bff817 	ldw	r2,-32(fp)
   23524:	10c00104 	addi	r3,r2,4
   23528:	e0fff815 	stw	r3,-32(fp)
   2352c:	10800017 	ldw	r2,0(r2)
   23530:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   23534:	e13ff917 	ldw	r4,-28(fp)
   23538:	00236b80 	call	236b8 <alt_putchar>
   2353c:	00004f06 	br	2367c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   23540:	e0bffec7 	ldb	r2,-5(fp)
   23544:	10801e18 	cmpnei	r2,r2,120
   23548:	1000341e 	bne	r2,zero,2361c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   2354c:	e0bff817 	ldw	r2,-32(fp)
   23550:	10c00104 	addi	r3,r2,4
   23554:	e0fff815 	stw	r3,-32(fp)
   23558:	10800017 	ldw	r2,0(r2)
   2355c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   23560:	e0bffb17 	ldw	r2,-20(fp)
   23564:	1000031e 	bne	r2,zero,23574 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   23568:	01000c04 	movi	r4,48
   2356c:	00236b80 	call	236b8 <alt_putchar>
                        continue;
   23570:	00004206 	br	2367c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   23574:	00800704 	movi	r2,28
   23578:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   2357c:	00000306 	br	2358c <alt_printf+0x100>
                        digit_shift -= 4;
   23580:	e0bffd17 	ldw	r2,-12(fp)
   23584:	10bfff04 	addi	r2,r2,-4
   23588:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   2358c:	00c003c4 	movi	r3,15
   23590:	e0bffd17 	ldw	r2,-12(fp)
   23594:	1884983a 	sll	r2,r3,r2
   23598:	1007883a 	mov	r3,r2
   2359c:	e0bffb17 	ldw	r2,-20(fp)
   235a0:	1884703a 	and	r2,r3,r2
   235a4:	103ff626 	beq	r2,zero,23580 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   235a8:	00001906 	br	23610 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   235ac:	00c003c4 	movi	r3,15
   235b0:	e0bffd17 	ldw	r2,-12(fp)
   235b4:	1884983a 	sll	r2,r3,r2
   235b8:	1007883a 	mov	r3,r2
   235bc:	e0bffb17 	ldw	r2,-20(fp)
   235c0:	1886703a 	and	r3,r3,r2
   235c4:	e0bffd17 	ldw	r2,-12(fp)
   235c8:	1884d83a 	srl	r2,r3,r2
   235cc:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   235d0:	e0bffa17 	ldw	r2,-24(fp)
   235d4:	108002a8 	cmpgeui	r2,r2,10
   235d8:	1000041e 	bne	r2,zero,235ec <alt_printf+0x160>
                            c = '0' + digit;
   235dc:	e0bffa17 	ldw	r2,-24(fp)
   235e0:	10800c04 	addi	r2,r2,48
   235e4:	e0bffec5 	stb	r2,-5(fp)
   235e8:	00000306 	br	235f8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   235ec:	e0bffa17 	ldw	r2,-24(fp)
   235f0:	108015c4 	addi	r2,r2,87
   235f4:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   235f8:	e0bffec7 	ldb	r2,-5(fp)
   235fc:	1009883a 	mov	r4,r2
   23600:	00236b80 	call	236b8 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   23604:	e0bffd17 	ldw	r2,-12(fp)
   23608:	10bfff04 	addi	r2,r2,-4
   2360c:	e0bffd15 	stw	r2,-12(fp)
   23610:	e0bffd17 	ldw	r2,-12(fp)
   23614:	103fe50e 	bge	r2,zero,235ac <alt_printf+0x120>
   23618:	00001806 	br	2367c <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   2361c:	e0bffec7 	ldb	r2,-5(fp)
   23620:	10801cd8 	cmpnei	r2,r2,115
   23624:	1000151e 	bne	r2,zero,2367c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   23628:	e0bff817 	ldw	r2,-32(fp)
   2362c:	10c00104 	addi	r3,r2,4
   23630:	e0fff815 	stw	r3,-32(fp)
   23634:	10800017 	ldw	r2,0(r2)
   23638:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   2363c:	00000906 	br	23664 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   23640:	e0bffc17 	ldw	r2,-16(fp)
   23644:	10c00044 	addi	r3,r2,1
   23648:	e0fffc15 	stw	r3,-16(fp)
   2364c:	10800003 	ldbu	r2,0(r2)
   23650:	10803fcc 	andi	r2,r2,255
   23654:	1080201c 	xori	r2,r2,128
   23658:	10bfe004 	addi	r2,r2,-128
   2365c:	1009883a 	mov	r4,r2
   23660:	00236b80 	call	236b8 <alt_putchar>
                    while(*s)
   23664:	e0bffc17 	ldw	r2,-16(fp)
   23668:	10800003 	ldbu	r2,0(r2)
   2366c:	10803fcc 	andi	r2,r2,255
   23670:	1080201c 	xori	r2,r2,128
   23674:	10bfe004 	addi	r2,r2,-128
   23678:	103ff11e 	bne	r2,zero,23640 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
   2367c:	e0bfff17 	ldw	r2,-4(fp)
   23680:	10c00044 	addi	r3,r2,1
   23684:	e0ffff15 	stw	r3,-4(fp)
   23688:	10800003 	ldbu	r2,0(r2)
   2368c:	e0bffec5 	stb	r2,-5(fp)
   23690:	e0bffec7 	ldb	r2,-5(fp)
   23694:	103f8a1e 	bne	r2,zero,234c0 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   23698:	00000106 	br	236a0 <alt_printf+0x214>
                break;
   2369c:	0001883a 	nop
}
   236a0:	0001883a 	nop
   236a4:	e037883a 	mov	sp,fp
   236a8:	dfc00117 	ldw	ra,4(sp)
   236ac:	df000017 	ldw	fp,0(sp)
   236b0:	dec00504 	addi	sp,sp,20
   236b4:	f800283a 	ret

000236b8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   236b8:	defffd04 	addi	sp,sp,-12
   236bc:	dfc00215 	stw	ra,8(sp)
   236c0:	df000115 	stw	fp,4(sp)
   236c4:	df000104 	addi	fp,sp,4
   236c8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   236cc:	e13fff17 	ldw	r4,-4(fp)
   236d0:	00258900 	call	25890 <putchar>
#endif
#endif
}
   236d4:	e037883a 	mov	sp,fp
   236d8:	dfc00117 	ldw	ra,4(sp)
   236dc:	df000017 	ldw	fp,0(sp)
   236e0:	dec00204 	addi	sp,sp,8
   236e4:	f800283a 	ret

000236e8 <alt_get_errno>:
{
   236e8:	defffe04 	addi	sp,sp,-8
   236ec:	dfc00115 	stw	ra,4(sp)
   236f0:	df000015 	stw	fp,0(sp)
   236f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   236f8:	d0a00917 	ldw	r2,-32732(gp)
   236fc:	10000326 	beq	r2,zero,2370c <alt_get_errno+0x24>
   23700:	d0a00917 	ldw	r2,-32732(gp)
   23704:	103ee83a 	callr	r2
   23708:	00000106 	br	23710 <alt_get_errno+0x28>
   2370c:	d0a6d904 	addi	r2,gp,-25756
}
   23710:	e037883a 	mov	sp,fp
   23714:	dfc00117 	ldw	ra,4(sp)
   23718:	df000017 	ldw	fp,0(sp)
   2371c:	dec00204 	addi	sp,sp,8
   23720:	f800283a 	ret

00023724 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23724:	defff904 	addi	sp,sp,-28
   23728:	dfc00615 	stw	ra,24(sp)
   2372c:	df000515 	stw	fp,20(sp)
   23730:	df000504 	addi	fp,sp,20
   23734:	e13ffd15 	stw	r4,-12(fp)
   23738:	e17ffc15 	stw	r5,-16(fp)
   2373c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23740:	e0bffd17 	ldw	r2,-12(fp)
   23744:	10000916 	blt	r2,zero,2376c <read+0x48>
   23748:	e0fffd17 	ldw	r3,-12(fp)
   2374c:	1805883a 	mov	r2,r3
   23750:	1085883a 	add	r2,r2,r2
   23754:	10c5883a 	add	r2,r2,r3
   23758:	100490ba 	slli	r2,r2,2
   2375c:	00c000b4 	movhi	r3,2
   23760:	18dbb704 	addi	r3,r3,28380
   23764:	10c5883a 	add	r2,r2,r3
   23768:	00000106 	br	23770 <read+0x4c>
   2376c:	0005883a 	mov	r2,zero
   23770:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23774:	e0bfff17 	ldw	r2,-4(fp)
   23778:	10002226 	beq	r2,zero,23804 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2377c:	e0bfff17 	ldw	r2,-4(fp)
   23780:	10800217 	ldw	r2,8(r2)
   23784:	108000cc 	andi	r2,r2,3
   23788:	10800060 	cmpeqi	r2,r2,1
   2378c:	1000181e 	bne	r2,zero,237f0 <read+0xcc>
        (fd->dev->read))
   23790:	e0bfff17 	ldw	r2,-4(fp)
   23794:	10800017 	ldw	r2,0(r2)
   23798:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2379c:	10001426 	beq	r2,zero,237f0 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   237a0:	e0bfff17 	ldw	r2,-4(fp)
   237a4:	10800017 	ldw	r2,0(r2)
   237a8:	10800517 	ldw	r2,20(r2)
   237ac:	e0fffb17 	ldw	r3,-20(fp)
   237b0:	180d883a 	mov	r6,r3
   237b4:	e17ffc17 	ldw	r5,-16(fp)
   237b8:	e13fff17 	ldw	r4,-4(fp)
   237bc:	103ee83a 	callr	r2
   237c0:	e0bffe15 	stw	r2,-8(fp)
   237c4:	e0bffe17 	ldw	r2,-8(fp)
   237c8:	1000070e 	bge	r2,zero,237e8 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   237cc:	00236e80 	call	236e8 <alt_get_errno>
   237d0:	1007883a 	mov	r3,r2
   237d4:	e0bffe17 	ldw	r2,-8(fp)
   237d8:	0085c83a 	sub	r2,zero,r2
   237dc:	18800015 	stw	r2,0(r3)
          return -1;
   237e0:	00bfffc4 	movi	r2,-1
   237e4:	00000c06 	br	23818 <read+0xf4>
        }
        return rval;
   237e8:	e0bffe17 	ldw	r2,-8(fp)
   237ec:	00000a06 	br	23818 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   237f0:	00236e80 	call	236e8 <alt_get_errno>
   237f4:	1007883a 	mov	r3,r2
   237f8:	00800344 	movi	r2,13
   237fc:	18800015 	stw	r2,0(r3)
   23800:	00000406 	br	23814 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23804:	00236e80 	call	236e8 <alt_get_errno>
   23808:	1007883a 	mov	r3,r2
   2380c:	00801444 	movi	r2,81
   23810:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23814:	00bfffc4 	movi	r2,-1
}
   23818:	e037883a 	mov	sp,fp
   2381c:	dfc00117 	ldw	ra,4(sp)
   23820:	df000017 	ldw	fp,0(sp)
   23824:	dec00204 	addi	sp,sp,8
   23828:	f800283a 	ret

0002382c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2382c:	defffe04 	addi	sp,sp,-8
   23830:	df000115 	stw	fp,4(sp)
   23834:	df000104 	addi	fp,sp,4
   23838:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2383c:	e0bfff17 	ldw	r2,-4(fp)
   23840:	108000d0 	cmplti	r2,r2,3
   23844:	1000101e 	bne	r2,zero,23888 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   23848:	e0ffff17 	ldw	r3,-4(fp)
   2384c:	1805883a 	mov	r2,r3
   23850:	1085883a 	add	r2,r2,r2
   23854:	10c5883a 	add	r2,r2,r3
   23858:	100490ba 	slli	r2,r2,2
   2385c:	00c000b4 	movhi	r3,2
   23860:	10c7883a 	add	r3,r2,r3
   23864:	181bb915 	stw	zero,28388(r3)
    alt_fd_list[fd].dev      = 0;
   23868:	e0ffff17 	ldw	r3,-4(fp)
   2386c:	1805883a 	mov	r2,r3
   23870:	1085883a 	add	r2,r2,r2
   23874:	10c5883a 	add	r2,r2,r3
   23878:	100490ba 	slli	r2,r2,2
   2387c:	00c000b4 	movhi	r3,2
   23880:	10c7883a 	add	r3,r2,r3
   23884:	181bb715 	stw	zero,28380(r3)
  }
}
   23888:	0001883a 	nop
   2388c:	e037883a 	mov	sp,fp
   23890:	df000017 	ldw	fp,0(sp)
   23894:	dec00104 	addi	sp,sp,4
   23898:	f800283a 	ret

0002389c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2389c:	defff904 	addi	sp,sp,-28
   238a0:	df000615 	stw	fp,24(sp)
   238a4:	df000604 	addi	fp,sp,24
   238a8:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   238ac:	0005303a 	rdctl	r2,status
   238b0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   238b4:	e0fffd17 	ldw	r3,-12(fp)
   238b8:	00bfff84 	movi	r2,-2
   238bc:	1884703a 	and	r2,r3,r2
   238c0:	1001703a 	wrctl	status,r2
  return context;
   238c4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   238c8:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   238cc:	d0a00b17 	ldw	r2,-32724(gp)
   238d0:	10c000c4 	addi	r3,r2,3
   238d4:	00bfff04 	movi	r2,-4
   238d8:	1884703a 	and	r2,r3,r2
   238dc:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   238e0:	d0e00b17 	ldw	r3,-32724(gp)
   238e4:	e0bffa17 	ldw	r2,-24(fp)
   238e8:	1887883a 	add	r3,r3,r2
   238ec:	008000f4 	movhi	r2,3
   238f0:	1097e404 	addi	r2,r2,24464
   238f4:	10c0072e 	bgeu	r2,r3,23914 <sbrk+0x78>
   238f8:	e0bfff17 	ldw	r2,-4(fp)
   238fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   23900:	e0bffc17 	ldw	r2,-16(fp)
   23904:	1001703a 	wrctl	status,r2
}
   23908:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2390c:	00bfffc4 	movi	r2,-1
   23910:	00000c06 	br	23944 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   23914:	d0a00b17 	ldw	r2,-32724(gp)
   23918:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   2391c:	d0e00b17 	ldw	r3,-32724(gp)
   23920:	e0bffa17 	ldw	r2,-24(fp)
   23924:	1885883a 	add	r2,r3,r2
   23928:	d0a00b15 	stw	r2,-32724(gp)
   2392c:	e0bfff17 	ldw	r2,-4(fp)
   23930:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   23934:	e0bffb17 	ldw	r2,-20(fp)
   23938:	1001703a 	wrctl	status,r2
}
   2393c:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23940:	e0bffe17 	ldw	r2,-8(fp)
} 
   23944:	e037883a 	mov	sp,fp
   23948:	df000017 	ldw	fp,0(sp)
   2394c:	dec00104 	addi	sp,sp,4
   23950:	f800283a 	ret

00023954 <alt_get_errno>:
{
   23954:	defffe04 	addi	sp,sp,-8
   23958:	dfc00115 	stw	ra,4(sp)
   2395c:	df000015 	stw	fp,0(sp)
   23960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23964:	d0a00917 	ldw	r2,-32732(gp)
   23968:	10000326 	beq	r2,zero,23978 <alt_get_errno+0x24>
   2396c:	d0a00917 	ldw	r2,-32732(gp)
   23970:	103ee83a 	callr	r2
   23974:	00000106 	br	2397c <alt_get_errno+0x28>
   23978:	d0a6d904 	addi	r2,gp,-25756
}
   2397c:	e037883a 	mov	sp,fp
   23980:	dfc00117 	ldw	ra,4(sp)
   23984:	df000017 	ldw	fp,0(sp)
   23988:	dec00204 	addi	sp,sp,8
   2398c:	f800283a 	ret

00023990 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23990:	defff904 	addi	sp,sp,-28
   23994:	dfc00615 	stw	ra,24(sp)
   23998:	df000515 	stw	fp,20(sp)
   2399c:	df000504 	addi	fp,sp,20
   239a0:	e13ffd15 	stw	r4,-12(fp)
   239a4:	e17ffc15 	stw	r5,-16(fp)
   239a8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   239ac:	e0bffd17 	ldw	r2,-12(fp)
   239b0:	10000916 	blt	r2,zero,239d8 <write+0x48>
   239b4:	e0fffd17 	ldw	r3,-12(fp)
   239b8:	1805883a 	mov	r2,r3
   239bc:	1085883a 	add	r2,r2,r2
   239c0:	10c5883a 	add	r2,r2,r3
   239c4:	100490ba 	slli	r2,r2,2
   239c8:	00c000b4 	movhi	r3,2
   239cc:	18dbb704 	addi	r3,r3,28380
   239d0:	10c5883a 	add	r2,r2,r3
   239d4:	00000106 	br	239dc <write+0x4c>
   239d8:	0005883a 	mov	r2,zero
   239dc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   239e0:	e0bfff17 	ldw	r2,-4(fp)
   239e4:	10002126 	beq	r2,zero,23a6c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   239e8:	e0bfff17 	ldw	r2,-4(fp)
   239ec:	10800217 	ldw	r2,8(r2)
   239f0:	108000cc 	andi	r2,r2,3
   239f4:	10001826 	beq	r2,zero,23a58 <write+0xc8>
   239f8:	e0bfff17 	ldw	r2,-4(fp)
   239fc:	10800017 	ldw	r2,0(r2)
   23a00:	10800617 	ldw	r2,24(r2)
   23a04:	10001426 	beq	r2,zero,23a58 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23a08:	e0bfff17 	ldw	r2,-4(fp)
   23a0c:	10800017 	ldw	r2,0(r2)
   23a10:	10800617 	ldw	r2,24(r2)
   23a14:	e0fffb17 	ldw	r3,-20(fp)
   23a18:	180d883a 	mov	r6,r3
   23a1c:	e17ffc17 	ldw	r5,-16(fp)
   23a20:	e13fff17 	ldw	r4,-4(fp)
   23a24:	103ee83a 	callr	r2
   23a28:	e0bffe15 	stw	r2,-8(fp)
   23a2c:	e0bffe17 	ldw	r2,-8(fp)
   23a30:	1000070e 	bge	r2,zero,23a50 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   23a34:	00239540 	call	23954 <alt_get_errno>
   23a38:	1007883a 	mov	r3,r2
   23a3c:	e0bffe17 	ldw	r2,-8(fp)
   23a40:	0085c83a 	sub	r2,zero,r2
   23a44:	18800015 	stw	r2,0(r3)
        return -1;
   23a48:	00bfffc4 	movi	r2,-1
   23a4c:	00000c06 	br	23a80 <write+0xf0>
      }
      return rval;
   23a50:	e0bffe17 	ldw	r2,-8(fp)
   23a54:	00000a06 	br	23a80 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23a58:	00239540 	call	23954 <alt_get_errno>
   23a5c:	1007883a 	mov	r3,r2
   23a60:	00800344 	movi	r2,13
   23a64:	18800015 	stw	r2,0(r3)
   23a68:	00000406 	br	23a7c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23a6c:	00239540 	call	23954 <alt_get_errno>
   23a70:	1007883a 	mov	r3,r2
   23a74:	00801444 	movi	r2,81
   23a78:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23a7c:	00bfffc4 	movi	r2,-1
}
   23a80:	e037883a 	mov	sp,fp
   23a84:	dfc00117 	ldw	ra,4(sp)
   23a88:	df000017 	ldw	fp,0(sp)
   23a8c:	dec00204 	addi	sp,sp,8
   23a90:	f800283a 	ret

00023a94 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23a94:	defffd04 	addi	sp,sp,-12
   23a98:	dfc00215 	stw	ra,8(sp)
   23a9c:	df000115 	stw	fp,4(sp)
   23aa0:	df000104 	addi	fp,sp,4
   23aa4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23aa8:	d1600604 	addi	r5,gp,-32744
   23aac:	e13fff17 	ldw	r4,-4(fp)
   23ab0:	0024d940 	call	24d94 <alt_dev_llist_insert>
}
   23ab4:	e037883a 	mov	sp,fp
   23ab8:	dfc00117 	ldw	ra,4(sp)
   23abc:	df000017 	ldw	fp,0(sp)
   23ac0:	dec00204 	addi	sp,sp,8
   23ac4:	f800283a 	ret

00023ac8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23ac8:	defffd04 	addi	sp,sp,-12
   23acc:	dfc00215 	stw	ra,8(sp)
   23ad0:	df000115 	stw	fp,4(sp)
   23ad4:	df000104 	addi	fp,sp,4
   23ad8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   23adc:	002554c0 	call	2554c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23ae0:	00800044 	movi	r2,1
   23ae4:	1001703a 	wrctl	status,r2
}
   23ae8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   23aec:	0001883a 	nop
   23af0:	e037883a 	mov	sp,fp
   23af4:	dfc00117 	ldw	ra,4(sp)
   23af8:	df000017 	ldw	fp,0(sp)
   23afc:	dec00204 	addi	sp,sp,8
   23b00:	f800283a 	ret

00023b04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23b04:	defffe04 	addi	sp,sp,-8
   23b08:	dfc00115 	stw	ra,4(sp)
   23b0c:	df000015 	stw	fp,0(sp)
   23b10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   23b14:	01d38804 	movi	r7,20000
   23b18:	01800084 	movi	r6,2
   23b1c:	000b883a 	mov	r5,zero
   23b20:	01000134 	movhi	r4,4
   23b24:	21040804 	addi	r4,r4,4128
   23b28:	00246780 	call	24678 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
   23b2c:	00800134 	movhi	r2,4
   23b30:	10840004 	addi	r2,r2,4096
   23b34:	d0a6de15 	stw	r2,-25736(gp)
   23b38:	0080bef4 	movhi	r2,763
   23b3c:	10bc2004 	addi	r2,r2,-3968
   23b40:	d0a6df15 	stw	r2,-25732(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23b44:	000d883a 	mov	r6,zero
   23b48:	000b883a 	mov	r5,zero
   23b4c:	010000b4 	movhi	r4,2
   23b50:	211c2104 	addi	r4,r4,28804
   23b54:	0023cf00 	call	23cf0 <altera_avalon_jtag_uart_init>
   23b58:	010000b4 	movhi	r4,2
   23b5c:	211c1704 	addi	r4,r4,28764
   23b60:	0023a940 	call	23a94 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   23b64:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   23b68:	010000f4 	movhi	r4,3
   23b6c:	21202f04 	addi	r4,r4,-32580
   23b70:	0023a940 	call	23a94 <alt_dev_reg>
}
   23b74:	0001883a 	nop
   23b78:	e037883a 	mov	sp,fp
   23b7c:	dfc00117 	ldw	ra,4(sp)
   23b80:	df000017 	ldw	fp,0(sp)
   23b84:	dec00204 	addi	sp,sp,8
   23b88:	f800283a 	ret

00023b8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23b8c:	defffa04 	addi	sp,sp,-24
   23b90:	dfc00515 	stw	ra,20(sp)
   23b94:	df000415 	stw	fp,16(sp)
   23b98:	df000404 	addi	fp,sp,16
   23b9c:	e13ffe15 	stw	r4,-8(fp)
   23ba0:	e17ffd15 	stw	r5,-12(fp)
   23ba4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23ba8:	e0bffe17 	ldw	r2,-8(fp)
   23bac:	10800017 	ldw	r2,0(r2)
   23bb0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23bb4:	e0bfff17 	ldw	r2,-4(fp)
   23bb8:	10c00a04 	addi	r3,r2,40
   23bbc:	e0bffe17 	ldw	r2,-8(fp)
   23bc0:	10800217 	ldw	r2,8(r2)
   23bc4:	100f883a 	mov	r7,r2
   23bc8:	e1bffc17 	ldw	r6,-16(fp)
   23bcc:	e17ffd17 	ldw	r5,-12(fp)
   23bd0:	1809883a 	mov	r4,r3
   23bd4:	00241b00 	call	241b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23bd8:	e037883a 	mov	sp,fp
   23bdc:	dfc00117 	ldw	ra,4(sp)
   23be0:	df000017 	ldw	fp,0(sp)
   23be4:	dec00204 	addi	sp,sp,8
   23be8:	f800283a 	ret

00023bec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23bec:	defffa04 	addi	sp,sp,-24
   23bf0:	dfc00515 	stw	ra,20(sp)
   23bf4:	df000415 	stw	fp,16(sp)
   23bf8:	df000404 	addi	fp,sp,16
   23bfc:	e13ffe15 	stw	r4,-8(fp)
   23c00:	e17ffd15 	stw	r5,-12(fp)
   23c04:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23c08:	e0bffe17 	ldw	r2,-8(fp)
   23c0c:	10800017 	ldw	r2,0(r2)
   23c10:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23c14:	e0bfff17 	ldw	r2,-4(fp)
   23c18:	10c00a04 	addi	r3,r2,40
   23c1c:	e0bffe17 	ldw	r2,-8(fp)
   23c20:	10800217 	ldw	r2,8(r2)
   23c24:	100f883a 	mov	r7,r2
   23c28:	e1bffc17 	ldw	r6,-16(fp)
   23c2c:	e17ffd17 	ldw	r5,-12(fp)
   23c30:	1809883a 	mov	r4,r3
   23c34:	00243d00 	call	243d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23c38:	e037883a 	mov	sp,fp
   23c3c:	dfc00117 	ldw	ra,4(sp)
   23c40:	df000017 	ldw	fp,0(sp)
   23c44:	dec00204 	addi	sp,sp,8
   23c48:	f800283a 	ret

00023c4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23c4c:	defffc04 	addi	sp,sp,-16
   23c50:	dfc00315 	stw	ra,12(sp)
   23c54:	df000215 	stw	fp,8(sp)
   23c58:	df000204 	addi	fp,sp,8
   23c5c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23c60:	e0bffe17 	ldw	r2,-8(fp)
   23c64:	10800017 	ldw	r2,0(r2)
   23c68:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23c6c:	e0bfff17 	ldw	r2,-4(fp)
   23c70:	10c00a04 	addi	r3,r2,40
   23c74:	e0bffe17 	ldw	r2,-8(fp)
   23c78:	10800217 	ldw	r2,8(r2)
   23c7c:	100b883a 	mov	r5,r2
   23c80:	1809883a 	mov	r4,r3
   23c84:	00240540 	call	24054 <altera_avalon_jtag_uart_close>
}
   23c88:	e037883a 	mov	sp,fp
   23c8c:	dfc00117 	ldw	ra,4(sp)
   23c90:	df000017 	ldw	fp,0(sp)
   23c94:	dec00204 	addi	sp,sp,8
   23c98:	f800283a 	ret

00023c9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23c9c:	defffa04 	addi	sp,sp,-24
   23ca0:	dfc00515 	stw	ra,20(sp)
   23ca4:	df000415 	stw	fp,16(sp)
   23ca8:	df000404 	addi	fp,sp,16
   23cac:	e13ffe15 	stw	r4,-8(fp)
   23cb0:	e17ffd15 	stw	r5,-12(fp)
   23cb4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23cb8:	e0bffe17 	ldw	r2,-8(fp)
   23cbc:	10800017 	ldw	r2,0(r2)
   23cc0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23cc4:	e0bfff17 	ldw	r2,-4(fp)
   23cc8:	10800a04 	addi	r2,r2,40
   23ccc:	e1bffc17 	ldw	r6,-16(fp)
   23cd0:	e17ffd17 	ldw	r5,-12(fp)
   23cd4:	1009883a 	mov	r4,r2
   23cd8:	00240bc0 	call	240bc <altera_avalon_jtag_uart_ioctl>
}
   23cdc:	e037883a 	mov	sp,fp
   23ce0:	dfc00117 	ldw	ra,4(sp)
   23ce4:	df000017 	ldw	fp,0(sp)
   23ce8:	dec00204 	addi	sp,sp,8
   23cec:	f800283a 	ret

00023cf0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23cf0:	defffb04 	addi	sp,sp,-20
   23cf4:	dfc00415 	stw	ra,16(sp)
   23cf8:	df000315 	stw	fp,12(sp)
   23cfc:	df000304 	addi	fp,sp,12
   23d00:	e13fff15 	stw	r4,-4(fp)
   23d04:	e17ffe15 	stw	r5,-8(fp)
   23d08:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23d0c:	e0bfff17 	ldw	r2,-4(fp)
   23d10:	00c00044 	movi	r3,1
   23d14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23d18:	e0bfff17 	ldw	r2,-4(fp)
   23d1c:	10800017 	ldw	r2,0(r2)
   23d20:	10800104 	addi	r2,r2,4
   23d24:	1007883a 	mov	r3,r2
   23d28:	e0bfff17 	ldw	r2,-4(fp)
   23d2c:	10800817 	ldw	r2,32(r2)
   23d30:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   23d34:	e0bffd17 	ldw	r2,-12(fp)
   23d38:	018000b4 	movhi	r6,2
   23d3c:	318f6904 	addi	r6,r6,15780
   23d40:	e17fff17 	ldw	r5,-4(fp)
   23d44:	1009883a 	mov	r4,r2
   23d48:	00230400 	call	23040 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23d4c:	e0bfff17 	ldw	r2,-4(fp)
   23d50:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23d54:	e0bfff17 	ldw	r2,-4(fp)
   23d58:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23d5c:	d0e6e017 	ldw	r3,-25728(gp)
   23d60:	e1ffff17 	ldw	r7,-4(fp)
   23d64:	018000b4 	movhi	r6,2
   23d68:	318fed04 	addi	r6,r6,16308
   23d6c:	180b883a 	mov	r5,r3
   23d70:	1009883a 	mov	r4,r2
   23d74:	0024bd80 	call	24bd8 <alt_alarm_start>
   23d78:	1000040e 	bge	r2,zero,23d8c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23d7c:	e0ffff17 	ldw	r3,-4(fp)
   23d80:	00a00034 	movhi	r2,32768
   23d84:	10bfffc4 	addi	r2,r2,-1
   23d88:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23d8c:	0001883a 	nop
   23d90:	e037883a 	mov	sp,fp
   23d94:	dfc00117 	ldw	ra,4(sp)
   23d98:	df000017 	ldw	fp,0(sp)
   23d9c:	dec00204 	addi	sp,sp,8
   23da0:	f800283a 	ret

00023da4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23da4:	defff704 	addi	sp,sp,-36
   23da8:	df000815 	stw	fp,32(sp)
   23dac:	df000804 	addi	fp,sp,32
   23db0:	e13ff915 	stw	r4,-28(fp)
   23db4:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23db8:	e0bff917 	ldw	r2,-28(fp)
   23dbc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   23dc0:	e0bffd17 	ldw	r2,-12(fp)
   23dc4:	10800017 	ldw	r2,0(r2)
   23dc8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23dcc:	e0bffc17 	ldw	r2,-16(fp)
   23dd0:	10800104 	addi	r2,r2,4
   23dd4:	10800037 	ldwio	r2,0(r2)
   23dd8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23ddc:	e0bffb17 	ldw	r2,-20(fp)
   23de0:	1080c00c 	andi	r2,r2,768
   23de4:	10006d26 	beq	r2,zero,23f9c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23de8:	e0bffb17 	ldw	r2,-20(fp)
   23dec:	1080400c 	andi	r2,r2,256
   23df0:	10003526 	beq	r2,zero,23ec8 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23df4:	00800074 	movhi	r2,1
   23df8:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23dfc:	e0bffd17 	ldw	r2,-12(fp)
   23e00:	10800a17 	ldw	r2,40(r2)
   23e04:	10800044 	addi	r2,r2,1
   23e08:	1081ffcc 	andi	r2,r2,2047
   23e0c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   23e10:	e0bffd17 	ldw	r2,-12(fp)
   23e14:	10800b17 	ldw	r2,44(r2)
   23e18:	e0fffa17 	ldw	r3,-24(fp)
   23e1c:	18801526 	beq	r3,r2,23e74 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23e20:	e0bffc17 	ldw	r2,-16(fp)
   23e24:	10800037 	ldwio	r2,0(r2)
   23e28:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23e2c:	e0bfff17 	ldw	r2,-4(fp)
   23e30:	10a0000c 	andi	r2,r2,32768
   23e34:	10001126 	beq	r2,zero,23e7c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23e38:	e0bffd17 	ldw	r2,-12(fp)
   23e3c:	10800a17 	ldw	r2,40(r2)
   23e40:	e0ffff17 	ldw	r3,-4(fp)
   23e44:	1809883a 	mov	r4,r3
   23e48:	e0fffd17 	ldw	r3,-12(fp)
   23e4c:	1885883a 	add	r2,r3,r2
   23e50:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23e54:	e0bffd17 	ldw	r2,-12(fp)
   23e58:	10800a17 	ldw	r2,40(r2)
   23e5c:	10800044 	addi	r2,r2,1
   23e60:	10c1ffcc 	andi	r3,r2,2047
   23e64:	e0bffd17 	ldw	r2,-12(fp)
   23e68:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   23e6c:	0001883a 	nop
      {
   23e70:	003fe206 	br	23dfc <altera_avalon_jtag_uart_irq+0x58>
          break;
   23e74:	0001883a 	nop
   23e78:	00000106 	br	23e80 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   23e7c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23e80:	e0bfff17 	ldw	r2,-4(fp)
   23e84:	10bfffec 	andhi	r2,r2,65535
   23e88:	10000f26 	beq	r2,zero,23ec8 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23e8c:	e0bffd17 	ldw	r2,-12(fp)
   23e90:	10c00817 	ldw	r3,32(r2)
   23e94:	00bfff84 	movi	r2,-2
   23e98:	1886703a 	and	r3,r3,r2
   23e9c:	e0bffd17 	ldw	r2,-12(fp)
   23ea0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23ea4:	e0bffc17 	ldw	r2,-16(fp)
   23ea8:	10800104 	addi	r2,r2,4
   23eac:	1007883a 	mov	r3,r2
   23eb0:	e0bffd17 	ldw	r2,-12(fp)
   23eb4:	10800817 	ldw	r2,32(r2)
   23eb8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23ebc:	e0bffc17 	ldw	r2,-16(fp)
   23ec0:	10800104 	addi	r2,r2,4
   23ec4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23ec8:	e0bffb17 	ldw	r2,-20(fp)
   23ecc:	1080800c 	andi	r2,r2,512
   23ed0:	103fbe26 	beq	r2,zero,23dcc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23ed4:	e0bffb17 	ldw	r2,-20(fp)
   23ed8:	1004d43a 	srli	r2,r2,16
   23edc:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23ee0:	00001406 	br	23f34 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23ee4:	e0bffc17 	ldw	r2,-16(fp)
   23ee8:	e0fffd17 	ldw	r3,-12(fp)
   23eec:	18c00d17 	ldw	r3,52(r3)
   23ef0:	e13ffd17 	ldw	r4,-12(fp)
   23ef4:	20c7883a 	add	r3,r4,r3
   23ef8:	18c20e03 	ldbu	r3,2104(r3)
   23efc:	18c03fcc 	andi	r3,r3,255
   23f00:	18c0201c 	xori	r3,r3,128
   23f04:	18ffe004 	addi	r3,r3,-128
   23f08:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23f0c:	e0bffd17 	ldw	r2,-12(fp)
   23f10:	10800d17 	ldw	r2,52(r2)
   23f14:	10800044 	addi	r2,r2,1
   23f18:	10c1ffcc 	andi	r3,r2,2047
   23f1c:	e0bffd17 	ldw	r2,-12(fp)
   23f20:	10c00d15 	stw	r3,52(r2)
   23f24:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23f28:	e0bffe17 	ldw	r2,-8(fp)
   23f2c:	10bfffc4 	addi	r2,r2,-1
   23f30:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   23f34:	e0bffe17 	ldw	r2,-8(fp)
   23f38:	10000526 	beq	r2,zero,23f50 <altera_avalon_jtag_uart_irq+0x1ac>
   23f3c:	e0bffd17 	ldw	r2,-12(fp)
   23f40:	10c00d17 	ldw	r3,52(r2)
   23f44:	e0bffd17 	ldw	r2,-12(fp)
   23f48:	10800c17 	ldw	r2,48(r2)
   23f4c:	18bfe51e 	bne	r3,r2,23ee4 <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
   23f50:	e0bffe17 	ldw	r2,-8(fp)
   23f54:	103f9d26 	beq	r2,zero,23dcc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23f58:	e0bffd17 	ldw	r2,-12(fp)
   23f5c:	10c00817 	ldw	r3,32(r2)
   23f60:	00bfff44 	movi	r2,-3
   23f64:	1886703a 	and	r3,r3,r2
   23f68:	e0bffd17 	ldw	r2,-12(fp)
   23f6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23f70:	e0bffd17 	ldw	r2,-12(fp)
   23f74:	10800017 	ldw	r2,0(r2)
   23f78:	10800104 	addi	r2,r2,4
   23f7c:	1007883a 	mov	r3,r2
   23f80:	e0bffd17 	ldw	r2,-12(fp)
   23f84:	10800817 	ldw	r2,32(r2)
   23f88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23f8c:	e0bffc17 	ldw	r2,-16(fp)
   23f90:	10800104 	addi	r2,r2,4
   23f94:	10800037 	ldwio	r2,0(r2)
  {
   23f98:	003f8c06 	br	23dcc <altera_avalon_jtag_uart_irq+0x28>
      break;
   23f9c:	0001883a 	nop
      }
    }
  }
}
   23fa0:	0001883a 	nop
   23fa4:	e037883a 	mov	sp,fp
   23fa8:	df000017 	ldw	fp,0(sp)
   23fac:	dec00104 	addi	sp,sp,4
   23fb0:	f800283a 	ret

00023fb4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23fb4:	defffc04 	addi	sp,sp,-16
   23fb8:	df000315 	stw	fp,12(sp)
   23fbc:	df000304 	addi	fp,sp,12
   23fc0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23fc4:	e0bffd17 	ldw	r2,-12(fp)
   23fc8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23fcc:	e0bfff17 	ldw	r2,-4(fp)
   23fd0:	10800017 	ldw	r2,0(r2)
   23fd4:	10800104 	addi	r2,r2,4
   23fd8:	10800037 	ldwio	r2,0(r2)
   23fdc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23fe0:	e0bffe17 	ldw	r2,-8(fp)
   23fe4:	1081000c 	andi	r2,r2,1024
   23fe8:	10000b26 	beq	r2,zero,24018 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23fec:	e0bfff17 	ldw	r2,-4(fp)
   23ff0:	10800017 	ldw	r2,0(r2)
   23ff4:	10800104 	addi	r2,r2,4
   23ff8:	1007883a 	mov	r3,r2
   23ffc:	e0bfff17 	ldw	r2,-4(fp)
   24000:	10800817 	ldw	r2,32(r2)
   24004:	10810014 	ori	r2,r2,1024
   24008:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2400c:	e0bfff17 	ldw	r2,-4(fp)
   24010:	10000915 	stw	zero,36(r2)
   24014:	00000a06 	br	24040 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24018:	e0bfff17 	ldw	r2,-4(fp)
   2401c:	10c00917 	ldw	r3,36(r2)
   24020:	00a00034 	movhi	r2,32768
   24024:	10bfff04 	addi	r2,r2,-4
   24028:	10c00536 	bltu	r2,r3,24040 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2402c:	e0bfff17 	ldw	r2,-4(fp)
   24030:	10800917 	ldw	r2,36(r2)
   24034:	10c00044 	addi	r3,r2,1
   24038:	e0bfff17 	ldw	r2,-4(fp)
   2403c:	10c00915 	stw	r3,36(r2)
   24040:	d0a6e017 	ldw	r2,-25728(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   24044:	e037883a 	mov	sp,fp
   24048:	df000017 	ldw	fp,0(sp)
   2404c:	dec00104 	addi	sp,sp,4
   24050:	f800283a 	ret

00024054 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   24054:	defffd04 	addi	sp,sp,-12
   24058:	df000215 	stw	fp,8(sp)
   2405c:	df000204 	addi	fp,sp,8
   24060:	e13fff15 	stw	r4,-4(fp)
   24064:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24068:	00000506 	br	24080 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2406c:	e0bffe17 	ldw	r2,-8(fp)
   24070:	1090000c 	andi	r2,r2,16384
   24074:	10000226 	beq	r2,zero,24080 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   24078:	00bffd44 	movi	r2,-11
   2407c:	00000b06 	br	240ac <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24080:	e0bfff17 	ldw	r2,-4(fp)
   24084:	10c00d17 	ldw	r3,52(r2)
   24088:	e0bfff17 	ldw	r2,-4(fp)
   2408c:	10800c17 	ldw	r2,48(r2)
   24090:	18800526 	beq	r3,r2,240a8 <altera_avalon_jtag_uart_close+0x54>
   24094:	e0bfff17 	ldw	r2,-4(fp)
   24098:	10c00917 	ldw	r3,36(r2)
   2409c:	e0bfff17 	ldw	r2,-4(fp)
   240a0:	10800117 	ldw	r2,4(r2)
   240a4:	18bff136 	bltu	r3,r2,2406c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   240a8:	0005883a 	mov	r2,zero
}
   240ac:	e037883a 	mov	sp,fp
   240b0:	df000017 	ldw	fp,0(sp)
   240b4:	dec00104 	addi	sp,sp,4
   240b8:	f800283a 	ret

000240bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   240bc:	defffa04 	addi	sp,sp,-24
   240c0:	df000515 	stw	fp,20(sp)
   240c4:	df000504 	addi	fp,sp,20
   240c8:	e13ffd15 	stw	r4,-12(fp)
   240cc:	e17ffc15 	stw	r5,-16(fp)
   240d0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   240d4:	00bff9c4 	movi	r2,-25
   240d8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   240dc:	e0bffc17 	ldw	r2,-16(fp)
   240e0:	109a8060 	cmpeqi	r2,r2,27137
   240e4:	1000041e 	bne	r2,zero,240f8 <altera_avalon_jtag_uart_ioctl+0x3c>
   240e8:	e0bffc17 	ldw	r2,-16(fp)
   240ec:	109a80a0 	cmpeqi	r2,r2,27138
   240f0:	1000181e 	bne	r2,zero,24154 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   240f4:	00002906 	br	2419c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   240f8:	e0bffd17 	ldw	r2,-12(fp)
   240fc:	10c00117 	ldw	r3,4(r2)
   24100:	00a00034 	movhi	r2,32768
   24104:	10bfffc4 	addi	r2,r2,-1
   24108:	18802126 	beq	r3,r2,24190 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   2410c:	e0bffb17 	ldw	r2,-20(fp)
   24110:	10800017 	ldw	r2,0(r2)
   24114:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24118:	e0bffe17 	ldw	r2,-8(fp)
   2411c:	10800090 	cmplti	r2,r2,2
   24120:	1000061e 	bne	r2,zero,2413c <altera_avalon_jtag_uart_ioctl+0x80>
   24124:	e0fffe17 	ldw	r3,-8(fp)
   24128:	00a00034 	movhi	r2,32768
   2412c:	10bfffc4 	addi	r2,r2,-1
   24130:	18800226 	beq	r3,r2,2413c <altera_avalon_jtag_uart_ioctl+0x80>
   24134:	e0bffe17 	ldw	r2,-8(fp)
   24138:	00000206 	br	24144 <altera_avalon_jtag_uart_ioctl+0x88>
   2413c:	00a00034 	movhi	r2,32768
   24140:	10bfff84 	addi	r2,r2,-2
   24144:	e0fffd17 	ldw	r3,-12(fp)
   24148:	18800115 	stw	r2,4(r3)
      rc = 0;
   2414c:	e03fff15 	stw	zero,-4(fp)
    break;
   24150:	00000f06 	br	24190 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   24154:	e0bffd17 	ldw	r2,-12(fp)
   24158:	10c00117 	ldw	r3,4(r2)
   2415c:	00a00034 	movhi	r2,32768
   24160:	10bfffc4 	addi	r2,r2,-1
   24164:	18800c26 	beq	r3,r2,24198 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24168:	e0bffd17 	ldw	r2,-12(fp)
   2416c:	10c00917 	ldw	r3,36(r2)
   24170:	e0bffd17 	ldw	r2,-12(fp)
   24174:	10800117 	ldw	r2,4(r2)
   24178:	1885803a 	cmpltu	r2,r3,r2
   2417c:	10c03fcc 	andi	r3,r2,255
   24180:	e0bffb17 	ldw	r2,-20(fp)
   24184:	10c00015 	stw	r3,0(r2)
      rc = 0;
   24188:	e03fff15 	stw	zero,-4(fp)
    break;
   2418c:	00000206 	br	24198 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   24190:	0001883a 	nop
   24194:	00000106 	br	2419c <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   24198:	0001883a 	nop
  }

  return rc;
   2419c:	e0bfff17 	ldw	r2,-4(fp)
}
   241a0:	e037883a 	mov	sp,fp
   241a4:	df000017 	ldw	fp,0(sp)
   241a8:	dec00104 	addi	sp,sp,4
   241ac:	f800283a 	ret

000241b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   241b0:	defff304 	addi	sp,sp,-52
   241b4:	dfc00c15 	stw	ra,48(sp)
   241b8:	df000b15 	stw	fp,44(sp)
   241bc:	df000b04 	addi	fp,sp,44
   241c0:	e13ff815 	stw	r4,-32(fp)
   241c4:	e17ff715 	stw	r5,-36(fp)
   241c8:	e1bff615 	stw	r6,-40(fp)
   241cc:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   241d0:	e0bff717 	ldw	r2,-36(fp)
   241d4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   241d8:	00004706 	br	242f8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   241dc:	e0bff817 	ldw	r2,-32(fp)
   241e0:	10800a17 	ldw	r2,40(r2)
   241e4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   241e8:	e0bff817 	ldw	r2,-32(fp)
   241ec:	10800b17 	ldw	r2,44(r2)
   241f0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   241f4:	e0fffd17 	ldw	r3,-12(fp)
   241f8:	e0bffc17 	ldw	r2,-16(fp)
   241fc:	18800536 	bltu	r3,r2,24214 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24200:	e0fffd17 	ldw	r3,-12(fp)
   24204:	e0bffc17 	ldw	r2,-16(fp)
   24208:	1885c83a 	sub	r2,r3,r2
   2420c:	e0bffe15 	stw	r2,-8(fp)
   24210:	00000406 	br	24224 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24214:	00c20004 	movi	r3,2048
   24218:	e0bffc17 	ldw	r2,-16(fp)
   2421c:	1885c83a 	sub	r2,r3,r2
   24220:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24224:	e0bffe17 	ldw	r2,-8(fp)
   24228:	10001e26 	beq	r2,zero,242a4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2422c:	e0fff617 	ldw	r3,-40(fp)
   24230:	e0bffe17 	ldw	r2,-8(fp)
   24234:	1880022e 	bgeu	r3,r2,24240 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24238:	e0bff617 	ldw	r2,-40(fp)
   2423c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24240:	e0bff817 	ldw	r2,-32(fp)
   24244:	10c00e04 	addi	r3,r2,56
   24248:	e0bffc17 	ldw	r2,-16(fp)
   2424c:	1885883a 	add	r2,r3,r2
   24250:	e1bffe17 	ldw	r6,-8(fp)
   24254:	100b883a 	mov	r5,r2
   24258:	e13fff17 	ldw	r4,-4(fp)
   2425c:	002264c0 	call	2264c <memcpy>
      ptr   += n;
   24260:	e0ffff17 	ldw	r3,-4(fp)
   24264:	e0bffe17 	ldw	r2,-8(fp)
   24268:	1885883a 	add	r2,r3,r2
   2426c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   24270:	e0fff617 	ldw	r3,-40(fp)
   24274:	e0bffe17 	ldw	r2,-8(fp)
   24278:	1885c83a 	sub	r2,r3,r2
   2427c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24280:	e0fffc17 	ldw	r3,-16(fp)
   24284:	e0bffe17 	ldw	r2,-8(fp)
   24288:	1885883a 	add	r2,r3,r2
   2428c:	10c1ffcc 	andi	r3,r2,2047
   24290:	e0bff817 	ldw	r2,-32(fp)
   24294:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   24298:	e0bff617 	ldw	r2,-40(fp)
   2429c:	00bfcf16 	blt	zero,r2,241dc <altera_avalon_jtag_uart_read+0x2c>
   242a0:	00000106 	br	242a8 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   242a4:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   242a8:	e0ffff17 	ldw	r3,-4(fp)
   242ac:	e0bff717 	ldw	r2,-36(fp)
   242b0:	1880141e 	bne	r3,r2,24304 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   242b4:	e0bff517 	ldw	r2,-44(fp)
   242b8:	1090000c 	andi	r2,r2,16384
   242bc:	1000131e 	bne	r2,zero,2430c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   242c0:	0001883a 	nop
   242c4:	e0bff817 	ldw	r2,-32(fp)
   242c8:	10800a17 	ldw	r2,40(r2)
   242cc:	e0fffd17 	ldw	r3,-12(fp)
   242d0:	1880051e 	bne	r3,r2,242e8 <altera_avalon_jtag_uart_read+0x138>
   242d4:	e0bff817 	ldw	r2,-32(fp)
   242d8:	10c00917 	ldw	r3,36(r2)
   242dc:	e0bff817 	ldw	r2,-32(fp)
   242e0:	10800117 	ldw	r2,4(r2)
   242e4:	18bff736 	bltu	r3,r2,242c4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   242e8:	e0bff817 	ldw	r2,-32(fp)
   242ec:	10800a17 	ldw	r2,40(r2)
   242f0:	e0fffd17 	ldw	r3,-12(fp)
   242f4:	18800726 	beq	r3,r2,24314 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   242f8:	e0bff617 	ldw	r2,-40(fp)
   242fc:	00bfb716 	blt	zero,r2,241dc <altera_avalon_jtag_uart_read+0x2c>
   24300:	00000506 	br	24318 <altera_avalon_jtag_uart_read+0x168>
      break;
   24304:	0001883a 	nop
   24308:	00000306 	br	24318 <altera_avalon_jtag_uart_read+0x168>
      break;
   2430c:	0001883a 	nop
   24310:	00000106 	br	24318 <altera_avalon_jtag_uart_read+0x168>
      break;
   24314:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24318:	e0ffff17 	ldw	r3,-4(fp)
   2431c:	e0bff717 	ldw	r2,-36(fp)
   24320:	18801926 	beq	r3,r2,24388 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   24324:	0005303a 	rdctl	r2,status
   24328:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2432c:	e0fff917 	ldw	r3,-28(fp)
   24330:	00bfff84 	movi	r2,-2
   24334:	1884703a 	and	r2,r3,r2
   24338:	1001703a 	wrctl	status,r2
  return context;
   2433c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24340:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24344:	e0bff817 	ldw	r2,-32(fp)
   24348:	10800817 	ldw	r2,32(r2)
   2434c:	10c00054 	ori	r3,r2,1
   24350:	e0bff817 	ldw	r2,-32(fp)
   24354:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24358:	e0bff817 	ldw	r2,-32(fp)
   2435c:	10800017 	ldw	r2,0(r2)
   24360:	10800104 	addi	r2,r2,4
   24364:	1007883a 	mov	r3,r2
   24368:	e0bff817 	ldw	r2,-32(fp)
   2436c:	10800817 	ldw	r2,32(r2)
   24370:	18800035 	stwio	r2,0(r3)
   24374:	e0bffb17 	ldw	r2,-20(fp)
   24378:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   2437c:	e0bffa17 	ldw	r2,-24(fp)
   24380:	1001703a 	wrctl	status,r2
}
   24384:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24388:	e0ffff17 	ldw	r3,-4(fp)
   2438c:	e0bff717 	ldw	r2,-36(fp)
   24390:	18800426 	beq	r3,r2,243a4 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   24394:	e0ffff17 	ldw	r3,-4(fp)
   24398:	e0bff717 	ldw	r2,-36(fp)
   2439c:	1885c83a 	sub	r2,r3,r2
   243a0:	00000606 	br	243bc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   243a4:	e0bff517 	ldw	r2,-44(fp)
   243a8:	1090000c 	andi	r2,r2,16384
   243ac:	10000226 	beq	r2,zero,243b8 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   243b0:	00bffd44 	movi	r2,-11
   243b4:	00000106 	br	243bc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   243b8:	00bffec4 	movi	r2,-5
}
   243bc:	e037883a 	mov	sp,fp
   243c0:	dfc00117 	ldw	ra,4(sp)
   243c4:	df000017 	ldw	fp,0(sp)
   243c8:	dec00204 	addi	sp,sp,8
   243cc:	f800283a 	ret

000243d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   243d0:	defff304 	addi	sp,sp,-52
   243d4:	dfc00c15 	stw	ra,48(sp)
   243d8:	df000b15 	stw	fp,44(sp)
   243dc:	df000b04 	addi	fp,sp,44
   243e0:	e13ff815 	stw	r4,-32(fp)
   243e4:	e17ff715 	stw	r5,-36(fp)
   243e8:	e1bff615 	stw	r6,-40(fp)
   243ec:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   243f0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   243f4:	e0bff717 	ldw	r2,-36(fp)
   243f8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   243fc:	00003706 	br	244dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24400:	e0bff817 	ldw	r2,-32(fp)
   24404:	10800c17 	ldw	r2,48(r2)
   24408:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   2440c:	e0bff817 	ldw	r2,-32(fp)
   24410:	10800d17 	ldw	r2,52(r2)
   24414:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   24418:	e0fffc17 	ldw	r3,-16(fp)
   2441c:	e0bfff17 	ldw	r2,-4(fp)
   24420:	1880062e 	bgeu	r3,r2,2443c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24424:	e0ffff17 	ldw	r3,-4(fp)
   24428:	e0bffc17 	ldw	r2,-16(fp)
   2442c:	1885c83a 	sub	r2,r3,r2
   24430:	10bfffc4 	addi	r2,r2,-1
   24434:	e0bffe15 	stw	r2,-8(fp)
   24438:	00000b06 	br	24468 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2443c:	e0bfff17 	ldw	r2,-4(fp)
   24440:	10000526 	beq	r2,zero,24458 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24444:	00c20004 	movi	r3,2048
   24448:	e0bffc17 	ldw	r2,-16(fp)
   2444c:	1885c83a 	sub	r2,r3,r2
   24450:	e0bffe15 	stw	r2,-8(fp)
   24454:	00000406 	br	24468 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24458:	00c1ffc4 	movi	r3,2047
   2445c:	e0bffc17 	ldw	r2,-16(fp)
   24460:	1885c83a 	sub	r2,r3,r2
   24464:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24468:	e0bffe17 	ldw	r2,-8(fp)
   2446c:	10001e26 	beq	r2,zero,244e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24470:	e0fff617 	ldw	r3,-40(fp)
   24474:	e0bffe17 	ldw	r2,-8(fp)
   24478:	1880022e 	bgeu	r3,r2,24484 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2447c:	e0bff617 	ldw	r2,-40(fp)
   24480:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24484:	e0bff817 	ldw	r2,-32(fp)
   24488:	10c20e04 	addi	r3,r2,2104
   2448c:	e0bffc17 	ldw	r2,-16(fp)
   24490:	1885883a 	add	r2,r3,r2
   24494:	e1bffe17 	ldw	r6,-8(fp)
   24498:	e17ff717 	ldw	r5,-36(fp)
   2449c:	1009883a 	mov	r4,r2
   244a0:	002264c0 	call	2264c <memcpy>
      ptr   += n;
   244a4:	e0fff717 	ldw	r3,-36(fp)
   244a8:	e0bffe17 	ldw	r2,-8(fp)
   244ac:	1885883a 	add	r2,r3,r2
   244b0:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   244b4:	e0fff617 	ldw	r3,-40(fp)
   244b8:	e0bffe17 	ldw	r2,-8(fp)
   244bc:	1885c83a 	sub	r2,r3,r2
   244c0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   244c4:	e0fffc17 	ldw	r3,-16(fp)
   244c8:	e0bffe17 	ldw	r2,-8(fp)
   244cc:	1885883a 	add	r2,r3,r2
   244d0:	10c1ffcc 	andi	r3,r2,2047
   244d4:	e0bff817 	ldw	r2,-32(fp)
   244d8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   244dc:	e0bff617 	ldw	r2,-40(fp)
   244e0:	00bfc716 	blt	zero,r2,24400 <altera_avalon_jtag_uart_write+0x30>
   244e4:	00000106 	br	244ec <altera_avalon_jtag_uart_write+0x11c>
        break;
   244e8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   244ec:	0005303a 	rdctl	r2,status
   244f0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   244f4:	e0fff917 	ldw	r3,-28(fp)
   244f8:	00bfff84 	movi	r2,-2
   244fc:	1884703a 	and	r2,r3,r2
   24500:	1001703a 	wrctl	status,r2
  return context;
   24504:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24508:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2450c:	e0bff817 	ldw	r2,-32(fp)
   24510:	10800817 	ldw	r2,32(r2)
   24514:	10c00094 	ori	r3,r2,2
   24518:	e0bff817 	ldw	r2,-32(fp)
   2451c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24520:	e0bff817 	ldw	r2,-32(fp)
   24524:	10800017 	ldw	r2,0(r2)
   24528:	10800104 	addi	r2,r2,4
   2452c:	1007883a 	mov	r3,r2
   24530:	e0bff817 	ldw	r2,-32(fp)
   24534:	10800817 	ldw	r2,32(r2)
   24538:	18800035 	stwio	r2,0(r3)
   2453c:	e0bffb17 	ldw	r2,-20(fp)
   24540:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   24544:	e0bffa17 	ldw	r2,-24(fp)
   24548:	1001703a 	wrctl	status,r2
}
   2454c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24550:	e0bff617 	ldw	r2,-40(fp)
   24554:	0080100e 	bge	zero,r2,24598 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   24558:	e0bff517 	ldw	r2,-44(fp)
   2455c:	1090000c 	andi	r2,r2,16384
   24560:	1000101e 	bne	r2,zero,245a4 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24564:	0001883a 	nop
   24568:	e0bff817 	ldw	r2,-32(fp)
   2456c:	10800d17 	ldw	r2,52(r2)
   24570:	e0ffff17 	ldw	r3,-4(fp)
   24574:	1880051e 	bne	r3,r2,2458c <altera_avalon_jtag_uart_write+0x1bc>
   24578:	e0bff817 	ldw	r2,-32(fp)
   2457c:	10c00917 	ldw	r3,36(r2)
   24580:	e0bff817 	ldw	r2,-32(fp)
   24584:	10800117 	ldw	r2,4(r2)
   24588:	18bff736 	bltu	r3,r2,24568 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2458c:	e0bff817 	ldw	r2,-32(fp)
   24590:	10800917 	ldw	r2,36(r2)
   24594:	1000051e 	bne	r2,zero,245ac <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   24598:	e0bff617 	ldw	r2,-40(fp)
   2459c:	00bfcf16 	blt	zero,r2,244dc <altera_avalon_jtag_uart_write+0x10c>
   245a0:	00000306 	br	245b0 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   245a4:	0001883a 	nop
   245a8:	00000106 	br	245b0 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   245ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   245b0:	e0fff717 	ldw	r3,-36(fp)
   245b4:	e0bffd17 	ldw	r2,-12(fp)
   245b8:	18800426 	beq	r3,r2,245cc <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   245bc:	e0fff717 	ldw	r3,-36(fp)
   245c0:	e0bffd17 	ldw	r2,-12(fp)
   245c4:	1885c83a 	sub	r2,r3,r2
   245c8:	00000606 	br	245e4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   245cc:	e0bff517 	ldw	r2,-44(fp)
   245d0:	1090000c 	andi	r2,r2,16384
   245d4:	10000226 	beq	r2,zero,245e0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   245d8:	00bffd44 	movi	r2,-11
   245dc:	00000106 	br	245e4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   245e0:	00bffec4 	movi	r2,-5
}
   245e4:	e037883a 	mov	sp,fp
   245e8:	dfc00117 	ldw	ra,4(sp)
   245ec:	df000017 	ldw	fp,0(sp)
   245f0:	dec00204 	addi	sp,sp,8
   245f4:	f800283a 	ret

000245f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   245f8:	defff904 	addi	sp,sp,-28
   245fc:	dfc00615 	stw	ra,24(sp)
   24600:	df000515 	stw	fp,20(sp)
   24604:	df000504 	addi	fp,sp,20
   24608:	e13ffc15 	stw	r4,-16(fp)
   2460c:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   24610:	0007883a 	mov	r3,zero
   24614:	e0bffc17 	ldw	r2,-16(fp)
   24618:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2461c:	e0bffc17 	ldw	r2,-16(fp)
   24620:	10800104 	addi	r2,r2,4
   24624:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   24628:	0005303a 	rdctl	r2,status
   2462c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24630:	e0fffd17 	ldw	r3,-12(fp)
   24634:	00bfff84 	movi	r2,-2
   24638:	1884703a 	and	r2,r3,r2
   2463c:	1001703a 	wrctl	status,r2
  return context;
   24640:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   24644:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   24648:	00254200 	call	25420 <alt_tick>
   2464c:	e0bfff17 	ldw	r2,-4(fp)
   24650:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   24654:	e0bffe17 	ldw	r2,-8(fp)
   24658:	1001703a 	wrctl	status,r2
}
   2465c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   24660:	0001883a 	nop
   24664:	e037883a 	mov	sp,fp
   24668:	dfc00117 	ldw	ra,4(sp)
   2466c:	df000017 	ldw	fp,0(sp)
   24670:	dec00204 	addi	sp,sp,8
   24674:	f800283a 	ret

00024678 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24678:	defff904 	addi	sp,sp,-28
   2467c:	dfc00615 	stw	ra,24(sp)
   24680:	df000515 	stw	fp,20(sp)
   24684:	df000504 	addi	fp,sp,20
   24688:	e13ffe15 	stw	r4,-8(fp)
   2468c:	e17ffd15 	stw	r5,-12(fp)
   24690:	e1bffc15 	stw	r6,-16(fp)
   24694:	e1fffb15 	stw	r7,-20(fp)
   24698:	e0bffb17 	ldw	r2,-20(fp)
   2469c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   246a0:	d0a6e017 	ldw	r2,-25728(gp)
   246a4:	1000031e 	bne	r2,zero,246b4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   246a8:	e0bfff17 	ldw	r2,-4(fp)
   246ac:	d0a6e015 	stw	r2,-25728(gp)
    return 0;
   246b0:	00000106 	br	246b8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   246b4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   246b8:	e0bffe17 	ldw	r2,-8(fp)
   246bc:	10800104 	addi	r2,r2,4
   246c0:	00c001c4 	movi	r3,7
   246c4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   246c8:	018000b4 	movhi	r6,2
   246cc:	31917e04 	addi	r6,r6,17912
   246d0:	e17ffe17 	ldw	r5,-8(fp)
   246d4:	e13ffc17 	ldw	r4,-16(fp)
   246d8:	00230400 	call	23040 <alt_irq_register>
#endif  
}
   246dc:	0001883a 	nop
   246e0:	e037883a 	mov	sp,fp
   246e4:	dfc00117 	ldw	ra,4(sp)
   246e8:	df000017 	ldw	fp,0(sp)
   246ec:	dec00204 	addi	sp,sp,8
   246f0:	f800283a 	ret

000246f4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   246f4:	defffe04 	addi	sp,sp,-8
   246f8:	df000115 	stw	fp,4(sp)
   246fc:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   24700:	d0a6de17 	ldw	r2,-25736(gp)
   24704:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   24708:	d0a6df17 	ldw	r2,-25732(gp)
   2470c:	1000021e 	bne	r2,zero,24718 <alt_timestamp_start+0x24>
  {
    return -1;
   24710:	00bfffc4 	movi	r2,-1
   24714:	00001106 	br	2475c <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   24718:	e0bfff17 	ldw	r2,-4(fp)
   2471c:	10800104 	addi	r2,r2,4
   24720:	00c00204 	movi	r3,8
   24724:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   24728:	e0bfff17 	ldw	r2,-4(fp)
   2472c:	10800204 	addi	r2,r2,8
   24730:	00ffffd4 	movui	r3,65535
   24734:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   24738:	e0bfff17 	ldw	r2,-4(fp)
   2473c:	10800304 	addi	r2,r2,12
   24740:	00ffffd4 	movui	r3,65535
   24744:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   24748:	e0bfff17 	ldw	r2,-4(fp)
   2474c:	10800104 	addi	r2,r2,4
   24750:	00c00104 	movi	r3,4
   24754:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   24758:	0005883a 	mov	r2,zero
}
   2475c:	e037883a 	mov	sp,fp
   24760:	df000017 	ldw	fp,0(sp)
   24764:	dec00104 	addi	sp,sp,4
   24768:	f800283a 	ret

0002476c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   2476c:	defffc04 	addi	sp,sp,-16
   24770:	df000315 	stw	fp,12(sp)
   24774:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   24778:	d0a6de17 	ldw	r2,-25736(gp)
   2477c:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   24780:	d0a6df17 	ldw	r2,-25732(gp)
   24784:	1000021e 	bne	r2,zero,24790 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   24788:	00bfffc4 	movi	r2,-1
   2478c:	00001306 	br	247dc <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   24790:	e0bfff17 	ldw	r2,-4(fp)
   24794:	10800404 	addi	r2,r2,16
   24798:	0007883a 	mov	r3,zero
   2479c:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   247a0:	e0bfff17 	ldw	r2,-4(fp)
   247a4:	10800404 	addi	r2,r2,16
   247a8:	10800037 	ldwio	r2,0(r2)
   247ac:	10bfffcc 	andi	r2,r2,65535
   247b0:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   247b4:	e0bfff17 	ldw	r2,-4(fp)
   247b8:	10800504 	addi	r2,r2,20
   247bc:	10800037 	ldwio	r2,0(r2)
   247c0:	10bfffcc 	andi	r2,r2,65535
   247c4:	e0bffd15 	stw	r2,-12(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   247c8:	e0bffd17 	ldw	r2,-12(fp)
   247cc:	1006943a 	slli	r3,r2,16
   247d0:	e0bffe17 	ldw	r2,-8(fp)
   247d4:	1884b03a 	or	r2,r3,r2
   247d8:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   247dc:	e037883a 	mov	sp,fp
   247e0:	df000017 	ldw	fp,0(sp)
   247e4:	dec00104 	addi	sp,sp,4
   247e8:	f800283a 	ret

000247ec <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   247ec:	deffff04 	addi	sp,sp,-4
   247f0:	df000015 	stw	fp,0(sp)
   247f4:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   247f8:	d0a6df17 	ldw	r2,-25732(gp)
}
   247fc:	e037883a 	mov	sp,fp
   24800:	df000017 	ldw	fp,0(sp)
   24804:	dec00104 	addi	sp,sp,4
   24808:	f800283a 	ret

0002480c <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   2480c:	defffc04 	addi	sp,sp,-16
   24810:	dfc00315 	stw	ra,12(sp)
   24814:	df000215 	stw	fp,8(sp)
   24818:	df000204 	addi	fp,sp,8
   2481c:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   24820:	d1600604 	addi	r5,gp,-32744
   24824:	e13ffe17 	ldw	r4,-8(fp)
   24828:	0024f040 	call	24f04 <alt_find_dev>
   2482c:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   24830:	e0bfff17 	ldw	r2,-4(fp)
}
   24834:	e037883a 	mov	sp,fp
   24838:	dfc00117 	ldw	ra,4(sp)
   2483c:	df000017 	ldw	fp,0(sp)
   24840:	dec00204 	addi	sp,sp,8
   24844:	f800283a 	ret

00024848 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   24848:	defffd04 	addi	sp,sp,-12
   2484c:	df000215 	stw	fp,8(sp)
   24850:	df000204 	addi	fp,sp,8
   24854:	e13fff15 	stw	r4,-4(fp)
   24858:	e17ffe15 	stw	r5,-8(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   2485c:	e0bfff17 	ldw	r2,-4(fp)
   24860:	10800a17 	ldw	r2,40(r2)
   24864:	10800023 	ldbuio	r2,0(r2)
   24868:	10803fcc 	andi	r2,r2,255
   2486c:	1007883a 	mov	r3,r2
   24870:	e0bffe17 	ldw	r2,-8(fp)
   24874:	10c00005 	stb	r3,0(r2)

	return 0;
   24878:	0005883a 	mov	r2,zero
}
   2487c:	e037883a 	mov	sp,fp
   24880:	df000017 	ldw	fp,0(sp)
   24884:	dec00104 	addi	sp,sp,4
   24888:	f800283a 	ret

0002488c <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   2488c:	defffc04 	addi	sp,sp,-16
   24890:	df000315 	stw	fp,12(sp)
   24894:	df000304 	addi	fp,sp,12
   24898:	e13fff15 	stw	r4,-4(fp)
   2489c:	2805883a 	mov	r2,r5
   248a0:	e1bffd15 	stw	r6,-12(fp)
   248a4:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   248a8:	e0bfff17 	ldw	r2,-4(fp)
   248ac:	10800a17 	ldw	r2,40(r2)
   248b0:	1007883a 	mov	r3,r2
   248b4:	e0bffe03 	ldbu	r2,-8(fp)
   248b8:	10800fcc 	andi	r2,r2,63
   248bc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   248c0:	e0bfff17 	ldw	r2,-4(fp)
   248c4:	10800a17 	ldw	r2,40(r2)
   248c8:	10800044 	addi	r2,r2,1
   248cc:	10800023 	ldbuio	r2,0(r2)
   248d0:	10803fcc 	andi	r2,r2,255
   248d4:	1007883a 	mov	r3,r2
   248d8:	e0bffd17 	ldw	r2,-12(fp)
   248dc:	10c00005 	stb	r3,0(r2)

	return 0;
   248e0:	0005883a 	mov	r2,zero
}
   248e4:	e037883a 	mov	sp,fp
   248e8:	df000017 	ldw	fp,0(sp)
   248ec:	dec00104 	addi	sp,sp,4
   248f0:	f800283a 	ret

000248f4 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   248f4:	defffc04 	addi	sp,sp,-16
   248f8:	df000315 	stw	fp,12(sp)
   248fc:	df000304 	addi	fp,sp,12
   24900:	e13fff15 	stw	r4,-4(fp)
   24904:	2805883a 	mov	r2,r5
   24908:	3007883a 	mov	r3,r6
   2490c:	e0bffe05 	stb	r2,-8(fp)
   24910:	1805883a 	mov	r2,r3
   24914:	e0bffd05 	stb	r2,-12(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   24918:	e0bfff17 	ldw	r2,-4(fp)
   2491c:	10800a17 	ldw	r2,40(r2)
   24920:	1007883a 	mov	r3,r2
   24924:	e0bffe03 	ldbu	r2,-8(fp)
   24928:	10800fcc 	andi	r2,r2,63
   2492c:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   24930:	e0bfff17 	ldw	r2,-4(fp)
   24934:	10800a17 	ldw	r2,40(r2)
   24938:	10800044 	addi	r2,r2,1
   2493c:	1007883a 	mov	r3,r2
   24940:	e0bffd03 	ldbu	r2,-12(fp)
   24944:	18800025 	stbio	r2,0(r3)

	return 0;
   24948:	0005883a 	mov	r2,zero
}
   2494c:	e037883a 	mov	sp,fp
   24950:	df000017 	ldw	fp,0(sp)
   24954:	dec00104 	addi	sp,sp,4
   24958:	f800283a 	ret

0002495c <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   2495c:	defffd04 	addi	sp,sp,-12
   24960:	df000215 	stw	fp,8(sp)
   24964:	df000204 	addi	fp,sp,8
   24968:	e13fff15 	stw	r4,-4(fp)
   2496c:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   24970:	e0bfff17 	ldw	r2,-4(fp)
   24974:	10800a17 	ldw	r2,40(r2)
   24978:	1007883a 	mov	r3,r2
   2497c:	00800c84 	movi	r2,50
   24980:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   24984:	e0bfff17 	ldw	r2,-4(fp)
   24988:	10800a17 	ldw	r2,40(r2)
   2498c:	10800044 	addi	r2,r2,1
   24990:	10800023 	ldbuio	r2,0(r2)
   24994:	10803fcc 	andi	r2,r2,255
   24998:	10ffffcc 	andi	r3,r2,65535
   2499c:	e0bffe17 	ldw	r2,-8(fp)
   249a0:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   249a4:	e0bfff17 	ldw	r2,-4(fp)
   249a8:	10800a17 	ldw	r2,40(r2)
   249ac:	1007883a 	mov	r3,r2
   249b0:	00800cc4 	movi	r2,51
   249b4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   249b8:	e0bfff17 	ldw	r2,-4(fp)
   249bc:	10800a17 	ldw	r2,40(r2)
   249c0:	10800044 	addi	r2,r2,1
   249c4:	10800023 	ldbuio	r2,0(r2)
   249c8:	10803fcc 	andi	r2,r2,255
   249cc:	1006923a 	slli	r3,r2,8
   249d0:	00804034 	movhi	r2,256
   249d4:	10bfc004 	addi	r2,r2,-256
   249d8:	1884703a 	and	r2,r3,r2
   249dc:	e0fffe17 	ldw	r3,-8(fp)
   249e0:	18c00017 	ldw	r3,0(r3)
   249e4:	10c5883a 	add	r2,r2,r3
   249e8:	1007883a 	mov	r3,r2
   249ec:	e0bffe17 	ldw	r2,-8(fp)
   249f0:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   249f4:	e0bffe17 	ldw	r2,-8(fp)
   249f8:	10800017 	ldw	r2,0(r2)
   249fc:	10a0000c 	andi	r2,r2,32768
   24a00:	10000626 	beq	r2,zero,24a1c <alt_up_accelerometer_spi_read_x_axis+0xc0>
	{
		*(x_axis) |= 0xFFFF0000;
   24a04:	e0bffe17 	ldw	r2,-8(fp)
   24a08:	10800017 	ldw	r2,0(r2)
   24a0c:	10bffff4 	orhi	r2,r2,65535
   24a10:	1007883a 	mov	r3,r2
   24a14:	e0bffe17 	ldw	r2,-8(fp)
   24a18:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   24a1c:	0005883a 	mov	r2,zero
}
   24a20:	e037883a 	mov	sp,fp
   24a24:	df000017 	ldw	fp,0(sp)
   24a28:	dec00104 	addi	sp,sp,4
   24a2c:	f800283a 	ret

00024a30 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   24a30:	defffd04 	addi	sp,sp,-12
   24a34:	df000215 	stw	fp,8(sp)
   24a38:	df000204 	addi	fp,sp,8
   24a3c:	e13fff15 	stw	r4,-4(fp)
   24a40:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   24a44:	e0bfff17 	ldw	r2,-4(fp)
   24a48:	10800a17 	ldw	r2,40(r2)
   24a4c:	1007883a 	mov	r3,r2
   24a50:	00800d04 	movi	r2,52
   24a54:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   24a58:	e0bfff17 	ldw	r2,-4(fp)
   24a5c:	10800a17 	ldw	r2,40(r2)
   24a60:	10800044 	addi	r2,r2,1
   24a64:	10800023 	ldbuio	r2,0(r2)
   24a68:	10803fcc 	andi	r2,r2,255
   24a6c:	10ffffcc 	andi	r3,r2,65535
   24a70:	e0bffe17 	ldw	r2,-8(fp)
   24a74:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   24a78:	e0bfff17 	ldw	r2,-4(fp)
   24a7c:	10800a17 	ldw	r2,40(r2)
   24a80:	1007883a 	mov	r3,r2
   24a84:	00800d44 	movi	r2,53
   24a88:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   24a8c:	e0bfff17 	ldw	r2,-4(fp)
   24a90:	10800a17 	ldw	r2,40(r2)
   24a94:	10800044 	addi	r2,r2,1
   24a98:	10800023 	ldbuio	r2,0(r2)
   24a9c:	10803fcc 	andi	r2,r2,255
   24aa0:	1006923a 	slli	r3,r2,8
   24aa4:	00804034 	movhi	r2,256
   24aa8:	10bfc004 	addi	r2,r2,-256
   24aac:	1884703a 	and	r2,r3,r2
   24ab0:	e0fffe17 	ldw	r3,-8(fp)
   24ab4:	18c00017 	ldw	r3,0(r3)
   24ab8:	10c5883a 	add	r2,r2,r3
   24abc:	1007883a 	mov	r3,r2
   24ac0:	e0bffe17 	ldw	r2,-8(fp)
   24ac4:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   24ac8:	e0bffe17 	ldw	r2,-8(fp)
   24acc:	10800017 	ldw	r2,0(r2)
   24ad0:	10a0000c 	andi	r2,r2,32768
   24ad4:	10000626 	beq	r2,zero,24af0 <alt_up_accelerometer_spi_read_y_axis+0xc0>
	{
		*(y_axis) |= 0xFFFF0000;
   24ad8:	e0bffe17 	ldw	r2,-8(fp)
   24adc:	10800017 	ldw	r2,0(r2)
   24ae0:	10bffff4 	orhi	r2,r2,65535
   24ae4:	1007883a 	mov	r3,r2
   24ae8:	e0bffe17 	ldw	r2,-8(fp)
   24aec:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   24af0:	0005883a 	mov	r2,zero
}
   24af4:	e037883a 	mov	sp,fp
   24af8:	df000017 	ldw	fp,0(sp)
   24afc:	dec00104 	addi	sp,sp,4
   24b00:	f800283a 	ret

00024b04 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   24b04:	defffd04 	addi	sp,sp,-12
   24b08:	df000215 	stw	fp,8(sp)
   24b0c:	df000204 	addi	fp,sp,8
   24b10:	e13fff15 	stw	r4,-4(fp)
   24b14:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   24b18:	e0bfff17 	ldw	r2,-4(fp)
   24b1c:	10800a17 	ldw	r2,40(r2)
   24b20:	1007883a 	mov	r3,r2
   24b24:	00800d84 	movi	r2,54
   24b28:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   24b2c:	e0bfff17 	ldw	r2,-4(fp)
   24b30:	10800a17 	ldw	r2,40(r2)
   24b34:	10800044 	addi	r2,r2,1
   24b38:	10800023 	ldbuio	r2,0(r2)
   24b3c:	10803fcc 	andi	r2,r2,255
   24b40:	10ffffcc 	andi	r3,r2,65535
   24b44:	e0bffe17 	ldw	r2,-8(fp)
   24b48:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   24b4c:	e0bfff17 	ldw	r2,-4(fp)
   24b50:	10800a17 	ldw	r2,40(r2)
   24b54:	1007883a 	mov	r3,r2
   24b58:	00800dc4 	movi	r2,55
   24b5c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   24b60:	e0bfff17 	ldw	r2,-4(fp)
   24b64:	10800a17 	ldw	r2,40(r2)
   24b68:	10800044 	addi	r2,r2,1
   24b6c:	10800023 	ldbuio	r2,0(r2)
   24b70:	10803fcc 	andi	r2,r2,255
   24b74:	1006923a 	slli	r3,r2,8
   24b78:	00804034 	movhi	r2,256
   24b7c:	10bfc004 	addi	r2,r2,-256
   24b80:	1884703a 	and	r2,r3,r2
   24b84:	e0fffe17 	ldw	r3,-8(fp)
   24b88:	18c00017 	ldw	r3,0(r3)
   24b8c:	10c5883a 	add	r2,r2,r3
   24b90:	1007883a 	mov	r3,r2
   24b94:	e0bffe17 	ldw	r2,-8(fp)
   24b98:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   24b9c:	e0bffe17 	ldw	r2,-8(fp)
   24ba0:	10800017 	ldw	r2,0(r2)
   24ba4:	10a0000c 	andi	r2,r2,32768
   24ba8:	10000626 	beq	r2,zero,24bc4 <alt_up_accelerometer_spi_read_z_axis+0xc0>
	{
		*(z_axis) |= 0xFFFF0000;
   24bac:	e0bffe17 	ldw	r2,-8(fp)
   24bb0:	10800017 	ldw	r2,0(r2)
   24bb4:	10bffff4 	orhi	r2,r2,65535
   24bb8:	1007883a 	mov	r3,r2
   24bbc:	e0bffe17 	ldw	r2,-8(fp)
   24bc0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   24bc4:	0005883a 	mov	r2,zero
}
   24bc8:	e037883a 	mov	sp,fp
   24bcc:	df000017 	ldw	fp,0(sp)
   24bd0:	dec00104 	addi	sp,sp,4
   24bd4:	f800283a 	ret

00024bd8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24bd8:	defff404 	addi	sp,sp,-48
   24bdc:	df000b15 	stw	fp,44(sp)
   24be0:	df000b04 	addi	fp,sp,44
   24be4:	e13ff815 	stw	r4,-32(fp)
   24be8:	e17ff715 	stw	r5,-36(fp)
   24bec:	e1bff615 	stw	r6,-40(fp)
   24bf0:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   24bf4:	e03ffe15 	stw	zero,-8(fp)
   24bf8:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   24bfc:	d0a6e017 	ldw	r2,-25728(gp)
  
  if (alt_ticks_per_second ())
   24c00:	10004826 	beq	r2,zero,24d24 <alt_alarm_start+0x14c>
  {
    if (alarm)
   24c04:	e0bff817 	ldw	r2,-32(fp)
   24c08:	10004426 	beq	r2,zero,24d1c <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   24c0c:	e0bff817 	ldw	r2,-32(fp)
   24c10:	e0fff617 	ldw	r3,-40(fp)
   24c14:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   24c18:	e0bff817 	ldw	r2,-32(fp)
   24c1c:	e0fff517 	ldw	r3,-44(fp)
   24c20:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   24c24:	0005303a 	rdctl	r2,status
   24c28:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c2c:	e0fff917 	ldw	r3,-28(fp)
   24c30:	00bfff84 	movi	r2,-2
   24c34:	1884703a 	and	r2,r3,r2
   24c38:	1001703a 	wrctl	status,r2
  return context;
   24c3c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   24c40:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24c44:	d0a6e117 	ldw	r2,-25724(gp)
   24c48:	d0e6e217 	ldw	r3,-25720(gp)
      
      current_nticks = alt_nticks();
   24c4c:	e0bffe15 	stw	r2,-8(fp)
   24c50:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   24c54:	e0bff717 	ldw	r2,-36(fp)
   24c58:	1011883a 	mov	r8,r2
   24c5c:	0013883a 	mov	r9,zero
   24c60:	e13ffe17 	ldw	r4,-8(fp)
   24c64:	e17fff17 	ldw	r5,-4(fp)
   24c68:	4105883a 	add	r2,r8,r4
   24c6c:	120d803a 	cmpltu	r6,r2,r8
   24c70:	4947883a 	add	r3,r9,r5
   24c74:	30c9883a 	add	r4,r6,r3
   24c78:	2007883a 	mov	r3,r4
   24c7c:	1009883a 	mov	r4,r2
   24c80:	180b883a 	mov	r5,r3
   24c84:	01800044 	movi	r6,1
   24c88:	000f883a 	mov	r7,zero
   24c8c:	2185883a 	add	r2,r4,r6
   24c90:	1111803a 	cmpltu	r8,r2,r4
   24c94:	29c7883a 	add	r3,r5,r7
   24c98:	40c9883a 	add	r4,r8,r3
   24c9c:	2007883a 	mov	r3,r4
   24ca0:	1009883a 	mov	r4,r2
   24ca4:	180b883a 	mov	r5,r3
   24ca8:	e0bff817 	ldw	r2,-32(fp)
   24cac:	11000215 	stw	r4,8(r2)
   24cb0:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24cb4:	e0bff817 	ldw	r2,-32(fp)
   24cb8:	d0e00c04 	addi	r3,gp,-32720
   24cbc:	e0fffb15 	stw	r3,-20(fp)
   24cc0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24cc4:	e0bffa17 	ldw	r2,-24(fp)
   24cc8:	e0fffb17 	ldw	r3,-20(fp)
   24ccc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24cd0:	e0bffb17 	ldw	r2,-20(fp)
   24cd4:	10c00017 	ldw	r3,0(r2)
   24cd8:	e0bffa17 	ldw	r2,-24(fp)
   24cdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24ce0:	e0bffb17 	ldw	r2,-20(fp)
   24ce4:	10800017 	ldw	r2,0(r2)
   24ce8:	e0fffa17 	ldw	r3,-24(fp)
   24cec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24cf0:	e0bffb17 	ldw	r2,-20(fp)
   24cf4:	e0fffa17 	ldw	r3,-24(fp)
   24cf8:	10c00015 	stw	r3,0(r2)
}
   24cfc:	0001883a 	nop
   24d00:	e0bffd17 	ldw	r2,-12(fp)
   24d04:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   24d08:	e0bffc17 	ldw	r2,-16(fp)
   24d0c:	1001703a 	wrctl	status,r2
}
   24d10:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   24d14:	0005883a 	mov	r2,zero
   24d18:	00000306 	br	24d28 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   24d1c:	00bffa84 	movi	r2,-22
   24d20:	00000106 	br	24d28 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   24d24:	00bfde84 	movi	r2,-134
  }
}
   24d28:	e037883a 	mov	sp,fp
   24d2c:	df000017 	ldw	fp,0(sp)
   24d30:	dec00104 	addi	sp,sp,4
   24d34:	f800283a 	ret

00024d38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24d38:	deffff04 	addi	sp,sp,-4
   24d3c:	df000015 	stw	fp,0(sp)
   24d40:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24d44:	0001883a 	nop
   24d48:	e037883a 	mov	sp,fp
   24d4c:	df000017 	ldw	fp,0(sp)
   24d50:	dec00104 	addi	sp,sp,4
   24d54:	f800283a 	ret

00024d58 <alt_get_errno>:
{
   24d58:	defffe04 	addi	sp,sp,-8
   24d5c:	dfc00115 	stw	ra,4(sp)
   24d60:	df000015 	stw	fp,0(sp)
   24d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24d68:	d0a00917 	ldw	r2,-32732(gp)
   24d6c:	10000326 	beq	r2,zero,24d7c <alt_get_errno+0x24>
   24d70:	d0a00917 	ldw	r2,-32732(gp)
   24d74:	103ee83a 	callr	r2
   24d78:	00000106 	br	24d80 <alt_get_errno+0x28>
   24d7c:	d0a6d904 	addi	r2,gp,-25756
}
   24d80:	e037883a 	mov	sp,fp
   24d84:	dfc00117 	ldw	ra,4(sp)
   24d88:	df000017 	ldw	fp,0(sp)
   24d8c:	dec00204 	addi	sp,sp,8
   24d90:	f800283a 	ret

00024d94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24d94:	defffa04 	addi	sp,sp,-24
   24d98:	dfc00515 	stw	ra,20(sp)
   24d9c:	df000415 	stw	fp,16(sp)
   24da0:	df000404 	addi	fp,sp,16
   24da4:	e13ffd15 	stw	r4,-12(fp)
   24da8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24dac:	e0bffd17 	ldw	r2,-12(fp)
   24db0:	10000326 	beq	r2,zero,24dc0 <alt_dev_llist_insert+0x2c>
   24db4:	e0bffd17 	ldw	r2,-12(fp)
   24db8:	10800217 	ldw	r2,8(r2)
   24dbc:	1000061e 	bne	r2,zero,24dd8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24dc0:	0024d580 	call	24d58 <alt_get_errno>
   24dc4:	1007883a 	mov	r3,r2
   24dc8:	00800584 	movi	r2,22
   24dcc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24dd0:	00bffa84 	movi	r2,-22
   24dd4:	00001406 	br	24e28 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24dd8:	e0bffd17 	ldw	r2,-12(fp)
   24ddc:	e0fffc17 	ldw	r3,-16(fp)
   24de0:	e0ffff15 	stw	r3,-4(fp)
   24de4:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   24de8:	e0bffe17 	ldw	r2,-8(fp)
   24dec:	e0ffff17 	ldw	r3,-4(fp)
   24df0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24df4:	e0bfff17 	ldw	r2,-4(fp)
   24df8:	10c00017 	ldw	r3,0(r2)
   24dfc:	e0bffe17 	ldw	r2,-8(fp)
   24e00:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   24e04:	e0bfff17 	ldw	r2,-4(fp)
   24e08:	10800017 	ldw	r2,0(r2)
   24e0c:	e0fffe17 	ldw	r3,-8(fp)
   24e10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24e14:	e0bfff17 	ldw	r2,-4(fp)
   24e18:	e0fffe17 	ldw	r3,-8(fp)
   24e1c:	10c00015 	stw	r3,0(r2)
}
   24e20:	0001883a 	nop

  return 0;  
   24e24:	0005883a 	mov	r2,zero
}
   24e28:	e037883a 	mov	sp,fp
   24e2c:	dfc00117 	ldw	ra,4(sp)
   24e30:	df000017 	ldw	fp,0(sp)
   24e34:	dec00204 	addi	sp,sp,8
   24e38:	f800283a 	ret

00024e3c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24e3c:	defffd04 	addi	sp,sp,-12
   24e40:	dfc00215 	stw	ra,8(sp)
   24e44:	df000115 	stw	fp,4(sp)
   24e48:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24e4c:	008000b4 	movhi	r2,2
   24e50:	1098f804 	addi	r2,r2,25568
   24e54:	e0bfff15 	stw	r2,-4(fp)
   24e58:	00000606 	br	24e74 <_do_ctors+0x38>
        (*ctor) (); 
   24e5c:	e0bfff17 	ldw	r2,-4(fp)
   24e60:	10800017 	ldw	r2,0(r2)
   24e64:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24e68:	e0bfff17 	ldw	r2,-4(fp)
   24e6c:	10bfff04 	addi	r2,r2,-4
   24e70:	e0bfff15 	stw	r2,-4(fp)
   24e74:	e0ffff17 	ldw	r3,-4(fp)
   24e78:	008000b4 	movhi	r2,2
   24e7c:	1098f904 	addi	r2,r2,25572
   24e80:	18bff62e 	bgeu	r3,r2,24e5c <_do_ctors+0x20>
}
   24e84:	0001883a 	nop
   24e88:	0001883a 	nop
   24e8c:	e037883a 	mov	sp,fp
   24e90:	dfc00117 	ldw	ra,4(sp)
   24e94:	df000017 	ldw	fp,0(sp)
   24e98:	dec00204 	addi	sp,sp,8
   24e9c:	f800283a 	ret

00024ea0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24ea0:	defffd04 	addi	sp,sp,-12
   24ea4:	dfc00215 	stw	ra,8(sp)
   24ea8:	df000115 	stw	fp,4(sp)
   24eac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24eb0:	008000b4 	movhi	r2,2
   24eb4:	1098f804 	addi	r2,r2,25568
   24eb8:	e0bfff15 	stw	r2,-4(fp)
   24ebc:	00000606 	br	24ed8 <_do_dtors+0x38>
        (*dtor) (); 
   24ec0:	e0bfff17 	ldw	r2,-4(fp)
   24ec4:	10800017 	ldw	r2,0(r2)
   24ec8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24ecc:	e0bfff17 	ldw	r2,-4(fp)
   24ed0:	10bfff04 	addi	r2,r2,-4
   24ed4:	e0bfff15 	stw	r2,-4(fp)
   24ed8:	e0ffff17 	ldw	r3,-4(fp)
   24edc:	008000b4 	movhi	r2,2
   24ee0:	1098f904 	addi	r2,r2,25572
   24ee4:	18bff62e 	bgeu	r3,r2,24ec0 <_do_dtors+0x20>
}
   24ee8:	0001883a 	nop
   24eec:	0001883a 	nop
   24ef0:	e037883a 	mov	sp,fp
   24ef4:	dfc00117 	ldw	ra,4(sp)
   24ef8:	df000017 	ldw	fp,0(sp)
   24efc:	dec00204 	addi	sp,sp,8
   24f00:	f800283a 	ret

00024f04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24f04:	defffa04 	addi	sp,sp,-24
   24f08:	dfc00515 	stw	ra,20(sp)
   24f0c:	df000415 	stw	fp,16(sp)
   24f10:	df000404 	addi	fp,sp,16
   24f14:	e13ffd15 	stw	r4,-12(fp)
   24f18:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24f1c:	e0bffc17 	ldw	r2,-16(fp)
   24f20:	10800017 	ldw	r2,0(r2)
   24f24:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24f28:	e13ffd17 	ldw	r4,-12(fp)
   24f2c:	00229d40 	call	229d4 <strlen>
   24f30:	10800044 	addi	r2,r2,1
   24f34:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24f38:	00000d06 	br	24f70 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24f3c:	e0bfff17 	ldw	r2,-4(fp)
   24f40:	10800217 	ldw	r2,8(r2)
   24f44:	e0fffe17 	ldw	r3,-8(fp)
   24f48:	180d883a 	mov	r6,r3
   24f4c:	e17ffd17 	ldw	r5,-12(fp)
   24f50:	1009883a 	mov	r4,r2
   24f54:	00258100 	call	25810 <memcmp>
   24f58:	1000021e 	bne	r2,zero,24f64 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24f5c:	e0bfff17 	ldw	r2,-4(fp)
   24f60:	00000706 	br	24f80 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24f64:	e0bfff17 	ldw	r2,-4(fp)
   24f68:	10800017 	ldw	r2,0(r2)
   24f6c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   24f70:	e0ffff17 	ldw	r3,-4(fp)
   24f74:	e0bffc17 	ldw	r2,-16(fp)
   24f78:	18bff01e 	bne	r3,r2,24f3c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   24f7c:	0005883a 	mov	r2,zero
}
   24f80:	e037883a 	mov	sp,fp
   24f84:	dfc00117 	ldw	ra,4(sp)
   24f88:	df000017 	ldw	fp,0(sp)
   24f8c:	dec00204 	addi	sp,sp,8
   24f90:	f800283a 	ret

00024f94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24f94:	deffff04 	addi	sp,sp,-4
   24f98:	df000015 	stw	fp,0(sp)
   24f9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24fa0:	0001883a 	nop
   24fa4:	e037883a 	mov	sp,fp
   24fa8:	df000017 	ldw	fp,0(sp)
   24fac:	dec00104 	addi	sp,sp,4
   24fb0:	f800283a 	ret

00024fb4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24fb4:	defff904 	addi	sp,sp,-28
   24fb8:	dfc00615 	stw	ra,24(sp)
   24fbc:	df000515 	stw	fp,20(sp)
   24fc0:	df000504 	addi	fp,sp,20
   24fc4:	e13ffe15 	stw	r4,-8(fp)
   24fc8:	e17ffd15 	stw	r5,-12(fp)
   24fcc:	e1bffc15 	stw	r6,-16(fp)
   24fd0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   24fd4:	e1bffb17 	ldw	r6,-20(fp)
   24fd8:	e17ffc17 	ldw	r5,-16(fp)
   24fdc:	e13ffd17 	ldw	r4,-12(fp)
   24fe0:	002521c0 	call	2521c <open>
   24fe4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   24fe8:	e0bfff17 	ldw	r2,-4(fp)
   24fec:	10002016 	blt	r2,zero,25070 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   24ff0:	e0ffff17 	ldw	r3,-4(fp)
   24ff4:	1805883a 	mov	r2,r3
   24ff8:	1085883a 	add	r2,r2,r2
   24ffc:	10c5883a 	add	r2,r2,r3
   25000:	100490ba 	slli	r2,r2,2
   25004:	00c000b4 	movhi	r3,2
   25008:	10c7883a 	add	r3,r2,r3
   2500c:	18dbb717 	ldw	r3,28380(r3)
   25010:	e0bffe17 	ldw	r2,-8(fp)
   25014:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   25018:	e0ffff17 	ldw	r3,-4(fp)
   2501c:	1805883a 	mov	r2,r3
   25020:	1085883a 	add	r2,r2,r2
   25024:	10c5883a 	add	r2,r2,r3
   25028:	100490ba 	slli	r2,r2,2
   2502c:	00c000b4 	movhi	r3,2
   25030:	10c7883a 	add	r3,r2,r3
   25034:	18dbb817 	ldw	r3,28384(r3)
   25038:	e0bffe17 	ldw	r2,-8(fp)
   2503c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   25040:	e0ffff17 	ldw	r3,-4(fp)
   25044:	1805883a 	mov	r2,r3
   25048:	1085883a 	add	r2,r2,r2
   2504c:	10c5883a 	add	r2,r2,r3
   25050:	100490ba 	slli	r2,r2,2
   25054:	00c000b4 	movhi	r3,2
   25058:	10c7883a 	add	r3,r2,r3
   2505c:	18dbb917 	ldw	r3,28388(r3)
   25060:	e0bffe17 	ldw	r2,-8(fp)
   25064:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   25068:	e13fff17 	ldw	r4,-4(fp)
   2506c:	002382c0 	call	2382c <alt_release_fd>
  }
} 
   25070:	0001883a 	nop
   25074:	e037883a 	mov	sp,fp
   25078:	dfc00117 	ldw	ra,4(sp)
   2507c:	df000017 	ldw	fp,0(sp)
   25080:	dec00204 	addi	sp,sp,8
   25084:	f800283a 	ret

00025088 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   25088:	defffb04 	addi	sp,sp,-20
   2508c:	dfc00415 	stw	ra,16(sp)
   25090:	df000315 	stw	fp,12(sp)
   25094:	df000304 	addi	fp,sp,12
   25098:	e13fff15 	stw	r4,-4(fp)
   2509c:	e17ffe15 	stw	r5,-8(fp)
   250a0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   250a4:	01c07fc4 	movi	r7,511
   250a8:	01800044 	movi	r6,1
   250ac:	e17fff17 	ldw	r5,-4(fp)
   250b0:	010000b4 	movhi	r4,2
   250b4:	211bba04 	addi	r4,r4,28392
   250b8:	0024fb40 	call	24fb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   250bc:	01c07fc4 	movi	r7,511
   250c0:	000d883a 	mov	r6,zero
   250c4:	e17ffe17 	ldw	r5,-8(fp)
   250c8:	010000b4 	movhi	r4,2
   250cc:	211bb704 	addi	r4,r4,28380
   250d0:	0024fb40 	call	24fb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   250d4:	01c07fc4 	movi	r7,511
   250d8:	01800044 	movi	r6,1
   250dc:	e17ffd17 	ldw	r5,-12(fp)
   250e0:	010000b4 	movhi	r4,2
   250e4:	211bbd04 	addi	r4,r4,28404
   250e8:	0024fb40 	call	24fb4 <alt_open_fd>
}  
   250ec:	0001883a 	nop
   250f0:	e037883a 	mov	sp,fp
   250f4:	dfc00117 	ldw	ra,4(sp)
   250f8:	df000017 	ldw	fp,0(sp)
   250fc:	dec00204 	addi	sp,sp,8
   25100:	f800283a 	ret

00025104 <alt_get_errno>:
{
   25104:	defffe04 	addi	sp,sp,-8
   25108:	dfc00115 	stw	ra,4(sp)
   2510c:	df000015 	stw	fp,0(sp)
   25110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25114:	d0a00917 	ldw	r2,-32732(gp)
   25118:	10000326 	beq	r2,zero,25128 <alt_get_errno+0x24>
   2511c:	d0a00917 	ldw	r2,-32732(gp)
   25120:	103ee83a 	callr	r2
   25124:	00000106 	br	2512c <alt_get_errno+0x28>
   25128:	d0a6d904 	addi	r2,gp,-25756
}
   2512c:	e037883a 	mov	sp,fp
   25130:	dfc00117 	ldw	ra,4(sp)
   25134:	df000017 	ldw	fp,0(sp)
   25138:	dec00204 	addi	sp,sp,8
   2513c:	f800283a 	ret

00025140 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   25140:	defffd04 	addi	sp,sp,-12
   25144:	df000215 	stw	fp,8(sp)
   25148:	df000204 	addi	fp,sp,8
   2514c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   25150:	e0bffe17 	ldw	r2,-8(fp)
   25154:	10800217 	ldw	r2,8(r2)
   25158:	10d00034 	orhi	r3,r2,16384
   2515c:	e0bffe17 	ldw	r2,-8(fp)
   25160:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25164:	e03fff15 	stw	zero,-4(fp)
   25168:	00002306 	br	251f8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2516c:	e0ffff17 	ldw	r3,-4(fp)
   25170:	1805883a 	mov	r2,r3
   25174:	1085883a 	add	r2,r2,r2
   25178:	10c5883a 	add	r2,r2,r3
   2517c:	100490ba 	slli	r2,r2,2
   25180:	00c000b4 	movhi	r3,2
   25184:	10c7883a 	add	r3,r2,r3
   25188:	18dbb717 	ldw	r3,28380(r3)
   2518c:	e0bffe17 	ldw	r2,-8(fp)
   25190:	10800017 	ldw	r2,0(r2)
   25194:	1880151e 	bne	r3,r2,251ec <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25198:	e0ffff17 	ldw	r3,-4(fp)
   2519c:	1805883a 	mov	r2,r3
   251a0:	1085883a 	add	r2,r2,r2
   251a4:	10c5883a 	add	r2,r2,r3
   251a8:	100490ba 	slli	r2,r2,2
   251ac:	00c000b4 	movhi	r3,2
   251b0:	10c7883a 	add	r3,r2,r3
   251b4:	189bb917 	ldw	r2,28388(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   251b8:	10000c0e 	bge	r2,zero,251ec <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   251bc:	e0ffff17 	ldw	r3,-4(fp)
   251c0:	1805883a 	mov	r2,r3
   251c4:	1085883a 	add	r2,r2,r2
   251c8:	10c5883a 	add	r2,r2,r3
   251cc:	100490ba 	slli	r2,r2,2
   251d0:	00c000b4 	movhi	r3,2
   251d4:	18dbb704 	addi	r3,r3,28380
   251d8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   251dc:	e0fffe17 	ldw	r3,-8(fp)
   251e0:	18800226 	beq	r3,r2,251ec <alt_file_locked+0xac>
    {
      return -EACCES;
   251e4:	00bffcc4 	movi	r2,-13
   251e8:	00000806 	br	2520c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   251ec:	e0bfff17 	ldw	r2,-4(fp)
   251f0:	10800044 	addi	r2,r2,1
   251f4:	e0bfff15 	stw	r2,-4(fp)
   251f8:	d0a00817 	ldw	r2,-32736(gp)
   251fc:	1007883a 	mov	r3,r2
   25200:	e0bfff17 	ldw	r2,-4(fp)
   25204:	18bfd92e 	bgeu	r3,r2,2516c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   25208:	0005883a 	mov	r2,zero
}
   2520c:	e037883a 	mov	sp,fp
   25210:	df000017 	ldw	fp,0(sp)
   25214:	dec00104 	addi	sp,sp,4
   25218:	f800283a 	ret

0002521c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2521c:	defff604 	addi	sp,sp,-40
   25220:	dfc00915 	stw	ra,36(sp)
   25224:	df000815 	stw	fp,32(sp)
   25228:	df000804 	addi	fp,sp,32
   2522c:	e13ffa15 	stw	r4,-24(fp)
   25230:	e17ff915 	stw	r5,-28(fp)
   25234:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   25238:	00bfffc4 	movi	r2,-1
   2523c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   25240:	00bffb44 	movi	r2,-19
   25244:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   25248:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2524c:	d1600604 	addi	r5,gp,-32744
   25250:	e13ffa17 	ldw	r4,-24(fp)
   25254:	0024f040 	call	24f04 <alt_find_dev>
   25258:	e0bfff15 	stw	r2,-4(fp)
   2525c:	e0bfff17 	ldw	r2,-4(fp)
   25260:	1000051e 	bne	r2,zero,25278 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   25264:	e13ffa17 	ldw	r4,-24(fp)
   25268:	00255700 	call	25570 <alt_find_file>
   2526c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   25270:	00800044 	movi	r2,1
   25274:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   25278:	e0bfff17 	ldw	r2,-4(fp)
   2527c:	10002c26 	beq	r2,zero,25330 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   25280:	e13fff17 	ldw	r4,-4(fp)
   25284:	00256780 	call	25678 <alt_get_fd>
   25288:	e0bffe15 	stw	r2,-8(fp)
   2528c:	e0bffe17 	ldw	r2,-8(fp)
   25290:	1000030e 	bge	r2,zero,252a0 <open+0x84>
    {
      status = index;
   25294:	e0bffe17 	ldw	r2,-8(fp)
   25298:	e0bffd15 	stw	r2,-12(fp)
   2529c:	00002606 	br	25338 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   252a0:	e0fffe17 	ldw	r3,-8(fp)
   252a4:	1805883a 	mov	r2,r3
   252a8:	1085883a 	add	r2,r2,r2
   252ac:	10c5883a 	add	r2,r2,r3
   252b0:	100490ba 	slli	r2,r2,2
   252b4:	00c000b4 	movhi	r3,2
   252b8:	18dbb704 	addi	r3,r3,28380
   252bc:	10c5883a 	add	r2,r2,r3
   252c0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   252c4:	e0fff917 	ldw	r3,-28(fp)
   252c8:	00900034 	movhi	r2,16384
   252cc:	10bfffc4 	addi	r2,r2,-1
   252d0:	1886703a 	and	r3,r3,r2
   252d4:	e0bffb17 	ldw	r2,-20(fp)
   252d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   252dc:	e0bffc17 	ldw	r2,-16(fp)
   252e0:	1000051e 	bne	r2,zero,252f8 <open+0xdc>
   252e4:	e13ffb17 	ldw	r4,-20(fp)
   252e8:	00251400 	call	25140 <alt_file_locked>
   252ec:	e0bffd15 	stw	r2,-12(fp)
   252f0:	e0bffd17 	ldw	r2,-12(fp)
   252f4:	10001016 	blt	r2,zero,25338 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   252f8:	e0bfff17 	ldw	r2,-4(fp)
   252fc:	10800317 	ldw	r2,12(r2)
   25300:	10000826 	beq	r2,zero,25324 <open+0x108>
   25304:	e0bfff17 	ldw	r2,-4(fp)
   25308:	10800317 	ldw	r2,12(r2)
   2530c:	e1fff817 	ldw	r7,-32(fp)
   25310:	e1bff917 	ldw	r6,-28(fp)
   25314:	e17ffa17 	ldw	r5,-24(fp)
   25318:	e13ffb17 	ldw	r4,-20(fp)
   2531c:	103ee83a 	callr	r2
   25320:	00000106 	br	25328 <open+0x10c>
   25324:	0005883a 	mov	r2,zero
   25328:	e0bffd15 	stw	r2,-12(fp)
   2532c:	00000206 	br	25338 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   25330:	00bffb44 	movi	r2,-19
   25334:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   25338:	e0bffd17 	ldw	r2,-12(fp)
   2533c:	1000090e 	bge	r2,zero,25364 <open+0x148>
  {
    alt_release_fd (index);  
   25340:	e13ffe17 	ldw	r4,-8(fp)
   25344:	002382c0 	call	2382c <alt_release_fd>
    ALT_ERRNO = -status;
   25348:	00251040 	call	25104 <alt_get_errno>
   2534c:	1007883a 	mov	r3,r2
   25350:	e0bffd17 	ldw	r2,-12(fp)
   25354:	0085c83a 	sub	r2,zero,r2
   25358:	18800015 	stw	r2,0(r3)
    return -1;
   2535c:	00bfffc4 	movi	r2,-1
   25360:	00000106 	br	25368 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   25364:	e0bffe17 	ldw	r2,-8(fp)
}
   25368:	e037883a 	mov	sp,fp
   2536c:	dfc00117 	ldw	ra,4(sp)
   25370:	df000017 	ldw	fp,0(sp)
   25374:	dec00204 	addi	sp,sp,8
   25378:	f800283a 	ret

0002537c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2537c:	defffa04 	addi	sp,sp,-24
   25380:	df000515 	stw	fp,20(sp)
   25384:	df000504 	addi	fp,sp,20
   25388:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   2538c:	0005303a 	rdctl	r2,status
   25390:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25394:	e0fffc17 	ldw	r3,-16(fp)
   25398:	00bfff84 	movi	r2,-2
   2539c:	1884703a 	and	r2,r3,r2
   253a0:	1001703a 	wrctl	status,r2
  return context;
   253a4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   253a8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   253ac:	e0bffb17 	ldw	r2,-20(fp)
   253b0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   253b4:	e0bffd17 	ldw	r2,-12(fp)
   253b8:	10800017 	ldw	r2,0(r2)
   253bc:	e0fffd17 	ldw	r3,-12(fp)
   253c0:	18c00117 	ldw	r3,4(r3)
   253c4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   253c8:	e0bffd17 	ldw	r2,-12(fp)
   253cc:	10800117 	ldw	r2,4(r2)
   253d0:	e0fffd17 	ldw	r3,-12(fp)
   253d4:	18c00017 	ldw	r3,0(r3)
   253d8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   253dc:	e0bffd17 	ldw	r2,-12(fp)
   253e0:	e0fffd17 	ldw	r3,-12(fp)
   253e4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   253e8:	e0bffd17 	ldw	r2,-12(fp)
   253ec:	e0fffd17 	ldw	r3,-12(fp)
   253f0:	10c00015 	stw	r3,0(r2)
} 
   253f4:	0001883a 	nop
   253f8:	e0bfff17 	ldw	r2,-4(fp)
   253fc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   25400:	e0bffe17 	ldw	r2,-8(fp)
   25404:	1001703a 	wrctl	status,r2
}
   25408:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   2540c:	0001883a 	nop
   25410:	e037883a 	mov	sp,fp
   25414:	df000017 	ldw	fp,0(sp)
   25418:	dec00104 	addi	sp,sp,4
   2541c:	f800283a 	ret

00025420 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   25420:	defff904 	addi	sp,sp,-28
   25424:	dfc00615 	stw	ra,24(sp)
   25428:	df000515 	stw	fp,20(sp)
   2542c:	dc400415 	stw	r17,16(sp)
   25430:	dc000315 	stw	r16,12(sp)
   25434:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   25438:	d0a00c17 	ldw	r2,-32720(gp)
   2543c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   25440:	d126e117 	ldw	r4,-25724(gp)
   25444:	d166e217 	ldw	r5,-25720(gp)
   25448:	01800044 	movi	r6,1
   2544c:	000f883a 	mov	r7,zero
   25450:	2185883a 	add	r2,r4,r6
   25454:	1111803a 	cmpltu	r8,r2,r4
   25458:	29c7883a 	add	r3,r5,r7
   2545c:	40c9883a 	add	r4,r8,r3
   25460:	2007883a 	mov	r3,r4
   25464:	1009883a 	mov	r4,r2
   25468:	180b883a 	mov	r5,r3
   2546c:	d126e115 	stw	r4,-25724(gp)
   25470:	d166e215 	stw	r5,-25720(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25474:	00002906 	br	2551c <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   25478:	e0bffd17 	ldw	r2,-12(fp)
   2547c:	10800017 	ldw	r2,0(r2)
   25480:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   25484:	e13ffd17 	ldw	r4,-12(fp)
   25488:	20800217 	ldw	r2,8(r4)
   2548c:	20c00317 	ldw	r3,12(r4)
   25490:	d126e117 	ldw	r4,-25724(gp)
   25494:	d166e217 	ldw	r5,-25720(gp)
   25498:	28c01e36 	bltu	r5,r3,25514 <alt_tick+0xf4>
   2549c:	1940011e 	bne	r3,r5,254a4 <alt_tick+0x84>
   254a0:	20801c36 	bltu	r4,r2,25514 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   254a4:	e0bffd17 	ldw	r2,-12(fp)
   254a8:	10800417 	ldw	r2,16(r2)
   254ac:	e0fffd17 	ldw	r3,-12(fp)
   254b0:	18c00517 	ldw	r3,20(r3)
   254b4:	1809883a 	mov	r4,r3
   254b8:	103ee83a 	callr	r2
   254bc:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   254c0:	e0bffb17 	ldw	r2,-20(fp)
   254c4:	1000031e 	bne	r2,zero,254d4 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   254c8:	e13ffd17 	ldw	r4,-12(fp)
   254cc:	002537c0 	call	2537c <alt_alarm_stop>
   254d0:	00001006 	br	25514 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   254d4:	e0bffd17 	ldw	r2,-12(fp)
   254d8:	11000217 	ldw	r4,8(r2)
   254dc:	11400317 	ldw	r5,12(r2)
   254e0:	e0bffb17 	ldw	r2,-20(fp)
   254e4:	1021883a 	mov	r16,r2
   254e8:	0023883a 	mov	r17,zero
   254ec:	2405883a 	add	r2,r4,r16
   254f0:	110d803a 	cmpltu	r6,r2,r4
   254f4:	2c47883a 	add	r3,r5,r17
   254f8:	30c9883a 	add	r4,r6,r3
   254fc:	2007883a 	mov	r3,r4
   25500:	1009883a 	mov	r4,r2
   25504:	180b883a 	mov	r5,r3
   25508:	e0bffd17 	ldw	r2,-12(fp)
   2550c:	11000215 	stw	r4,8(r2)
   25510:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   25514:	e0bffc17 	ldw	r2,-16(fp)
   25518:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   2551c:	e0fffd17 	ldw	r3,-12(fp)
   25520:	d0a00c04 	addi	r2,gp,-32720
   25524:	18bfd41e 	bne	r3,r2,25478 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   25528:	0001883a 	nop
}
   2552c:	0001883a 	nop
   25530:	e6fffe04 	addi	sp,fp,-8
   25534:	dfc00317 	ldw	ra,12(sp)
   25538:	df000217 	ldw	fp,8(sp)
   2553c:	dc400117 	ldw	r17,4(sp)
   25540:	dc000017 	ldw	r16,0(sp)
   25544:	dec00404 	addi	sp,sp,16
   25548:	f800283a 	ret

0002554c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2554c:	deffff04 	addi	sp,sp,-4
   25550:	df000015 	stw	fp,0(sp)
   25554:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   25558:	000170fa 	wrctl	ienable,zero
}
   2555c:	0001883a 	nop
   25560:	e037883a 	mov	sp,fp
   25564:	df000017 	ldw	fp,0(sp)
   25568:	dec00104 	addi	sp,sp,4
   2556c:	f800283a 	ret

00025570 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25570:	defffb04 	addi	sp,sp,-20
   25574:	dfc00415 	stw	ra,16(sp)
   25578:	df000315 	stw	fp,12(sp)
   2557c:	df000304 	addi	fp,sp,12
   25580:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25584:	d0a00417 	ldw	r2,-32752(gp)
   25588:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2558c:	00003106 	br	25654 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   25590:	e0bfff17 	ldw	r2,-4(fp)
   25594:	10800217 	ldw	r2,8(r2)
   25598:	1009883a 	mov	r4,r2
   2559c:	00229d40 	call	229d4 <strlen>
   255a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   255a4:	e0bfff17 	ldw	r2,-4(fp)
   255a8:	10c00217 	ldw	r3,8(r2)
   255ac:	e0bffe17 	ldw	r2,-8(fp)
   255b0:	10bfffc4 	addi	r2,r2,-1
   255b4:	1885883a 	add	r2,r3,r2
   255b8:	10800003 	ldbu	r2,0(r2)
   255bc:	10803fcc 	andi	r2,r2,255
   255c0:	1080201c 	xori	r2,r2,128
   255c4:	10bfe004 	addi	r2,r2,-128
   255c8:	10800bd8 	cmpnei	r2,r2,47
   255cc:	1000031e 	bne	r2,zero,255dc <alt_find_file+0x6c>
    {
      len -= 1;
   255d0:	e0bffe17 	ldw	r2,-8(fp)
   255d4:	10bfffc4 	addi	r2,r2,-1
   255d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   255dc:	e0bffe17 	ldw	r2,-8(fp)
   255e0:	e0fffd17 	ldw	r3,-12(fp)
   255e4:	1885883a 	add	r2,r3,r2
   255e8:	10800003 	ldbu	r2,0(r2)
   255ec:	10803fcc 	andi	r2,r2,255
   255f0:	1080201c 	xori	r2,r2,128
   255f4:	10bfe004 	addi	r2,r2,-128
   255f8:	10800be0 	cmpeqi	r2,r2,47
   255fc:	1000081e 	bne	r2,zero,25620 <alt_find_file+0xb0>
   25600:	e0bffe17 	ldw	r2,-8(fp)
   25604:	e0fffd17 	ldw	r3,-12(fp)
   25608:	1885883a 	add	r2,r3,r2
   2560c:	10800003 	ldbu	r2,0(r2)
   25610:	10803fcc 	andi	r2,r2,255
   25614:	1080201c 	xori	r2,r2,128
   25618:	10bfe004 	addi	r2,r2,-128
   2561c:	10000a1e 	bne	r2,zero,25648 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   25620:	e0bfff17 	ldw	r2,-4(fp)
   25624:	10800217 	ldw	r2,8(r2)
   25628:	e0fffe17 	ldw	r3,-8(fp)
   2562c:	180d883a 	mov	r6,r3
   25630:	e17ffd17 	ldw	r5,-12(fp)
   25634:	1009883a 	mov	r4,r2
   25638:	00258100 	call	25810 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   2563c:	1000021e 	bne	r2,zero,25648 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   25640:	e0bfff17 	ldw	r2,-4(fp)
   25644:	00000706 	br	25664 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   25648:	e0bfff17 	ldw	r2,-4(fp)
   2564c:	10800017 	ldw	r2,0(r2)
   25650:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   25654:	e0ffff17 	ldw	r3,-4(fp)
   25658:	d0a00404 	addi	r2,gp,-32752
   2565c:	18bfcc1e 	bne	r3,r2,25590 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   25660:	0005883a 	mov	r2,zero
}
   25664:	e037883a 	mov	sp,fp
   25668:	dfc00117 	ldw	ra,4(sp)
   2566c:	df000017 	ldw	fp,0(sp)
   25670:	dec00204 	addi	sp,sp,8
   25674:	f800283a 	ret

00025678 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25678:	defffc04 	addi	sp,sp,-16
   2567c:	df000315 	stw	fp,12(sp)
   25680:	df000304 	addi	fp,sp,12
   25684:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   25688:	00bffa04 	movi	r2,-24
   2568c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25690:	e03fff15 	stw	zero,-4(fp)
   25694:	00001d06 	br	2570c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   25698:	e0ffff17 	ldw	r3,-4(fp)
   2569c:	1805883a 	mov	r2,r3
   256a0:	1085883a 	add	r2,r2,r2
   256a4:	10c5883a 	add	r2,r2,r3
   256a8:	100490ba 	slli	r2,r2,2
   256ac:	00c000b4 	movhi	r3,2
   256b0:	10c7883a 	add	r3,r2,r3
   256b4:	189bb717 	ldw	r2,28380(r3)
   256b8:	1000111e 	bne	r2,zero,25700 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   256bc:	e0ffff17 	ldw	r3,-4(fp)
   256c0:	1805883a 	mov	r2,r3
   256c4:	1085883a 	add	r2,r2,r2
   256c8:	10c5883a 	add	r2,r2,r3
   256cc:	100490ba 	slli	r2,r2,2
   256d0:	e13ffd17 	ldw	r4,-12(fp)
   256d4:	00c000b4 	movhi	r3,2
   256d8:	10c7883a 	add	r3,r2,r3
   256dc:	191bb715 	stw	r4,28380(r3)
      if (i > alt_max_fd)
   256e0:	d0e00817 	ldw	r3,-32736(gp)
   256e4:	e0bfff17 	ldw	r2,-4(fp)
   256e8:	1880020e 	bge	r3,r2,256f4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   256ec:	e0bfff17 	ldw	r2,-4(fp)
   256f0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   256f4:	e0bfff17 	ldw	r2,-4(fp)
   256f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   256fc:	00000706 	br	2571c <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   25700:	e0bfff17 	ldw	r2,-4(fp)
   25704:	10800044 	addi	r2,r2,1
   25708:	e0bfff15 	stw	r2,-4(fp)
   2570c:	e0bfff17 	ldw	r2,-4(fp)
   25710:	10800810 	cmplti	r2,r2,32
   25714:	103fe01e 	bne	r2,zero,25698 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   25718:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2571c:	e0bffe17 	ldw	r2,-8(fp)
}
   25720:	e037883a 	mov	sp,fp
   25724:	df000017 	ldw	fp,0(sp)
   25728:	dec00104 	addi	sp,sp,4
   2572c:	f800283a 	ret

00025730 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   25730:	defffe04 	addi	sp,sp,-8
   25734:	df000115 	stw	fp,4(sp)
   25738:	df000104 	addi	fp,sp,4
   2573c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   25740:	e0bfff17 	ldw	r2,-4(fp)
   25744:	10bffe84 	addi	r2,r2,-6
   25748:	10c00428 	cmpgeui	r3,r2,16
   2574c:	1800191e 	bne	r3,zero,257b4 <alt_exception_cause_generated_bad_addr+0x84>
   25750:	100690ba 	slli	r3,r2,2
   25754:	008000b4 	movhi	r2,2
   25758:	1885883a 	add	r2,r3,r2
   2575c:	1095d917 	ldw	r2,22372(r2)
   25760:	1000683a 	jmp	r2
   25764:	000257a4 	muli	zero,zero,2398
   25768:	000257a4 	muli	zero,zero,2398
   2576c:	000257b4 	movhi	zero,2398
   25770:	000257b4 	movhi	zero,2398
   25774:	000257b4 	movhi	zero,2398
   25778:	000257a4 	muli	zero,zero,2398
   2577c:	000257ac 	andhi	zero,zero,2398
   25780:	000257b4 	movhi	zero,2398
   25784:	000257a4 	muli	zero,zero,2398
   25788:	000257a4 	muli	zero,zero,2398
   2578c:	000257b4 	movhi	zero,2398
   25790:	000257a4 	muli	zero,zero,2398
   25794:	000257ac 	andhi	zero,zero,2398
   25798:	000257b4 	movhi	zero,2398
   2579c:	000257b4 	movhi	zero,2398
   257a0:	000257a4 	muli	zero,zero,2398
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   257a4:	00800044 	movi	r2,1
   257a8:	00000306 	br	257b8 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   257ac:	0005883a 	mov	r2,zero
   257b0:	00000106 	br	257b8 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   257b4:	0005883a 	mov	r2,zero
  }
}
   257b8:	e037883a 	mov	sp,fp
   257bc:	df000017 	ldw	fp,0(sp)
   257c0:	dec00104 	addi	sp,sp,4
   257c4:	f800283a 	ret

000257c8 <atexit>:
   257c8:	200b883a 	mov	r5,r4
   257cc:	000f883a 	mov	r7,zero
   257d0:	000d883a 	mov	r6,zero
   257d4:	0009883a 	mov	r4,zero
   257d8:	00258a81 	jmpi	258a8 <__register_exitproc>

000257dc <exit>:
   257dc:	defffe04 	addi	sp,sp,-8
   257e0:	000b883a 	mov	r5,zero
   257e4:	dc000015 	stw	r16,0(sp)
   257e8:	dfc00115 	stw	ra,4(sp)
   257ec:	2021883a 	mov	r16,r4
   257f0:	00259380 	call	25938 <__call_exitprocs>
   257f4:	008000f4 	movhi	r2,3
   257f8:	11203a17 	ldw	r4,-32536(r2)
   257fc:	20800f17 	ldw	r2,60(r4)
   25800:	10000126 	beq	r2,zero,25808 <exit+0x2c>
   25804:	103ee83a 	callr	r2
   25808:	8009883a 	mov	r4,r16
   2580c:	00261c80 	call	261c8 <_exit>

00025810 <memcmp>:
   25810:	30800130 	cmpltui	r2,r6,4
   25814:	10000b1e 	bne	r2,zero,25844 <memcmp+0x34>
   25818:	2144b03a 	or	r2,r4,r5
   2581c:	108000cc 	andi	r2,r2,3
   25820:	1000171e 	bne	r2,zero,25880 <memcmp+0x70>
   25824:	20c00017 	ldw	r3,0(r4)
   25828:	28800017 	ldw	r2,0(r5)
   2582c:	1880141e 	bne	r3,r2,25880 <memcmp+0x70>
   25830:	31bfff04 	addi	r6,r6,-4
   25834:	30800128 	cmpgeui	r2,r6,4
   25838:	21000104 	addi	r4,r4,4
   2583c:	29400104 	addi	r5,r5,4
   25840:	103ff81e 	bne	r2,zero,25824 <memcmp+0x14>
   25844:	30bfffc4 	addi	r2,r6,-1
   25848:	30000b26 	beq	r6,zero,25878 <memcmp+0x68>
   2584c:	11800044 	addi	r6,r2,1
   25850:	218d883a 	add	r6,r4,r6
   25854:	00000106 	br	2585c <memcmp+0x4c>
   25858:	21800726 	beq	r4,r6,25878 <memcmp+0x68>
   2585c:	20800003 	ldbu	r2,0(r4)
   25860:	28c00003 	ldbu	r3,0(r5)
   25864:	21000044 	addi	r4,r4,1
   25868:	29400044 	addi	r5,r5,1
   2586c:	10fffa26 	beq	r2,r3,25858 <memcmp+0x48>
   25870:	10c5c83a 	sub	r2,r2,r3
   25874:	f800283a 	ret
   25878:	0005883a 	mov	r2,zero
   2587c:	f800283a 	ret
   25880:	30bfffc4 	addi	r2,r6,-1
   25884:	003ff106 	br	2584c <memcmp+0x3c>

00025888 <_putchar_r>:
   25888:	21800217 	ldw	r6,8(r4)
   2588c:	0025a581 	jmpi	25a58 <_putc_r>

00025890 <putchar>:
   25890:	008000f4 	movhi	r2,3
   25894:	10a03b17 	ldw	r2,-32532(r2)
   25898:	200b883a 	mov	r5,r4
   2589c:	11800217 	ldw	r6,8(r2)
   258a0:	1009883a 	mov	r4,r2
   258a4:	0025a581 	jmpi	25a58 <_putc_r>

000258a8 <__register_exitproc>:
   258a8:	008000f4 	movhi	r2,3
   258ac:	10e03a17 	ldw	r3,-32536(r2)
   258b0:	18805217 	ldw	r2,328(r3)
   258b4:	10001726 	beq	r2,zero,25914 <__register_exitproc+0x6c>
   258b8:	10c00117 	ldw	r3,4(r2)
   258bc:	1a000808 	cmpgei	r8,r3,32
   258c0:	40001b1e 	bne	r8,zero,25930 <__register_exitproc+0x88>
   258c4:	20000b26 	beq	r4,zero,258f4 <__register_exitproc+0x4c>
   258c8:	181090ba 	slli	r8,r3,2
   258cc:	02400044 	movi	r9,1
   258d0:	48d2983a 	sll	r9,r9,r3
   258d4:	1211883a 	add	r8,r2,r8
   258d8:	41802215 	stw	r6,136(r8)
   258dc:	11806217 	ldw	r6,392(r2)
   258e0:	21000098 	cmpnei	r4,r4,2
   258e4:	324cb03a 	or	r6,r6,r9
   258e8:	11806215 	stw	r6,392(r2)
   258ec:	41c04215 	stw	r7,264(r8)
   258f0:	20000b26 	beq	r4,zero,25920 <__register_exitproc+0x78>
   258f4:	19000084 	addi	r4,r3,2
   258f8:	200890ba 	slli	r4,r4,2
   258fc:	18c00044 	addi	r3,r3,1
   25900:	10c00115 	stw	r3,4(r2)
   25904:	1105883a 	add	r2,r2,r4
   25908:	11400015 	stw	r5,0(r2)
   2590c:	0005883a 	mov	r2,zero
   25910:	f800283a 	ret
   25914:	18805304 	addi	r2,r3,332
   25918:	18805215 	stw	r2,328(r3)
   2591c:	003fe606 	br	258b8 <__register_exitproc+0x10>
   25920:	11006317 	ldw	r4,396(r2)
   25924:	2252b03a 	or	r9,r4,r9
   25928:	12406315 	stw	r9,396(r2)
   2592c:	003ff106 	br	258f4 <__register_exitproc+0x4c>
   25930:	00bfffc4 	movi	r2,-1
   25934:	f800283a 	ret

00025938 <__call_exitprocs>:
   25938:	defff704 	addi	sp,sp,-36
   2593c:	008000f4 	movhi	r2,3
   25940:	dcc00315 	stw	r19,12(sp)
   25944:	14e03a17 	ldw	r19,-32536(r2)
   25948:	dc800215 	stw	r18,8(sp)
   2594c:	dfc00815 	stw	ra,32(sp)
   25950:	9c805217 	ldw	r18,328(r19)
   25954:	ddc00715 	stw	r23,28(sp)
   25958:	dd800615 	stw	r22,24(sp)
   2595c:	dd400515 	stw	r21,20(sp)
   25960:	dd000415 	stw	r20,16(sp)
   25964:	dc400115 	stw	r17,4(sp)
   25968:	dc000015 	stw	r16,0(sp)
   2596c:	90001026 	beq	r18,zero,259b0 <__call_exitprocs+0x78>
   25970:	202b883a 	mov	r21,r4
   25974:	282d883a 	mov	r22,r5
   25978:	05000044 	movi	r20,1
   2597c:	94000117 	ldw	r16,4(r18)
   25980:	847fffc4 	addi	r17,r16,-1
   25984:	88000a16 	blt	r17,zero,259b0 <__call_exitprocs+0x78>
   25988:	84000044 	addi	r16,r16,1
   2598c:	802090ba 	slli	r16,r16,2
   25990:	9421883a 	add	r16,r18,r16
   25994:	b0001126 	beq	r22,zero,259dc <__call_exitprocs+0xa4>
   25998:	80804017 	ldw	r2,256(r16)
   2599c:	15800f26 	beq	r2,r22,259dc <__call_exitprocs+0xa4>
   259a0:	8c7fffc4 	addi	r17,r17,-1
   259a4:	88bfffd8 	cmpnei	r2,r17,-1
   259a8:	843fff04 	addi	r16,r16,-4
   259ac:	103ff91e 	bne	r2,zero,25994 <__call_exitprocs+0x5c>
   259b0:	dfc00817 	ldw	ra,32(sp)
   259b4:	ddc00717 	ldw	r23,28(sp)
   259b8:	dd800617 	ldw	r22,24(sp)
   259bc:	dd400517 	ldw	r21,20(sp)
   259c0:	dd000417 	ldw	r20,16(sp)
   259c4:	dcc00317 	ldw	r19,12(sp)
   259c8:	dc800217 	ldw	r18,8(sp)
   259cc:	dc400117 	ldw	r17,4(sp)
   259d0:	dc000017 	ldw	r16,0(sp)
   259d4:	dec00904 	addi	sp,sp,36
   259d8:	f800283a 	ret
   259dc:	90800117 	ldw	r2,4(r18)
   259e0:	81800017 	ldw	r6,0(r16)
   259e4:	10bfffc4 	addi	r2,r2,-1
   259e8:	14401726 	beq	r2,r17,25a48 <__call_exitprocs+0x110>
   259ec:	80000015 	stw	zero,0(r16)
   259f0:	303feb26 	beq	r6,zero,259a0 <__call_exitprocs+0x68>
   259f4:	a446983a 	sll	r3,r20,r17
   259f8:	90806217 	ldw	r2,392(r18)
   259fc:	95c00117 	ldw	r23,4(r18)
   25a00:	1884703a 	and	r2,r3,r2
   25a04:	1000081e 	bne	r2,zero,25a28 <__call_exitprocs+0xf0>
   25a08:	303ee83a 	callr	r6
   25a0c:	90c00117 	ldw	r3,4(r18)
   25a10:	98805217 	ldw	r2,328(r19)
   25a14:	1dc0011e 	bne	r3,r23,25a1c <__call_exitprocs+0xe4>
   25a18:	90bfe126 	beq	r18,r2,259a0 <__call_exitprocs+0x68>
   25a1c:	103fe426 	beq	r2,zero,259b0 <__call_exitprocs+0x78>
   25a20:	1025883a 	mov	r18,r2
   25a24:	003fd506 	br	2597c <__call_exitprocs+0x44>
   25a28:	90806317 	ldw	r2,396(r18)
   25a2c:	81002017 	ldw	r4,128(r16)
   25a30:	1886703a 	and	r3,r3,r2
   25a34:	1800061e 	bne	r3,zero,25a50 <__call_exitprocs+0x118>
   25a38:	200b883a 	mov	r5,r4
   25a3c:	a809883a 	mov	r4,r21
   25a40:	303ee83a 	callr	r6
   25a44:	003ff106 	br	25a0c <__call_exitprocs+0xd4>
   25a48:	94400115 	stw	r17,4(r18)
   25a4c:	003fe806 	br	259f0 <__call_exitprocs+0xb8>
   25a50:	303ee83a 	callr	r6
   25a54:	003fed06 	br	25a0c <__call_exitprocs+0xd4>

00025a58 <_putc_r>:
   25a58:	defffc04 	addi	sp,sp,-16
   25a5c:	dc400215 	stw	r17,8(sp)
   25a60:	dfc00315 	stw	ra,12(sp)
   25a64:	2023883a 	mov	r17,r4
   25a68:	20000226 	beq	r4,zero,25a74 <_putc_r+0x1c>
   25a6c:	20800e17 	ldw	r2,56(r4)
   25a70:	10000e26 	beq	r2,zero,25aac <_putc_r+0x54>
   25a74:	30800217 	ldw	r2,8(r6)
   25a78:	10bfffc4 	addi	r2,r2,-1
   25a7c:	30800215 	stw	r2,8(r6)
   25a80:	10001316 	blt	r2,zero,25ad0 <_putc_r+0x78>
   25a84:	30800017 	ldw	r2,0(r6)
   25a88:	11400005 	stb	r5,0(r2)
   25a8c:	30800017 	ldw	r2,0(r6)
   25a90:	10c00044 	addi	r3,r2,1
   25a94:	30c00015 	stw	r3,0(r6)
   25a98:	10800003 	ldbu	r2,0(r2)
   25a9c:	dfc00317 	ldw	ra,12(sp)
   25aa0:	dc400217 	ldw	r17,8(sp)
   25aa4:	dec00404 	addi	sp,sp,16
   25aa8:	f800283a 	ret
   25aac:	d9800115 	stw	r6,4(sp)
   25ab0:	d9400015 	stw	r5,0(sp)
   25ab4:	00218cc0 	call	218cc <__sinit>
   25ab8:	d9800117 	ldw	r6,4(sp)
   25abc:	d9400017 	ldw	r5,0(sp)
   25ac0:	30800217 	ldw	r2,8(r6)
   25ac4:	10bfffc4 	addi	r2,r2,-1
   25ac8:	30800215 	stw	r2,8(r6)
   25acc:	103fed0e 	bge	r2,zero,25a84 <_putc_r+0x2c>
   25ad0:	30c00617 	ldw	r3,24(r6)
   25ad4:	10c00e16 	blt	r2,r3,25b10 <_putc_r+0xb8>
   25ad8:	30800017 	ldw	r2,0(r6)
   25adc:	11400005 	stb	r5,0(r2)
   25ae0:	30c00017 	ldw	r3,0(r6)
   25ae4:	18800003 	ldbu	r2,0(r3)
   25ae8:	108002a0 	cmpeqi	r2,r2,10
   25aec:	1000071e 	bne	r2,zero,25b0c <_putc_r+0xb4>
   25af0:	18800044 	addi	r2,r3,1
   25af4:	30800015 	stw	r2,0(r6)
   25af8:	18800003 	ldbu	r2,0(r3)
   25afc:	dfc00317 	ldw	ra,12(sp)
   25b00:	dc400217 	ldw	r17,8(sp)
   25b04:	dec00404 	addi	sp,sp,16
   25b08:	f800283a 	ret
   25b0c:	01400284 	movi	r5,10
   25b10:	8809883a 	mov	r4,r17
   25b14:	dfc00317 	ldw	ra,12(sp)
   25b18:	dc400217 	ldw	r17,8(sp)
   25b1c:	dec00404 	addi	sp,sp,16
   25b20:	0025c041 	jmpi	25c04 <__swbuf_r>

00025b24 <putc>:
   25b24:	defffc04 	addi	sp,sp,-16
   25b28:	008000f4 	movhi	r2,3
   25b2c:	dc800215 	stw	r18,8(sp)
   25b30:	14a03b17 	ldw	r18,-32532(r2)
   25b34:	dc400115 	stw	r17,4(sp)
   25b38:	dfc00315 	stw	ra,12(sp)
   25b3c:	2023883a 	mov	r17,r4
   25b40:	90000226 	beq	r18,zero,25b4c <putc+0x28>
   25b44:	90800e17 	ldw	r2,56(r18)
   25b48:	10000f26 	beq	r2,zero,25b88 <putc+0x64>
   25b4c:	28800217 	ldw	r2,8(r5)
   25b50:	10bfffc4 	addi	r2,r2,-1
   25b54:	28800215 	stw	r2,8(r5)
   25b58:	10001316 	blt	r2,zero,25ba8 <putc+0x84>
   25b5c:	28800017 	ldw	r2,0(r5)
   25b60:	14400005 	stb	r17,0(r2)
   25b64:	28800017 	ldw	r2,0(r5)
   25b68:	10c00044 	addi	r3,r2,1
   25b6c:	28c00015 	stw	r3,0(r5)
   25b70:	10800003 	ldbu	r2,0(r2)
   25b74:	dfc00317 	ldw	ra,12(sp)
   25b78:	dc800217 	ldw	r18,8(sp)
   25b7c:	dc400117 	ldw	r17,4(sp)
   25b80:	dec00404 	addi	sp,sp,16
   25b84:	f800283a 	ret
   25b88:	9009883a 	mov	r4,r18
   25b8c:	d9400015 	stw	r5,0(sp)
   25b90:	00218cc0 	call	218cc <__sinit>
   25b94:	d9400017 	ldw	r5,0(sp)
   25b98:	28800217 	ldw	r2,8(r5)
   25b9c:	10bfffc4 	addi	r2,r2,-1
   25ba0:	28800215 	stw	r2,8(r5)
   25ba4:	103fed0e 	bge	r2,zero,25b5c <putc+0x38>
   25ba8:	28c00617 	ldw	r3,24(r5)
   25bac:	10c00a16 	blt	r2,r3,25bd8 <putc+0xb4>
   25bb0:	28800017 	ldw	r2,0(r5)
   25bb4:	14400005 	stb	r17,0(r2)
   25bb8:	28c00017 	ldw	r3,0(r5)
   25bbc:	18800003 	ldbu	r2,0(r3)
   25bc0:	108002a0 	cmpeqi	r2,r2,10
   25bc4:	10000c1e 	bne	r2,zero,25bf8 <putc+0xd4>
   25bc8:	18800044 	addi	r2,r3,1
   25bcc:	28800015 	stw	r2,0(r5)
   25bd0:	18800003 	ldbu	r2,0(r3)
   25bd4:	003fe706 	br	25b74 <putc+0x50>
   25bd8:	280d883a 	mov	r6,r5
   25bdc:	880b883a 	mov	r5,r17
   25be0:	9009883a 	mov	r4,r18
   25be4:	dfc00317 	ldw	ra,12(sp)
   25be8:	dc800217 	ldw	r18,8(sp)
   25bec:	dc400117 	ldw	r17,4(sp)
   25bf0:	dec00404 	addi	sp,sp,16
   25bf4:	0025c041 	jmpi	25c04 <__swbuf_r>
   25bf8:	280d883a 	mov	r6,r5
   25bfc:	01400284 	movi	r5,10
   25c00:	003ff706 	br	25be0 <putc+0xbc>

00025c04 <__swbuf_r>:
   25c04:	defffb04 	addi	sp,sp,-20
   25c08:	dcc00315 	stw	r19,12(sp)
   25c0c:	dc400115 	stw	r17,4(sp)
   25c10:	dc000015 	stw	r16,0(sp)
   25c14:	dfc00415 	stw	ra,16(sp)
   25c18:	dc800215 	stw	r18,8(sp)
   25c1c:	2027883a 	mov	r19,r4
   25c20:	2823883a 	mov	r17,r5
   25c24:	3021883a 	mov	r16,r6
   25c28:	20000226 	beq	r4,zero,25c34 <__swbuf_r+0x30>
   25c2c:	20800e17 	ldw	r2,56(r4)
   25c30:	10003e26 	beq	r2,zero,25d2c <__swbuf_r+0x128>
   25c34:	80800617 	ldw	r2,24(r16)
   25c38:	80c0030b 	ldhu	r3,12(r16)
   25c3c:	80800215 	stw	r2,8(r16)
   25c40:	1880020c 	andi	r2,r3,8
   25c44:	10001f26 	beq	r2,zero,25cc4 <__swbuf_r+0xc0>
   25c48:	80800417 	ldw	r2,16(r16)
   25c4c:	10001d26 	beq	r2,zero,25cc4 <__swbuf_r+0xc0>
   25c50:	1948000c 	andi	r5,r3,8192
   25c54:	8c803fcc 	andi	r18,r17,255
   25c58:	28002326 	beq	r5,zero,25ce8 <__swbuf_r+0xe4>
   25c5c:	80c00017 	ldw	r3,0(r16)
   25c60:	81000517 	ldw	r4,20(r16)
   25c64:	1885c83a 	sub	r2,r3,r2
   25c68:	1100290e 	bge	r2,r4,25d10 <__swbuf_r+0x10c>
   25c6c:	10800044 	addi	r2,r2,1
   25c70:	81400217 	ldw	r5,8(r16)
   25c74:	19000044 	addi	r4,r3,1
   25c78:	81000015 	stw	r4,0(r16)
   25c7c:	297fffc4 	addi	r5,r5,-1
   25c80:	81400215 	stw	r5,8(r16)
   25c84:	1c400005 	stb	r17,0(r3)
   25c88:	80c00517 	ldw	r3,20(r16)
   25c8c:	18802926 	beq	r3,r2,25d34 <__swbuf_r+0x130>
   25c90:	8080030b 	ldhu	r2,12(r16)
   25c94:	1080004c 	andi	r2,r2,1
   25c98:	10000226 	beq	r2,zero,25ca4 <__swbuf_r+0xa0>
   25c9c:	90800298 	cmpnei	r2,r18,10
   25ca0:	10002426 	beq	r2,zero,25d34 <__swbuf_r+0x130>
   25ca4:	9005883a 	mov	r2,r18
   25ca8:	dfc00417 	ldw	ra,16(sp)
   25cac:	dcc00317 	ldw	r19,12(sp)
   25cb0:	dc800217 	ldw	r18,8(sp)
   25cb4:	dc400117 	ldw	r17,4(sp)
   25cb8:	dc000017 	ldw	r16,0(sp)
   25cbc:	dec00504 	addi	sp,sp,20
   25cc0:	f800283a 	ret
   25cc4:	800b883a 	mov	r5,r16
   25cc8:	9809883a 	mov	r4,r19
   25ccc:	0025d640 	call	25d64 <__swsetup_r>
   25cd0:	10001c1e 	bne	r2,zero,25d44 <__swbuf_r+0x140>
   25cd4:	80c0030b 	ldhu	r3,12(r16)
   25cd8:	80800417 	ldw	r2,16(r16)
   25cdc:	8c803fcc 	andi	r18,r17,255
   25ce0:	1948000c 	andi	r5,r3,8192
   25ce4:	283fdd1e 	bne	r5,zero,25c5c <__swbuf_r+0x58>
   25ce8:	81001917 	ldw	r4,100(r16)
   25cec:	18c80014 	ori	r3,r3,8192
   25cf0:	0177ffc4 	movi	r5,-8193
   25cf4:	2148703a 	and	r4,r4,r5
   25cf8:	80c0030d 	sth	r3,12(r16)
   25cfc:	80c00017 	ldw	r3,0(r16)
   25d00:	81001915 	stw	r4,100(r16)
   25d04:	81000517 	ldw	r4,20(r16)
   25d08:	1885c83a 	sub	r2,r3,r2
   25d0c:	113fd716 	blt	r2,r4,25c6c <__swbuf_r+0x68>
   25d10:	800b883a 	mov	r5,r16
   25d14:	9809883a 	mov	r4,r19
   25d18:	00214840 	call	21484 <_fflush_r>
   25d1c:	1000091e 	bne	r2,zero,25d44 <__swbuf_r+0x140>
   25d20:	80c00017 	ldw	r3,0(r16)
   25d24:	00800044 	movi	r2,1
   25d28:	003fd106 	br	25c70 <__swbuf_r+0x6c>
   25d2c:	00218cc0 	call	218cc <__sinit>
   25d30:	003fc006 	br	25c34 <__swbuf_r+0x30>
   25d34:	800b883a 	mov	r5,r16
   25d38:	9809883a 	mov	r4,r19
   25d3c:	00214840 	call	21484 <_fflush_r>
   25d40:	103fd826 	beq	r2,zero,25ca4 <__swbuf_r+0xa0>
   25d44:	04bfffc4 	movi	r18,-1
   25d48:	003fd606 	br	25ca4 <__swbuf_r+0xa0>

00025d4c <__swbuf>:
   25d4c:	00c000f4 	movhi	r3,3
   25d50:	2005883a 	mov	r2,r4
   25d54:	19203b17 	ldw	r4,-32532(r3)
   25d58:	280d883a 	mov	r6,r5
   25d5c:	100b883a 	mov	r5,r2
   25d60:	0025c041 	jmpi	25c04 <__swbuf_r>

00025d64 <__swsetup_r>:
   25d64:	008000f4 	movhi	r2,3
   25d68:	10a03b17 	ldw	r2,-32532(r2)
   25d6c:	defffd04 	addi	sp,sp,-12
   25d70:	dc400115 	stw	r17,4(sp)
   25d74:	dc000015 	stw	r16,0(sp)
   25d78:	dfc00215 	stw	ra,8(sp)
   25d7c:	2023883a 	mov	r17,r4
   25d80:	2821883a 	mov	r16,r5
   25d84:	10000226 	beq	r2,zero,25d90 <__swsetup_r+0x2c>
   25d88:	10c00e17 	ldw	r3,56(r2)
   25d8c:	18001f26 	beq	r3,zero,25e0c <__swsetup_r+0xa8>
   25d90:	8180030b 	ldhu	r6,12(r16)
   25d94:	30c0020c 	andi	r3,r6,8
   25d98:	3005883a 	mov	r2,r6
   25d9c:	18002126 	beq	r3,zero,25e24 <__swsetup_r+0xc0>
   25da0:	80c00417 	ldw	r3,16(r16)
   25da4:	18002826 	beq	r3,zero,25e48 <__swsetup_r+0xe4>
   25da8:	1100004c 	andi	r4,r2,1
   25dac:	20000b1e 	bne	r4,zero,25ddc <__swsetup_r+0x78>
   25db0:	1100008c 	andi	r4,r2,2
   25db4:	20002e1e 	bne	r4,zero,25e70 <__swsetup_r+0x10c>
   25db8:	81000517 	ldw	r4,20(r16)
   25dbc:	81000215 	stw	r4,8(r16)
   25dc0:	18000b26 	beq	r3,zero,25df0 <__swsetup_r+0x8c>
   25dc4:	0005883a 	mov	r2,zero
   25dc8:	dfc00217 	ldw	ra,8(sp)
   25dcc:	dc400117 	ldw	r17,4(sp)
   25dd0:	dc000017 	ldw	r16,0(sp)
   25dd4:	dec00304 	addi	sp,sp,12
   25dd8:	f800283a 	ret
   25ddc:	81000517 	ldw	r4,20(r16)
   25de0:	80000215 	stw	zero,8(r16)
   25de4:	0109c83a 	sub	r4,zero,r4
   25de8:	81000615 	stw	r4,24(r16)
   25dec:	183ff51e 	bne	r3,zero,25dc4 <__swsetup_r+0x60>
   25df0:	10c0200c 	andi	r3,r2,128
   25df4:	0005883a 	mov	r2,zero
   25df8:	183ff326 	beq	r3,zero,25dc8 <__swsetup_r+0x64>
   25dfc:	31801014 	ori	r6,r6,64
   25e00:	8180030d 	sth	r6,12(r16)
   25e04:	00bfffc4 	movi	r2,-1
   25e08:	003fef06 	br	25dc8 <__swsetup_r+0x64>
   25e0c:	1009883a 	mov	r4,r2
   25e10:	00218cc0 	call	218cc <__sinit>
   25e14:	8180030b 	ldhu	r6,12(r16)
   25e18:	30c0020c 	andi	r3,r6,8
   25e1c:	3005883a 	mov	r2,r6
   25e20:	183fdf1e 	bne	r3,zero,25da0 <__swsetup_r+0x3c>
   25e24:	3080040c 	andi	r2,r6,16
   25e28:	10002126 	beq	r2,zero,25eb0 <__swsetup_r+0x14c>
   25e2c:	3080010c 	andi	r2,r6,4
   25e30:	1000111e 	bne	r2,zero,25e78 <__swsetup_r+0x114>
   25e34:	80c00417 	ldw	r3,16(r16)
   25e38:	30800214 	ori	r2,r6,8
   25e3c:	8080030d 	sth	r2,12(r16)
   25e40:	100d883a 	mov	r6,r2
   25e44:	183fd81e 	bne	r3,zero,25da8 <__swsetup_r+0x44>
   25e48:	1100a00c 	andi	r4,r2,640
   25e4c:	21008020 	cmpeqi	r4,r4,512
   25e50:	203fd51e 	bne	r4,zero,25da8 <__swsetup_r+0x44>
   25e54:	800b883a 	mov	r5,r16
   25e58:	8809883a 	mov	r4,r17
   25e5c:	0025ec80 	call	25ec8 <__smakebuf_r>
   25e60:	8180030b 	ldhu	r6,12(r16)
   25e64:	80c00417 	ldw	r3,16(r16)
   25e68:	3005883a 	mov	r2,r6
   25e6c:	003fce06 	br	25da8 <__swsetup_r+0x44>
   25e70:	0009883a 	mov	r4,zero
   25e74:	003fd106 	br	25dbc <__swsetup_r+0x58>
   25e78:	81400c17 	ldw	r5,48(r16)
   25e7c:	28000626 	beq	r5,zero,25e98 <__swsetup_r+0x134>
   25e80:	80801004 	addi	r2,r16,64
   25e84:	28800326 	beq	r5,r2,25e94 <__swsetup_r+0x130>
   25e88:	8809883a 	mov	r4,r17
   25e8c:	0021a300 	call	21a30 <_free_r>
   25e90:	8180030b 	ldhu	r6,12(r16)
   25e94:	80000c15 	stw	zero,48(r16)
   25e98:	80c00417 	ldw	r3,16(r16)
   25e9c:	00bff6c4 	movi	r2,-37
   25ea0:	118c703a 	and	r6,r2,r6
   25ea4:	80000115 	stw	zero,4(r16)
   25ea8:	80c00015 	stw	r3,0(r16)
   25eac:	003fe206 	br	25e38 <__swsetup_r+0xd4>
   25eb0:	00800244 	movi	r2,9
   25eb4:	88800015 	stw	r2,0(r17)
   25eb8:	31801014 	ori	r6,r6,64
   25ebc:	8180030d 	sth	r6,12(r16)
   25ec0:	00bfffc4 	movi	r2,-1
   25ec4:	003fc006 	br	25dc8 <__swsetup_r+0x64>

00025ec8 <__smakebuf_r>:
   25ec8:	2880030b 	ldhu	r2,12(r5)
   25ecc:	deffe804 	addi	sp,sp,-96
   25ed0:	dc001215 	stw	r16,72(sp)
   25ed4:	dfc01715 	stw	ra,92(sp)
   25ed8:	dd001615 	stw	r20,88(sp)
   25edc:	dcc01515 	stw	r19,84(sp)
   25ee0:	dc801415 	stw	r18,80(sp)
   25ee4:	dc401315 	stw	r17,76(sp)
   25ee8:	10c0008c 	andi	r3,r2,2
   25eec:	2821883a 	mov	r16,r5
   25ef0:	18000d26 	beq	r3,zero,25f28 <__smakebuf_r+0x60>
   25ef4:	288010c4 	addi	r2,r5,67
   25ef8:	28800015 	stw	r2,0(r5)
   25efc:	28800415 	stw	r2,16(r5)
   25f00:	00800044 	movi	r2,1
   25f04:	28800515 	stw	r2,20(r5)
   25f08:	dfc01717 	ldw	ra,92(sp)
   25f0c:	dd001617 	ldw	r20,88(sp)
   25f10:	dcc01517 	ldw	r19,84(sp)
   25f14:	dc801417 	ldw	r18,80(sp)
   25f18:	dc401317 	ldw	r17,76(sp)
   25f1c:	dc001217 	ldw	r16,72(sp)
   25f20:	dec01804 	addi	sp,sp,96
   25f24:	f800283a 	ret
   25f28:	2940038f 	ldh	r5,14(r5)
   25f2c:	2023883a 	mov	r17,r4
   25f30:	28002816 	blt	r5,zero,25fd4 <__smakebuf_r+0x10c>
   25f34:	d80d883a 	mov	r6,sp
   25f38:	00261100 	call	26110 <_fstat_r>
   25f3c:	10002416 	blt	r2,zero,25fd0 <__smakebuf_r+0x108>
   25f40:	d8800117 	ldw	r2,4(sp)
   25f44:	10bc000c 	andi	r2,r2,61440
   25f48:	10880018 	cmpnei	r2,r2,8192
   25f4c:	1000461e 	bne	r2,zero,26068 <__smakebuf_r+0x1a0>
   25f50:	8140038f 	ldh	r5,14(r16)
   25f54:	8809883a 	mov	r4,r17
   25f58:	00261700 	call	26170 <_isatty_r>
   25f5c:	10003e26 	beq	r2,zero,26058 <__smakebuf_r+0x190>
   25f60:	8080030b 	ldhu	r2,12(r16)
   25f64:	80c010c4 	addi	r3,r16,67
   25f68:	80c00015 	stw	r3,0(r16)
   25f6c:	10800054 	ori	r2,r2,1
   25f70:	8080030d 	sth	r2,12(r16)
   25f74:	00800044 	movi	r2,1
   25f78:	80c00415 	stw	r3,16(r16)
   25f7c:	80800515 	stw	r2,20(r16)
   25f80:	04c00044 	movi	r19,1
   25f84:	05010004 	movi	r20,1024
   25f88:	04820004 	movi	r18,2048
   25f8c:	a00b883a 	mov	r5,r20
   25f90:	8809883a 	mov	r4,r17
   25f94:	0021e6c0 	call	21e6c <_malloc_r>
   25f98:	10001726 	beq	r2,zero,25ff8 <__smakebuf_r+0x130>
   25f9c:	80c0030b 	ldhu	r3,12(r16)
   25fa0:	010000b4 	movhi	r4,2
   25fa4:	21055c04 	addi	r4,r4,5488
   25fa8:	89000f15 	stw	r4,60(r17)
   25fac:	18c02014 	ori	r3,r3,128
   25fb0:	80c0030d 	sth	r3,12(r16)
   25fb4:	80800015 	stw	r2,0(r16)
   25fb8:	80800415 	stw	r2,16(r16)
   25fbc:	85000515 	stw	r20,20(r16)
   25fc0:	98001d1e 	bne	r19,zero,26038 <__smakebuf_r+0x170>
   25fc4:	90c6b03a 	or	r3,r18,r3
   25fc8:	80c0030d 	sth	r3,12(r16)
   25fcc:	003fce06 	br	25f08 <__smakebuf_r+0x40>
   25fd0:	8080030b 	ldhu	r2,12(r16)
   25fd4:	1080200c 	andi	r2,r2,128
   25fd8:	0027883a 	mov	r19,zero
   25fdc:	10001326 	beq	r2,zero,2602c <__smakebuf_r+0x164>
   25fe0:	05001004 	movi	r20,64
   25fe4:	a00b883a 	mov	r5,r20
   25fe8:	8809883a 	mov	r4,r17
   25fec:	0025883a 	mov	r18,zero
   25ff0:	0021e6c0 	call	21e6c <_malloc_r>
   25ff4:	103fe91e 	bne	r2,zero,25f9c <__smakebuf_r+0xd4>
   25ff8:	8080030b 	ldhu	r2,12(r16)
   25ffc:	10c0800c 	andi	r3,r2,512
   26000:	183fc11e 	bne	r3,zero,25f08 <__smakebuf_r+0x40>
   26004:	00ffff04 	movi	r3,-4
   26008:	10c4703a 	and	r2,r2,r3
   2600c:	10800094 	ori	r2,r2,2
   26010:	80c010c4 	addi	r3,r16,67
   26014:	8080030d 	sth	r2,12(r16)
   26018:	00800044 	movi	r2,1
   2601c:	80c00015 	stw	r3,0(r16)
   26020:	80c00415 	stw	r3,16(r16)
   26024:	80800515 	stw	r2,20(r16)
   26028:	003fb706 	br	25f08 <__smakebuf_r+0x40>
   2602c:	05010004 	movi	r20,1024
   26030:	0025883a 	mov	r18,zero
   26034:	003fd506 	br	25f8c <__smakebuf_r+0xc4>
   26038:	8140038f 	ldh	r5,14(r16)
   2603c:	8809883a 	mov	r4,r17
   26040:	00261700 	call	26170 <_isatty_r>
   26044:	80c0030b 	ldhu	r3,12(r16)
   26048:	103fde26 	beq	r2,zero,25fc4 <__smakebuf_r+0xfc>
   2604c:	18ffff0c 	andi	r3,r3,65532
   26050:	18c00054 	ori	r3,r3,1
   26054:	003fdb06 	br	25fc4 <__smakebuf_r+0xfc>
   26058:	04c00044 	movi	r19,1
   2605c:	05010004 	movi	r20,1024
   26060:	04820004 	movi	r18,2048
   26064:	003fc906 	br	25f8c <__smakebuf_r+0xc4>
   26068:	0027883a 	mov	r19,zero
   2606c:	05010004 	movi	r20,1024
   26070:	04820004 	movi	r18,2048
   26074:	003fc506 	br	25f8c <__smakebuf_r+0xc4>

00026078 <__swhatbuf_r>:
   26078:	deffea04 	addi	sp,sp,-88
   2607c:	dc001215 	stw	r16,72(sp)
   26080:	2821883a 	mov	r16,r5
   26084:	2940038f 	ldh	r5,14(r5)
   26088:	dc801415 	stw	r18,80(sp)
   2608c:	dc401315 	stw	r17,76(sp)
   26090:	dfc01515 	stw	ra,84(sp)
   26094:	3023883a 	mov	r17,r6
   26098:	3825883a 	mov	r18,r7
   2609c:	28001016 	blt	r5,zero,260e0 <__swhatbuf_r+0x68>
   260a0:	d80d883a 	mov	r6,sp
   260a4:	00261100 	call	26110 <_fstat_r>
   260a8:	10000d16 	blt	r2,zero,260e0 <__swhatbuf_r+0x68>
   260ac:	d8c00117 	ldw	r3,4(sp)
   260b0:	00820004 	movi	r2,2048
   260b4:	18fc000c 	andi	r3,r3,61440
   260b8:	18c80020 	cmpeqi	r3,r3,8192
   260bc:	90c00015 	stw	r3,0(r18)
   260c0:	00c10004 	movi	r3,1024
   260c4:	88c00015 	stw	r3,0(r17)
   260c8:	dfc01517 	ldw	ra,84(sp)
   260cc:	dc801417 	ldw	r18,80(sp)
   260d0:	dc401317 	ldw	r17,76(sp)
   260d4:	dc001217 	ldw	r16,72(sp)
   260d8:	dec01604 	addi	sp,sp,88
   260dc:	f800283a 	ret
   260e0:	8080030b 	ldhu	r2,12(r16)
   260e4:	90000015 	stw	zero,0(r18)
   260e8:	1080200c 	andi	r2,r2,128
   260ec:	10000426 	beq	r2,zero,26100 <__swhatbuf_r+0x88>
   260f0:	00801004 	movi	r2,64
   260f4:	88800015 	stw	r2,0(r17)
   260f8:	0005883a 	mov	r2,zero
   260fc:	003ff206 	br	260c8 <__swhatbuf_r+0x50>
   26100:	00810004 	movi	r2,1024
   26104:	88800015 	stw	r2,0(r17)
   26108:	0005883a 	mov	r2,zero
   2610c:	003fee06 	br	260c8 <__swhatbuf_r+0x50>

00026110 <_fstat_r>:
   26110:	2807883a 	mov	r3,r5
   26114:	defffe04 	addi	sp,sp,-8
   26118:	dc000015 	stw	r16,0(sp)
   2611c:	008000f4 	movhi	r2,3
   26120:	300b883a 	mov	r5,r6
   26124:	2021883a 	mov	r16,r4
   26128:	1809883a 	mov	r4,r3
   2612c:	dfc00115 	stw	ra,4(sp)
   26130:	10271315 	stw	zero,-25524(r2)
   26134:	002623c0 	call	2623c <fstat>
   26138:	10ffffd8 	cmpnei	r3,r2,-1
   2613c:	18000426 	beq	r3,zero,26150 <_fstat_r+0x40>
   26140:	dfc00117 	ldw	ra,4(sp)
   26144:	dc000017 	ldw	r16,0(sp)
   26148:	dec00204 	addi	sp,sp,8
   2614c:	f800283a 	ret
   26150:	00c000f4 	movhi	r3,3
   26154:	18e71317 	ldw	r3,-25524(r3)
   26158:	183ff926 	beq	r3,zero,26140 <_fstat_r+0x30>
   2615c:	80c00015 	stw	r3,0(r16)
   26160:	dfc00117 	ldw	ra,4(sp)
   26164:	dc000017 	ldw	r16,0(sp)
   26168:	dec00204 	addi	sp,sp,8
   2616c:	f800283a 	ret

00026170 <_isatty_r>:
   26170:	defffe04 	addi	sp,sp,-8
   26174:	dc000015 	stw	r16,0(sp)
   26178:	008000f4 	movhi	r2,3
   2617c:	2021883a 	mov	r16,r4
   26180:	2809883a 	mov	r4,r5
   26184:	dfc00115 	stw	ra,4(sp)
   26188:	10271315 	stw	zero,-25524(r2)
   2618c:	00263340 	call	26334 <isatty>
   26190:	10ffffd8 	cmpnei	r3,r2,-1
   26194:	18000426 	beq	r3,zero,261a8 <_isatty_r+0x38>
   26198:	dfc00117 	ldw	ra,4(sp)
   2619c:	dc000017 	ldw	r16,0(sp)
   261a0:	dec00204 	addi	sp,sp,8
   261a4:	f800283a 	ret
   261a8:	00c000f4 	movhi	r3,3
   261ac:	18e71317 	ldw	r3,-25524(r3)
   261b0:	183ff926 	beq	r3,zero,26198 <_isatty_r+0x28>
   261b4:	80c00015 	stw	r3,0(r16)
   261b8:	dfc00117 	ldw	ra,4(sp)
   261bc:	dc000017 	ldw	r16,0(sp)
   261c0:	dec00204 	addi	sp,sp,8
   261c4:	f800283a 	ret

000261c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   261c8:	defffd04 	addi	sp,sp,-12
   261cc:	df000215 	stw	fp,8(sp)
   261d0:	df000204 	addi	fp,sp,8
   261d4:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   261d8:	0001883a 	nop
   261dc:	e0bffe17 	ldw	r2,-8(fp)
   261e0:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   261e4:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   261e8:	10000226 	beq	r2,zero,261f4 <_exit+0x2c>
    ALT_SIM_FAIL();
   261ec:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   261f0:	00000106 	br	261f8 <_exit+0x30>
    ALT_SIM_PASS();
   261f4:	002af0b0 	cmpltui	zero,zero,43970
}
   261f8:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   261fc:	003fff06 	br	261fc <_exit+0x34>

00026200 <alt_get_errno>:
{
   26200:	defffe04 	addi	sp,sp,-8
   26204:	dfc00115 	stw	ra,4(sp)
   26208:	df000015 	stw	fp,0(sp)
   2620c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26210:	d0a00917 	ldw	r2,-32732(gp)
   26214:	10000326 	beq	r2,zero,26224 <alt_get_errno+0x24>
   26218:	d0a00917 	ldw	r2,-32732(gp)
   2621c:	103ee83a 	callr	r2
   26220:	00000106 	br	26228 <alt_get_errno+0x28>
   26224:	d0a6d904 	addi	r2,gp,-25756
}
   26228:	e037883a 	mov	sp,fp
   2622c:	dfc00117 	ldw	ra,4(sp)
   26230:	df000017 	ldw	fp,0(sp)
   26234:	dec00204 	addi	sp,sp,8
   26238:	f800283a 	ret

0002623c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2623c:	defffb04 	addi	sp,sp,-20
   26240:	dfc00415 	stw	ra,16(sp)
   26244:	df000315 	stw	fp,12(sp)
   26248:	df000304 	addi	fp,sp,12
   2624c:	e13ffe15 	stw	r4,-8(fp)
   26250:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26254:	e0bffe17 	ldw	r2,-8(fp)
   26258:	10000916 	blt	r2,zero,26280 <fstat+0x44>
   2625c:	e0fffe17 	ldw	r3,-8(fp)
   26260:	1805883a 	mov	r2,r3
   26264:	1085883a 	add	r2,r2,r2
   26268:	10c5883a 	add	r2,r2,r3
   2626c:	100490ba 	slli	r2,r2,2
   26270:	00c000b4 	movhi	r3,2
   26274:	18dbb704 	addi	r3,r3,28380
   26278:	10c5883a 	add	r2,r2,r3
   2627c:	00000106 	br	26284 <fstat+0x48>
   26280:	0005883a 	mov	r2,zero
   26284:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   26288:	e0bfff17 	ldw	r2,-4(fp)
   2628c:	10001026 	beq	r2,zero,262d0 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   26290:	e0bfff17 	ldw	r2,-4(fp)
   26294:	10800017 	ldw	r2,0(r2)
   26298:	10800817 	ldw	r2,32(r2)
   2629c:	10000726 	beq	r2,zero,262bc <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   262a0:	e0bfff17 	ldw	r2,-4(fp)
   262a4:	10800017 	ldw	r2,0(r2)
   262a8:	10800817 	ldw	r2,32(r2)
   262ac:	e17ffd17 	ldw	r5,-12(fp)
   262b0:	e13fff17 	ldw	r4,-4(fp)
   262b4:	103ee83a 	callr	r2
   262b8:	00000a06 	br	262e4 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   262bc:	e0bffd17 	ldw	r2,-12(fp)
   262c0:	00c80004 	movi	r3,8192
   262c4:	10c00115 	stw	r3,4(r2)
      return 0;
   262c8:	0005883a 	mov	r2,zero
   262cc:	00000506 	br	262e4 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   262d0:	00262000 	call	26200 <alt_get_errno>
   262d4:	1007883a 	mov	r3,r2
   262d8:	00801444 	movi	r2,81
   262dc:	18800015 	stw	r2,0(r3)
    return -1;
   262e0:	00bfffc4 	movi	r2,-1
  }
}
   262e4:	e037883a 	mov	sp,fp
   262e8:	dfc00117 	ldw	ra,4(sp)
   262ec:	df000017 	ldw	fp,0(sp)
   262f0:	dec00204 	addi	sp,sp,8
   262f4:	f800283a 	ret

000262f8 <alt_get_errno>:
{
   262f8:	defffe04 	addi	sp,sp,-8
   262fc:	dfc00115 	stw	ra,4(sp)
   26300:	df000015 	stw	fp,0(sp)
   26304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26308:	d0a00917 	ldw	r2,-32732(gp)
   2630c:	10000326 	beq	r2,zero,2631c <alt_get_errno+0x24>
   26310:	d0a00917 	ldw	r2,-32732(gp)
   26314:	103ee83a 	callr	r2
   26318:	00000106 	br	26320 <alt_get_errno+0x28>
   2631c:	d0a6d904 	addi	r2,gp,-25756
}
   26320:	e037883a 	mov	sp,fp
   26324:	dfc00117 	ldw	ra,4(sp)
   26328:	df000017 	ldw	fp,0(sp)
   2632c:	dec00204 	addi	sp,sp,8
   26330:	f800283a 	ret

00026334 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   26334:	deffea04 	addi	sp,sp,-88
   26338:	dfc01515 	stw	ra,84(sp)
   2633c:	df001415 	stw	fp,80(sp)
   26340:	df001404 	addi	fp,sp,80
   26344:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26348:	e0bfec17 	ldw	r2,-80(fp)
   2634c:	10000916 	blt	r2,zero,26374 <isatty+0x40>
   26350:	e0ffec17 	ldw	r3,-80(fp)
   26354:	1805883a 	mov	r2,r3
   26358:	1085883a 	add	r2,r2,r2
   2635c:	10c5883a 	add	r2,r2,r3
   26360:	100490ba 	slli	r2,r2,2
   26364:	00c000b4 	movhi	r3,2
   26368:	18dbb704 	addi	r3,r3,28380
   2636c:	10c5883a 	add	r2,r2,r3
   26370:	00000106 	br	26378 <isatty+0x44>
   26374:	0005883a 	mov	r2,zero
   26378:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   2637c:	e0bfff17 	ldw	r2,-4(fp)
   26380:	10000e26 	beq	r2,zero,263bc <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   26384:	e0bfff17 	ldw	r2,-4(fp)
   26388:	10800017 	ldw	r2,0(r2)
   2638c:	10800817 	ldw	r2,32(r2)
   26390:	1000021e 	bne	r2,zero,2639c <isatty+0x68>
    {
      return 1;
   26394:	00800044 	movi	r2,1
   26398:	00000d06 	br	263d0 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2639c:	e0bfed04 	addi	r2,fp,-76
   263a0:	100b883a 	mov	r5,r2
   263a4:	e13fec17 	ldw	r4,-80(fp)
   263a8:	002623c0 	call	2623c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   263ac:	e0bfee17 	ldw	r2,-72(fp)
   263b0:	10880020 	cmpeqi	r2,r2,8192
   263b4:	10803fcc 	andi	r2,r2,255
   263b8:	00000506 	br	263d0 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   263bc:	00262f80 	call	262f8 <alt_get_errno>
   263c0:	1007883a 	mov	r3,r2
   263c4:	00801444 	movi	r2,81
   263c8:	18800015 	stw	r2,0(r3)
    return 0;
   263cc:	0005883a 	mov	r2,zero
  }
}
   263d0:	e037883a 	mov	sp,fp
   263d4:	dfc00117 	ldw	ra,4(sp)
   263d8:	df000017 	ldw	fp,0(sp)
   263dc:	dec00204 	addi	sp,sp,8
   263e0:	f800283a 	ret
