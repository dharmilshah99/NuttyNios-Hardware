
firmware02.elf:     file format elf32-littlenios2
firmware02.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010228

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000070e8 memsz 0x000070e8 flags r-x
    LOAD off    0x00008108 vaddr 0x00017108 paddr 0x00018c04 align 2**12
         filesz 0x00001afc memsz 0x00001afc flags rw-
    LOAD off    0x00000700 vaddr 0x0001a700 paddr 0x0001a700 align 2**12
         filesz 0x00000000 memsz 0x00000360 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006c88  00010228  00010228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000258  00016eb0  00016eb0  00007eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  00017108  00018c04  00008108  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000360  0001a700  0001a700  0000a700  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001aa60  0001aa60  00009c04  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00009c04  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000c10  00000000  00000000  00009c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001e7c6  00000000  00000000  0000a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000084de  00000000  00000000  0002900e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000b898  00000000  00000000  000314ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001c24  00000000  00000000  0003cd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000030b1  00000000  00000000  0003e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000057c9  00000000  00000000  00041a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00047224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a58  00000000  00000000  00047238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0004ab26  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0004ab29  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004ab2c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004ab2d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0004ab2e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004ab32  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004ab36  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004ab3a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0004ab43  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0004ab4c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0004ab55  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  0004ab60  2**0
                  CONTENTS, READONLY
 29 .jdi          00004881  00000000  00000000  0004ab89  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00077ce7  00000000  00000000  0004f40a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010228 l    d  .text	00000000 .text
00016eb0 l    d  .rodata	00000000 .rodata
00017108 l    d  .rwdata	00000000 .rwdata
0001a700 l    d  .bss	00000000 .bss
0001aa60 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../firmware02_bsp//obj/HAL/src/crt0.o
00010260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
000113fc l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000118a8 l     F .text	00000008 __fp_lock
000118bc l     F .text	00000008 __fp_unlock
000118c4 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0001716c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 refill.c
0001352c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00013cc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013de0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013e0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00014084 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014170 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001425c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0001443c l     F .text	0000003c alt_get_errno
00014478 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00014910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00018bf8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014b7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014cbc l     F .text	00000034 alt_dev_reg
00017b40 l     O .rwdata	00001060 jtag_uart
00018ba0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014fcc l     F .text	00000210 altera_avalon_jtag_uart_irq
000151dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015820 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015f80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001639c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001a758 g     O .bss	00000004 alt_instruction_exception_handler
00016840 g     F .text	00000018 putchar
00013ba8 g     F .text	00000058 _isatty_r
00014378 g     F .text	0000007c alt_main
0001038c g     F .text	00000064 read_accerometer
0001a960 g     O .bss	00000100 alt_irq
00013c00 g     F .text	00000064 _lseek_r
00018c04 g       *ABS*	00000000 __flash_rwdata_start
00013af0 g     F .text	000000b8 __sflags
0001aa60 g       *ABS*	00000000 __alt_heap_start
00017108 g     O .rwdata	00000064 filter_coeff_float
00013938 g     F .text	0000005c __sseek
00011c0c g     F .text	00000010 __sinit
00016bb4 g     F .text	00000148 __swbuf_r
00010b20 g     F .text	00000050 get_accler_isr
00011a2c g     F .text	00000078 __sfmoreglue
00014418 g     F .text	00000024 __malloc_unlock
00010630 g     F .text	0000004c fixed23_to_float
00010344 g     F .text	00000024 read_switches
00010e8c g     F .text	000003f8 .hidden __divsf3
000104ac g     F .text	0000008c shiftBuffer
0001a748 g     O .bss	00000004 altera_avalon_timer_ts_freq
00011bf8 g     F .text	00000014 _cleanup
000166bc g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00015b84 g     F .text	000000d4 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012604 g     F .text	00000060 _fstat_r
0001a724 g     O .bss	00000004 errno
00013788 g     F .text	0000007c __srget
000138b0 g     F .text	00000008 __seofread
0001a73c g     O .bss	00000004 alt_argv
00020bcc g       *ABS*	00000000 _gp
0001a870 g     O .bss	00000064 fir_mem_fixed_y
000179c0 g     O .rwdata	00000180 alt_fd_list
000127a4 g     F .text	0000007c _getc_r
00012820 g     F .text	00000090 getc
00016838 g     F .text	00000008 _putchar_r
0001a768 g     O .bss	0000000c filtered_coords
0001612c g     F .text	00000090 alt_find_dev
000132d8 g     F .text	00000100 memcpy
00016eb0 g     O .rodata	0000004b seven_seg_digits_decode_abcdefg
000118b0 g     F .text	0000000c _cleanup_r
00016470 g     F .text	0000007c alt_io_redirect
00016eb0 g       *ABS*	00000000 __DTOR_END__
0001067c g     F .text	0000010c fir_filter_fixed
000166e0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000153d8 g     F .text	00000220 altera_avalon_jtag_uart_read
000140c0 g     F .text	000000b0 isatty
00010788 g     F .text	00000080 generate_fixed
0001a730 g     O .bss	00000004 __malloc_top_pad
0001a710 g     O .bss	00000004 coord_data_ready
00013804 g     F .text	00000058 _sbrk_r
00013c64 g     F .text	00000064 _read_r
00018bec g     O .rwdata	00000004 alt_max_fd
000114bc g     F .text	00000070 _fclose_r
00011824 g     F .text	00000084 fflush
0001a72c g     O .bss	00000004 __malloc_max_sbrked_mem
00013f04 g     F .text	00000180 alt_irq_register
000103f0 g     F .text	00000064 decode_7seg
00014298 g     F .text	000000e0 lseek
00018bcc g     O .rwdata	00000004 _global_impure_ptr
0001aa60 g       *ABS*	00000000 __bss_end
00016590 g     F .text	0000012c alt_tick
00011c2c g     F .text	00000014 __fp_lock_all
0001a700 g     O .bss	00000004 state
00010920 g     F .text	000000a8 uart_recieve
000164ec g     F .text	000000a4 alt_alarm_stop
0001a734 g     O .bss	00000004 alt_irq_active
00012194 g     F .text	00000454 _fseeko_r
000100fc g     F .exceptions	000000cc alt_irq_handler
00017998 g     O .rwdata	00000028 alt_dev_null
00015f60 g     F .text	00000020 alt_dcache_flush_all
00018c04 g       *ABS*	00000000 __ram_rwdata_end
000108c0 g     F .text	00000060 update_leds
00010b70 g     F .text	0000007c timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00018be4 g     O .rwdata	00000008 alt_dev_list
00014bb8 g     F .text	00000104 write
00016a08 g     F .text	000000cc _putc_r
00015a14 g     F .text	00000020 alt_timestamp_freq
00017108 g       *ABS*	00000000 __ram_rodata_end
0001a8d4 g     O .bss	00000064 fir_mem_fixed_z
00013e48 g     F .text	000000bc fstat
00010368 g     F .text	00000024 read_buttons
00010264 g     F .text	00000030 write_leds
0001aa60 g       *ABS*	00000000 end
0001a70c g     O .bss	00000004 leds
000125e8 g     F .text	0000001c fseeko
00010294 g     F .text	000000b0 write_hex
00012178 g     F .text	0000001c fseek
00014f18 g     F .text	000000b4 altera_avalon_jtag_uart_init
000101c8 g     F .exceptions	00000060 alt_instruction_exception_entry
0001a708 g     O .bss	00000004 switches
00016eb0 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000158a0 g     F .text	0000007c alt_avalon_timer_sc_init
000113a8 g     F .text	00000054 .hidden __clzsi2
000155f8 g     F .text	00000228 altera_avalon_jtag_uart_write
00011c1c g     F .text	00000004 __sfp_lock_acquire
00011e78 g     F .text	000002fc _free_r
000146b4 g     F .text	0000022c alt_printf
000168e8 g     F .text	00000120 __call_exitprocs
00013714 g     F .text	00000074 __srget_r
00018bd4 g     O .rwdata	00000004 __malloc_sbrk_base
00010228 g     F .text	0000003c _start
0001a74c g     O .bss	00000004 _alt_tick_rate
00010808 g     F .text	000000b8 update_hex
0001a750 g     O .bss	00000008 _alt_nticks
0001494c g     F .text	00000108 read
00014d2c g     F .text	00000088 alt_sys_init
00015a70 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
00011284 g     F .text	00000124 .hidden __floatsisf
000134c8 g     F .text	00000064 _open_r
00016858 g     F .text	00000090 __register_exitproc
00010538 g     F .text	00000040 getWindow
0001527c g     F .text	00000068 altera_avalon_jtag_uart_close
00010e64 g     F .text	00000028 .hidden __mulsi3
00017108 g       *ABS*	00000000 __ram_rwdata_start
00016eb0 g       *ABS*	00000000 __ram_rodata_start
0001a938 g     O .bss	00000028 __malloc_current_mallinfo
00014db4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000162c4 g     F .text	000000b8 alt_get_fd
00015c58 g     F .text	000000d4 alt_up_accelerometer_spi_read_y_axis
00013a98 g     F .text	00000058 _close_r
000167c0 g     F .text	00000078 memcmp
00014e74 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001aa60 g       *ABS*	00000000 __alt_stack_base
00014ec4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00016d14 g     F .text	00000164 __swsetup_r
00011aa4 g     F .text	00000154 __sfp
00017590 g     O .rwdata	00000408 __malloc_av_
00011c28 g     F .text	00000004 __sinit_lock_release
0001385c g     F .text	00000054 __sread
000161bc g     F .text	00000108 alt_find_file
00015fbc g     F .text	000000a8 alt_dev_llist_insert
000143f4 g     F .text	00000024 __malloc_lock
00014ac4 g     F .text	000000b8 sbrk
000117c4 g     F .text	00000060 _fflush_r
00011d44 g     F .text	00000018 fopen
0001a700 g       *ABS*	00000000 __bss_start
000133d8 g     F .text	000000f0 memset
00010bec g     F .text	00000278 main
0001a740 g     O .bss	00000004 alt_envp
0001a728 g     O .bss	00000004 __malloc_max_total_mem
00014e14 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001a704 g     O .bss	00000004 buttons
00016cfc g     F .text	00000018 __swbuf
00013994 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
0001152c g     F .text	00000070 fclose
0001591c g     F .text	00000078 alt_timestamp_start
00012af8 g     F .text	000007e0 _malloc_r
00018bf0 g     O .rwdata	00000004 alt_errno
00012664 g     F .text	00000098 _fwalk
00016ad4 g     F .text	000000e0 putc
00011d5c g     F .text	0000011c _malloc_trim_r
00016eb0 g       *ABS*	00000000 __CTOR_END__
00016eb0 g       *ABS*	00000000 __flash_rodata_start
00016eb0 g       *ABS*	00000000 __DTOR_LIST__
00010454 g     F .text	00000058 setBuffer
0001a718 g     O .bss	00000004 delay
0001a78d g     O .bss	00000019 display_buff
00014cf0 g     F .text	0000003c alt_irq_init
00014a54 g     F .text	00000070 alt_release_fd
00016fc4 g     O .rodata	00000100 .hidden __clz_tab
00016efc g     O .rodata	0000004b seven_seg_digits_decode_gfedcba
00016778 g     F .text	00000014 atexit
00013a34 g     F .text	00000064 _write_r
00018bd0 g     O .rwdata	00000004 _impure_ptr
0001a738 g     O .bss	00000004 alt_argc
0001159c g     F .text	00000228 __sflush_r
00010578 g     F .text	000000b8 float_to_fixed23
0001a80c g     O .bss	00000064 fir_mem_fixed_x
0001a744 g     O .bss	00000004 altera_avalon_timer_ts_base
000160c8 g     F .text	00000064 _do_dtors
00012174 g     F .text	00000004 _fseek_r
00013548 g     F .text	000001cc __srefill_r
00010020 g       .exceptions	00000000 alt_irq_entry
00011c40 g     F .text	00000014 __fp_unlock_all
00018bdc g     O .rwdata	00000008 alt_fs_list
0001a75c g     O .bss	0000000c coords
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015a34 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
00015994 g     F .text	00000080 alt_timestamp
00012a60 g     F .text	00000098 __swhatbuf_r
00018c04 g       *ABS*	00000000 _edata
0001aa60 g       *ABS*	00000000 _end
00010228 g       *ABS*	00000000 __ram_exceptions_end
000152e4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000138b8 g     F .text	00000080 __swrite
00018bd8 g     O .rwdata	00000004 __malloc_trim_threshold
0001678c g     F .text	00000034 exit
000126fc g     F .text	000000a8 _fwalk_reent
00015d2c g     F .text	000000d4 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011c20 g     F .text	00000004 __sfp_lock_release
000109c8 g     F .text	00000158 state_0_recieve_loop
0001a71c g     O .bss	00000006 window
00011c54 g     F .text	000000f0 _fopen_r
00016e78 g     F .text	00000038 _exit
00015e00 g     F .text	00000160 alt_alarm_start
00015ab4 g     F .text	00000068 alt_up_accelerometer_spi_read
00015b1c g     F .text	00000068 alt_up_accelerometer_spi_write
000128b0 g     F .text	000001b0 __smakebuf_r
0001399c g     F .text	00000098 strlen
00014554 g     F .text	00000160 open
000148e0 g     F .text	00000030 alt_putchar
0001637c g     F .text	00000020 alt_icache_flush_all
00018bf4 g     O .rwdata	00000004 alt_priority_mask
0001a7a8 g     O .bss	00000064 filter_coeff_fixed
0001a714 g     O .bss	00000004 acc_dev
00018bfc g     O .rwdata	00000008 alt_alarm_list
00016064 g     F .text	00000064 _do_ctors
00013d04 g     F .text	000000dc close
0001a774 g     O .bss	00000019 word
000141d8 g     F .text	00000084 alt_load
00011c24 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408a14 	ori	at,at,552
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c80 	call	101c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001226 	beq	r2,zero,10184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	008000b4 	movhi	r2,2
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10ea5817 	ldw	r3,-22176(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	008000b4 	movhi	r2,2
   1015c:	2085883a 	add	r2,r4,r2
   10160:	10aa5917 	ldw	r2,-22172(r2)
   10164:	e17ffd17 	ldw	r5,-12(fp)
   10168:	1009883a 	mov	r4,r2
   1016c:	183ee83a 	callr	r3
#endif
        break;
   10170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10174:	0005313a 	rdctl	r2,ipending
   10178:	e0bffb15 	stw	r2,-20(fp)
  return active;
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	00000706 	br	101a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   1019c:	003fe306 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   101a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a4:	e0bfff17 	ldw	r2,-4(fp)
   101a8:	103fdd1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101ac:	0001883a 	nop
}
   101b0:	0001883a 	nop
   101b4:	e037883a 	mov	sp,fp
   101b8:	dfc00117 	ldw	ra,4(sp)
   101bc:	df000017 	ldw	fp,0(sp)
   101c0:	dec00204 	addi	sp,sp,8
   101c4:	f800283a 	ret

000101c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c8:	defffb04 	addi	sp,sp,-20
   101cc:	dfc00415 	stw	ra,16(sp)
   101d0:	df000315 	stw	fp,12(sp)
   101d4:	df000304 	addi	fp,sp,12
   101d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101dc:	00bfffc4 	movi	r2,-1
   101e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e8:	d0a6e317 	ldw	r2,-25716(gp)
   101ec:	10000726 	beq	r2,zero,1020c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f0:	d0a6e317 	ldw	r2,-25716(gp)
   101f4:	e0ffff17 	ldw	r3,-4(fp)
   101f8:	e1bffe17 	ldw	r6,-8(fp)
   101fc:	e17ffd17 	ldw	r5,-12(fp)
   10200:	1809883a 	mov	r4,r3
   10204:	103ee83a 	callr	r2
   10208:	00000206 	br	10214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   1020c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10210:	0005883a 	mov	r2,zero
}
   10214:	e037883a 	mov	sp,fp
   10218:	dfc00117 	ldw	ra,4(sp)
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00204 	addi	sp,sp,8
   10224:	f800283a 	ret

Disassembly of section .text:

00010228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10228:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   1022c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10230:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   10234:	d682f314 	ori	gp,gp,3020
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10238:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   1023c:	10a9c014 	ori	r2,r2,42752

    movhi r3, %hi(__bss_end)
   10240:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10244:	18ea9814 	ori	r3,r3,43616

    beq r2, r3, 1f
   10248:	10c00326 	beq	r2,r3,10258 <_start+0x30>

0:
    stw zero, (r2)
   1024c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10254:	10fffd36 	bltu	r2,r3,1024c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10258:	00141d80 	call	141d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   1025c:	00143780 	call	14378 <alt_main>

00010260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10260:	003fff06 	br	10260 <alt_after_alt_main>

00010264 <write_leds>:
#include "altera_avalon_pio_regs.h"

#ifndef UTILS_H_
#define UTILS_H_

void write_leds(int leds){
   10264:	defffe04 	addi	sp,sp,-8
   10268:	df000115 	stw	fp,4(sp)
   1026c:	df000104 	addi	fp,sp,4
   10270:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, leds);
   10274:	e0ffff17 	ldw	r3,-4(fp)
   10278:	008000b4 	movhi	r2,2
   1027c:	10c43035 	stwio	r3,4288(r2)
}
   10280:	0001883a 	nop
   10284:	e037883a 	mov	sp,fp
   10288:	df000017 	ldw	fp,0(sp)
   1028c:	dec00104 	addi	sp,sp,4
   10290:	f800283a 	ret

00010294 <write_hex>:

void write_hex(unsigned char hex[6]) {
   10294:	defffe04 	addi	sp,sp,-8
   10298:	df000115 	stw	fp,4(sp)
   1029c:	df000104 	addi	fp,sp,4
   102a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, hex[5]);
   102a4:	e0bfff17 	ldw	r2,-4(fp)
   102a8:	10800144 	addi	r2,r2,5
   102ac:	10800003 	ldbu	r2,0(r2)
   102b0:	10c03fcc 	andi	r3,r2,255
   102b4:	008000b4 	movhi	r2,2
   102b8:	10c42835 	stwio	r3,4256(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, hex[4]);
   102bc:	e0bfff17 	ldw	r2,-4(fp)
   102c0:	10800104 	addi	r2,r2,4
   102c4:	10800003 	ldbu	r2,0(r2)
   102c8:	10c03fcc 	andi	r3,r2,255
   102cc:	008000b4 	movhi	r2,2
   102d0:	10c42435 	stwio	r3,4240(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, hex[3]);
   102d4:	e0bfff17 	ldw	r2,-4(fp)
   102d8:	108000c4 	addi	r2,r2,3
   102dc:	10800003 	ldbu	r2,0(r2)
   102e0:	10c03fcc 	andi	r3,r2,255
   102e4:	008000b4 	movhi	r2,2
   102e8:	10c42035 	stwio	r3,4224(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, hex[2]);
   102ec:	e0bfff17 	ldw	r2,-4(fp)
   102f0:	10800084 	addi	r2,r2,2
   102f4:	10800003 	ldbu	r2,0(r2)
   102f8:	10c03fcc 	andi	r3,r2,255
   102fc:	008000b4 	movhi	r2,2
   10300:	10c41c35 	stwio	r3,4208(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, hex[1]);
   10304:	e0bfff17 	ldw	r2,-4(fp)
   10308:	10800044 	addi	r2,r2,1
   1030c:	10800003 	ldbu	r2,0(r2)
   10310:	10c03fcc 	andi	r3,r2,255
   10314:	008000b4 	movhi	r2,2
   10318:	10c41835 	stwio	r3,4192(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, hex[0]);
   1031c:	e0bfff17 	ldw	r2,-4(fp)
   10320:	10800003 	ldbu	r2,0(r2)
   10324:	10c03fcc 	andi	r3,r2,255
   10328:	008000b4 	movhi	r2,2
   1032c:	10c41435 	stwio	r3,4176(r2)
}
   10330:	0001883a 	nop
   10334:	e037883a 	mov	sp,fp
   10338:	df000017 	ldw	fp,0(sp)
   1033c:	dec00104 	addi	sp,sp,4
   10340:	f800283a 	ret

00010344 <read_switches>:

int read_switches() {
   10344:	deffff04 	addi	sp,sp,-4
   10348:	df000015 	stw	fp,0(sp)
   1034c:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10350:	008000b4 	movhi	r2,2
   10354:	10842c37 	ldwio	r2,4272(r2)
}
   10358:	e037883a 	mov	sp,fp
   1035c:	df000017 	ldw	fp,0(sp)
   10360:	dec00104 	addi	sp,sp,4
   10364:	f800283a 	ret

00010368 <read_buttons>:

int read_buttons() {
   10368:	deffff04 	addi	sp,sp,-4
   1036c:	df000015 	stw	fp,0(sp)
   10370:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10374:	008000b4 	movhi	r2,2
   10378:	10841037 	ldwio	r2,4160(r2)
}
   1037c:	e037883a 	mov	sp,fp
   10380:	df000017 	ldw	fp,0(sp)
   10384:	dec00104 	addi	sp,sp,4
   10388:	f800283a 	ret

0001038c <read_accerometer>:

void read_accerometer(alt_up_accelerometer_spi_dev *acc_dev, alt_32 coords[3]) {
   1038c:	defffc04 	addi	sp,sp,-16
   10390:	dfc00315 	stw	ra,12(sp)
   10394:	df000215 	stw	fp,8(sp)
   10398:	df000204 	addi	fp,sp,8
   1039c:	e13fff15 	stw	r4,-4(fp)
   103a0:	e17ffe15 	stw	r5,-8(fp)
	alt_up_accelerometer_spi_read_x_axis(acc_dev, &coords[0]);
   103a4:	e17ffe17 	ldw	r5,-8(fp)
   103a8:	e13fff17 	ldw	r4,-4(fp)
   103ac:	0015b840 	call	15b84 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, &coords[1]);
   103b0:	e0bffe17 	ldw	r2,-8(fp)
   103b4:	10800104 	addi	r2,r2,4
   103b8:	100b883a 	mov	r5,r2
   103bc:	e13fff17 	ldw	r4,-4(fp)
   103c0:	0015c580 	call	15c58 <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, &coords[2]);
   103c4:	e0bffe17 	ldw	r2,-8(fp)
   103c8:	10800204 	addi	r2,r2,8
   103cc:	100b883a 	mov	r5,r2
   103d0:	e13fff17 	ldw	r4,-4(fp)
   103d4:	0015d2c0 	call	15d2c <alt_up_accelerometer_spi_read_z_axis>
}
   103d8:	0001883a 	nop
   103dc:	e037883a 	mov	sp,fp
   103e0:	dfc00117 	ldw	ra,4(sp)
   103e4:	df000017 	ldw	fp,0(sp)
   103e8:	dec00204 	addi	sp,sp,8
   103ec:	f800283a 	ret

000103f0 <decode_7seg>:
/*  x     y     z     */
    0x64, 0x6E, 0x5B
};

unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
   103f0:	defffe04 	addi	sp,sp,-8
   103f4:	df000115 	stw	fp,4(sp)
   103f8:	df000104 	addi	fp,sp,4
   103fc:	2005883a 	mov	r2,r4
   10400:	e0bfff05 	stb	r2,-4(fp)
	if (chr == ' ') return 0xFF;
   10404:	e0bfff03 	ldbu	r2,-4(fp)
   10408:	10800818 	cmpnei	r2,r2,32
   1040c:	1000021e 	bne	r2,zero,10418 <decode_7seg+0x28>
   10410:	00bfffc4 	movi	r2,-1
   10414:	00000b06 	br	10444 <decode_7seg+0x54>
    if (chr > (unsigned char)'z')
   10418:	e0bfff03 	ldbu	r2,-4(fp)
   1041c:	10801ef0 	cmpltui	r2,r2,123
   10420:	1000021e 	bne	r2,zero,1042c <decode_7seg+0x3c>
        return 0xFF;
   10424:	00bfffc4 	movi	r2,-1
   10428:	00000606 	br	10444 <decode_7seg+0x54>
//    return ~seven_seg_digits_decode_abcdefg[chr - '0'];
	return ~seven_seg_digits_decode_gfedcba[chr - '0'];
   1042c:	e0bfff03 	ldbu	r2,-4(fp)
   10430:	10fff404 	addi	r3,r2,-48
   10434:	00800074 	movhi	r2,1
   10438:	1885883a 	add	r2,r3,r2
   1043c:	109bbf03 	ldbu	r2,28412(r2)
   10440:	0084303a 	nor	r2,zero,r2
}
   10444:	e037883a 	mov	sp,fp
   10448:	df000017 	ldw	fp,0(sp)
   1044c:	dec00104 	addi	sp,sp,4
   10450:	f800283a 	ret

00010454 <setBuffer>:

void setBuffer(unsigned char* word, unsigned char buffer[25]){
   10454:	defffc04 	addi	sp,sp,-16
   10458:	dfc00315 	stw	ra,12(sp)
   1045c:	df000215 	stw	fp,8(sp)
   10460:	df000204 	addi	fp,sp,8
   10464:	e13fff15 	stw	r4,-4(fp)
   10468:	e17ffe15 	stw	r5,-8(fp)
	memset(buffer, 255, 25);
   1046c:	01800644 	movi	r6,25
   10470:	01403fc4 	movi	r5,255
   10474:	e13ffe17 	ldw	r4,-8(fp)
   10478:	00133d80 	call	133d8 <memset>
	memcpy(buffer, word, strlen(word));
   1047c:	e13fff17 	ldw	r4,-4(fp)
   10480:	001399c0 	call	1399c <strlen>
   10484:	100d883a 	mov	r6,r2
   10488:	e17fff17 	ldw	r5,-4(fp)
   1048c:	e13ffe17 	ldw	r4,-8(fp)
   10490:	00132d80 	call	132d8 <memcpy>
}
   10494:	0001883a 	nop
   10498:	e037883a 	mov	sp,fp
   1049c:	dfc00117 	ldw	ra,4(sp)
   104a0:	df000017 	ldw	fp,0(sp)
   104a4:	dec00204 	addi	sp,sp,8
   104a8:	f800283a 	ret

000104ac <shiftBuffer>:

void shiftBuffer(unsigned char buffer[25]){
   104ac:	defffc04 	addi	sp,sp,-16
   104b0:	df000315 	stw	fp,12(sp)
   104b4:	df000304 	addi	fp,sp,12
   104b8:	e13ffd15 	stw	r4,-12(fp)
	int tmp = buffer[0];
   104bc:	e0bffd17 	ldw	r2,-12(fp)
   104c0:	10800003 	ldbu	r2,0(r2)
   104c4:	10803fcc 	andi	r2,r2,255
   104c8:	e0bffe15 	stw	r2,-8(fp)
	for(int i = 1; i < 25; i++){
   104cc:	00800044 	movi	r2,1
   104d0:	e0bfff15 	stw	r2,-4(fp)
   104d4:	00000c06 	br	10508 <shiftBuffer+0x5c>
		buffer[i-1] = buffer[i];
   104d8:	e0bfff17 	ldw	r2,-4(fp)
   104dc:	e0fffd17 	ldw	r3,-12(fp)
   104e0:	1887883a 	add	r3,r3,r2
   104e4:	e0bfff17 	ldw	r2,-4(fp)
   104e8:	10bfffc4 	addi	r2,r2,-1
   104ec:	e13ffd17 	ldw	r4,-12(fp)
   104f0:	2085883a 	add	r2,r4,r2
   104f4:	18c00003 	ldbu	r3,0(r3)
   104f8:	10c00005 	stb	r3,0(r2)
	for(int i = 1; i < 25; i++){
   104fc:	e0bfff17 	ldw	r2,-4(fp)
   10500:	10800044 	addi	r2,r2,1
   10504:	e0bfff15 	stw	r2,-4(fp)
   10508:	e0bfff17 	ldw	r2,-4(fp)
   1050c:	10800650 	cmplti	r2,r2,25
   10510:	103ff11e 	bne	r2,zero,104d8 <shiftBuffer+0x2c>
	}
	buffer[24] = tmp;
   10514:	e0bffd17 	ldw	r2,-12(fp)
   10518:	10800604 	addi	r2,r2,24
   1051c:	e0fffe17 	ldw	r3,-8(fp)
   10520:	10c00005 	stb	r3,0(r2)
}
   10524:	0001883a 	nop
   10528:	e037883a 	mov	sp,fp
   1052c:	df000017 	ldw	fp,0(sp)
   10530:	dec00104 	addi	sp,sp,4
   10534:	f800283a 	ret

00010538 <getWindow>:

void getWindow(unsigned char window[6], unsigned char buffer[25]){
   10538:	defffc04 	addi	sp,sp,-16
   1053c:	dfc00315 	stw	ra,12(sp)
   10540:	df000215 	stw	fp,8(sp)
   10544:	df000204 	addi	fp,sp,8
   10548:	e13fff15 	stw	r4,-4(fp)
   1054c:	e17ffe15 	stw	r5,-8(fp)
	memcpy(window, buffer, 6);
   10550:	01800184 	movi	r6,6
   10554:	e17ffe17 	ldw	r5,-8(fp)
   10558:	e13fff17 	ldw	r4,-4(fp)
   1055c:	00132d80 	call	132d8 <memcpy>
}
   10560:	0001883a 	nop
   10564:	e037883a 	mov	sp,fp
   10568:	dfc00117 	ldw	ra,4(sp)
   1056c:	df000017 	ldw	fp,0(sp)
   10570:	dec00204 	addi	sp,sp,8
   10574:	f800283a 	ret

00010578 <float_to_fixed23>:

alt_32 fir_mem_fixed_x[FIR_FILTER_COEFF_NUM] = {0};
alt_32 fir_mem_fixed_y[FIR_FILTER_COEFF_NUM] = {0};
alt_32 fir_mem_fixed_z[FIR_FILTER_COEFF_NUM] = {0};

alt_32 float_to_fixed23(float f) {
   10578:	defff804 	addi	sp,sp,-32
   1057c:	df000715 	stw	fp,28(sp)
   10580:	df000704 	addi	fp,sp,28
   10584:	e13ff915 	stw	r4,-28(fp)
	alt_u32 f_bits = *(alt_u32*)(&f);
   10588:	e0bff904 	addi	r2,fp,-28
   1058c:	10800017 	ldw	r2,0(r2)
   10590:	e0bfff15 	stw	r2,-4(fp)
	alt_u32 sign = f_bits & (1 << 31); // gets sign bit
   10594:	e0bfff17 	ldw	r2,-4(fp)
   10598:	10a0002c 	andhi	r2,r2,32768
   1059c:	e0bffe15 	stw	r2,-8(fp)
	alt_32 exp = ((f_bits >> 23) & (0xFF)) - 127; // exponent
   105a0:	e0bfff17 	ldw	r2,-4(fp)
   105a4:	1004d5fa 	srli	r2,r2,23
   105a8:	10803fcc 	andi	r2,r2,255
   105ac:	10bfe044 	addi	r2,r2,-127
   105b0:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 fraction = f_bits & (0x007FFFFF); // fraction bit mask
   105b4:	e0ffff17 	ldw	r3,-4(fp)
   105b8:	00802034 	movhi	r2,128
   105bc:	10bfffc4 	addi	r2,r2,-1
   105c0:	1884703a 	and	r2,r3,r2
   105c4:	e0bffc15 	stw	r2,-16(fp)
	fraction = fraction | (1 << 23); // put back implicit 1 in float
   105c8:	e0bffc17 	ldw	r2,-16(fp)
   105cc:	10802034 	orhi	r2,r2,128
   105d0:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 fixed = (exp < 0) ? fraction >> -exp : fraction << exp;
   105d4:	e0bffd17 	ldw	r2,-12(fp)
   105d8:	1000050e 	bge	r2,zero,105f0 <float_to_fixed23+0x78>
   105dc:	e0bffd17 	ldw	r2,-12(fp)
   105e0:	0085c83a 	sub	r2,zero,r2
   105e4:	e0fffc17 	ldw	r3,-16(fp)
   105e8:	1884d83a 	srl	r2,r3,r2
   105ec:	00000306 	br	105fc <float_to_fixed23+0x84>
   105f0:	e0fffc17 	ldw	r3,-16(fp)
   105f4:	e0bffd17 	ldw	r2,-12(fp)
   105f8:	1884983a 	sll	r2,r3,r2
   105fc:	e0bffb15 	stw	r2,-20(fp)
	alt_32 signed_fixed = sign ? -fixed : fixed;
   10600:	e0bffe17 	ldw	r2,-8(fp)
   10604:	10000326 	beq	r2,zero,10614 <float_to_fixed23+0x9c>
   10608:	e0bffb17 	ldw	r2,-20(fp)
   1060c:	0085c83a 	sub	r2,zero,r2
   10610:	00000106 	br	10618 <float_to_fixed23+0xa0>
   10614:	e0bffb17 	ldw	r2,-20(fp)
   10618:	e0bffa15 	stw	r2,-24(fp)
	return signed_fixed;
   1061c:	e0bffa17 	ldw	r2,-24(fp)
}
   10620:	e037883a 	mov	sp,fp
   10624:	df000017 	ldw	fp,0(sp)
   10628:	dec00104 	addi	sp,sp,4
   1062c:	f800283a 	ret

00010630 <fixed23_to_float>:

float fixed23_to_float(alt_32 fixed){
   10630:	defffd04 	addi	sp,sp,-12
   10634:	dfc00215 	stw	ra,8(sp)
   10638:	df000115 	stw	fp,4(sp)
   1063c:	df000104 	addi	fp,sp,4
   10640:	e13fff15 	stw	r4,-4(fp)
	return (float)fixed / (float)(1<<23);
   10644:	e13fff17 	ldw	r4,-4(fp)
   10648:	00112840 	call	11284 <__floatsisf>
   1064c:	1007883a 	mov	r3,r2
   10650:	0152c034 	movhi	r5,19200
   10654:	1809883a 	mov	r4,r3
   10658:	0010e8c0 	call	10e8c <__divsf3>
   1065c:	1007883a 	mov	r3,r2
   10660:	1809883a 	mov	r4,r3
   10664:	2005883a 	mov	r2,r4
}
   10668:	e037883a 	mov	sp,fp
   1066c:	dfc00117 	ldw	ra,4(sp)
   10670:	df000017 	ldw	fp,0(sp)
   10674:	dec00204 	addi	sp,sp,8
   10678:	f800283a 	ret

0001067c <fir_filter_fixed>:

void fir_filter_fixed(alt_32 memory[FIR_FILTER_COEFF_NUM], alt_32 data, alt_32 *average){
   1067c:	defff804 	addi	sp,sp,-32
   10680:	dfc00715 	stw	ra,28(sp)
   10684:	df000615 	stw	fp,24(sp)
   10688:	df000604 	addi	fp,sp,24
   1068c:	e13ffc15 	stw	r4,-16(fp)
   10690:	e17ffb15 	stw	r5,-20(fp)
   10694:	e1bffa15 	stw	r6,-24(fp)
	memory[0] = data;
   10698:	e0bffc17 	ldw	r2,-16(fp)
   1069c:	e0fffb17 	ldw	r3,-20(fp)
   106a0:	10c00015 	stw	r3,0(r2)

	alt_32 acc = 0;
   106a4:	e03fff15 	stw	zero,-4(fp)
	for(int i = 0; i < FIR_FILTER_COEFF_NUM; i++){
   106a8:	e03ffe15 	stw	zero,-8(fp)
   106ac:	00001306 	br	106fc <fir_filter_fixed+0x80>
		acc += filter_coeff_fixed[i] * memory[i];
   106b0:	e0bffe17 	ldw	r2,-8(fp)
   106b4:	100690ba 	slli	r3,r2,2
   106b8:	008000b4 	movhi	r2,2
   106bc:	1885883a 	add	r2,r3,r2
   106c0:	1129ea17 	ldw	r4,-22616(r2)
   106c4:	e0bffe17 	ldw	r2,-8(fp)
   106c8:	100490ba 	slli	r2,r2,2
   106cc:	e0fffc17 	ldw	r3,-16(fp)
   106d0:	1885883a 	add	r2,r3,r2
   106d4:	10800017 	ldw	r2,0(r2)
   106d8:	100b883a 	mov	r5,r2
   106dc:	0010e640 	call	10e64 <__mulsi3>
   106e0:	1007883a 	mov	r3,r2
   106e4:	e0bfff17 	ldw	r2,-4(fp)
   106e8:	1885883a 	add	r2,r3,r2
   106ec:	e0bfff15 	stw	r2,-4(fp)
	for(int i = 0; i < FIR_FILTER_COEFF_NUM; i++){
   106f0:	e0bffe17 	ldw	r2,-8(fp)
   106f4:	10800044 	addi	r2,r2,1
   106f8:	e0bffe15 	stw	r2,-8(fp)
   106fc:	e0bffe17 	ldw	r2,-8(fp)
   10700:	10800650 	cmplti	r2,r2,25
   10704:	103fea1e 	bne	r2,zero,106b0 <fir_filter_fixed+0x34>
	}
	*average = acc;
   10708:	e0bffa17 	ldw	r2,-24(fp)
   1070c:	e0ffff17 	ldw	r3,-4(fp)
   10710:	10c00015 	stw	r3,0(r2)

	for(int i = 1; i < FIR_FILTER_COEFF_NUM; i++){
   10714:	00800044 	movi	r2,1
   10718:	e0bffd15 	stw	r2,-12(fp)
   1071c:	00001006 	br	10760 <fir_filter_fixed+0xe4>
		memory[i] = memory[i-1];
   10720:	e0fffd17 	ldw	r3,-12(fp)
   10724:	00900034 	movhi	r2,16384
   10728:	10bfffc4 	addi	r2,r2,-1
   1072c:	1885883a 	add	r2,r3,r2
   10730:	100490ba 	slli	r2,r2,2
   10734:	e0fffc17 	ldw	r3,-16(fp)
   10738:	1887883a 	add	r3,r3,r2
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	100490ba 	slli	r2,r2,2
   10744:	e13ffc17 	ldw	r4,-16(fp)
   10748:	2085883a 	add	r2,r4,r2
   1074c:	18c00017 	ldw	r3,0(r3)
   10750:	10c00015 	stw	r3,0(r2)
	for(int i = 1; i < FIR_FILTER_COEFF_NUM; i++){
   10754:	e0bffd17 	ldw	r2,-12(fp)
   10758:	10800044 	addi	r2,r2,1
   1075c:	e0bffd15 	stw	r2,-12(fp)
   10760:	e0bffd17 	ldw	r2,-12(fp)
   10764:	10800650 	cmplti	r2,r2,25
   10768:	103fed1e 	bne	r2,zero,10720 <fir_filter_fixed+0xa4>
	}
}
   1076c:	0001883a 	nop
   10770:	0001883a 	nop
   10774:	e037883a 	mov	sp,fp
   10778:	dfc00117 	ldw	ra,4(sp)
   1077c:	df000017 	ldw	fp,0(sp)
   10780:	dec00204 	addi	sp,sp,8
   10784:	f800283a 	ret

00010788 <generate_fixed>:

void generate_fixed(){
   10788:	defffd04 	addi	sp,sp,-12
   1078c:	dfc00215 	stw	ra,8(sp)
   10790:	df000115 	stw	fp,4(sp)
   10794:	df000104 	addi	fp,sp,4
	for(int i = 0; i < FIR_FILTER_COEFF_NUM; i++){
   10798:	e03fff15 	stw	zero,-4(fp)
   1079c:	00001006 	br	107e0 <generate_fixed+0x58>
		filter_coeff_fixed[i] = float_to_fixed23(filter_coeff_float[i]);
   107a0:	e0bfff17 	ldw	r2,-4(fp)
   107a4:	100690ba 	slli	r3,r2,2
   107a8:	00800074 	movhi	r2,1
   107ac:	1885883a 	add	r2,r3,r2
   107b0:	109c4217 	ldw	r2,28936(r2)
   107b4:	1009883a 	mov	r4,r2
   107b8:	00105780 	call	10578 <float_to_fixed23>
   107bc:	1009883a 	mov	r4,r2
   107c0:	e0bfff17 	ldw	r2,-4(fp)
   107c4:	100690ba 	slli	r3,r2,2
   107c8:	008000b4 	movhi	r2,2
   107cc:	1885883a 	add	r2,r3,r2
   107d0:	1129ea15 	stw	r4,-22616(r2)
	for(int i = 0; i < FIR_FILTER_COEFF_NUM; i++){
   107d4:	e0bfff17 	ldw	r2,-4(fp)
   107d8:	10800044 	addi	r2,r2,1
   107dc:	e0bfff15 	stw	r2,-4(fp)
   107e0:	e0bfff17 	ldw	r2,-4(fp)
   107e4:	10800650 	cmplti	r2,r2,25
   107e8:	103fed1e 	bne	r2,zero,107a0 <generate_fixed+0x18>
	}
}
   107ec:	0001883a 	nop
   107f0:	0001883a 	nop
   107f4:	e037883a 	mov	sp,fp
   107f8:	dfc00117 	ldw	ra,4(sp)
   107fc:	df000017 	ldw	fp,0(sp)
   10800:	dec00204 	addi	sp,sp,8
   10804:	f800283a 	ret

00010808 <update_hex>:

void update_hex(){
   10808:	defffd04 	addi	sp,sp,-12
   1080c:	dfc00215 	stw	ra,8(sp)
   10810:	df000115 	stw	fp,4(sp)
   10814:	df000104 	addi	fp,sp,4
	if(delay == 0){
   10818:	d0a6d317 	ldw	r2,-25780(gp)
   1081c:	10001f1e 	bne	r2,zero,1089c <update_hex+0x94>
		getWindow(window, display_buff);
   10820:	014000b4 	movhi	r5,2
   10824:	2969e344 	addi	r5,r5,-22643
   10828:	d126d404 	addi	r4,gp,-25776
   1082c:	00105380 	call	10538 <getWindow>

		for(int j = 0; j < 6; j++){
   10830:	e03fff15 	stw	zero,-4(fp)
   10834:	00000f06 	br	10874 <update_hex+0x6c>
			window[j] = decode_7seg(window[j]);
   10838:	e0ffff17 	ldw	r3,-4(fp)
   1083c:	d0a6d404 	addi	r2,gp,-25776
   10840:	1885883a 	add	r2,r3,r2
   10844:	10800003 	ldbu	r2,0(r2)
   10848:	10803fcc 	andi	r2,r2,255
   1084c:	1009883a 	mov	r4,r2
   10850:	00103f00 	call	103f0 <decode_7seg>
   10854:	1009883a 	mov	r4,r2
   10858:	e0ffff17 	ldw	r3,-4(fp)
   1085c:	d0a6d404 	addi	r2,gp,-25776
   10860:	1885883a 	add	r2,r3,r2
   10864:	11000005 	stb	r4,0(r2)
		for(int j = 0; j < 6; j++){
   10868:	e0bfff17 	ldw	r2,-4(fp)
   1086c:	10800044 	addi	r2,r2,1
   10870:	e0bfff15 	stw	r2,-4(fp)
   10874:	e0bfff17 	ldw	r2,-4(fp)
   10878:	10800190 	cmplti	r2,r2,6
   1087c:	103fee1e 	bne	r2,zero,10838 <update_hex+0x30>
		}
		write_hex(window);
   10880:	d126d404 	addi	r4,gp,-25776
   10884:	00102940 	call	10294 <write_hex>
		shiftBuffer(display_buff);
   10888:	010000b4 	movhi	r4,2
   1088c:	2129e344 	addi	r4,r4,-22643
   10890:	00104ac0 	call	104ac <shiftBuffer>
		delay = HEX_DELAY;
   10894:	00800a04 	movi	r2,40
   10898:	d0a6d315 	stw	r2,-25780(gp)
	}
	delay--;
   1089c:	d0a6d317 	ldw	r2,-25780(gp)
   108a0:	10bfffc4 	addi	r2,r2,-1
   108a4:	d0a6d315 	stw	r2,-25780(gp)
}
   108a8:	0001883a 	nop
   108ac:	e037883a 	mov	sp,fp
   108b0:	dfc00117 	ldw	ra,4(sp)
   108b4:	df000017 	ldw	fp,0(sp)
   108b8:	dec00204 	addi	sp,sp,8
   108bc:	f800283a 	ret

000108c0 <update_leds>:

void update_leds(){
   108c0:	defffe04 	addi	sp,sp,-8
   108c4:	dfc00115 	stw	ra,4(sp)
   108c8:	df000015 	stw	fp,0(sp)
   108cc:	d839883a 	mov	fp,sp
	if(delay == 0){
   108d0:	d0a6d317 	ldw	r2,-25780(gp)
   108d4:	10000c1e 	bne	r2,zero,10908 <update_leds+0x48>
		leds |= (leds & 0x1) << 10;
   108d8:	d0a6d017 	ldw	r2,-25792(gp)
   108dc:	100492ba 	slli	r2,r2,10
   108e0:	10c1000c 	andi	r3,r2,1024
   108e4:	d0a6d017 	ldw	r2,-25792(gp)
   108e8:	1884b03a 	or	r2,r3,r2
   108ec:	d0a6d015 	stw	r2,-25792(gp)
		leds >>= 1;
   108f0:	d0a6d017 	ldw	r2,-25792(gp)
   108f4:	1004d07a 	srli	r2,r2,1
   108f8:	d0a6d015 	stw	r2,-25792(gp)
		write_leds(leds);
   108fc:	d0a6d017 	ldw	r2,-25792(gp)
   10900:	1009883a 	mov	r4,r2
   10904:	00102640 	call	10264 <write_leds>
	}
}
   10908:	0001883a 	nop
   1090c:	e037883a 	mov	sp,fp
   10910:	dfc00117 	ldw	ra,4(sp)
   10914:	df000017 	ldw	fp,0(sp)
   10918:	dec00204 	addi	sp,sp,8
   1091c:	f800283a 	ret

00010920 <uart_recieve>:

void uart_recieve(unsigned char* buffer){
   10920:	defffa04 	addi	sp,sp,-24
   10924:	dfc00515 	stw	ra,20(sp)
   10928:	df000415 	stw	fp,16(sp)
   1092c:	df000404 	addi	fp,sp,16
   10930:	e13ffc15 	stw	r4,-16(fp)
	FILE* fp;
	int i = 0;
   10934:	e03fff15 	stw	zero,-4(fp)
	char c = 0;
   10938:	e03ffec5 	stb	zero,-5(fp)
	fp = fopen("/dev/jtag_uart", "r");
   1093c:	01400074 	movhi	r5,1
   10940:	295bd204 	addi	r5,r5,28488
   10944:	01000074 	movhi	r4,1
   10948:	211bd304 	addi	r4,r4,28492
   1094c:	0011d440 	call	11d44 <fopen>
   10950:	e0bffd15 	stw	r2,-12(fp)
	if(fp){
   10954:	e0bffd17 	ldw	r2,-12(fp)
   10958:	10001526 	beq	r2,zero,109b0 <uart_recieve+0x90>
		while(c != END_RECIEVE){
   1095c:	00000b06 	br	1098c <uart_recieve+0x6c>
			c = getc(fp);
   10960:	e13ffd17 	ldw	r4,-12(fp)
   10964:	00128200 	call	12820 <getc>
   10968:	e0bffec5 	stb	r2,-5(fp)
			buffer[i] = c;
   1096c:	e0bfff17 	ldw	r2,-4(fp)
   10970:	e0fffc17 	ldw	r3,-16(fp)
   10974:	1885883a 	add	r2,r3,r2
   10978:	e0fffec3 	ldbu	r3,-5(fp)
   1097c:	10c00005 	stb	r3,0(r2)
			i++;
   10980:	e0bfff17 	ldw	r2,-4(fp)
   10984:	10800044 	addi	r2,r2,1
   10988:	e0bfff15 	stw	r2,-4(fp)
		while(c != END_RECIEVE){
   1098c:	e0bffec7 	ldb	r2,-5(fp)
   10990:	10800298 	cmpnei	r2,r2,10
   10994:	103ff21e 	bne	r2,zero,10960 <uart_recieve+0x40>
		}
		buffer[i] = '\0';
   10998:	e0bfff17 	ldw	r2,-4(fp)
   1099c:	e0fffc17 	ldw	r3,-16(fp)
   109a0:	1885883a 	add	r2,r3,r2
   109a4:	10000005 	stb	zero,0(r2)
		fclose(fp);
   109a8:	e13ffd17 	ldw	r4,-12(fp)
   109ac:	001152c0 	call	1152c <fclose>
		// alt_printf("[DEBUG] CLOSED FP\n");
	}
}
   109b0:	0001883a 	nop
   109b4:	e037883a 	mov	sp,fp
   109b8:	dfc00117 	ldw	ra,4(sp)
   109bc:	df000017 	ldw	fp,0(sp)
   109c0:	dec00204 	addi	sp,sp,8
   109c4:	f800283a 	ret

000109c8 <state_0_recieve_loop>:

void state_0_recieve_loop(){
   109c8:	deffbb04 	addi	sp,sp,-276
   109cc:	dfc04415 	stw	ra,272(sp)
   109d0:	df004315 	stw	fp,268(sp)
   109d4:	df004304 	addi	fp,sp,268
	// while(state == 0){
	char buff[256];
	uart_recieve(buff);
   109d8:	e0bfbd04 	addi	r2,fp,-268
   109dc:	1009883a 	mov	r4,r2
   109e0:	00109200 	call	10920 <uart_recieve>
	// unsigned char c = decode_7seg(buff[0]);
	// IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, &c);
	
	// write hex
	char* c = buff;
   109e4:	e0bfbd04 	addi	r2,fp,-268
   109e8:	e0bfff15 	stw	r2,-4(fp)
	int wordind = 0;
   109ec:	e03ffe15 	stw	zero,-8(fp)
	while(*c != ','){
   109f0:	00000306 	br	10a00 <state_0_recieve_loop+0x38>
		wordind++;
   109f4:	e0bffe17 	ldw	r2,-8(fp)
   109f8:	10800044 	addi	r2,r2,1
   109fc:	e0bffe15 	stw	r2,-8(fp)
	while(*c != ','){
   10a00:	e0bfff17 	ldw	r2,-4(fp)
   10a04:	10800003 	ldbu	r2,0(r2)
   10a08:	10803fcc 	andi	r2,r2,255
   10a0c:	1080201c 	xori	r2,r2,128
   10a10:	10bfe004 	addi	r2,r2,-128
   10a14:	10800b18 	cmpnei	r2,r2,44
   10a18:	103ff61e 	bne	r2,zero,109f4 <state_0_recieve_loop+0x2c>
	}
	memcpy(word, buff, wordind);
   10a1c:	e0fffe17 	ldw	r3,-8(fp)
   10a20:	e0bfbd04 	addi	r2,fp,-268
   10a24:	180d883a 	mov	r6,r3
   10a28:	100b883a 	mov	r5,r2
   10a2c:	010000b4 	movhi	r4,2
   10a30:	2129dd04 	addi	r4,r4,-22668
   10a34:	00132d80 	call	132d8 <memcpy>
	word[wordind] = '\0';
   10a38:	e0fffe17 	ldw	r3,-8(fp)
   10a3c:	008000b4 	movhi	r2,2
   10a40:	1885883a 	add	r2,r3,r2
   10a44:	1029dd05 	stb	zero,-22668(r2)
	alt_printf("%s\n", word);
   10a48:	014000b4 	movhi	r5,2
   10a4c:	2969dd04 	addi	r5,r5,-22668
   10a50:	01000074 	movhi	r4,1
   10a54:	211bd704 	addi	r4,r4,28508
   10a58:	00146b40 	call	146b4 <alt_printf>
	setBuffer(word, display_buff);
   10a5c:	014000b4 	movhi	r5,2
   10a60:	2969e344 	addi	r5,r5,-22643
   10a64:	010000b4 	movhi	r4,2
   10a68:	2129dd04 	addi	r4,r4,-22668
   10a6c:	00104540 	call	10454 <setBuffer>
	c++; // go over comma
   10a70:	e0bfff17 	ldw	r2,-4(fp)
   10a74:	10800044 	addi	r2,r2,1
   10a78:	e0bfff15 	stw	r2,-4(fp)

	// write leds
	int ledind = 0;
   10a7c:	e03ffd15 	stw	zero,-12(fp)
	while(*c != '\0'){
   10a80:	00001606 	br	10adc <state_0_recieve_loop+0x114>
		if(*c == '1')
   10a84:	e0bfff17 	ldw	r2,-4(fp)
   10a88:	10800003 	ldbu	r2,0(r2)
   10a8c:	10803fcc 	andi	r2,r2,255
   10a90:	1080201c 	xori	r2,r2,128
   10a94:	10bfe004 	addi	r2,r2,-128
   10a98:	10800c58 	cmpnei	r2,r2,49
   10a9c:	1000091e 	bne	r2,zero,10ac4 <state_0_recieve_loop+0xfc>
			leds |= 1 << (9-ledind);
   10aa0:	00c00244 	movi	r3,9
   10aa4:	e0bffd17 	ldw	r2,-12(fp)
   10aa8:	1885c83a 	sub	r2,r3,r2
   10aac:	00c00044 	movi	r3,1
   10ab0:	1884983a 	sll	r2,r3,r2
   10ab4:	1007883a 	mov	r3,r2
   10ab8:	d0a6d017 	ldw	r2,-25792(gp)
   10abc:	1884b03a 	or	r2,r3,r2
   10ac0:	d0a6d015 	stw	r2,-25792(gp)
		ledind++;
   10ac4:	e0bffd17 	ldw	r2,-12(fp)
   10ac8:	10800044 	addi	r2,r2,1
   10acc:	e0bffd15 	stw	r2,-12(fp)
		c++;
   10ad0:	e0bfff17 	ldw	r2,-4(fp)
   10ad4:	10800044 	addi	r2,r2,1
   10ad8:	e0bfff15 	stw	r2,-4(fp)
	while(*c != '\0'){
   10adc:	e0bfff17 	ldw	r2,-4(fp)
   10ae0:	10800003 	ldbu	r2,0(r2)
   10ae4:	10803fcc 	andi	r2,r2,255
   10ae8:	1080201c 	xori	r2,r2,128
   10aec:	10bfe004 	addi	r2,r2,-128
   10af0:	103fe41e 	bne	r2,zero,10a84 <state_0_recieve_loop+0xbc>
	}
	write_leds(leds);
   10af4:	d0a6d017 	ldw	r2,-25792(gp)
   10af8:	1009883a 	mov	r4,r2
   10afc:	00102640 	call	10264 <write_leds>
	state = 1;
   10b00:	00800044 	movi	r2,1
   10b04:	d0a6cd15 	stw	r2,-25804(gp)
		// else if (buff[0] == 'e'){
		// 	state = 1;
		// }

	// }
}
   10b08:	0001883a 	nop
   10b0c:	e037883a 	mov	sp,fp
   10b10:	dfc00117 	ldw	ra,4(sp)
   10b14:	df000017 	ldw	fp,0(sp)
   10b18:	dec00204 	addi	sp,sp,8
   10b1c:	f800283a 	ret

00010b20 <get_accler_isr>:
//    alt_u8 val = (acc_read >> 6) & 0x07;
//    * led = (8 >> val) | (8 << (8 - val));
//    * level = (acc_read >> 1) & 0x1f;
//}

void get_accler_isr() {
   10b20:	defffe04 	addi	sp,sp,-8
   10b24:	dfc00115 	stw	ra,4(sp)
   10b28:	df000015 	stw	fp,0(sp)
   10b2c:	d839883a 	mov	fp,sp
	// reset timer
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER0_BASE, 0);
   10b30:	0007883a 	mov	r3,zero
   10b34:	008000b4 	movhi	r2,2
   10b38:	10c40835 	stwio	r3,4128(r2)

	read_accerometer(acc_dev, coords);
   10b3c:	d0a6d217 	ldw	r2,-25784(gp)
   10b40:	014000b4 	movhi	r5,2
   10b44:	2969d704 	addi	r5,r5,-22692
   10b48:	1009883a 	mov	r4,r2
   10b4c:	001038c0 	call	1038c <read_accerometer>
	coord_data_ready = 1;
   10b50:	00800044 	movi	r2,1
   10b54:	d0a6d115 	stw	r2,-25788(gp)
}
   10b58:	0001883a 	nop
   10b5c:	e037883a 	mov	sp,fp
   10b60:	dfc00117 	ldw	ra,4(sp)
   10b64:	df000017 	ldw	fp,0(sp)
   10b68:	dec00204 	addi	sp,sp,8
   10b6c:	f800283a 	ret

00010b70 <timer_init>:



void timer_init(void *isr) {
   10b70:	defffd04 	addi	sp,sp,-12
   10b74:	dfc00215 	stw	ra,8(sp)
   10b78:	df000115 	stw	fp,4(sp)
   10b7c:	df000104 	addi	fp,sp,4
   10b80:	e13fff15 	stw	r4,-4(fp)
	// timer0: 20000 ticks per sec, T = 50us.

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER0_BASE, 0x0003);
   10b84:	00c000c4 	movi	r3,3
   10b88:	008000b4 	movhi	r2,2
   10b8c:	10c40935 	stwio	r3,4132(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER0_BASE, 0);
   10b90:	0007883a 	mov	r3,zero
   10b94:	008000b4 	movhi	r2,2
   10b98:	10c40835 	stwio	r3,4128(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER0_BASE, 0xC4F0); // ~1000Hz Sampling
   10b9c:	00f13c14 	movui	r3,50416
   10ba0:	008000b4 	movhi	r2,2
   10ba4:	10c40a35 	stwio	r3,4136(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER0_BASE, 0x0000);
   10ba8:	0007883a 	mov	r3,zero
   10bac:	008000b4 	movhi	r2,2
   10bb0:	10c40b35 	stwio	r3,4140(r2)
    alt_irq_register(TIMER0_IRQ, 0, isr);
   10bb4:	e0bfff17 	ldw	r2,-4(fp)
   10bb8:	100d883a 	mov	r6,r2
   10bbc:	000b883a 	mov	r5,zero
   10bc0:	01000084 	movi	r4,2
   10bc4:	0013f040 	call	13f04 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER0_BASE, 0x0007);
   10bc8:	00c001c4 	movi	r3,7
   10bcc:	008000b4 	movhi	r2,2
   10bd0:	10c40935 	stwio	r3,4132(r2)

}
   10bd4:	0001883a 	nop
   10bd8:	e037883a 	mov	sp,fp
   10bdc:	dfc00117 	ldw	ra,4(sp)
   10be0:	df000017 	ldw	fp,0(sp)
   10be4:	dec00204 	addi	sp,sp,8
   10be8:	f800283a 	ret

00010bec <main>:



int main() {
   10bec:	deffba04 	addi	sp,sp,-280
   10bf0:	dfc04515 	stw	ra,276(sp)
   10bf4:	df004415 	stw	fp,272(sp)
   10bf8:	df004404 	addi	fp,sp,272

	// make fixed point filter coeff.
	generate_fixed();
   10bfc:	00107880 	call	10788 <generate_fixed>

	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10c00:	01000074 	movhi	r4,1
   10c04:	211bd804 	addi	r4,r4,28512
   10c08:	0015a340 	call	15a34 <alt_up_accelerometer_spi_open_dev>
   10c0c:	d0a6d215 	stw	r2,-25784(gp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10c10:	d0a6d217 	ldw	r2,-25784(gp)
   10c14:	1000051e 	bne	r2,zero,10c2c <main+0x40>
    	alt_printf("[ERROR] ACCELEROMETER MISSING\n");
   10c18:	01000074 	movhi	r4,1
   10c1c:	211bde04 	addi	r4,r4,28536
   10c20:	00146b40 	call	146b4 <alt_printf>
    	return 1;
   10c24:	00800044 	movi	r2,1
   10c28:	00008906 	br	10e50 <main+0x264>
    }
    timer_init(get_accler_isr);
   10c2c:	01000074 	movhi	r4,1
   10c30:	2102c804 	addi	r4,r4,2848
   10c34:	0010b700 	call	10b70 <timer_init>

    if(alt_timestamp_start() < 0) {
   10c38:	001591c0 	call	1591c <alt_timestamp_start>
   10c3c:	1000030e 	bge	r2,zero,10c4c <main+0x60>
    	alt_printf("[ERROR] NO TIMESTAMP TIMER\n");
   10c40:	01000074 	movhi	r4,1
   10c44:	211be604 	addi	r4,r4,28568
   10c48:	00146b40 	call	146b4 <alt_printf>
    }

	char buffer[256];
	uart_recieve(buffer);
   10c4c:	e0bfbe04 	addi	r2,fp,-264
   10c50:	1009883a 	mov	r4,r2
   10c54:	00109200 	call	10920 <uart_recieve>
	// alt_printf("%s\n", buffer);

	int i = 0;
   10c58:	e03fff15 	stw	zero,-4(fp)
	while(buffer[i] != ',') i++;
   10c5c:	00000306 	br	10c6c <main+0x80>
   10c60:	e0bfff17 	ldw	r2,-4(fp)
   10c64:	10800044 	addi	r2,r2,1
   10c68:	e0bfff15 	stw	r2,-4(fp)
   10c6c:	e0bfff17 	ldw	r2,-4(fp)
   10c70:	e085883a 	add	r2,fp,r2
   10c74:	10bfbe03 	ldbu	r2,-264(r2)
   10c78:	10803fcc 	andi	r2,r2,255
   10c7c:	1080201c 	xori	r2,r2,128
   10c80:	10bfe004 	addi	r2,r2,-128
   10c84:	10800b18 	cmpnei	r2,r2,44
   10c88:	103ff51e 	bne	r2,zero,10c60 <main+0x74>

	memcpy(word, buffer, i);
   10c8c:	e0ffff17 	ldw	r3,-4(fp)
   10c90:	e0bfbe04 	addi	r2,fp,-264
   10c94:	180d883a 	mov	r6,r3
   10c98:	100b883a 	mov	r5,r2
   10c9c:	010000b4 	movhi	r4,2
   10ca0:	2129dd04 	addi	r4,r4,-22668
   10ca4:	00132d80 	call	132d8 <memcpy>
	word[i] = '\0';
   10ca8:	e0ffff17 	ldw	r3,-4(fp)
   10cac:	008000b4 	movhi	r2,2
   10cb0:	1885883a 	add	r2,r3,r2
   10cb4:	1029dd05 	stb	zero,-22668(r2)

	i++; // skip ','
   10cb8:	e0bfff17 	ldw	r2,-4(fp)
   10cbc:	10800044 	addi	r2,r2,1
   10cc0:	e0bfff15 	stw	r2,-4(fp)
	int ledind = 0;
   10cc4:	e03ffe15 	stw	zero,-8(fp)
	while(buffer[i] != '\0'){
   10cc8:	00001706 	br	10d28 <main+0x13c>
		if(buffer[i] == '1')
   10ccc:	e0bfff17 	ldw	r2,-4(fp)
   10cd0:	e085883a 	add	r2,fp,r2
   10cd4:	10bfbe03 	ldbu	r2,-264(r2)
   10cd8:	10803fcc 	andi	r2,r2,255
   10cdc:	1080201c 	xori	r2,r2,128
   10ce0:	10bfe004 	addi	r2,r2,-128
   10ce4:	10800c58 	cmpnei	r2,r2,49
   10ce8:	1000091e 	bne	r2,zero,10d10 <main+0x124>
			leds |= 1 << (9-ledind);
   10cec:	00c00244 	movi	r3,9
   10cf0:	e0bffe17 	ldw	r2,-8(fp)
   10cf4:	1885c83a 	sub	r2,r3,r2
   10cf8:	00c00044 	movi	r3,1
   10cfc:	1884983a 	sll	r2,r3,r2
   10d00:	1007883a 	mov	r3,r2
   10d04:	d0a6d017 	ldw	r2,-25792(gp)
   10d08:	1884b03a 	or	r2,r3,r2
   10d0c:	d0a6d015 	stw	r2,-25792(gp)
		ledind++;
   10d10:	e0bffe17 	ldw	r2,-8(fp)
   10d14:	10800044 	addi	r2,r2,1
   10d18:	e0bffe15 	stw	r2,-8(fp)
		i++;
   10d1c:	e0bfff17 	ldw	r2,-4(fp)
   10d20:	10800044 	addi	r2,r2,1
   10d24:	e0bfff15 	stw	r2,-4(fp)
	while(buffer[i] != '\0'){
   10d28:	e0bfff17 	ldw	r2,-4(fp)
   10d2c:	e085883a 	add	r2,fp,r2
   10d30:	10bfbe03 	ldbu	r2,-264(r2)
   10d34:	10803fcc 	andi	r2,r2,255
   10d38:	1080201c 	xori	r2,r2,128
   10d3c:	10bfe004 	addi	r2,r2,-128
   10d40:	103fe21e 	bne	r2,zero,10ccc <main+0xe0>
	}
	leds &= 0x3FF; // 10 leds mask
   10d44:	d0a6d017 	ldw	r2,-25792(gp)
   10d48:	1080ffcc 	andi	r2,r2,1023
   10d4c:	d0a6d015 	stw	r2,-25792(gp)
	write_leds(leds);
   10d50:	d0a6d017 	ldw	r2,-25792(gp)
   10d54:	1009883a 	mov	r4,r2
   10d58:	00102640 	call	10264 <write_leds>


	// alt_printf("%s\n", word);
	setBuffer(word, display_buff);
   10d5c:	014000b4 	movhi	r5,2
   10d60:	2969e344 	addi	r5,r5,-22643
   10d64:	010000b4 	movhi	r4,2
   10d68:	2129dd04 	addi	r4,r4,-22668
   10d6c:	00104540 	call	10454 <setBuffer>

	// infinite polling loop
    while (1) {

    	// only output if there is new sample
    	if(coord_data_ready){
   10d70:	d0a6d117 	ldw	r2,-25788(gp)
   10d74:	103ffe26 	beq	r2,zero,10d70 <main+0x184>

    		// accelerometer input
    		fir_filter_fixed(fir_mem_fixed_x, coords[0], filtered_coords);
   10d78:	008000b4 	movhi	r2,2
   10d7c:	10a9d717 	ldw	r2,-22692(r2)
   10d80:	018000b4 	movhi	r6,2
   10d84:	31a9da04 	addi	r6,r6,-22680
   10d88:	100b883a 	mov	r5,r2
   10d8c:	010000b4 	movhi	r4,2
   10d90:	212a0304 	addi	r4,r4,-22516
   10d94:	001067c0 	call	1067c <fir_filter_fixed>
    		fir_filter_fixed(fir_mem_fixed_y, coords[1], filtered_coords+1);
   10d98:	008000b4 	movhi	r2,2
   10d9c:	10e9d817 	ldw	r3,-22688(r2)
   10da0:	008000b4 	movhi	r2,2
   10da4:	10a9db04 	addi	r2,r2,-22676
   10da8:	100d883a 	mov	r6,r2
   10dac:	180b883a 	mov	r5,r3
   10db0:	010000b4 	movhi	r4,2
   10db4:	212a1c04 	addi	r4,r4,-22416
   10db8:	001067c0 	call	1067c <fir_filter_fixed>
    		fir_filter_fixed(fir_mem_fixed_z, coords[2], filtered_coords+2);
   10dbc:	008000b4 	movhi	r2,2
   10dc0:	10e9d917 	ldw	r3,-22684(r2)
   10dc4:	008000b4 	movhi	r2,2
   10dc8:	10a9dc04 	addi	r2,r2,-22672
   10dcc:	100d883a 	mov	r6,r2
   10dd0:	180b883a 	mov	r5,r3
   10dd4:	010000b4 	movhi	r4,2
   10dd8:	212a3504 	addi	r4,r4,-22316
   10ddc:	001067c0 	call	1067c <fir_filter_fixed>

    		// button & switch input
			buttons = read_buttons();
   10de0:	00103680 	call	10368 <read_buttons>
   10de4:	d0a6ce15 	stw	r2,-25800(gp)
			switches = read_switches();
   10de8:	00103440 	call	10344 <read_switches>
   10dec:	d0a6cf15 	stw	r2,-25796(gp)

    		alt_printf("%x,%x,%x,%x,%x\n", \
   10df0:	008000b4 	movhi	r2,2
   10df4:	1129da17 	ldw	r4,-22680(r2)
   10df8:	008000b4 	movhi	r2,2
   10dfc:	1169db17 	ldw	r5,-22676(r2)
   10e00:	008000b4 	movhi	r2,2
   10e04:	11a9dc17 	ldw	r6,-22672(r2)
   10e08:	d0a6ce17 	ldw	r2,-25800(gp)
   10e0c:	d0e6cf17 	ldw	r3,-25796(gp)
   10e10:	d8c00115 	stw	r3,4(sp)
   10e14:	d8800015 	stw	r2,0(sp)
   10e18:	300f883a 	mov	r7,r6
   10e1c:	280d883a 	mov	r6,r5
   10e20:	200b883a 	mov	r5,r4
   10e24:	01000074 	movhi	r4,1
   10e28:	211bed04 	addi	r4,r4,28596
   10e2c:	00146b40 	call	146b4 <alt_printf>
    				filtered_coords[0], filtered_coords[1], filtered_coords[2], \
					buttons, switches);
    		fflush(stdout);
   10e30:	d0a00117 	ldw	r2,-32764(gp)
   10e34:	10800217 	ldw	r2,8(r2)
   10e38:	1009883a 	mov	r4,r2
   10e3c:	00118240 	call	11824 <fflush>

			update_hex();
   10e40:	00108080 	call	10808 <update_hex>
			update_leds();
   10e44:	00108c00 	call	108c0 <update_leds>

    		coord_data_ready = 0;
   10e48:	d026d115 	stw	zero,-25788(gp)
    	if(coord_data_ready){
   10e4c:	003fc806 	br	10d70 <main+0x184>
//    alt_printf("\n\nTotal Running Time (HEX): 0x%x uS\n", totaltime_uS);
//    alt_printf("Average Time (HEX): 0x%x uS\n", averagetime_uS);
//    alt_printf("Sampling Rate (HEX): 0x%x Hz\n", 1000000/averagetime_uS);

    return 0;
}
   10e50:	e037883a 	mov	sp,fp
   10e54:	dfc00117 	ldw	ra,4(sp)
   10e58:	df000017 	ldw	fp,0(sp)
   10e5c:	dec00204 	addi	sp,sp,8
   10e60:	f800283a 	ret

00010e64 <__mulsi3>:
   10e64:	0005883a 	mov	r2,zero
   10e68:	20000726 	beq	r4,zero,10e88 <__mulsi3+0x24>
   10e6c:	20c0004c 	andi	r3,r4,1
   10e70:	2008d07a 	srli	r4,r4,1
   10e74:	18000126 	beq	r3,zero,10e7c <__mulsi3+0x18>
   10e78:	1145883a 	add	r2,r2,r5
   10e7c:	294b883a 	add	r5,r5,r5
   10e80:	203ffa1e 	bne	r4,zero,10e6c <__mulsi3+0x8>
   10e84:	f800283a 	ret
   10e88:	f800283a 	ret

00010e8c <__divsf3>:
   10e8c:	defff604 	addi	sp,sp,-40
   10e90:	2006d5fa 	srli	r3,r4,23
   10e94:	dd400615 	stw	r21,24(sp)
   10e98:	202ad7fa 	srli	r21,r4,31
   10e9c:	00802034 	movhi	r2,128
   10ea0:	dc800315 	stw	r18,12(sp)
   10ea4:	dc000115 	stw	r16,4(sp)
   10ea8:	10bfffc4 	addi	r2,r2,-1
   10eac:	dfc00915 	stw	ra,36(sp)
   10eb0:	ddc00815 	stw	r23,32(sp)
   10eb4:	dd800715 	stw	r22,28(sp)
   10eb8:	dd000515 	stw	r20,20(sp)
   10ebc:	dcc00415 	stw	r19,16(sp)
   10ec0:	dc400215 	stw	r17,8(sp)
   10ec4:	18c03fcc 	andi	r3,r3,255
   10ec8:	1120703a 	and	r16,r2,r4
   10ecc:	a825883a 	mov	r18,r21
   10ed0:	18007b26 	beq	r3,zero,110c0 <__divsf3+0x234>
   10ed4:	18803fe0 	cmpeqi	r2,r3,255
   10ed8:	10007e1e 	bne	r2,zero,110d4 <__divsf3+0x248>
   10edc:	800490fa 	slli	r2,r16,3
   10ee0:	1cffe044 	addi	r19,r3,-127
   10ee4:	0023883a 	mov	r17,zero
   10ee8:	14010034 	orhi	r16,r2,1024
   10eec:	002d883a 	mov	r22,zero
   10ef0:	2806d5fa 	srli	r3,r5,23
   10ef4:	01002034 	movhi	r4,128
   10ef8:	213fffc4 	addi	r4,r4,-1
   10efc:	18c03fcc 	andi	r3,r3,255
   10f00:	282ed7fa 	srli	r23,r5,31
   10f04:	2168703a 	and	r20,r4,r5
   10f08:	18005326 	beq	r3,zero,11058 <__divsf3+0x1cc>
   10f0c:	18803fe0 	cmpeqi	r2,r3,255
   10f10:	10004d1e 	bne	r2,zero,11048 <__divsf3+0x1bc>
   10f14:	a00a90fa 	slli	r5,r20,3
   10f18:	18ffe044 	addi	r3,r3,-127
   10f1c:	000d883a 	mov	r6,zero
   10f20:	2d010034 	orhi	r20,r5,1024
   10f24:	3462b03a 	or	r17,r6,r17
   10f28:	882290ba 	slli	r17,r17,2
   10f2c:	00800074 	movhi	r2,1
   10f30:	bd6af03a 	xor	r21,r23,r21
   10f34:	8885883a 	add	r2,r17,r2
   10f38:	1083d217 	ldw	r2,3912(r2)
   10f3c:	a809883a 	mov	r4,r21
   10f40:	98e7c83a 	sub	r19,r19,r3
   10f44:	1000683a 	jmp	r2
   10f48:	00011210 	cmplti	zero,zero,1096
   10f4c:	00011150 	cmplti	zero,zero,1093
   10f50:	00010ffc 	xorhi	zero,zero,1087
   10f54:	00010f8c 	andi	zero,zero,1086
   10f58:	00010ffc 	xorhi	zero,zero,1087
   10f5c:	000111bc 	xorhi	zero,zero,1094
   10f60:	00010ffc 	xorhi	zero,zero,1087
   10f64:	00010f8c 	andi	zero,zero,1086
   10f68:	00011150 	cmplti	zero,zero,1093
   10f6c:	00011150 	cmplti	zero,zero,1093
   10f70:	000111bc 	xorhi	zero,zero,1094
   10f74:	00010f8c 	andi	zero,zero,1086
   10f78:	00010f98 	cmpnei	zero,zero,1086
   10f7c:	00010f98 	cmpnei	zero,zero,1086
   10f80:	00010f98 	cmpnei	zero,zero,1086
   10f84:	000111d4 	movui	zero,1095
   10f88:	0029883a 	mov	r20,zero
   10f8c:	b825883a 	mov	r18,r23
   10f90:	a021883a 	mov	r16,r20
   10f94:	302d883a 	mov	r22,r6
   10f98:	b08000a0 	cmpeqi	r2,r22,2
   10f9c:	1000841e 	bne	r2,zero,111b0 <__divsf3+0x324>
   10fa0:	b08000e0 	cmpeqi	r2,r22,3
   10fa4:	1000951e 	bne	r2,zero,111fc <__divsf3+0x370>
   10fa8:	b5800060 	cmpeqi	r22,r22,1
   10fac:	b000141e 	bne	r22,zero,11000 <__divsf3+0x174>
   10fb0:	98801fc4 	addi	r2,r19,127
   10fb4:	00806a0e 	bge	zero,r2,11160 <__divsf3+0x2d4>
   10fb8:	80c001cc 	andi	r3,r16,7
   10fbc:	18000426 	beq	r3,zero,10fd0 <__divsf3+0x144>
   10fc0:	80c003cc 	andi	r3,r16,15
   10fc4:	18c00120 	cmpeqi	r3,r3,4
   10fc8:	1800011e 	bne	r3,zero,10fd0 <__divsf3+0x144>
   10fcc:	84000104 	addi	r16,r16,4
   10fd0:	80c2002c 	andhi	r3,r16,2048
   10fd4:	18000426 	beq	r3,zero,10fe8 <__divsf3+0x15c>
   10fd8:	00be0034 	movhi	r2,63488
   10fdc:	10bfffc4 	addi	r2,r2,-1
   10fe0:	80a0703a 	and	r16,r16,r2
   10fe4:	98802004 	addi	r2,r19,128
   10fe8:	10c03fc8 	cmpgei	r3,r2,255
   10fec:	1800701e 	bne	r3,zero,111b0 <__divsf3+0x324>
   10ff0:	802091ba 	slli	r16,r16,6
   10ff4:	8020d27a 	srli	r16,r16,9
   10ff8:	00000306 	br	11008 <__divsf3+0x17c>
   10ffc:	a825883a 	mov	r18,r21
   11000:	0005883a 	mov	r2,zero
   11004:	0021883a 	mov	r16,zero
   11008:	10803fcc 	andi	r2,r2,255
   1100c:	100495fa 	slli	r2,r2,23
   11010:	902497fa 	slli	r18,r18,31
   11014:	1404b03a 	or	r2,r2,r16
   11018:	1484b03a 	or	r2,r2,r18
   1101c:	dfc00917 	ldw	ra,36(sp)
   11020:	ddc00817 	ldw	r23,32(sp)
   11024:	dd800717 	ldw	r22,28(sp)
   11028:	dd400617 	ldw	r21,24(sp)
   1102c:	dd000517 	ldw	r20,20(sp)
   11030:	dcc00417 	ldw	r19,16(sp)
   11034:	dc800317 	ldw	r18,12(sp)
   11038:	dc400217 	ldw	r17,8(sp)
   1103c:	dc000117 	ldw	r16,4(sp)
   11040:	dec00a04 	addi	sp,sp,40
   11044:	f800283a 	ret
   11048:	a0003e1e 	bne	r20,zero,11144 <__divsf3+0x2b8>
   1104c:	9cffc044 	addi	r19,r19,-255
   11050:	01800084 	movi	r6,2
   11054:	00000206 	br	11060 <__divsf3+0x1d4>
   11058:	a000321e 	bne	r20,zero,11124 <__divsf3+0x298>
   1105c:	01800044 	movi	r6,1
   11060:	3462b03a 	or	r17,r6,r17
   11064:	882290ba 	slli	r17,r17,2
   11068:	00800074 	movhi	r2,1
   1106c:	bd6af03a 	xor	r21,r23,r21
   11070:	8885883a 	add	r2,r17,r2
   11074:	10842017 	ldw	r2,4224(r2)
   11078:	a809883a 	mov	r4,r21
   1107c:	1000683a 	jmp	r2
   11080:	00011150 	cmplti	zero,zero,1093
   11084:	00011150 	cmplti	zero,zero,1093
   11088:	00010ffc 	xorhi	zero,zero,1087
   1108c:	00010f88 	cmpgei	zero,zero,1086
   11090:	00010ffc 	xorhi	zero,zero,1087
   11094:	000111bc 	xorhi	zero,zero,1094
   11098:	00010ffc 	xorhi	zero,zero,1087
   1109c:	00010f88 	cmpgei	zero,zero,1086
   110a0:	00011150 	cmplti	zero,zero,1093
   110a4:	00011150 	cmplti	zero,zero,1093
   110a8:	000111bc 	xorhi	zero,zero,1094
   110ac:	00010f88 	cmpgei	zero,zero,1086
   110b0:	00010f98 	cmpnei	zero,zero,1086
   110b4:	00010f98 	cmpnei	zero,zero,1086
   110b8:	00010f98 	cmpnei	zero,zero,1086
   110bc:	000111d0 	cmplti	zero,zero,1095
   110c0:	80000d1e 	bne	r16,zero,110f8 <__divsf3+0x26c>
   110c4:	04400104 	movi	r17,4
   110c8:	0027883a 	mov	r19,zero
   110cc:	05800044 	movi	r22,1
   110d0:	003f8706 	br	10ef0 <__divsf3+0x64>
   110d4:	8000041e 	bne	r16,zero,110e8 <__divsf3+0x25c>
   110d8:	04400204 	movi	r17,8
   110dc:	04c03fc4 	movi	r19,255
   110e0:	05800084 	movi	r22,2
   110e4:	003f8206 	br	10ef0 <__divsf3+0x64>
   110e8:	04400304 	movi	r17,12
   110ec:	04c03fc4 	movi	r19,255
   110f0:	058000c4 	movi	r22,3
   110f4:	003f7e06 	br	10ef0 <__divsf3+0x64>
   110f8:	8009883a 	mov	r4,r16
   110fc:	d9400015 	stw	r5,0(sp)
   11100:	00113a80 	call	113a8 <__clzsi2>
   11104:	10fffec4 	addi	r3,r2,-5
   11108:	80e0983a 	sll	r16,r16,r3
   1110c:	00ffe284 	movi	r3,-118
   11110:	d9400017 	ldw	r5,0(sp)
   11114:	18a7c83a 	sub	r19,r3,r2
   11118:	0023883a 	mov	r17,zero
   1111c:	002d883a 	mov	r22,zero
   11120:	003f7306 	br	10ef0 <__divsf3+0x64>
   11124:	a009883a 	mov	r4,r20
   11128:	00113a80 	call	113a8 <__clzsi2>
   1112c:	10fffec4 	addi	r3,r2,-5
   11130:	a0e8983a 	sll	r20,r20,r3
   11134:	00ffe284 	movi	r3,-118
   11138:	1887c83a 	sub	r3,r3,r2
   1113c:	000d883a 	mov	r6,zero
   11140:	003f7806 	br	10f24 <__divsf3+0x98>
   11144:	00c03fc4 	movi	r3,255
   11148:	018000c4 	movi	r6,3
   1114c:	003f7506 	br	10f24 <__divsf3+0x98>
   11150:	2025883a 	mov	r18,r4
   11154:	00bfffc4 	movi	r2,-1
   11158:	0021883a 	mov	r16,zero
   1115c:	003faa06 	br	11008 <__divsf3+0x17c>
   11160:	00c00044 	movi	r3,1
   11164:	1885c83a 	sub	r2,r3,r2
   11168:	10c00708 	cmpgei	r3,r2,28
   1116c:	183fa41e 	bne	r3,zero,11000 <__divsf3+0x174>
   11170:	98c02784 	addi	r3,r19,158
   11174:	80c6983a 	sll	r3,r16,r3
   11178:	8084d83a 	srl	r2,r16,r2
   1117c:	1820c03a 	cmpne	r16,r3,zero
   11180:	1404b03a 	or	r2,r2,r16
   11184:	10c001cc 	andi	r3,r2,7
   11188:	18000426 	beq	r3,zero,1119c <__divsf3+0x310>
   1118c:	10c003cc 	andi	r3,r2,15
   11190:	18c00120 	cmpeqi	r3,r3,4
   11194:	1800011e 	bne	r3,zero,1119c <__divsf3+0x310>
   11198:	10800104 	addi	r2,r2,4
   1119c:	10c1002c 	andhi	r3,r2,1024
   111a0:	18003426 	beq	r3,zero,11274 <__divsf3+0x3e8>
   111a4:	00800044 	movi	r2,1
   111a8:	0021883a 	mov	r16,zero
   111ac:	003f9606 	br	11008 <__divsf3+0x17c>
   111b0:	00bfffc4 	movi	r2,-1
   111b4:	0021883a 	mov	r16,zero
   111b8:	003f9306 	br	11008 <__divsf3+0x17c>
   111bc:	04002034 	movhi	r16,128
   111c0:	0025883a 	mov	r18,zero
   111c4:	843fffc4 	addi	r16,r16,-1
   111c8:	00bfffc4 	movi	r2,-1
   111cc:	003f8e06 	br	11008 <__divsf3+0x17c>
   111d0:	0029883a 	mov	r20,zero
   111d4:	8080102c 	andhi	r2,r16,64
   111d8:	10000826 	beq	r2,zero,111fc <__divsf3+0x370>
   111dc:	a080102c 	andhi	r2,r20,64
   111e0:	1000061e 	bne	r2,zero,111fc <__divsf3+0x370>
   111e4:	00802034 	movhi	r2,128
   111e8:	a4001034 	orhi	r16,r20,64
   111ec:	10bfffc4 	addi	r2,r2,-1
   111f0:	80a0703a 	and	r16,r16,r2
   111f4:	b825883a 	mov	r18,r23
   111f8:	003ff306 	br	111c8 <__divsf3+0x33c>
   111fc:	00802034 	movhi	r2,128
   11200:	84001034 	orhi	r16,r16,64
   11204:	10bfffc4 	addi	r2,r2,-1
   11208:	80a0703a 	and	r16,r16,r2
   1120c:	003fee06 	br	111c8 <__divsf3+0x33c>
   11210:	8004917a 	slli	r2,r16,5
   11214:	a00a917a 	slli	r5,r20,5
   11218:	1140122e 	bgeu	r2,r5,11264 <__divsf3+0x3d8>
   1121c:	9cffffc4 	addi	r19,r19,-1
   11220:	010006c4 	movi	r4,27
   11224:	0021883a 	mov	r16,zero
   11228:	1007883a 	mov	r3,r2
   1122c:	213fffc4 	addi	r4,r4,-1
   11230:	1085883a 	add	r2,r2,r2
   11234:	8421883a 	add	r16,r16,r16
   11238:	18000116 	blt	r3,zero,11240 <__divsf3+0x3b4>
   1123c:	11400236 	bltu	r2,r5,11248 <__divsf3+0x3bc>
   11240:	1145c83a 	sub	r2,r2,r5
   11244:	84000054 	ori	r16,r16,1
   11248:	203ff71e 	bne	r4,zero,11228 <__divsf3+0x39c>
   1124c:	1004c03a 	cmpne	r2,r2,zero
   11250:	1420b03a 	or	r16,r2,r16
   11254:	98801fc4 	addi	r2,r19,127
   11258:	a825883a 	mov	r18,r21
   1125c:	00bf5616 	blt	zero,r2,10fb8 <__divsf3+0x12c>
   11260:	003fbf06 	br	11160 <__divsf3+0x2d4>
   11264:	1145c83a 	sub	r2,r2,r5
   11268:	01000684 	movi	r4,26
   1126c:	04000044 	movi	r16,1
   11270:	003fed06 	br	11228 <__divsf3+0x39c>
   11274:	102091ba 	slli	r16,r2,6
   11278:	0005883a 	mov	r2,zero
   1127c:	8020d27a 	srli	r16,r16,9
   11280:	003f6106 	br	11008 <__divsf3+0x17c>

00011284 <__floatsisf>:
   11284:	defffd04 	addi	sp,sp,-12
   11288:	dfc00215 	stw	ra,8(sp)
   1128c:	dc400115 	stw	r17,4(sp)
   11290:	dc000015 	stw	r16,0(sp)
   11294:	20001226 	beq	r4,zero,112e0 <__floatsisf+0x5c>
   11298:	2022d7fa 	srli	r17,r4,31
   1129c:	2021883a 	mov	r16,r4
   112a0:	20003816 	blt	r4,zero,11384 <__floatsisf+0x100>
   112a4:	8009883a 	mov	r4,r16
   112a8:	00113a80 	call	113a8 <__clzsi2>
   112ac:	1009883a 	mov	r4,r2
   112b0:	00802784 	movi	r2,158
   112b4:	1105c83a 	sub	r2,r2,r4
   112b8:	10c025c8 	cmpgei	r3,r2,151
   112bc:	1800151e 	bne	r3,zero,11314 <__floatsisf+0x90>
   112c0:	20c00248 	cmpgei	r3,r4,9
   112c4:	18003126 	beq	r3,zero,1138c <__floatsisf+0x108>
   112c8:	213ffe04 	addi	r4,r4,-8
   112cc:	8120983a 	sll	r16,r16,r4
   112d0:	00c02034 	movhi	r3,128
   112d4:	18ffffc4 	addi	r3,r3,-1
   112d8:	80e0703a 	and	r16,r16,r3
   112dc:	00000306 	br	112ec <__floatsisf+0x68>
   112e0:	0023883a 	mov	r17,zero
   112e4:	0005883a 	mov	r2,zero
   112e8:	0021883a 	mov	r16,zero
   112ec:	10803fcc 	andi	r2,r2,255
   112f0:	100495fa 	slli	r2,r2,23
   112f4:	882297fa 	slli	r17,r17,31
   112f8:	1404b03a 	or	r2,r2,r16
   112fc:	1444b03a 	or	r2,r2,r17
   11300:	dfc00217 	ldw	ra,8(sp)
   11304:	dc400117 	ldw	r17,4(sp)
   11308:	dc000017 	ldw	r16,0(sp)
   1130c:	dec00304 	addi	sp,sp,12
   11310:	f800283a 	ret
   11314:	10c02690 	cmplti	r3,r2,154
   11318:	1800071e 	bne	r3,zero,11338 <__floatsisf+0xb4>
   1131c:	20c006c4 	addi	r3,r4,27
   11320:	01400144 	movi	r5,5
   11324:	80c6983a 	sll	r3,r16,r3
   11328:	290bc83a 	sub	r5,r5,r4
   1132c:	814ad83a 	srl	r5,r16,r5
   11330:	1806c03a 	cmpne	r3,r3,zero
   11334:	28e0b03a 	or	r16,r5,r3
   11338:	20c00188 	cmpgei	r3,r4,6
   1133c:	1800171e 	bne	r3,zero,1139c <__floatsisf+0x118>
   11340:	00ff0034 	movhi	r3,64512
   11344:	18ffffc4 	addi	r3,r3,-1
   11348:	818001cc 	andi	r6,r16,7
   1134c:	80ca703a 	and	r5,r16,r3
   11350:	30000926 	beq	r6,zero,11378 <__floatsisf+0xf4>
   11354:	818003cc 	andi	r6,r16,15
   11358:	31800120 	cmpeqi	r6,r6,4
   1135c:	3000061e 	bne	r6,zero,11378 <__floatsisf+0xf4>
   11360:	29400104 	addi	r5,r5,4
   11364:	2981002c 	andhi	r6,r5,1024
   11368:	30000326 	beq	r6,zero,11378 <__floatsisf+0xf4>
   1136c:	28ca703a 	and	r5,r5,r3
   11370:	00c027c4 	movi	r3,159
   11374:	1905c83a 	sub	r2,r3,r4
   11378:	282091ba 	slli	r16,r5,6
   1137c:	8020d27a 	srli	r16,r16,9
   11380:	003fda06 	br	112ec <__floatsisf+0x68>
   11384:	0121c83a 	sub	r16,zero,r4
   11388:	003fc606 	br	112a4 <__floatsisf+0x20>
   1138c:	01002034 	movhi	r4,128
   11390:	213fffc4 	addi	r4,r4,-1
   11394:	8120703a 	and	r16,r16,r4
   11398:	003fd406 	br	112ec <__floatsisf+0x68>
   1139c:	20fffec4 	addi	r3,r4,-5
   113a0:	80e0983a 	sll	r16,r16,r3
   113a4:	003fe606 	br	11340 <__floatsisf+0xbc>

000113a8 <__clzsi2>:
   113a8:	00bfffd4 	movui	r2,65535
   113ac:	11000436 	bltu	r2,r4,113c0 <__clzsi2+0x18>
   113b0:	20804030 	cmpltui	r2,r4,256
   113b4:	10000e26 	beq	r2,zero,113f0 <__clzsi2+0x48>
   113b8:	01400804 	movi	r5,32
   113bc:	00000406 	br	113d0 <__clzsi2+0x28>
   113c0:	00804034 	movhi	r2,256
   113c4:	20800736 	bltu	r4,r2,113e4 <__clzsi2+0x3c>
   113c8:	2008d63a 	srli	r4,r4,24
   113cc:	01400204 	movi	r5,8
   113d0:	00c00074 	movhi	r3,1
   113d4:	20c7883a 	add	r3,r4,r3
   113d8:	189bf103 	ldbu	r2,28612(r3)
   113dc:	2885c83a 	sub	r2,r5,r2
   113e0:	f800283a 	ret
   113e4:	2008d43a 	srli	r4,r4,16
   113e8:	01400404 	movi	r5,16
   113ec:	003ff806 	br	113d0 <__clzsi2+0x28>
   113f0:	2008d23a 	srli	r4,r4,8
   113f4:	01400604 	movi	r5,24
   113f8:	003ff506 	br	113d0 <__clzsi2+0x28>

000113fc <_fclose_r.part.0>:
   113fc:	defffc04 	addi	sp,sp,-16
   11400:	dc800215 	stw	r18,8(sp)
   11404:	dc400115 	stw	r17,4(sp)
   11408:	dc000015 	stw	r16,0(sp)
   1140c:	dfc00315 	stw	ra,12(sp)
   11410:	2821883a 	mov	r16,r5
   11414:	2023883a 	mov	r17,r4
   11418:	001159c0 	call	1159c <__sflush_r>
   1141c:	80c00b17 	ldw	r3,44(r16)
   11420:	1025883a 	mov	r18,r2
   11424:	18000426 	beq	r3,zero,11438 <_fclose_r.part.0+0x3c>
   11428:	81400717 	ldw	r5,28(r16)
   1142c:	8809883a 	mov	r4,r17
   11430:	183ee83a 	callr	r3
   11434:	10001916 	blt	r2,zero,1149c <_fclose_r.part.0+0xa0>
   11438:	8080030b 	ldhu	r2,12(r16)
   1143c:	1080200c 	andi	r2,r2,128
   11440:	10001a1e 	bne	r2,zero,114ac <_fclose_r.part.0+0xb0>
   11444:	81400c17 	ldw	r5,48(r16)
   11448:	28000526 	beq	r5,zero,11460 <_fclose_r.part.0+0x64>
   1144c:	80801004 	addi	r2,r16,64
   11450:	28800226 	beq	r5,r2,1145c <_fclose_r.part.0+0x60>
   11454:	8809883a 	mov	r4,r17
   11458:	0011e780 	call	11e78 <_free_r>
   1145c:	80000c15 	stw	zero,48(r16)
   11460:	81401117 	ldw	r5,68(r16)
   11464:	28000326 	beq	r5,zero,11474 <_fclose_r.part.0+0x78>
   11468:	8809883a 	mov	r4,r17
   1146c:	0011e780 	call	11e78 <_free_r>
   11470:	80001115 	stw	zero,68(r16)
   11474:	0011c1c0 	call	11c1c <__sfp_lock_acquire>
   11478:	8000030d 	sth	zero,12(r16)
   1147c:	0011c200 	call	11c20 <__sfp_lock_release>
   11480:	9005883a 	mov	r2,r18
   11484:	dfc00317 	ldw	ra,12(sp)
   11488:	dc800217 	ldw	r18,8(sp)
   1148c:	dc400117 	ldw	r17,4(sp)
   11490:	dc000017 	ldw	r16,0(sp)
   11494:	dec00404 	addi	sp,sp,16
   11498:	f800283a 	ret
   1149c:	8080030b 	ldhu	r2,12(r16)
   114a0:	04bfffc4 	movi	r18,-1
   114a4:	1080200c 	andi	r2,r2,128
   114a8:	103fe626 	beq	r2,zero,11444 <_fclose_r.part.0+0x48>
   114ac:	81400417 	ldw	r5,16(r16)
   114b0:	8809883a 	mov	r4,r17
   114b4:	0011e780 	call	11e78 <_free_r>
   114b8:	003fe206 	br	11444 <_fclose_r.part.0+0x48>

000114bc <_fclose_r>:
   114bc:	28001926 	beq	r5,zero,11524 <_fclose_r+0x68>
   114c0:	defffd04 	addi	sp,sp,-12
   114c4:	dc000115 	stw	r16,4(sp)
   114c8:	dfc00215 	stw	ra,8(sp)
   114cc:	2021883a 	mov	r16,r4
   114d0:	20000226 	beq	r4,zero,114dc <_fclose_r+0x20>
   114d4:	20800e17 	ldw	r2,56(r4)
   114d8:	10000c26 	beq	r2,zero,1150c <_fclose_r+0x50>
   114dc:	2880030f 	ldh	r2,12(r5)
   114e0:	1000051e 	bne	r2,zero,114f8 <_fclose_r+0x3c>
   114e4:	0005883a 	mov	r2,zero
   114e8:	dfc00217 	ldw	ra,8(sp)
   114ec:	dc000117 	ldw	r16,4(sp)
   114f0:	dec00304 	addi	sp,sp,12
   114f4:	f800283a 	ret
   114f8:	8009883a 	mov	r4,r16
   114fc:	dfc00217 	ldw	ra,8(sp)
   11500:	dc000117 	ldw	r16,4(sp)
   11504:	dec00304 	addi	sp,sp,12
   11508:	00113fc1 	jmpi	113fc <_fclose_r.part.0>
   1150c:	d9400015 	stw	r5,0(sp)
   11510:	0011c0c0 	call	11c0c <__sinit>
   11514:	d9400017 	ldw	r5,0(sp)
   11518:	2880030f 	ldh	r2,12(r5)
   1151c:	103ff126 	beq	r2,zero,114e4 <_fclose_r+0x28>
   11520:	003ff506 	br	114f8 <_fclose_r+0x3c>
   11524:	0005883a 	mov	r2,zero
   11528:	f800283a 	ret

0001152c <fclose>:
   1152c:	20000826 	beq	r4,zero,11550 <fclose+0x24>
   11530:	008000b4 	movhi	r2,2
   11534:	200b883a 	mov	r5,r4
   11538:	1122f417 	ldw	r4,-29744(r2)
   1153c:	20000226 	beq	r4,zero,11548 <fclose+0x1c>
   11540:	20800e17 	ldw	r2,56(r4)
   11544:	10000526 	beq	r2,zero,1155c <fclose+0x30>
   11548:	2880030f 	ldh	r2,12(r5)
   1154c:	1000021e 	bne	r2,zero,11558 <fclose+0x2c>
   11550:	0005883a 	mov	r2,zero
   11554:	f800283a 	ret
   11558:	00113fc1 	jmpi	113fc <_fclose_r.part.0>
   1155c:	defffd04 	addi	sp,sp,-12
   11560:	d9400115 	stw	r5,4(sp)
   11564:	d9000015 	stw	r4,0(sp)
   11568:	dfc00215 	stw	ra,8(sp)
   1156c:	0011c0c0 	call	11c0c <__sinit>
   11570:	d9400117 	ldw	r5,4(sp)
   11574:	d9000017 	ldw	r4,0(sp)
   11578:	2880030f 	ldh	r2,12(r5)
   1157c:	10000326 	beq	r2,zero,1158c <fclose+0x60>
   11580:	dfc00217 	ldw	ra,8(sp)
   11584:	dec00304 	addi	sp,sp,12
   11588:	00113fc1 	jmpi	113fc <_fclose_r.part.0>
   1158c:	0005883a 	mov	r2,zero
   11590:	dfc00217 	ldw	ra,8(sp)
   11594:	dec00304 	addi	sp,sp,12
   11598:	f800283a 	ret

0001159c <__sflush_r>:
   1159c:	2880030b 	ldhu	r2,12(r5)
   115a0:	defffb04 	addi	sp,sp,-20
   115a4:	dcc00315 	stw	r19,12(sp)
   115a8:	dc000015 	stw	r16,0(sp)
   115ac:	dfc00415 	stw	ra,16(sp)
   115b0:	dc800215 	stw	r18,8(sp)
   115b4:	dc400115 	stw	r17,4(sp)
   115b8:	10c0020c 	andi	r3,r2,8
   115bc:	2821883a 	mov	r16,r5
   115c0:	2027883a 	mov	r19,r4
   115c4:	18003f1e 	bne	r3,zero,116c4 <__sflush_r+0x128>
   115c8:	28c00117 	ldw	r3,4(r5)
   115cc:	10820014 	ori	r2,r2,2048
   115d0:	2880030d 	sth	r2,12(r5)
   115d4:	00c0550e 	bge	zero,r3,1172c <__sflush_r+0x190>
   115d8:	82000a17 	ldw	r8,40(r16)
   115dc:	40003126 	beq	r8,zero,116a4 <__sflush_r+0x108>
   115e0:	9c400017 	ldw	r17,0(r19)
   115e4:	1104000c 	andi	r4,r2,4096
   115e8:	98000015 	stw	zero,0(r19)
   115ec:	1007883a 	mov	r3,r2
   115f0:	2000531e 	bne	r4,zero,11740 <__sflush_r+0x1a4>
   115f4:	81400717 	ldw	r5,28(r16)
   115f8:	01c00044 	movi	r7,1
   115fc:	000d883a 	mov	r6,zero
   11600:	9809883a 	mov	r4,r19
   11604:	403ee83a 	callr	r8
   11608:	10ffffd8 	cmpnei	r3,r2,-1
   1160c:	18005826 	beq	r3,zero,11770 <__sflush_r+0x1d4>
   11610:	80c0030b 	ldhu	r3,12(r16)
   11614:	82000a17 	ldw	r8,40(r16)
   11618:	18c0010c 	andi	r3,r3,4
   1161c:	18000626 	beq	r3,zero,11638 <__sflush_r+0x9c>
   11620:	81000117 	ldw	r4,4(r16)
   11624:	80c00c17 	ldw	r3,48(r16)
   11628:	1105c83a 	sub	r2,r2,r4
   1162c:	18000226 	beq	r3,zero,11638 <__sflush_r+0x9c>
   11630:	80c00f17 	ldw	r3,60(r16)
   11634:	10c5c83a 	sub	r2,r2,r3
   11638:	81400717 	ldw	r5,28(r16)
   1163c:	100d883a 	mov	r6,r2
   11640:	000f883a 	mov	r7,zero
   11644:	9809883a 	mov	r4,r19
   11648:	403ee83a 	callr	r8
   1164c:	10ffffd8 	cmpnei	r3,r2,-1
   11650:	18003d1e 	bne	r3,zero,11748 <__sflush_r+0x1ac>
   11654:	99000017 	ldw	r4,0(r19)
   11658:	80c0030b 	ldhu	r3,12(r16)
   1165c:	20004e26 	beq	r4,zero,11798 <__sflush_r+0x1fc>
   11660:	21400760 	cmpeqi	r5,r4,29
   11664:	2800021e 	bne	r5,zero,11670 <__sflush_r+0xd4>
   11668:	210005a0 	cmpeqi	r4,r4,22
   1166c:	20002c26 	beq	r4,zero,11720 <__sflush_r+0x184>
   11670:	80800417 	ldw	r2,16(r16)
   11674:	18fdffcc 	andi	r3,r3,63487
   11678:	80c0030d 	sth	r3,12(r16)
   1167c:	80000115 	stw	zero,4(r16)
   11680:	80800015 	stw	r2,0(r16)
   11684:	81400c17 	ldw	r5,48(r16)
   11688:	9c400015 	stw	r17,0(r19)
   1168c:	28000526 	beq	r5,zero,116a4 <__sflush_r+0x108>
   11690:	80801004 	addi	r2,r16,64
   11694:	28800226 	beq	r5,r2,116a0 <__sflush_r+0x104>
   11698:	9809883a 	mov	r4,r19
   1169c:	0011e780 	call	11e78 <_free_r>
   116a0:	80000c15 	stw	zero,48(r16)
   116a4:	0005883a 	mov	r2,zero
   116a8:	dfc00417 	ldw	ra,16(sp)
   116ac:	dcc00317 	ldw	r19,12(sp)
   116b0:	dc800217 	ldw	r18,8(sp)
   116b4:	dc400117 	ldw	r17,4(sp)
   116b8:	dc000017 	ldw	r16,0(sp)
   116bc:	dec00504 	addi	sp,sp,20
   116c0:	f800283a 	ret
   116c4:	2c800417 	ldw	r18,16(r5)
   116c8:	903ff626 	beq	r18,zero,116a4 <__sflush_r+0x108>
   116cc:	2c400017 	ldw	r17,0(r5)
   116d0:	108000cc 	andi	r2,r2,3
   116d4:	2c800015 	stw	r18,0(r5)
   116d8:	8ca3c83a 	sub	r17,r17,r18
   116dc:	1000161e 	bne	r2,zero,11738 <__sflush_r+0x19c>
   116e0:	28800517 	ldw	r2,20(r5)
   116e4:	80800215 	stw	r2,8(r16)
   116e8:	04400316 	blt	zero,r17,116f8 <__sflush_r+0x15c>
   116ec:	003fed06 	br	116a4 <__sflush_r+0x108>
   116f0:	90a5883a 	add	r18,r18,r2
   116f4:	047feb0e 	bge	zero,r17,116a4 <__sflush_r+0x108>
   116f8:	80800917 	ldw	r2,36(r16)
   116fc:	81400717 	ldw	r5,28(r16)
   11700:	880f883a 	mov	r7,r17
   11704:	900d883a 	mov	r6,r18
   11708:	9809883a 	mov	r4,r19
   1170c:	103ee83a 	callr	r2
   11710:	88a3c83a 	sub	r17,r17,r2
   11714:	00bff616 	blt	zero,r2,116f0 <__sflush_r+0x154>
   11718:	80c0030b 	ldhu	r3,12(r16)
   1171c:	00bfffc4 	movi	r2,-1
   11720:	18c01014 	ori	r3,r3,64
   11724:	80c0030d 	sth	r3,12(r16)
   11728:	003fdf06 	br	116a8 <__sflush_r+0x10c>
   1172c:	28c00f17 	ldw	r3,60(r5)
   11730:	00ffa916 	blt	zero,r3,115d8 <__sflush_r+0x3c>
   11734:	003fdb06 	br	116a4 <__sflush_r+0x108>
   11738:	0005883a 	mov	r2,zero
   1173c:	003fe906 	br	116e4 <__sflush_r+0x148>
   11740:	80801417 	ldw	r2,80(r16)
   11744:	003fb406 	br	11618 <__sflush_r+0x7c>
   11748:	80c0030b 	ldhu	r3,12(r16)
   1174c:	81000417 	ldw	r4,16(r16)
   11750:	80000115 	stw	zero,4(r16)
   11754:	197dffcc 	andi	r5,r3,63487
   11758:	8140030d 	sth	r5,12(r16)
   1175c:	81000015 	stw	r4,0(r16)
   11760:	18c4000c 	andi	r3,r3,4096
   11764:	183fc726 	beq	r3,zero,11684 <__sflush_r+0xe8>
   11768:	80801415 	stw	r2,80(r16)
   1176c:	003fc506 	br	11684 <__sflush_r+0xe8>
   11770:	98c00017 	ldw	r3,0(r19)
   11774:	183fa626 	beq	r3,zero,11610 <__sflush_r+0x74>
   11778:	19000760 	cmpeqi	r4,r3,29
   1177c:	20000e1e 	bne	r4,zero,117b8 <__sflush_r+0x21c>
   11780:	18c00598 	cmpnei	r3,r3,22
   11784:	18000c26 	beq	r3,zero,117b8 <__sflush_r+0x21c>
   11788:	80c0030b 	ldhu	r3,12(r16)
   1178c:	18c01014 	ori	r3,r3,64
   11790:	80c0030d 	sth	r3,12(r16)
   11794:	003fc406 	br	116a8 <__sflush_r+0x10c>
   11798:	81000417 	ldw	r4,16(r16)
   1179c:	197dffcc 	andi	r5,r3,63487
   117a0:	8140030d 	sth	r5,12(r16)
   117a4:	80000115 	stw	zero,4(r16)
   117a8:	81000015 	stw	r4,0(r16)
   117ac:	18c4000c 	andi	r3,r3,4096
   117b0:	183fb426 	beq	r3,zero,11684 <__sflush_r+0xe8>
   117b4:	003fec06 	br	11768 <__sflush_r+0x1cc>
   117b8:	9c400015 	stw	r17,0(r19)
   117bc:	0005883a 	mov	r2,zero
   117c0:	003fb906 	br	116a8 <__sflush_r+0x10c>

000117c4 <_fflush_r>:
   117c4:	defffd04 	addi	sp,sp,-12
   117c8:	dc000115 	stw	r16,4(sp)
   117cc:	dfc00215 	stw	ra,8(sp)
   117d0:	2021883a 	mov	r16,r4
   117d4:	20000226 	beq	r4,zero,117e0 <_fflush_r+0x1c>
   117d8:	20800e17 	ldw	r2,56(r4)
   117dc:	10000726 	beq	r2,zero,117fc <_fflush_r+0x38>
   117e0:	2880030f 	ldh	r2,12(r5)
   117e4:	10000a1e 	bne	r2,zero,11810 <_fflush_r+0x4c>
   117e8:	0005883a 	mov	r2,zero
   117ec:	dfc00217 	ldw	ra,8(sp)
   117f0:	dc000117 	ldw	r16,4(sp)
   117f4:	dec00304 	addi	sp,sp,12
   117f8:	f800283a 	ret
   117fc:	d9400015 	stw	r5,0(sp)
   11800:	0011c0c0 	call	11c0c <__sinit>
   11804:	d9400017 	ldw	r5,0(sp)
   11808:	2880030f 	ldh	r2,12(r5)
   1180c:	103ff626 	beq	r2,zero,117e8 <_fflush_r+0x24>
   11810:	8009883a 	mov	r4,r16
   11814:	dfc00217 	ldw	ra,8(sp)
   11818:	dc000117 	ldw	r16,4(sp)
   1181c:	dec00304 	addi	sp,sp,12
   11820:	001159c1 	jmpi	1159c <__sflush_r>

00011824 <fflush>:
   11824:	20001726 	beq	r4,zero,11884 <fflush+0x60>
   11828:	008000b4 	movhi	r2,2
   1182c:	200b883a 	mov	r5,r4
   11830:	1122f417 	ldw	r4,-29744(r2)
   11834:	20000226 	beq	r4,zero,11840 <fflush+0x1c>
   11838:	20800e17 	ldw	r2,56(r4)
   1183c:	10000526 	beq	r2,zero,11854 <fflush+0x30>
   11840:	2880030f 	ldh	r2,12(r5)
   11844:	1000021e 	bne	r2,zero,11850 <fflush+0x2c>
   11848:	0005883a 	mov	r2,zero
   1184c:	f800283a 	ret
   11850:	001159c1 	jmpi	1159c <__sflush_r>
   11854:	defffd04 	addi	sp,sp,-12
   11858:	d9400115 	stw	r5,4(sp)
   1185c:	d9000015 	stw	r4,0(sp)
   11860:	dfc00215 	stw	ra,8(sp)
   11864:	0011c0c0 	call	11c0c <__sinit>
   11868:	d9400117 	ldw	r5,4(sp)
   1186c:	d9000017 	ldw	r4,0(sp)
   11870:	2880030f 	ldh	r2,12(r5)
   11874:	10000826 	beq	r2,zero,11898 <fflush+0x74>
   11878:	dfc00217 	ldw	ra,8(sp)
   1187c:	dec00304 	addi	sp,sp,12
   11880:	001159c1 	jmpi	1159c <__sflush_r>
   11884:	008000b4 	movhi	r2,2
   11888:	1122f317 	ldw	r4,-29748(r2)
   1188c:	01400074 	movhi	r5,1
   11890:	2945f104 	addi	r5,r5,6084
   11894:	00126fc1 	jmpi	126fc <_fwalk_reent>
   11898:	0005883a 	mov	r2,zero
   1189c:	dfc00217 	ldw	ra,8(sp)
   118a0:	dec00304 	addi	sp,sp,12
   118a4:	f800283a 	ret

000118a8 <__fp_lock>:
   118a8:	0005883a 	mov	r2,zero
   118ac:	f800283a 	ret

000118b0 <_cleanup_r>:
   118b0:	01400074 	movhi	r5,1
   118b4:	29452f04 	addi	r5,r5,5308
   118b8:	00126fc1 	jmpi	126fc <_fwalk_reent>

000118bc <__fp_unlock>:
   118bc:	0005883a 	mov	r2,zero
   118c0:	f800283a 	ret

000118c4 <__sinit.part.0>:
   118c4:	00c00074 	movhi	r3,1
   118c8:	20800117 	ldw	r2,4(r4)
   118cc:	18c62c04 	addi	r3,r3,6320
   118d0:	20c00f15 	stw	r3,60(r4)
   118d4:	2140bb04 	addi	r5,r4,748
   118d8:	00c000c4 	movi	r3,3
   118dc:	20c0b915 	stw	r3,740(r4)
   118e0:	2140ba15 	stw	r5,744(r4)
   118e4:	2000b815 	stw	zero,736(r4)
   118e8:	10001705 	stb	zero,92(r2)
   118ec:	10001745 	stb	zero,93(r2)
   118f0:	10001785 	stb	zero,94(r2)
   118f4:	100017c5 	stb	zero,95(r2)
   118f8:	10001805 	stb	zero,96(r2)
   118fc:	10001845 	stb	zero,97(r2)
   11900:	10001885 	stb	zero,98(r2)
   11904:	100018c5 	stb	zero,99(r2)
   11908:	00c00104 	movi	r3,4
   1190c:	10c00315 	stw	r3,12(r2)
   11910:	02000074 	movhi	r8,1
   11914:	20c00217 	ldw	r3,8(r4)
   11918:	01c00074 	movhi	r7,1
   1191c:	01800074 	movhi	r6,1
   11920:	01400074 	movhi	r5,1
   11924:	420e1704 	addi	r8,r8,14428
   11928:	39ce2e04 	addi	r7,r7,14520
   1192c:	318e4e04 	addi	r6,r6,14648
   11930:	294e6504 	addi	r5,r5,14740
   11934:	02400074 	movhi	r9,1
   11938:	10001915 	stw	zero,100(r2)
   1193c:	10000015 	stw	zero,0(r2)
   11940:	10000115 	stw	zero,4(r2)
   11944:	10000215 	stw	zero,8(r2)
   11948:	10000415 	stw	zero,16(r2)
   1194c:	10000515 	stw	zero,20(r2)
   11950:	10000615 	stw	zero,24(r2)
   11954:	10800715 	stw	r2,28(r2)
   11958:	12000815 	stw	r8,32(r2)
   1195c:	11c00915 	stw	r7,36(r2)
   11960:	11800a15 	stw	r6,40(r2)
   11964:	11400b15 	stw	r5,44(r2)
   11968:	4a400284 	addi	r9,r9,10
   1196c:	1a400315 	stw	r9,12(r3)
   11970:	18001915 	stw	zero,100(r3)
   11974:	18000015 	stw	zero,0(r3)
   11978:	18000115 	stw	zero,4(r3)
   1197c:	18000215 	stw	zero,8(r3)
   11980:	18000415 	stw	zero,16(r3)
   11984:	18001705 	stb	zero,92(r3)
   11988:	18001745 	stb	zero,93(r3)
   1198c:	18001785 	stb	zero,94(r3)
   11990:	180017c5 	stb	zero,95(r3)
   11994:	18001805 	stb	zero,96(r3)
   11998:	18001845 	stb	zero,97(r3)
   1199c:	18001885 	stb	zero,98(r3)
   119a0:	180018c5 	stb	zero,99(r3)
   119a4:	20800317 	ldw	r2,12(r4)
   119a8:	024000b4 	movhi	r9,2
   119ac:	18000515 	stw	zero,20(r3)
   119b0:	18000615 	stw	zero,24(r3)
   119b4:	18c00715 	stw	r3,28(r3)
   119b8:	1a000815 	stw	r8,32(r3)
   119bc:	19c00915 	stw	r7,36(r3)
   119c0:	19800a15 	stw	r6,40(r3)
   119c4:	19400b15 	stw	r5,44(r3)
   119c8:	4a400484 	addi	r9,r9,18
   119cc:	10001915 	stw	zero,100(r2)
   119d0:	10000015 	stw	zero,0(r2)
   119d4:	10000115 	stw	zero,4(r2)
   119d8:	10000215 	stw	zero,8(r2)
   119dc:	12400315 	stw	r9,12(r2)
   119e0:	10000415 	stw	zero,16(r2)
   119e4:	10000515 	stw	zero,20(r2)
   119e8:	10000615 	stw	zero,24(r2)
   119ec:	10001705 	stb	zero,92(r2)
   119f0:	10001745 	stb	zero,93(r2)
   119f4:	10001785 	stb	zero,94(r2)
   119f8:	100017c5 	stb	zero,95(r2)
   119fc:	10001805 	stb	zero,96(r2)
   11a00:	10001845 	stb	zero,97(r2)
   11a04:	10001885 	stb	zero,98(r2)
   11a08:	100018c5 	stb	zero,99(r2)
   11a0c:	10800715 	stw	r2,28(r2)
   11a10:	12000815 	stw	r8,32(r2)
   11a14:	11c00915 	stw	r7,36(r2)
   11a18:	11800a15 	stw	r6,40(r2)
   11a1c:	11400b15 	stw	r5,44(r2)
   11a20:	00800044 	movi	r2,1
   11a24:	20800e15 	stw	r2,56(r4)
   11a28:	f800283a 	ret

00011a2c <__sfmoreglue>:
   11a2c:	defffc04 	addi	sp,sp,-16
   11a30:	dc800215 	stw	r18,8(sp)
   11a34:	2825883a 	mov	r18,r5
   11a38:	dc000015 	stw	r16,0(sp)
   11a3c:	01401a04 	movi	r5,104
   11a40:	2021883a 	mov	r16,r4
   11a44:	913fffc4 	addi	r4,r18,-1
   11a48:	dfc00315 	stw	ra,12(sp)
   11a4c:	dc400115 	stw	r17,4(sp)
   11a50:	0010e640 	call	10e64 <__mulsi3>
   11a54:	8009883a 	mov	r4,r16
   11a58:	11401d04 	addi	r5,r2,116
   11a5c:	1023883a 	mov	r17,r2
   11a60:	0012af80 	call	12af8 <_malloc_r>
   11a64:	1021883a 	mov	r16,r2
   11a68:	10000726 	beq	r2,zero,11a88 <__sfmoreglue+0x5c>
   11a6c:	11000304 	addi	r4,r2,12
   11a70:	10000015 	stw	zero,0(r2)
   11a74:	14800115 	stw	r18,4(r2)
   11a78:	11000215 	stw	r4,8(r2)
   11a7c:	89801a04 	addi	r6,r17,104
   11a80:	000b883a 	mov	r5,zero
   11a84:	00133d80 	call	133d8 <memset>
   11a88:	8005883a 	mov	r2,r16
   11a8c:	dfc00317 	ldw	ra,12(sp)
   11a90:	dc800217 	ldw	r18,8(sp)
   11a94:	dc400117 	ldw	r17,4(sp)
   11a98:	dc000017 	ldw	r16,0(sp)
   11a9c:	dec00404 	addi	sp,sp,16
   11aa0:	f800283a 	ret

00011aa4 <__sfp>:
   11aa4:	defffb04 	addi	sp,sp,-20
   11aa8:	008000b4 	movhi	r2,2
   11aac:	dc000015 	stw	r16,0(sp)
   11ab0:	1422f317 	ldw	r16,-29748(r2)
   11ab4:	dc400115 	stw	r17,4(sp)
   11ab8:	dfc00415 	stw	ra,16(sp)
   11abc:	80800e17 	ldw	r2,56(r16)
   11ac0:	dcc00315 	stw	r19,12(sp)
   11ac4:	dc800215 	stw	r18,8(sp)
   11ac8:	2023883a 	mov	r17,r4
   11acc:	10003126 	beq	r2,zero,11b94 <__sfp+0xf0>
   11ad0:	8100ba17 	ldw	r4,744(r16)
   11ad4:	8140b917 	ldw	r5,740(r16)
   11ad8:	04c00104 	movi	r19,4
   11adc:	8400b804 	addi	r16,r16,736
   11ae0:	297fffc4 	addi	r5,r5,-1
   11ae4:	2800050e 	bge	r5,zero,11afc <__sfp+0x58>
   11ae8:	00002406 	br	11b7c <__sfp+0xd8>
   11aec:	297fffc4 	addi	r5,r5,-1
   11af0:	28bfffd8 	cmpnei	r2,r5,-1
   11af4:	21001a04 	addi	r4,r4,104
   11af8:	10002026 	beq	r2,zero,11b7c <__sfp+0xd8>
   11afc:	2080030f 	ldh	r2,12(r4)
   11b00:	103ffa1e 	bne	r2,zero,11aec <__sfp+0x48>
   11b04:	00bffff4 	movhi	r2,65535
   11b08:	10800044 	addi	r2,r2,1
   11b0c:	20001915 	stw	zero,100(r4)
   11b10:	20000015 	stw	zero,0(r4)
   11b14:	20000115 	stw	zero,4(r4)
   11b18:	20000215 	stw	zero,8(r4)
   11b1c:	20800315 	stw	r2,12(r4)
   11b20:	20000415 	stw	zero,16(r4)
   11b24:	20000515 	stw	zero,20(r4)
   11b28:	20000615 	stw	zero,24(r4)
   11b2c:	20001705 	stb	zero,92(r4)
   11b30:	20001745 	stb	zero,93(r4)
   11b34:	20001785 	stb	zero,94(r4)
   11b38:	200017c5 	stb	zero,95(r4)
   11b3c:	20001805 	stb	zero,96(r4)
   11b40:	20001845 	stb	zero,97(r4)
   11b44:	20001885 	stb	zero,98(r4)
   11b48:	200018c5 	stb	zero,99(r4)
   11b4c:	20000c15 	stw	zero,48(r4)
   11b50:	20000d15 	stw	zero,52(r4)
   11b54:	20001115 	stw	zero,68(r4)
   11b58:	20001215 	stw	zero,72(r4)
   11b5c:	2005883a 	mov	r2,r4
   11b60:	dfc00417 	ldw	ra,16(sp)
   11b64:	dcc00317 	ldw	r19,12(sp)
   11b68:	dc800217 	ldw	r18,8(sp)
   11b6c:	dc400117 	ldw	r17,4(sp)
   11b70:	dc000017 	ldw	r16,0(sp)
   11b74:	dec00504 	addi	sp,sp,20
   11b78:	f800283a 	ret
   11b7c:	80800017 	ldw	r2,0(r16)
   11b80:	10000726 	beq	r2,zero,11ba0 <__sfp+0xfc>
   11b84:	11000217 	ldw	r4,8(r2)
   11b88:	11400117 	ldw	r5,4(r2)
   11b8c:	1021883a 	mov	r16,r2
   11b90:	003fd306 	br	11ae0 <__sfp+0x3c>
   11b94:	8009883a 	mov	r4,r16
   11b98:	00118c40 	call	118c4 <__sinit.part.0>
   11b9c:	003fcc06 	br	11ad0 <__sfp+0x2c>
   11ba0:	01406b04 	movi	r5,428
   11ba4:	8809883a 	mov	r4,r17
   11ba8:	0012af80 	call	12af8 <_malloc_r>
   11bac:	1025883a 	mov	r18,r2
   11bb0:	10000c26 	beq	r2,zero,11be4 <__sfp+0x140>
   11bb4:	11000304 	addi	r4,r2,12
   11bb8:	11000215 	stw	r4,8(r2)
   11bbc:	000b883a 	mov	r5,zero
   11bc0:	10000015 	stw	zero,0(r2)
   11bc4:	14c00115 	stw	r19,4(r2)
   11bc8:	01806804 	movi	r6,416
   11bcc:	00133d80 	call	133d8 <memset>
   11bd0:	1009883a 	mov	r4,r2
   11bd4:	84800015 	stw	r18,0(r16)
   11bd8:	014000c4 	movi	r5,3
   11bdc:	9021883a 	mov	r16,r18
   11be0:	003fc606 	br	11afc <__sfp+0x58>
   11be4:	80000015 	stw	zero,0(r16)
   11be8:	00800304 	movi	r2,12
   11bec:	88800015 	stw	r2,0(r17)
   11bf0:	0009883a 	mov	r4,zero
   11bf4:	003fd906 	br	11b5c <__sfp+0xb8>

00011bf8 <_cleanup>:
   11bf8:	008000b4 	movhi	r2,2
   11bfc:	1122f317 	ldw	r4,-29748(r2)
   11c00:	01400074 	movhi	r5,1
   11c04:	29452f04 	addi	r5,r5,5308
   11c08:	00126fc1 	jmpi	126fc <_fwalk_reent>

00011c0c <__sinit>:
   11c0c:	20800e17 	ldw	r2,56(r4)
   11c10:	10000126 	beq	r2,zero,11c18 <__sinit+0xc>
   11c14:	f800283a 	ret
   11c18:	00118c41 	jmpi	118c4 <__sinit.part.0>

00011c1c <__sfp_lock_acquire>:
   11c1c:	f800283a 	ret

00011c20 <__sfp_lock_release>:
   11c20:	f800283a 	ret

00011c24 <__sinit_lock_acquire>:
   11c24:	f800283a 	ret

00011c28 <__sinit_lock_release>:
   11c28:	f800283a 	ret

00011c2c <__fp_lock_all>:
   11c2c:	008000b4 	movhi	r2,2
   11c30:	1122f417 	ldw	r4,-29744(r2)
   11c34:	01400074 	movhi	r5,1
   11c38:	29462a04 	addi	r5,r5,6312
   11c3c:	00126641 	jmpi	12664 <_fwalk>

00011c40 <__fp_unlock_all>:
   11c40:	008000b4 	movhi	r2,2
   11c44:	1122f417 	ldw	r4,-29744(r2)
   11c48:	01400074 	movhi	r5,1
   11c4c:	29462f04 	addi	r5,r5,6332
   11c50:	00126641 	jmpi	12664 <_fwalk>

00011c54 <_fopen_r>:
   11c54:	defffa04 	addi	sp,sp,-24
   11c58:	3007883a 	mov	r3,r6
   11c5c:	dcc00415 	stw	r19,16(sp)
   11c60:	d80d883a 	mov	r6,sp
   11c64:	2827883a 	mov	r19,r5
   11c68:	180b883a 	mov	r5,r3
   11c6c:	dc800315 	stw	r18,12(sp)
   11c70:	dfc00515 	stw	ra,20(sp)
   11c74:	dc400215 	stw	r17,8(sp)
   11c78:	dc000115 	stw	r16,4(sp)
   11c7c:	2025883a 	mov	r18,r4
   11c80:	0013af00 	call	13af0 <__sflags>
   11c84:	10002726 	beq	r2,zero,11d24 <_fopen_r+0xd0>
   11c88:	9009883a 	mov	r4,r18
   11c8c:	1023883a 	mov	r17,r2
   11c90:	0011aa40 	call	11aa4 <__sfp>
   11c94:	1021883a 	mov	r16,r2
   11c98:	10002226 	beq	r2,zero,11d24 <_fopen_r+0xd0>
   11c9c:	d9800017 	ldw	r6,0(sp)
   11ca0:	01c06d84 	movi	r7,438
   11ca4:	980b883a 	mov	r5,r19
   11ca8:	9009883a 	mov	r4,r18
   11cac:	00134c80 	call	134c8 <_open_r>
   11cb0:	10001916 	blt	r2,zero,11d18 <_fopen_r+0xc4>
   11cb4:	01800074 	movhi	r6,1
   11cb8:	01400074 	movhi	r5,1
   11cbc:	01000074 	movhi	r4,1
   11cc0:	00c00074 	movhi	r3,1
   11cc4:	318e1704 	addi	r6,r6,14428
   11cc8:	294e2e04 	addi	r5,r5,14520
   11ccc:	210e4e04 	addi	r4,r4,14648
   11cd0:	18ce6504 	addi	r3,r3,14740
   11cd4:	8440030d 	sth	r17,12(r16)
   11cd8:	8080038d 	sth	r2,14(r16)
   11cdc:	84000715 	stw	r16,28(r16)
   11ce0:	81800815 	stw	r6,32(r16)
   11ce4:	81400915 	stw	r5,36(r16)
   11ce8:	81000a15 	stw	r4,40(r16)
   11cec:	80c00b15 	stw	r3,44(r16)
   11cf0:	8c40400c 	andi	r17,r17,256
   11cf4:	88000d1e 	bne	r17,zero,11d2c <_fopen_r+0xd8>
   11cf8:	8005883a 	mov	r2,r16
   11cfc:	dfc00517 	ldw	ra,20(sp)
   11d00:	dcc00417 	ldw	r19,16(sp)
   11d04:	dc800317 	ldw	r18,12(sp)
   11d08:	dc400217 	ldw	r17,8(sp)
   11d0c:	dc000117 	ldw	r16,4(sp)
   11d10:	dec00604 	addi	sp,sp,24
   11d14:	f800283a 	ret
   11d18:	0011c1c0 	call	11c1c <__sfp_lock_acquire>
   11d1c:	8000030d 	sth	zero,12(r16)
   11d20:	0011c200 	call	11c20 <__sfp_lock_release>
   11d24:	0021883a 	mov	r16,zero
   11d28:	003ff306 	br	11cf8 <_fopen_r+0xa4>
   11d2c:	01c00084 	movi	r7,2
   11d30:	000d883a 	mov	r6,zero
   11d34:	800b883a 	mov	r5,r16
   11d38:	9009883a 	mov	r4,r18
   11d3c:	00121740 	call	12174 <_fseek_r>
   11d40:	003fed06 	br	11cf8 <_fopen_r+0xa4>

00011d44 <fopen>:
   11d44:	00c000b4 	movhi	r3,2
   11d48:	2005883a 	mov	r2,r4
   11d4c:	1922f417 	ldw	r4,-29744(r3)
   11d50:	280d883a 	mov	r6,r5
   11d54:	100b883a 	mov	r5,r2
   11d58:	0011c541 	jmpi	11c54 <_fopen_r>

00011d5c <_malloc_trim_r>:
   11d5c:	defffb04 	addi	sp,sp,-20
   11d60:	dcc00315 	stw	r19,12(sp)
   11d64:	04c00074 	movhi	r19,1
   11d68:	dc800215 	stw	r18,8(sp)
   11d6c:	dc400115 	stw	r17,4(sp)
   11d70:	dc000015 	stw	r16,0(sp)
   11d74:	dfc00415 	stw	ra,16(sp)
   11d78:	2821883a 	mov	r16,r5
   11d7c:	9cdd6404 	addi	r19,r19,30096
   11d80:	2025883a 	mov	r18,r4
   11d84:	00143f40 	call	143f4 <__malloc_lock>
   11d88:	98800217 	ldw	r2,8(r19)
   11d8c:	14400117 	ldw	r17,4(r2)
   11d90:	00bfff04 	movi	r2,-4
   11d94:	88a2703a 	and	r17,r17,r2
   11d98:	8c21c83a 	sub	r16,r17,r16
   11d9c:	8403fbc4 	addi	r16,r16,4079
   11da0:	8020d33a 	srli	r16,r16,12
   11da4:	843fffc4 	addi	r16,r16,-1
   11da8:	8020933a 	slli	r16,r16,12
   11dac:	80840008 	cmpgei	r2,r16,4096
   11db0:	10000626 	beq	r2,zero,11dcc <_malloc_trim_r+0x70>
   11db4:	000b883a 	mov	r5,zero
   11db8:	9009883a 	mov	r4,r18
   11dbc:	00138040 	call	13804 <_sbrk_r>
   11dc0:	98c00217 	ldw	r3,8(r19)
   11dc4:	1c47883a 	add	r3,r3,r17
   11dc8:	10c00a26 	beq	r2,r3,11df4 <_malloc_trim_r+0x98>
   11dcc:	9009883a 	mov	r4,r18
   11dd0:	00144180 	call	14418 <__malloc_unlock>
   11dd4:	0005883a 	mov	r2,zero
   11dd8:	dfc00417 	ldw	ra,16(sp)
   11ddc:	dcc00317 	ldw	r19,12(sp)
   11de0:	dc800217 	ldw	r18,8(sp)
   11de4:	dc400117 	ldw	r17,4(sp)
   11de8:	dc000017 	ldw	r16,0(sp)
   11dec:	dec00504 	addi	sp,sp,20
   11df0:	f800283a 	ret
   11df4:	040bc83a 	sub	r5,zero,r16
   11df8:	9009883a 	mov	r4,r18
   11dfc:	00138040 	call	13804 <_sbrk_r>
   11e00:	10bfffd8 	cmpnei	r2,r2,-1
   11e04:	10000d26 	beq	r2,zero,11e3c <_malloc_trim_r+0xe0>
   11e08:	008000b4 	movhi	r2,2
   11e0c:	10aa4e17 	ldw	r2,-22216(r2)
   11e10:	98c00217 	ldw	r3,8(r19)
   11e14:	8c23c83a 	sub	r17,r17,r16
   11e18:	8c400054 	ori	r17,r17,1
   11e1c:	1421c83a 	sub	r16,r2,r16
   11e20:	1c400115 	stw	r17,4(r3)
   11e24:	008000b4 	movhi	r2,2
   11e28:	9009883a 	mov	r4,r18
   11e2c:	142a4e15 	stw	r16,-22216(r2)
   11e30:	00144180 	call	14418 <__malloc_unlock>
   11e34:	00800044 	movi	r2,1
   11e38:	003fe706 	br	11dd8 <_malloc_trim_r+0x7c>
   11e3c:	000b883a 	mov	r5,zero
   11e40:	9009883a 	mov	r4,r18
   11e44:	00138040 	call	13804 <_sbrk_r>
   11e48:	99000217 	ldw	r4,8(r19)
   11e4c:	1107c83a 	sub	r3,r2,r4
   11e50:	19400410 	cmplti	r5,r3,16
   11e54:	283fdd1e 	bne	r5,zero,11dcc <_malloc_trim_r+0x70>
   11e58:	014000b4 	movhi	r5,2
   11e5c:	2962f517 	ldw	r5,-29740(r5)
   11e60:	18c00054 	ori	r3,r3,1
   11e64:	20c00115 	stw	r3,4(r4)
   11e68:	1145c83a 	sub	r2,r2,r5
   11e6c:	014000b4 	movhi	r5,2
   11e70:	28aa4e15 	stw	r2,-22216(r5)
   11e74:	003fd506 	br	11dcc <_malloc_trim_r+0x70>

00011e78 <_free_r>:
   11e78:	28004f26 	beq	r5,zero,11fb8 <_free_r+0x140>
   11e7c:	defffd04 	addi	sp,sp,-12
   11e80:	dc400115 	stw	r17,4(sp)
   11e84:	dc000015 	stw	r16,0(sp)
   11e88:	2023883a 	mov	r17,r4
   11e8c:	2821883a 	mov	r16,r5
   11e90:	dfc00215 	stw	ra,8(sp)
   11e94:	00143f40 	call	143f4 <__malloc_lock>
   11e98:	81ffff17 	ldw	r7,-4(r16)
   11e9c:	00bfff84 	movi	r2,-2
   11ea0:	80fffe04 	addi	r3,r16,-8
   11ea4:	3884703a 	and	r2,r7,r2
   11ea8:	01000074 	movhi	r4,1
   11eac:	188d883a 	add	r6,r3,r2
   11eb0:	211d6404 	addi	r4,r4,30096
   11eb4:	31400117 	ldw	r5,4(r6)
   11eb8:	22000217 	ldw	r8,8(r4)
   11ebc:	027fff04 	movi	r9,-4
   11ec0:	2a4a703a 	and	r5,r5,r9
   11ec4:	41806426 	beq	r8,r6,12058 <_free_r+0x1e0>
   11ec8:	31400115 	stw	r5,4(r6)
   11ecc:	39c0004c 	andi	r7,r7,1
   11ed0:	3151883a 	add	r8,r6,r5
   11ed4:	3800281e 	bne	r7,zero,11f78 <_free_r+0x100>
   11ed8:	82bffe17 	ldw	r10,-8(r16)
   11edc:	42000117 	ldw	r8,4(r8)
   11ee0:	01c00074 	movhi	r7,1
   11ee4:	1a87c83a 	sub	r3,r3,r10
   11ee8:	1a400217 	ldw	r9,8(r3)
   11eec:	39dd6604 	addi	r7,r7,30104
   11ef0:	1285883a 	add	r2,r2,r10
   11ef4:	4200004c 	andi	r8,r8,1
   11ef8:	49c04c26 	beq	r9,r7,1202c <_free_r+0x1b4>
   11efc:	1a800317 	ldw	r10,12(r3)
   11f00:	4a800315 	stw	r10,12(r9)
   11f04:	52400215 	stw	r9,8(r10)
   11f08:	40007126 	beq	r8,zero,120d0 <_free_r+0x258>
   11f0c:	11400054 	ori	r5,r2,1
   11f10:	19400115 	stw	r5,4(r3)
   11f14:	30800015 	stw	r2,0(r6)
   11f18:	11408028 	cmpgeui	r5,r2,512
   11f1c:	28002c1e 	bne	r5,zero,11fd0 <_free_r+0x158>
   11f20:	100ad0fa 	srli	r5,r2,3
   11f24:	100cd17a 	srli	r6,r2,5
   11f28:	00800044 	movi	r2,1
   11f2c:	29400044 	addi	r5,r5,1
   11f30:	280a90fa 	slli	r5,r5,3
   11f34:	21c00117 	ldw	r7,4(r4)
   11f38:	1184983a 	sll	r2,r2,r6
   11f3c:	214b883a 	add	r5,r4,r5
   11f40:	29800017 	ldw	r6,0(r5)
   11f44:	11c4b03a 	or	r2,r2,r7
   11f48:	29fffe04 	addi	r7,r5,-8
   11f4c:	19c00315 	stw	r7,12(r3)
   11f50:	19800215 	stw	r6,8(r3)
   11f54:	20800115 	stw	r2,4(r4)
   11f58:	28c00015 	stw	r3,0(r5)
   11f5c:	30c00315 	stw	r3,12(r6)
   11f60:	8809883a 	mov	r4,r17
   11f64:	dfc00217 	ldw	ra,8(sp)
   11f68:	dc400117 	ldw	r17,4(sp)
   11f6c:	dc000017 	ldw	r16,0(sp)
   11f70:	dec00304 	addi	sp,sp,12
   11f74:	00144181 	jmpi	14418 <__malloc_unlock>
   11f78:	41c00117 	ldw	r7,4(r8)
   11f7c:	39c0004c 	andi	r7,r7,1
   11f80:	38000e1e 	bne	r7,zero,11fbc <_free_r+0x144>
   11f84:	01c00074 	movhi	r7,1
   11f88:	1145883a 	add	r2,r2,r5
   11f8c:	39dd6604 	addi	r7,r7,30104
   11f90:	31400217 	ldw	r5,8(r6)
   11f94:	12400054 	ori	r9,r2,1
   11f98:	1891883a 	add	r8,r3,r2
   11f9c:	29c05226 	beq	r5,r7,120e8 <_free_r+0x270>
   11fa0:	31800317 	ldw	r6,12(r6)
   11fa4:	29800315 	stw	r6,12(r5)
   11fa8:	31400215 	stw	r5,8(r6)
   11fac:	1a400115 	stw	r9,4(r3)
   11fb0:	40800015 	stw	r2,0(r8)
   11fb4:	003fd806 	br	11f18 <_free_r+0xa0>
   11fb8:	f800283a 	ret
   11fbc:	11400054 	ori	r5,r2,1
   11fc0:	817fff15 	stw	r5,-4(r16)
   11fc4:	30800015 	stw	r2,0(r6)
   11fc8:	11408028 	cmpgeui	r5,r2,512
   11fcc:	283fd426 	beq	r5,zero,11f20 <_free_r+0xa8>
   11fd0:	100ad27a 	srli	r5,r2,9
   11fd4:	29800168 	cmpgeui	r6,r5,5
   11fd8:	3000341e 	bne	r6,zero,120ac <_free_r+0x234>
   11fdc:	100ad1ba 	srli	r5,r2,6
   11fe0:	29800e44 	addi	r6,r5,57
   11fe4:	300c90fa 	slli	r6,r6,3
   11fe8:	29c00e04 	addi	r7,r5,56
   11fec:	218d883a 	add	r6,r4,r6
   11ff0:	31400017 	ldw	r5,0(r6)
   11ff4:	31bffe04 	addi	r6,r6,-8
   11ff8:	31404226 	beq	r6,r5,12104 <_free_r+0x28c>
   11ffc:	01ffff04 	movi	r7,-4
   12000:	29000117 	ldw	r4,4(r5)
   12004:	21c8703a 	and	r4,r4,r7
   12008:	1100022e 	bgeu	r2,r4,12014 <_free_r+0x19c>
   1200c:	29400217 	ldw	r5,8(r5)
   12010:	317ffb1e 	bne	r6,r5,12000 <_free_r+0x188>
   12014:	29800317 	ldw	r6,12(r5)
   12018:	19800315 	stw	r6,12(r3)
   1201c:	19400215 	stw	r5,8(r3)
   12020:	30c00215 	stw	r3,8(r6)
   12024:	28c00315 	stw	r3,12(r5)
   12028:	003fcd06 	br	11f60 <_free_r+0xe8>
   1202c:	40004d1e 	bne	r8,zero,12164 <_free_r+0x2ec>
   12030:	31000317 	ldw	r4,12(r6)
   12034:	31800217 	ldw	r6,8(r6)
   12038:	2885883a 	add	r2,r5,r2
   1203c:	11400054 	ori	r5,r2,1
   12040:	31000315 	stw	r4,12(r6)
   12044:	21800215 	stw	r6,8(r4)
   12048:	19400115 	stw	r5,4(r3)
   1204c:	1887883a 	add	r3,r3,r2
   12050:	18800015 	stw	r2,0(r3)
   12054:	003fc206 	br	11f60 <_free_r+0xe8>
   12058:	39c0004c 	andi	r7,r7,1
   1205c:	1145883a 	add	r2,r2,r5
   12060:	3800071e 	bne	r7,zero,12080 <_free_r+0x208>
   12064:	81fffe17 	ldw	r7,-8(r16)
   12068:	19c7c83a 	sub	r3,r3,r7
   1206c:	19400317 	ldw	r5,12(r3)
   12070:	19800217 	ldw	r6,8(r3)
   12074:	11c5883a 	add	r2,r2,r7
   12078:	31400315 	stw	r5,12(r6)
   1207c:	29800215 	stw	r6,8(r5)
   12080:	014000b4 	movhi	r5,2
   12084:	11800054 	ori	r6,r2,1
   12088:	2962f617 	ldw	r5,-29736(r5)
   1208c:	19800115 	stw	r6,4(r3)
   12090:	20c00215 	stw	r3,8(r4)
   12094:	117fb236 	bltu	r2,r5,11f60 <_free_r+0xe8>
   12098:	008000b4 	movhi	r2,2
   1209c:	1169cc17 	ldw	r5,-22736(r2)
   120a0:	8809883a 	mov	r4,r17
   120a4:	0011d5c0 	call	11d5c <_malloc_trim_r>
   120a8:	003fad06 	br	11f60 <_free_r+0xe8>
   120ac:	29800568 	cmpgeui	r6,r5,21
   120b0:	30000926 	beq	r6,zero,120d8 <_free_r+0x260>
   120b4:	29801568 	cmpgeui	r6,r5,85
   120b8:	3000191e 	bne	r6,zero,12120 <_free_r+0x2a8>
   120bc:	100ad33a 	srli	r5,r2,12
   120c0:	29801bc4 	addi	r6,r5,111
   120c4:	300c90fa 	slli	r6,r6,3
   120c8:	29c01b84 	addi	r7,r5,110
   120cc:	003fc706 	br	11fec <_free_r+0x174>
   120d0:	1145883a 	add	r2,r2,r5
   120d4:	003fae06 	br	11f90 <_free_r+0x118>
   120d8:	29801704 	addi	r6,r5,92
   120dc:	300c90fa 	slli	r6,r6,3
   120e0:	29c016c4 	addi	r7,r5,91
   120e4:	003fc106 	br	11fec <_free_r+0x174>
   120e8:	20c00515 	stw	r3,20(r4)
   120ec:	20c00415 	stw	r3,16(r4)
   120f0:	19c00315 	stw	r7,12(r3)
   120f4:	19c00215 	stw	r7,8(r3)
   120f8:	1a400115 	stw	r9,4(r3)
   120fc:	40800015 	stw	r2,0(r8)
   12100:	003f9706 	br	11f60 <_free_r+0xe8>
   12104:	380fd0ba 	srai	r7,r7,2
   12108:	00800044 	movi	r2,1
   1210c:	22000117 	ldw	r8,4(r4)
   12110:	11ce983a 	sll	r7,r2,r7
   12114:	3a0eb03a 	or	r7,r7,r8
   12118:	21c00115 	stw	r7,4(r4)
   1211c:	003fbe06 	br	12018 <_free_r+0x1a0>
   12120:	29805568 	cmpgeui	r6,r5,341
   12124:	3000051e 	bne	r6,zero,1213c <_free_r+0x2c4>
   12128:	100ad3fa 	srli	r5,r2,15
   1212c:	29801e04 	addi	r6,r5,120
   12130:	300c90fa 	slli	r6,r6,3
   12134:	29c01dc4 	addi	r7,r5,119
   12138:	003fac06 	br	11fec <_free_r+0x174>
   1213c:	29415568 	cmpgeui	r5,r5,1365
   12140:	2800051e 	bne	r5,zero,12158 <_free_r+0x2e0>
   12144:	100ad4ba 	srli	r5,r2,18
   12148:	29801f44 	addi	r6,r5,125
   1214c:	300c90fa 	slli	r6,r6,3
   12150:	29c01f04 	addi	r7,r5,124
   12154:	003fa506 	br	11fec <_free_r+0x174>
   12158:	0180fe04 	movi	r6,1016
   1215c:	01c01f84 	movi	r7,126
   12160:	003fa206 	br	11fec <_free_r+0x174>
   12164:	11000054 	ori	r4,r2,1
   12168:	19000115 	stw	r4,4(r3)
   1216c:	30800015 	stw	r2,0(r6)
   12170:	003f7b06 	br	11f60 <_free_r+0xe8>

00012174 <_fseek_r>:
   12174:	00121941 	jmpi	12194 <_fseeko_r>

00012178 <fseek>:
   12178:	00c000b4 	movhi	r3,2
   1217c:	2005883a 	mov	r2,r4
   12180:	1922f417 	ldw	r4,-29744(r3)
   12184:	300f883a 	mov	r7,r6
   12188:	280d883a 	mov	r6,r5
   1218c:	100b883a 	mov	r5,r2
   12190:	00121941 	jmpi	12194 <_fseeko_r>

00012194 <_fseeko_r>:
   12194:	deffe504 	addi	sp,sp,-108
   12198:	dd401715 	stw	r21,92(sp)
   1219c:	dcc01515 	stw	r19,84(sp)
   121a0:	dc401315 	stw	r17,76(sp)
   121a4:	dc001215 	stw	r16,72(sp)
   121a8:	dfc01a15 	stw	ra,104(sp)
   121ac:	ddc01915 	stw	r23,100(sp)
   121b0:	dd801815 	stw	r22,96(sp)
   121b4:	dd001615 	stw	r20,88(sp)
   121b8:	dc801415 	stw	r18,80(sp)
   121bc:	2023883a 	mov	r17,r4
   121c0:	2821883a 	mov	r16,r5
   121c4:	3027883a 	mov	r19,r6
   121c8:	382b883a 	mov	r21,r7
   121cc:	20000226 	beq	r4,zero,121d8 <_fseeko_r+0x44>
   121d0:	20800e17 	ldw	r2,56(r4)
   121d4:	10001a26 	beq	r2,zero,12240 <_fseeko_r+0xac>
   121d8:	8080030b 	ldhu	r2,12(r16)
   121dc:	1080420c 	andi	r2,r2,264
   121e0:	10804218 	cmpnei	r2,r2,264
   121e4:	10001b26 	beq	r2,zero,12254 <_fseeko_r+0xc0>
   121e8:	85000a17 	ldw	r20,40(r16)
   121ec:	a000fa26 	beq	r20,zero,125d8 <_fseeko_r+0x444>
   121f0:	a8800060 	cmpeqi	r2,r21,1
   121f4:	10004a1e 	bne	r2,zero,12320 <_fseeko_r+0x18c>
   121f8:	04bfff44 	movi	r18,-3
   121fc:	aca4703a 	and	r18,r21,r18
   12200:	90001826 	beq	r18,zero,12264 <_fseeko_r+0xd0>
   12204:	00800584 	movi	r2,22
   12208:	88800015 	stw	r2,0(r17)
   1220c:	04bfffc4 	movi	r18,-1
   12210:	9005883a 	mov	r2,r18
   12214:	dfc01a17 	ldw	ra,104(sp)
   12218:	ddc01917 	ldw	r23,100(sp)
   1221c:	dd801817 	ldw	r22,96(sp)
   12220:	dd401717 	ldw	r21,92(sp)
   12224:	dd001617 	ldw	r20,88(sp)
   12228:	dcc01517 	ldw	r19,84(sp)
   1222c:	dc801417 	ldw	r18,80(sp)
   12230:	dc401317 	ldw	r17,76(sp)
   12234:	dc001217 	ldw	r16,72(sp)
   12238:	dec01b04 	addi	sp,sp,108
   1223c:	f800283a 	ret
   12240:	0011c0c0 	call	11c0c <__sinit>
   12244:	8080030b 	ldhu	r2,12(r16)
   12248:	1080420c 	andi	r2,r2,264
   1224c:	10804218 	cmpnei	r2,r2,264
   12250:	103fe51e 	bne	r2,zero,121e8 <_fseeko_r+0x54>
   12254:	800b883a 	mov	r5,r16
   12258:	8809883a 	mov	r4,r17
   1225c:	00117c40 	call	117c4 <_fflush_r>
   12260:	003fe106 	br	121e8 <_fseeko_r+0x54>
   12264:	81000417 	ldw	r4,16(r16)
   12268:	002f883a 	mov	r23,zero
   1226c:	20004826 	beq	r4,zero,12390 <_fseeko_r+0x1fc>
   12270:	8080030b 	ldhu	r2,12(r16)
   12274:	10c2068c 	andi	r3,r2,2074
   12278:	1800071e 	bne	r3,zero,12298 <_fseeko_r+0x104>
   1227c:	10c1000c 	andi	r3,r2,1024
   12280:	1800561e 	bne	r3,zero,123dc <_fseeko_r+0x248>
   12284:	00c00074 	movhi	r3,1
   12288:	18ce4e04 	addi	r3,r3,14648
   1228c:	a0c04426 	beq	r20,r3,123a0 <_fseeko_r+0x20c>
   12290:	10820014 	ori	r2,r2,2048
   12294:	8080030d 	sth	r2,12(r16)
   12298:	800b883a 	mov	r5,r16
   1229c:	8809883a 	mov	r4,r17
   122a0:	00117c40 	call	117c4 <_fflush_r>
   122a4:	1025883a 	mov	r18,r2
   122a8:	103fd81e 	bne	r2,zero,1220c <_fseeko_r+0x78>
   122ac:	81400717 	ldw	r5,28(r16)
   122b0:	a80f883a 	mov	r7,r21
   122b4:	980d883a 	mov	r6,r19
   122b8:	8809883a 	mov	r4,r17
   122bc:	a03ee83a 	callr	r20
   122c0:	10bfffe0 	cmpeqi	r2,r2,-1
   122c4:	103fd11e 	bne	r2,zero,1220c <_fseeko_r+0x78>
   122c8:	81400c17 	ldw	r5,48(r16)
   122cc:	28000526 	beq	r5,zero,122e4 <_fseeko_r+0x150>
   122d0:	80801004 	addi	r2,r16,64
   122d4:	28800226 	beq	r5,r2,122e0 <_fseeko_r+0x14c>
   122d8:	8809883a 	mov	r4,r17
   122dc:	0011e780 	call	11e78 <_free_r>
   122e0:	80000c15 	stw	zero,48(r16)
   122e4:	8080030b 	ldhu	r2,12(r16)
   122e8:	80c00417 	ldw	r3,16(r16)
   122ec:	80000115 	stw	zero,4(r16)
   122f0:	10bdf7cc 	andi	r2,r2,63455
   122f4:	80c00015 	stw	r3,0(r16)
   122f8:	8080030d 	sth	r2,12(r16)
   122fc:	80001705 	stb	zero,92(r16)
   12300:	80001745 	stb	zero,93(r16)
   12304:	80001785 	stb	zero,94(r16)
   12308:	800017c5 	stb	zero,95(r16)
   1230c:	80001805 	stb	zero,96(r16)
   12310:	80001845 	stb	zero,97(r16)
   12314:	80001885 	stb	zero,98(r16)
   12318:	800018c5 	stb	zero,99(r16)
   1231c:	003fbc06 	br	12210 <_fseeko_r+0x7c>
   12320:	800b883a 	mov	r5,r16
   12324:	8809883a 	mov	r4,r17
   12328:	00117c40 	call	117c4 <_fflush_r>
   1232c:	8080030b 	ldhu	r2,12(r16)
   12330:	10c4000c 	andi	r3,r2,4096
   12334:	18006e1e 	bne	r3,zero,124f0 <_fseeko_r+0x35c>
   12338:	81400717 	ldw	r5,28(r16)
   1233c:	01c00044 	movi	r7,1
   12340:	000d883a 	mov	r6,zero
   12344:	8809883a 	mov	r4,r17
   12348:	a03ee83a 	callr	r20
   1234c:	1025883a 	mov	r18,r2
   12350:	10bfffd8 	cmpnei	r2,r2,-1
   12354:	103fad26 	beq	r2,zero,1220c <_fseeko_r+0x78>
   12358:	8080030b 	ldhu	r2,12(r16)
   1235c:	81000417 	ldw	r4,16(r16)
   12360:	10c0010c 	andi	r3,r2,4
   12364:	18006626 	beq	r3,zero,12500 <_fseeko_r+0x36c>
   12368:	80c00117 	ldw	r3,4(r16)
   1236c:	80800c17 	ldw	r2,48(r16)
   12370:	90e5c83a 	sub	r18,r18,r3
   12374:	10000226 	beq	r2,zero,12380 <_fseeko_r+0x1ec>
   12378:	81800f17 	ldw	r6,60(r16)
   1237c:	91a5c83a 	sub	r18,r18,r6
   12380:	9ca7883a 	add	r19,r19,r18
   12384:	05c00044 	movi	r23,1
   12388:	002b883a 	mov	r21,zero
   1238c:	203fb81e 	bne	r4,zero,12270 <_fseeko_r+0xdc>
   12390:	800b883a 	mov	r5,r16
   12394:	8809883a 	mov	r4,r17
   12398:	00128b00 	call	128b0 <__smakebuf_r>
   1239c:	003fb406 	br	12270 <_fseeko_r+0xdc>
   123a0:	8140038f 	ldh	r5,14(r16)
   123a4:	283fba16 	blt	r5,zero,12290 <_fseeko_r+0xfc>
   123a8:	d80d883a 	mov	r6,sp
   123ac:	8809883a 	mov	r4,r17
   123b0:	00126040 	call	12604 <_fstat_r>
   123b4:	1000761e 	bne	r2,zero,12590 <_fseeko_r+0x3fc>
   123b8:	d8c00117 	ldw	r3,4(sp)
   123bc:	01200014 	movui	r4,32768
   123c0:	8080030b 	ldhu	r2,12(r16)
   123c4:	18fc000c 	andi	r3,r3,61440
   123c8:	193fb11e 	bne	r3,r4,12290 <_fseeko_r+0xfc>
   123cc:	10810014 	ori	r2,r2,1024
   123d0:	00c10004 	movi	r3,1024
   123d4:	80c01315 	stw	r3,76(r16)
   123d8:	8080030d 	sth	r2,12(r16)
   123dc:	a8004f1e 	bne	r21,zero,1251c <_fseeko_r+0x388>
   123e0:	982d883a 	mov	r22,r19
   123e4:	b800551e 	bne	r23,zero,1253c <_fseeko_r+0x3a8>
   123e8:	8080030b 	ldhu	r2,12(r16)
   123ec:	1084000c 	andi	r2,r2,4096
   123f0:	10005f26 	beq	r2,zero,12570 <_fseeko_r+0x3dc>
   123f4:	80801417 	ldw	r2,80(r16)
   123f8:	80c00117 	ldw	r3,4(r16)
   123fc:	81400c17 	ldw	r5,48(r16)
   12400:	1809883a 	mov	r4,r3
   12404:	10e5c83a 	sub	r18,r2,r3
   12408:	28005226 	beq	r5,zero,12554 <_fseeko_r+0x3c0>
   1240c:	81800f17 	ldw	r6,60(r16)
   12410:	91a5c83a 	sub	r18,r18,r6
   12414:	80800e17 	ldw	r2,56(r16)
   12418:	81c00417 	ldw	r7,16(r16)
   1241c:	90e5883a 	add	r18,r18,r3
   12420:	11c5c83a 	sub	r2,r2,r7
   12424:	90a5c83a 	sub	r18,r18,r2
   12428:	1185883a 	add	r2,r2,r6
   1242c:	b4800216 	blt	r22,r18,12438 <_fseeko_r+0x2a4>
   12430:	9087883a 	add	r3,r18,r2
   12434:	b0c05836 	bltu	r22,r3,12598 <_fseeko_r+0x404>
   12438:	84801317 	ldw	r18,76(r16)
   1243c:	81400717 	ldw	r5,28(r16)
   12440:	000f883a 	mov	r7,zero
   12444:	04a5c83a 	sub	r18,zero,r18
   12448:	95a4703a 	and	r18,r18,r22
   1244c:	900d883a 	mov	r6,r18
   12450:	8809883a 	mov	r4,r17
   12454:	a03ee83a 	callr	r20
   12458:	10bfffe0 	cmpeqi	r2,r2,-1
   1245c:	103f8e1e 	bne	r2,zero,12298 <_fseeko_r+0x104>
   12460:	80800417 	ldw	r2,16(r16)
   12464:	81400c17 	ldw	r5,48(r16)
   12468:	80000115 	stw	zero,4(r16)
   1246c:	80800015 	stw	r2,0(r16)
   12470:	28000526 	beq	r5,zero,12488 <_fseeko_r+0x2f4>
   12474:	80801004 	addi	r2,r16,64
   12478:	28800226 	beq	r5,r2,12484 <_fseeko_r+0x2f0>
   1247c:	8809883a 	mov	r4,r17
   12480:	0011e780 	call	11e78 <_free_r>
   12484:	80000c15 	stw	zero,48(r16)
   12488:	8080030b 	ldhu	r2,12(r16)
   1248c:	b4afc83a 	sub	r23,r22,r18
   12490:	10bff7cc 	andi	r2,r2,65503
   12494:	8080030d 	sth	r2,12(r16)
   12498:	b4800b26 	beq	r22,r18,124c8 <_fseeko_r+0x334>
   1249c:	800b883a 	mov	r5,r16
   124a0:	8809883a 	mov	r4,r17
   124a4:	00135480 	call	13548 <__srefill_r>
   124a8:	103f7b1e 	bne	r2,zero,12298 <_fseeko_r+0x104>
   124ac:	80800117 	ldw	r2,4(r16)
   124b0:	15ff7936 	bltu	r2,r23,12298 <_fseeko_r+0x104>
   124b4:	80c00017 	ldw	r3,0(r16)
   124b8:	15c5c83a 	sub	r2,r2,r23
   124bc:	80800115 	stw	r2,4(r16)
   124c0:	1def883a 	add	r23,r3,r23
   124c4:	85c00015 	stw	r23,0(r16)
   124c8:	80001705 	stb	zero,92(r16)
   124cc:	80001745 	stb	zero,93(r16)
   124d0:	80001785 	stb	zero,94(r16)
   124d4:	800017c5 	stb	zero,95(r16)
   124d8:	80001805 	stb	zero,96(r16)
   124dc:	80001845 	stb	zero,97(r16)
   124e0:	80001885 	stb	zero,98(r16)
   124e4:	800018c5 	stb	zero,99(r16)
   124e8:	0025883a 	mov	r18,zero
   124ec:	003f4806 	br	12210 <_fseeko_r+0x7c>
   124f0:	10c0010c 	andi	r3,r2,4
   124f4:	84801417 	ldw	r18,80(r16)
   124f8:	81000417 	ldw	r4,16(r16)
   124fc:	183f9a1e 	bne	r3,zero,12368 <_fseeko_r+0x1d4>
   12500:	1080020c 	andi	r2,r2,8
   12504:	103f9e26 	beq	r2,zero,12380 <_fseeko_r+0x1ec>
   12508:	80800017 	ldw	r2,0(r16)
   1250c:	103f9c26 	beq	r2,zero,12380 <_fseeko_r+0x1ec>
   12510:	1105c83a 	sub	r2,r2,r4
   12514:	90a5883a 	add	r18,r18,r2
   12518:	003f9906 	br	12380 <_fseeko_r+0x1ec>
   1251c:	8140038f 	ldh	r5,14(r16)
   12520:	d80d883a 	mov	r6,sp
   12524:	8809883a 	mov	r4,r17
   12528:	00126040 	call	12604 <_fstat_r>
   1252c:	103f5a1e 	bne	r2,zero,12298 <_fseeko_r+0x104>
   12530:	dd800417 	ldw	r22,16(sp)
   12534:	9dad883a 	add	r22,r19,r22
   12538:	b83fab26 	beq	r23,zero,123e8 <_fseeko_r+0x254>
   1253c:	81400c17 	ldw	r5,48(r16)
   12540:	28000326 	beq	r5,zero,12550 <_fseeko_r+0x3bc>
   12544:	80c00117 	ldw	r3,4(r16)
   12548:	81800f17 	ldw	r6,60(r16)
   1254c:	003fb106 	br	12414 <_fseeko_r+0x280>
   12550:	81000117 	ldw	r4,4(r16)
   12554:	80800017 	ldw	r2,0(r16)
   12558:	81c00417 	ldw	r7,16(r16)
   1255c:	000b883a 	mov	r5,zero
   12560:	11c5c83a 	sub	r2,r2,r7
   12564:	90a5c83a 	sub	r18,r18,r2
   12568:	2085883a 	add	r2,r4,r2
   1256c:	003faf06 	br	1242c <_fseeko_r+0x298>
   12570:	81400717 	ldw	r5,28(r16)
   12574:	01c00044 	movi	r7,1
   12578:	000d883a 	mov	r6,zero
   1257c:	8809883a 	mov	r4,r17
   12580:	a03ee83a 	callr	r20
   12584:	10ffffe0 	cmpeqi	r3,r2,-1
   12588:	183f9b26 	beq	r3,zero,123f8 <_fseeko_r+0x264>
   1258c:	003f4206 	br	12298 <_fseeko_r+0x104>
   12590:	8080030b 	ldhu	r2,12(r16)
   12594:	003f3e06 	br	12290 <_fseeko_r+0xfc>
   12598:	b4a5c83a 	sub	r18,r22,r18
   1259c:	3c8f883a 	add	r7,r7,r18
   125a0:	14a5c83a 	sub	r18,r2,r18
   125a4:	81c00015 	stw	r7,0(r16)
   125a8:	84800115 	stw	r18,4(r16)
   125ac:	28000526 	beq	r5,zero,125c4 <_fseeko_r+0x430>
   125b0:	80801004 	addi	r2,r16,64
   125b4:	28800226 	beq	r5,r2,125c0 <_fseeko_r+0x42c>
   125b8:	8809883a 	mov	r4,r17
   125bc:	0011e780 	call	11e78 <_free_r>
   125c0:	80000c15 	stw	zero,48(r16)
   125c4:	80c0030b 	ldhu	r3,12(r16)
   125c8:	80001705 	stb	zero,92(r16)
   125cc:	18fff7cc 	andi	r3,r3,65503
   125d0:	80c0030d 	sth	r3,12(r16)
   125d4:	003fbd06 	br	124cc <_fseeko_r+0x338>
   125d8:	00800744 	movi	r2,29
   125dc:	88800015 	stw	r2,0(r17)
   125e0:	04bfffc4 	movi	r18,-1
   125e4:	003f0a06 	br	12210 <_fseeko_r+0x7c>

000125e8 <fseeko>:
   125e8:	00c000b4 	movhi	r3,2
   125ec:	2005883a 	mov	r2,r4
   125f0:	1922f417 	ldw	r4,-29744(r3)
   125f4:	300f883a 	mov	r7,r6
   125f8:	280d883a 	mov	r6,r5
   125fc:	100b883a 	mov	r5,r2
   12600:	00121941 	jmpi	12194 <_fseeko_r>

00012604 <_fstat_r>:
   12604:	2807883a 	mov	r3,r5
   12608:	defffe04 	addi	sp,sp,-8
   1260c:	dc000015 	stw	r16,0(sp)
   12610:	008000b4 	movhi	r2,2
   12614:	300b883a 	mov	r5,r6
   12618:	2021883a 	mov	r16,r4
   1261c:	1809883a 	mov	r4,r3
   12620:	dfc00115 	stw	ra,4(sp)
   12624:	1029c915 	stw	zero,-22748(r2)
   12628:	0013e480 	call	13e48 <fstat>
   1262c:	10ffffd8 	cmpnei	r3,r2,-1
   12630:	18000426 	beq	r3,zero,12644 <_fstat_r+0x40>
   12634:	dfc00117 	ldw	ra,4(sp)
   12638:	dc000017 	ldw	r16,0(sp)
   1263c:	dec00204 	addi	sp,sp,8
   12640:	f800283a 	ret
   12644:	00c000b4 	movhi	r3,2
   12648:	18e9c917 	ldw	r3,-22748(r3)
   1264c:	183ff926 	beq	r3,zero,12634 <_fstat_r+0x30>
   12650:	80c00015 	stw	r3,0(r16)
   12654:	dfc00117 	ldw	ra,4(sp)
   12658:	dc000017 	ldw	r16,0(sp)
   1265c:	dec00204 	addi	sp,sp,8
   12660:	f800283a 	ret

00012664 <_fwalk>:
   12664:	defffa04 	addi	sp,sp,-24
   12668:	dd000415 	stw	r20,16(sp)
   1266c:	dcc00315 	stw	r19,12(sp)
   12670:	dc800215 	stw	r18,8(sp)
   12674:	dfc00515 	stw	ra,20(sp)
   12678:	dc400115 	stw	r17,4(sp)
   1267c:	dc000015 	stw	r16,0(sp)
   12680:	2827883a 	mov	r19,r5
   12684:	2480b804 	addi	r18,r4,736
   12688:	0029883a 	mov	r20,zero
   1268c:	94400117 	ldw	r17,4(r18)
   12690:	94000217 	ldw	r16,8(r18)
   12694:	8c7fffc4 	addi	r17,r17,-1
   12698:	88000d16 	blt	r17,zero,126d0 <_fwalk+0x6c>
   1269c:	8080030b 	ldhu	r2,12(r16)
   126a0:	8c7fffc4 	addi	r17,r17,-1
   126a4:	108000b0 	cmpltui	r2,r2,2
   126a8:	1000061e 	bne	r2,zero,126c4 <_fwalk+0x60>
   126ac:	8080038f 	ldh	r2,14(r16)
   126b0:	8009883a 	mov	r4,r16
   126b4:	10bfffe0 	cmpeqi	r2,r2,-1
   126b8:	1000021e 	bne	r2,zero,126c4 <_fwalk+0x60>
   126bc:	983ee83a 	callr	r19
   126c0:	a0a8b03a 	or	r20,r20,r2
   126c4:	88bfffd8 	cmpnei	r2,r17,-1
   126c8:	84001a04 	addi	r16,r16,104
   126cc:	103ff31e 	bne	r2,zero,1269c <_fwalk+0x38>
   126d0:	94800017 	ldw	r18,0(r18)
   126d4:	903fed1e 	bne	r18,zero,1268c <_fwalk+0x28>
   126d8:	a005883a 	mov	r2,r20
   126dc:	dfc00517 	ldw	ra,20(sp)
   126e0:	dd000417 	ldw	r20,16(sp)
   126e4:	dcc00317 	ldw	r19,12(sp)
   126e8:	dc800217 	ldw	r18,8(sp)
   126ec:	dc400117 	ldw	r17,4(sp)
   126f0:	dc000017 	ldw	r16,0(sp)
   126f4:	dec00604 	addi	sp,sp,24
   126f8:	f800283a 	ret

000126fc <_fwalk_reent>:
   126fc:	defff904 	addi	sp,sp,-28
   12700:	dd400515 	stw	r21,20(sp)
   12704:	dd000415 	stw	r20,16(sp)
   12708:	dcc00315 	stw	r19,12(sp)
   1270c:	dc800215 	stw	r18,8(sp)
   12710:	dfc00615 	stw	ra,24(sp)
   12714:	dc400115 	stw	r17,4(sp)
   12718:	dc000015 	stw	r16,0(sp)
   1271c:	202b883a 	mov	r21,r4
   12720:	2827883a 	mov	r19,r5
   12724:	2480b804 	addi	r18,r4,736
   12728:	0029883a 	mov	r20,zero
   1272c:	94400117 	ldw	r17,4(r18)
   12730:	94000217 	ldw	r16,8(r18)
   12734:	8c7fffc4 	addi	r17,r17,-1
   12738:	88000e16 	blt	r17,zero,12774 <_fwalk_reent+0x78>
   1273c:	8080030b 	ldhu	r2,12(r16)
   12740:	8c7fffc4 	addi	r17,r17,-1
   12744:	108000b0 	cmpltui	r2,r2,2
   12748:	1000071e 	bne	r2,zero,12768 <_fwalk_reent+0x6c>
   1274c:	8080038f 	ldh	r2,14(r16)
   12750:	800b883a 	mov	r5,r16
   12754:	a809883a 	mov	r4,r21
   12758:	10bfffe0 	cmpeqi	r2,r2,-1
   1275c:	1000021e 	bne	r2,zero,12768 <_fwalk_reent+0x6c>
   12760:	983ee83a 	callr	r19
   12764:	a0a8b03a 	or	r20,r20,r2
   12768:	88bfffd8 	cmpnei	r2,r17,-1
   1276c:	84001a04 	addi	r16,r16,104
   12770:	103ff21e 	bne	r2,zero,1273c <_fwalk_reent+0x40>
   12774:	94800017 	ldw	r18,0(r18)
   12778:	903fec1e 	bne	r18,zero,1272c <_fwalk_reent+0x30>
   1277c:	a005883a 	mov	r2,r20
   12780:	dfc00617 	ldw	ra,24(sp)
   12784:	dd400517 	ldw	r21,20(sp)
   12788:	dd000417 	ldw	r20,16(sp)
   1278c:	dcc00317 	ldw	r19,12(sp)
   12790:	dc800217 	ldw	r18,8(sp)
   12794:	dc400117 	ldw	r17,4(sp)
   12798:	dc000017 	ldw	r16,0(sp)
   1279c:	dec00704 	addi	sp,sp,28
   127a0:	f800283a 	ret

000127a4 <_getc_r>:
   127a4:	defffd04 	addi	sp,sp,-12
   127a8:	dc000115 	stw	r16,4(sp)
   127ac:	dfc00215 	stw	ra,8(sp)
   127b0:	2021883a 	mov	r16,r4
   127b4:	20000226 	beq	r4,zero,127c0 <_getc_r+0x1c>
   127b8:	20800e17 	ldw	r2,56(r4)
   127bc:	10000c26 	beq	r2,zero,127f0 <_getc_r+0x4c>
   127c0:	28800117 	ldw	r2,4(r5)
   127c4:	10bfffc4 	addi	r2,r2,-1
   127c8:	28800115 	stw	r2,4(r5)
   127cc:	10000f16 	blt	r2,zero,1280c <_getc_r+0x68>
   127d0:	28800017 	ldw	r2,0(r5)
   127d4:	10c00044 	addi	r3,r2,1
   127d8:	28c00015 	stw	r3,0(r5)
   127dc:	10800003 	ldbu	r2,0(r2)
   127e0:	dfc00217 	ldw	ra,8(sp)
   127e4:	dc000117 	ldw	r16,4(sp)
   127e8:	dec00304 	addi	sp,sp,12
   127ec:	f800283a 	ret
   127f0:	d9400015 	stw	r5,0(sp)
   127f4:	0011c0c0 	call	11c0c <__sinit>
   127f8:	d9400017 	ldw	r5,0(sp)
   127fc:	28800117 	ldw	r2,4(r5)
   12800:	10bfffc4 	addi	r2,r2,-1
   12804:	28800115 	stw	r2,4(r5)
   12808:	103ff10e 	bge	r2,zero,127d0 <_getc_r+0x2c>
   1280c:	8009883a 	mov	r4,r16
   12810:	dfc00217 	ldw	ra,8(sp)
   12814:	dc000117 	ldw	r16,4(sp)
   12818:	dec00304 	addi	sp,sp,12
   1281c:	00137141 	jmpi	13714 <__srget_r>

00012820 <getc>:
   12820:	defffd04 	addi	sp,sp,-12
   12824:	008000b4 	movhi	r2,2
   12828:	dc400115 	stw	r17,4(sp)
   1282c:	1462f417 	ldw	r17,-29744(r2)
   12830:	dc000015 	stw	r16,0(sp)
   12834:	dfc00215 	stw	ra,8(sp)
   12838:	2021883a 	mov	r16,r4
   1283c:	88000226 	beq	r17,zero,12848 <getc+0x28>
   12840:	88800e17 	ldw	r2,56(r17)
   12844:	10000d26 	beq	r2,zero,1287c <getc+0x5c>
   12848:	80800117 	ldw	r2,4(r16)
   1284c:	10bfffc4 	addi	r2,r2,-1
   12850:	80800115 	stw	r2,4(r16)
   12854:	10000f16 	blt	r2,zero,12894 <getc+0x74>
   12858:	80800017 	ldw	r2,0(r16)
   1285c:	10c00044 	addi	r3,r2,1
   12860:	80c00015 	stw	r3,0(r16)
   12864:	10800003 	ldbu	r2,0(r2)
   12868:	dfc00217 	ldw	ra,8(sp)
   1286c:	dc400117 	ldw	r17,4(sp)
   12870:	dc000017 	ldw	r16,0(sp)
   12874:	dec00304 	addi	sp,sp,12
   12878:	f800283a 	ret
   1287c:	8809883a 	mov	r4,r17
   12880:	0011c0c0 	call	11c0c <__sinit>
   12884:	80800117 	ldw	r2,4(r16)
   12888:	10bfffc4 	addi	r2,r2,-1
   1288c:	80800115 	stw	r2,4(r16)
   12890:	103ff10e 	bge	r2,zero,12858 <getc+0x38>
   12894:	800b883a 	mov	r5,r16
   12898:	8809883a 	mov	r4,r17
   1289c:	dfc00217 	ldw	ra,8(sp)
   128a0:	dc400117 	ldw	r17,4(sp)
   128a4:	dc000017 	ldw	r16,0(sp)
   128a8:	dec00304 	addi	sp,sp,12
   128ac:	00137141 	jmpi	13714 <__srget_r>

000128b0 <__smakebuf_r>:
   128b0:	2880030b 	ldhu	r2,12(r5)
   128b4:	deffe804 	addi	sp,sp,-96
   128b8:	dc001215 	stw	r16,72(sp)
   128bc:	dfc01715 	stw	ra,92(sp)
   128c0:	dd001615 	stw	r20,88(sp)
   128c4:	dcc01515 	stw	r19,84(sp)
   128c8:	dc801415 	stw	r18,80(sp)
   128cc:	dc401315 	stw	r17,76(sp)
   128d0:	10c0008c 	andi	r3,r2,2
   128d4:	2821883a 	mov	r16,r5
   128d8:	18000d26 	beq	r3,zero,12910 <__smakebuf_r+0x60>
   128dc:	288010c4 	addi	r2,r5,67
   128e0:	28800015 	stw	r2,0(r5)
   128e4:	28800415 	stw	r2,16(r5)
   128e8:	00800044 	movi	r2,1
   128ec:	28800515 	stw	r2,20(r5)
   128f0:	dfc01717 	ldw	ra,92(sp)
   128f4:	dd001617 	ldw	r20,88(sp)
   128f8:	dcc01517 	ldw	r19,84(sp)
   128fc:	dc801417 	ldw	r18,80(sp)
   12900:	dc401317 	ldw	r17,76(sp)
   12904:	dc001217 	ldw	r16,72(sp)
   12908:	dec01804 	addi	sp,sp,96
   1290c:	f800283a 	ret
   12910:	2940038f 	ldh	r5,14(r5)
   12914:	2023883a 	mov	r17,r4
   12918:	28002816 	blt	r5,zero,129bc <__smakebuf_r+0x10c>
   1291c:	d80d883a 	mov	r6,sp
   12920:	00126040 	call	12604 <_fstat_r>
   12924:	10002416 	blt	r2,zero,129b8 <__smakebuf_r+0x108>
   12928:	d8800117 	ldw	r2,4(sp)
   1292c:	10bc000c 	andi	r2,r2,61440
   12930:	10880018 	cmpnei	r2,r2,8192
   12934:	1000461e 	bne	r2,zero,12a50 <__smakebuf_r+0x1a0>
   12938:	8140038f 	ldh	r5,14(r16)
   1293c:	8809883a 	mov	r4,r17
   12940:	0013ba80 	call	13ba8 <_isatty_r>
   12944:	10003e26 	beq	r2,zero,12a40 <__smakebuf_r+0x190>
   12948:	8080030b 	ldhu	r2,12(r16)
   1294c:	80c010c4 	addi	r3,r16,67
   12950:	80c00015 	stw	r3,0(r16)
   12954:	10800054 	ori	r2,r2,1
   12958:	8080030d 	sth	r2,12(r16)
   1295c:	00800044 	movi	r2,1
   12960:	80c00415 	stw	r3,16(r16)
   12964:	80800515 	stw	r2,20(r16)
   12968:	04c00044 	movi	r19,1
   1296c:	05010004 	movi	r20,1024
   12970:	04820004 	movi	r18,2048
   12974:	a00b883a 	mov	r5,r20
   12978:	8809883a 	mov	r4,r17
   1297c:	0012af80 	call	12af8 <_malloc_r>
   12980:	10001726 	beq	r2,zero,129e0 <__smakebuf_r+0x130>
   12984:	80c0030b 	ldhu	r3,12(r16)
   12988:	01000074 	movhi	r4,1
   1298c:	21062c04 	addi	r4,r4,6320
   12990:	89000f15 	stw	r4,60(r17)
   12994:	18c02014 	ori	r3,r3,128
   12998:	80c0030d 	sth	r3,12(r16)
   1299c:	80800015 	stw	r2,0(r16)
   129a0:	80800415 	stw	r2,16(r16)
   129a4:	85000515 	stw	r20,20(r16)
   129a8:	98001d1e 	bne	r19,zero,12a20 <__smakebuf_r+0x170>
   129ac:	90c6b03a 	or	r3,r18,r3
   129b0:	80c0030d 	sth	r3,12(r16)
   129b4:	003fce06 	br	128f0 <__smakebuf_r+0x40>
   129b8:	8080030b 	ldhu	r2,12(r16)
   129bc:	1080200c 	andi	r2,r2,128
   129c0:	0027883a 	mov	r19,zero
   129c4:	10001326 	beq	r2,zero,12a14 <__smakebuf_r+0x164>
   129c8:	05001004 	movi	r20,64
   129cc:	a00b883a 	mov	r5,r20
   129d0:	8809883a 	mov	r4,r17
   129d4:	0025883a 	mov	r18,zero
   129d8:	0012af80 	call	12af8 <_malloc_r>
   129dc:	103fe91e 	bne	r2,zero,12984 <__smakebuf_r+0xd4>
   129e0:	8080030b 	ldhu	r2,12(r16)
   129e4:	10c0800c 	andi	r3,r2,512
   129e8:	183fc11e 	bne	r3,zero,128f0 <__smakebuf_r+0x40>
   129ec:	00ffff04 	movi	r3,-4
   129f0:	10c4703a 	and	r2,r2,r3
   129f4:	10800094 	ori	r2,r2,2
   129f8:	80c010c4 	addi	r3,r16,67
   129fc:	8080030d 	sth	r2,12(r16)
   12a00:	00800044 	movi	r2,1
   12a04:	80c00015 	stw	r3,0(r16)
   12a08:	80c00415 	stw	r3,16(r16)
   12a0c:	80800515 	stw	r2,20(r16)
   12a10:	003fb706 	br	128f0 <__smakebuf_r+0x40>
   12a14:	05010004 	movi	r20,1024
   12a18:	0025883a 	mov	r18,zero
   12a1c:	003fd506 	br	12974 <__smakebuf_r+0xc4>
   12a20:	8140038f 	ldh	r5,14(r16)
   12a24:	8809883a 	mov	r4,r17
   12a28:	0013ba80 	call	13ba8 <_isatty_r>
   12a2c:	80c0030b 	ldhu	r3,12(r16)
   12a30:	103fde26 	beq	r2,zero,129ac <__smakebuf_r+0xfc>
   12a34:	18ffff0c 	andi	r3,r3,65532
   12a38:	18c00054 	ori	r3,r3,1
   12a3c:	003fdb06 	br	129ac <__smakebuf_r+0xfc>
   12a40:	04c00044 	movi	r19,1
   12a44:	05010004 	movi	r20,1024
   12a48:	04820004 	movi	r18,2048
   12a4c:	003fc906 	br	12974 <__smakebuf_r+0xc4>
   12a50:	0027883a 	mov	r19,zero
   12a54:	05010004 	movi	r20,1024
   12a58:	04820004 	movi	r18,2048
   12a5c:	003fc506 	br	12974 <__smakebuf_r+0xc4>

00012a60 <__swhatbuf_r>:
   12a60:	deffea04 	addi	sp,sp,-88
   12a64:	dc001215 	stw	r16,72(sp)
   12a68:	2821883a 	mov	r16,r5
   12a6c:	2940038f 	ldh	r5,14(r5)
   12a70:	dc801415 	stw	r18,80(sp)
   12a74:	dc401315 	stw	r17,76(sp)
   12a78:	dfc01515 	stw	ra,84(sp)
   12a7c:	3023883a 	mov	r17,r6
   12a80:	3825883a 	mov	r18,r7
   12a84:	28001016 	blt	r5,zero,12ac8 <__swhatbuf_r+0x68>
   12a88:	d80d883a 	mov	r6,sp
   12a8c:	00126040 	call	12604 <_fstat_r>
   12a90:	10000d16 	blt	r2,zero,12ac8 <__swhatbuf_r+0x68>
   12a94:	d8c00117 	ldw	r3,4(sp)
   12a98:	00820004 	movi	r2,2048
   12a9c:	18fc000c 	andi	r3,r3,61440
   12aa0:	18c80020 	cmpeqi	r3,r3,8192
   12aa4:	90c00015 	stw	r3,0(r18)
   12aa8:	00c10004 	movi	r3,1024
   12aac:	88c00015 	stw	r3,0(r17)
   12ab0:	dfc01517 	ldw	ra,84(sp)
   12ab4:	dc801417 	ldw	r18,80(sp)
   12ab8:	dc401317 	ldw	r17,76(sp)
   12abc:	dc001217 	ldw	r16,72(sp)
   12ac0:	dec01604 	addi	sp,sp,88
   12ac4:	f800283a 	ret
   12ac8:	8080030b 	ldhu	r2,12(r16)
   12acc:	90000015 	stw	zero,0(r18)
   12ad0:	1080200c 	andi	r2,r2,128
   12ad4:	10000426 	beq	r2,zero,12ae8 <__swhatbuf_r+0x88>
   12ad8:	00801004 	movi	r2,64
   12adc:	88800015 	stw	r2,0(r17)
   12ae0:	0005883a 	mov	r2,zero
   12ae4:	003ff206 	br	12ab0 <__swhatbuf_r+0x50>
   12ae8:	00810004 	movi	r2,1024
   12aec:	88800015 	stw	r2,0(r17)
   12af0:	0005883a 	mov	r2,zero
   12af4:	003fee06 	br	12ab0 <__swhatbuf_r+0x50>

00012af8 <_malloc_r>:
   12af8:	defff604 	addi	sp,sp,-40
   12afc:	dc400115 	stw	r17,4(sp)
   12b00:	2c4002c4 	addi	r17,r5,11
   12b04:	dc800215 	stw	r18,8(sp)
   12b08:	dfc00915 	stw	ra,36(sp)
   12b0c:	df000815 	stw	fp,32(sp)
   12b10:	ddc00715 	stw	r23,28(sp)
   12b14:	dd800615 	stw	r22,24(sp)
   12b18:	dd400515 	stw	r21,20(sp)
   12b1c:	dd000415 	stw	r20,16(sp)
   12b20:	dcc00315 	stw	r19,12(sp)
   12b24:	dc000015 	stw	r16,0(sp)
   12b28:	888005e8 	cmpgeui	r2,r17,23
   12b2c:	2025883a 	mov	r18,r4
   12b30:	10001b1e 	bne	r2,zero,12ba0 <_malloc_r+0xa8>
   12b34:	29400468 	cmpgeui	r5,r5,17
   12b38:	2800821e 	bne	r5,zero,12d44 <_malloc_r+0x24c>
   12b3c:	00143f40 	call	143f4 <__malloc_lock>
   12b40:	04400404 	movi	r17,16
   12b44:	00800604 	movi	r2,24
   12b48:	01c00084 	movi	r7,2
   12b4c:	04c00074 	movhi	r19,1
   12b50:	9cdd6404 	addi	r19,r19,30096
   12b54:	9885883a 	add	r2,r19,r2
   12b58:	14000117 	ldw	r16,4(r2)
   12b5c:	10fffe04 	addi	r3,r2,-8
   12b60:	80c08b26 	beq	r16,r3,12d90 <_malloc_r+0x298>
   12b64:	80800117 	ldw	r2,4(r16)
   12b68:	81000317 	ldw	r4,12(r16)
   12b6c:	00ffff04 	movi	r3,-4
   12b70:	10c4703a 	and	r2,r2,r3
   12b74:	81400217 	ldw	r5,8(r16)
   12b78:	8085883a 	add	r2,r16,r2
   12b7c:	10c00117 	ldw	r3,4(r2)
   12b80:	29000315 	stw	r4,12(r5)
   12b84:	21400215 	stw	r5,8(r4)
   12b88:	18c00054 	ori	r3,r3,1
   12b8c:	10c00115 	stw	r3,4(r2)
   12b90:	9009883a 	mov	r4,r18
   12b94:	00144180 	call	14418 <__malloc_unlock>
   12b98:	80800204 	addi	r2,r16,8
   12b9c:	00006c06 	br	12d50 <_malloc_r+0x258>
   12ba0:	00bffe04 	movi	r2,-8
   12ba4:	88a2703a 	and	r17,r17,r2
   12ba8:	88006616 	blt	r17,zero,12d44 <_malloc_r+0x24c>
   12bac:	89406536 	bltu	r17,r5,12d44 <_malloc_r+0x24c>
   12bb0:	00143f40 	call	143f4 <__malloc_lock>
   12bb4:	88807e28 	cmpgeui	r2,r17,504
   12bb8:	10012226 	beq	r2,zero,13044 <_malloc_r+0x54c>
   12bbc:	8804d27a 	srli	r2,r17,9
   12bc0:	10006f26 	beq	r2,zero,12d80 <_malloc_r+0x288>
   12bc4:	10c00168 	cmpgeui	r3,r2,5
   12bc8:	1800fe1e 	bne	r3,zero,12fc4 <_malloc_r+0x4cc>
   12bcc:	8804d1ba 	srli	r2,r17,6
   12bd0:	11c00e44 	addi	r7,r2,57
   12bd4:	380890fa 	slli	r4,r7,3
   12bd8:	12000e04 	addi	r8,r2,56
   12bdc:	04c00074 	movhi	r19,1
   12be0:	9cdd6404 	addi	r19,r19,30096
   12be4:	9909883a 	add	r4,r19,r4
   12be8:	24000117 	ldw	r16,4(r4)
   12bec:	213ffe04 	addi	r4,r4,-8
   12bf0:	24000b26 	beq	r4,r16,12c20 <_malloc_r+0x128>
   12bf4:	01bfff04 	movi	r6,-4
   12bf8:	00000306 	br	12c08 <_malloc_r+0x110>
   12bfc:	1800d60e 	bge	r3,zero,12f58 <_malloc_r+0x460>
   12c00:	84000317 	ldw	r16,12(r16)
   12c04:	24000626 	beq	r4,r16,12c20 <_malloc_r+0x128>
   12c08:	80800117 	ldw	r2,4(r16)
   12c0c:	1184703a 	and	r2,r2,r6
   12c10:	1447c83a 	sub	r3,r2,r17
   12c14:	19400408 	cmpgei	r5,r3,16
   12c18:	283ff826 	beq	r5,zero,12bfc <_malloc_r+0x104>
   12c1c:	400f883a 	mov	r7,r8
   12c20:	9c000417 	ldw	r16,16(r19)
   12c24:	02400074 	movhi	r9,1
   12c28:	4a5d6604 	addi	r9,r9,30104
   12c2c:	82405f26 	beq	r16,r9,12dac <_malloc_r+0x2b4>
   12c30:	80c00117 	ldw	r3,4(r16)
   12c34:	00bfff04 	movi	r2,-4
   12c38:	1884703a 	and	r2,r3,r2
   12c3c:	1447c83a 	sub	r3,r2,r17
   12c40:	19000410 	cmplti	r4,r3,16
   12c44:	20010a26 	beq	r4,zero,13070 <_malloc_r+0x578>
   12c48:	9a400515 	stw	r9,20(r19)
   12c4c:	9a400415 	stw	r9,16(r19)
   12c50:	1800ff0e 	bge	r3,zero,13050 <_malloc_r+0x558>
   12c54:	10c08028 	cmpgeui	r3,r2,512
   12c58:	1800c11e 	bne	r3,zero,12f60 <_malloc_r+0x468>
   12c5c:	1006d0fa 	srli	r3,r2,3
   12c60:	1008d17a 	srli	r4,r2,5
   12c64:	00800044 	movi	r2,1
   12c68:	18c00044 	addi	r3,r3,1
   12c6c:	180690fa 	slli	r3,r3,3
   12c70:	99400117 	ldw	r5,4(r19)
   12c74:	1104983a 	sll	r2,r2,r4
   12c78:	98c7883a 	add	r3,r19,r3
   12c7c:	19000017 	ldw	r4,0(r3)
   12c80:	1144b03a 	or	r2,r2,r5
   12c84:	197ffe04 	addi	r5,r3,-8
   12c88:	81400315 	stw	r5,12(r16)
   12c8c:	81000215 	stw	r4,8(r16)
   12c90:	98800115 	stw	r2,4(r19)
   12c94:	1c000015 	stw	r16,0(r3)
   12c98:	24000315 	stw	r16,12(r4)
   12c9c:	3807d0ba 	srai	r3,r7,2
   12ca0:	01000044 	movi	r4,1
   12ca4:	20c8983a 	sll	r4,r4,r3
   12ca8:	11004536 	bltu	r2,r4,12dc0 <_malloc_r+0x2c8>
   12cac:	2086703a 	and	r3,r4,r2
   12cb0:	18000a1e 	bne	r3,zero,12cdc <_malloc_r+0x1e4>
   12cb4:	00ffff04 	movi	r3,-4
   12cb8:	2109883a 	add	r4,r4,r4
   12cbc:	38ce703a 	and	r7,r7,r3
   12cc0:	2086703a 	and	r3,r4,r2
   12cc4:	39c00104 	addi	r7,r7,4
   12cc8:	1800041e 	bne	r3,zero,12cdc <_malloc_r+0x1e4>
   12ccc:	2109883a 	add	r4,r4,r4
   12cd0:	2086703a 	and	r3,r4,r2
   12cd4:	39c00104 	addi	r7,r7,4
   12cd8:	183ffc26 	beq	r3,zero,12ccc <_malloc_r+0x1d4>
   12cdc:	02bfff04 	movi	r10,-4
   12ce0:	381690fa 	slli	r11,r7,3
   12ce4:	3819883a 	mov	r12,r7
   12ce8:	9ad7883a 	add	r11,r19,r11
   12cec:	5811883a 	mov	r8,r11
   12cf0:	40800317 	ldw	r2,12(r8)
   12cf4:	4080bc26 	beq	r8,r2,12fe8 <_malloc_r+0x4f0>
   12cf8:	10c00117 	ldw	r3,4(r2)
   12cfc:	1021883a 	mov	r16,r2
   12d00:	10800317 	ldw	r2,12(r2)
   12d04:	1a86703a 	and	r3,r3,r10
   12d08:	1c4bc83a 	sub	r5,r3,r17
   12d0c:	29800410 	cmplti	r6,r5,16
   12d10:	3000ba26 	beq	r6,zero,12ffc <_malloc_r+0x504>
   12d14:	283ff716 	blt	r5,zero,12cf4 <_malloc_r+0x1fc>
   12d18:	80c7883a 	add	r3,r16,r3
   12d1c:	19400117 	ldw	r5,4(r3)
   12d20:	81800217 	ldw	r6,8(r16)
   12d24:	9009883a 	mov	r4,r18
   12d28:	29400054 	ori	r5,r5,1
   12d2c:	19400115 	stw	r5,4(r3)
   12d30:	30800315 	stw	r2,12(r6)
   12d34:	11800215 	stw	r6,8(r2)
   12d38:	00144180 	call	14418 <__malloc_unlock>
   12d3c:	80800204 	addi	r2,r16,8
   12d40:	00000306 	br	12d50 <_malloc_r+0x258>
   12d44:	00800304 	movi	r2,12
   12d48:	90800015 	stw	r2,0(r18)
   12d4c:	0005883a 	mov	r2,zero
   12d50:	dfc00917 	ldw	ra,36(sp)
   12d54:	df000817 	ldw	fp,32(sp)
   12d58:	ddc00717 	ldw	r23,28(sp)
   12d5c:	dd800617 	ldw	r22,24(sp)
   12d60:	dd400517 	ldw	r21,20(sp)
   12d64:	dd000417 	ldw	r20,16(sp)
   12d68:	dcc00317 	ldw	r19,12(sp)
   12d6c:	dc800217 	ldw	r18,8(sp)
   12d70:	dc400117 	ldw	r17,4(sp)
   12d74:	dc000017 	ldw	r16,0(sp)
   12d78:	dec00a04 	addi	sp,sp,40
   12d7c:	f800283a 	ret
   12d80:	01008004 	movi	r4,512
   12d84:	01c01004 	movi	r7,64
   12d88:	02000fc4 	movi	r8,63
   12d8c:	003f9306 	br	12bdc <_malloc_r+0xe4>
   12d90:	14000317 	ldw	r16,12(r2)
   12d94:	39c00084 	addi	r7,r7,2
   12d98:	143f721e 	bne	r2,r16,12b64 <_malloc_r+0x6c>
   12d9c:	9c000417 	ldw	r16,16(r19)
   12da0:	02400074 	movhi	r9,1
   12da4:	4a5d6604 	addi	r9,r9,30104
   12da8:	827fa11e 	bne	r16,r9,12c30 <_malloc_r+0x138>
   12dac:	3807d0ba 	srai	r3,r7,2
   12db0:	01000044 	movi	r4,1
   12db4:	98800117 	ldw	r2,4(r19)
   12db8:	20c8983a 	sll	r4,r4,r3
   12dbc:	113fbb2e 	bgeu	r2,r4,12cac <_malloc_r+0x1b4>
   12dc0:	9c000217 	ldw	r16,8(r19)
   12dc4:	00bfff04 	movi	r2,-4
   12dc8:	85400117 	ldw	r21,4(r16)
   12dcc:	a8ac703a 	and	r22,r21,r2
   12dd0:	b4400336 	bltu	r22,r17,12de0 <_malloc_r+0x2e8>
   12dd4:	b445c83a 	sub	r2,r22,r17
   12dd8:	10c00408 	cmpgei	r3,r2,16
   12ddc:	1800541e 	bne	r3,zero,12f30 <_malloc_r+0x438>
   12de0:	008000b4 	movhi	r2,2
   12de4:	10a2f517 	ldw	r2,-29740(r2)
   12de8:	00c000b4 	movhi	r3,2
   12dec:	1d69cc17 	ldw	r21,-22736(r3)
   12df0:	10bfffd8 	cmpnei	r2,r2,-1
   12df4:	85b9883a 	add	fp,r16,r22
   12df8:	8d6b883a 	add	r21,r17,r21
   12dfc:	1000d626 	beq	r2,zero,13158 <_malloc_r+0x660>
   12e00:	ad4403c4 	addi	r21,r21,4111
   12e04:	00bc0004 	movi	r2,-4096
   12e08:	a8aa703a 	and	r21,r21,r2
   12e0c:	a80b883a 	mov	r5,r21
   12e10:	9009883a 	mov	r4,r18
   12e14:	00138040 	call	13804 <_sbrk_r>
   12e18:	102f883a 	mov	r23,r2
   12e1c:	10bfffd8 	cmpnei	r2,r2,-1
   12e20:	1000a826 	beq	r2,zero,130c4 <_malloc_r+0x5cc>
   12e24:	bf00a636 	bltu	r23,fp,130c0 <_malloc_r+0x5c8>
   12e28:	008000b4 	movhi	r2,2
   12e2c:	152a4e17 	ldw	r20,-22216(r2)
   12e30:	ad29883a 	add	r20,r21,r20
   12e34:	152a4e15 	stw	r20,-22216(r2)
   12e38:	a007883a 	mov	r3,r20
   12e3c:	e5c0ec26 	beq	fp,r23,131f0 <_malloc_r+0x6f8>
   12e40:	008000b4 	movhi	r2,2
   12e44:	10a2f517 	ldw	r2,-29740(r2)
   12e48:	10bfffd8 	cmpnei	r2,r2,-1
   12e4c:	1000ef26 	beq	r2,zero,1320c <_malloc_r+0x714>
   12e50:	bf39c83a 	sub	fp,r23,fp
   12e54:	e0c7883a 	add	r3,fp,r3
   12e58:	008000b4 	movhi	r2,2
   12e5c:	10ea4e15 	stw	r3,-22216(r2)
   12e60:	bf0001cc 	andi	fp,r23,7
   12e64:	e000c526 	beq	fp,zero,1317c <_malloc_r+0x684>
   12e68:	bf2fc83a 	sub	r23,r23,fp
   12e6c:	bdc00204 	addi	r23,r23,8
   12e70:	05040204 	movi	r20,4104
   12e74:	a729c83a 	sub	r20,r20,fp
   12e78:	bd6b883a 	add	r21,r23,r21
   12e7c:	a569c83a 	sub	r20,r20,r21
   12e80:	a503ffcc 	andi	r20,r20,4095
   12e84:	a00b883a 	mov	r5,r20
   12e88:	9009883a 	mov	r4,r18
   12e8c:	00138040 	call	13804 <_sbrk_r>
   12e90:	10ffffe0 	cmpeqi	r3,r2,-1
   12e94:	1800f31e 	bne	r3,zero,13264 <_malloc_r+0x76c>
   12e98:	15c5c83a 	sub	r2,r2,r23
   12e9c:	152b883a 	add	r21,r2,r20
   12ea0:	008000b4 	movhi	r2,2
   12ea4:	116a4e17 	ldw	r5,-22216(r2)
   12ea8:	9dc00215 	stw	r23,8(r19)
   12eac:	ad400054 	ori	r21,r21,1
   12eb0:	a169883a 	add	r20,r20,r5
   12eb4:	152a4e15 	stw	r20,-22216(r2)
   12eb8:	bd400115 	stw	r21,4(r23)
   12ebc:	84c0d626 	beq	r16,r19,13218 <_malloc_r+0x720>
   12ec0:	b0800428 	cmpgeui	r2,r22,16
   12ec4:	1000d626 	beq	r2,zero,13220 <_malloc_r+0x728>
   12ec8:	80c00117 	ldw	r3,4(r16)
   12ecc:	013ffe04 	movi	r4,-8
   12ed0:	b0bffd04 	addi	r2,r22,-12
   12ed4:	1104703a 	and	r2,r2,r4
   12ed8:	18c0004c 	andi	r3,r3,1
   12edc:	1886b03a 	or	r3,r3,r2
   12ee0:	80c00115 	stw	r3,4(r16)
   12ee4:	01000144 	movi	r4,5
   12ee8:	8087883a 	add	r3,r16,r2
   12eec:	19000115 	stw	r4,4(r3)
   12ef0:	19000215 	stw	r4,8(r3)
   12ef4:	10800428 	cmpgeui	r2,r2,16
   12ef8:	1000df1e 	bne	r2,zero,13278 <_malloc_r+0x780>
   12efc:	bd400117 	ldw	r21,4(r23)
   12f00:	b821883a 	mov	r16,r23
   12f04:	008000b4 	movhi	r2,2
   12f08:	10a9cb17 	ldw	r2,-22740(r2)
   12f0c:	1500022e 	bgeu	r2,r20,12f18 <_malloc_r+0x420>
   12f10:	008000b4 	movhi	r2,2
   12f14:	1529cb15 	stw	r20,-22740(r2)
   12f18:	008000b4 	movhi	r2,2
   12f1c:	10a9ca17 	ldw	r2,-22744(r2)
   12f20:	15006a2e 	bgeu	r2,r20,130cc <_malloc_r+0x5d4>
   12f24:	008000b4 	movhi	r2,2
   12f28:	1529ca15 	stw	r20,-22744(r2)
   12f2c:	00006706 	br	130cc <_malloc_r+0x5d4>
   12f30:	88c00054 	ori	r3,r17,1
   12f34:	80c00115 	stw	r3,4(r16)
   12f38:	8463883a 	add	r17,r16,r17
   12f3c:	10800054 	ori	r2,r2,1
   12f40:	9c400215 	stw	r17,8(r19)
   12f44:	88800115 	stw	r2,4(r17)
   12f48:	9009883a 	mov	r4,r18
   12f4c:	00144180 	call	14418 <__malloc_unlock>
   12f50:	80800204 	addi	r2,r16,8
   12f54:	003f7e06 	br	12d50 <_malloc_r+0x258>
   12f58:	81000317 	ldw	r4,12(r16)
   12f5c:	003f0506 	br	12b74 <_malloc_r+0x7c>
   12f60:	1006d27a 	srli	r3,r2,9
   12f64:	19000168 	cmpgeui	r4,r3,5
   12f68:	20005026 	beq	r4,zero,130ac <_malloc_r+0x5b4>
   12f6c:	19000568 	cmpgeui	r4,r3,21
   12f70:	20008c1e 	bne	r4,zero,131a4 <_malloc_r+0x6ac>
   12f74:	19401704 	addi	r5,r3,92
   12f78:	280a90fa 	slli	r5,r5,3
   12f7c:	190016c4 	addi	r4,r3,91
   12f80:	994b883a 	add	r5,r19,r5
   12f84:	28c00017 	ldw	r3,0(r5)
   12f88:	297ffe04 	addi	r5,r5,-8
   12f8c:	28c07426 	beq	r5,r3,13160 <_malloc_r+0x668>
   12f90:	01bfff04 	movi	r6,-4
   12f94:	19000117 	ldw	r4,4(r3)
   12f98:	2188703a 	and	r4,r4,r6
   12f9c:	1100022e 	bgeu	r2,r4,12fa8 <_malloc_r+0x4b0>
   12fa0:	18c00217 	ldw	r3,8(r3)
   12fa4:	28fffb1e 	bne	r5,r3,12f94 <_malloc_r+0x49c>
   12fa8:	19400317 	ldw	r5,12(r3)
   12fac:	98800117 	ldw	r2,4(r19)
   12fb0:	81400315 	stw	r5,12(r16)
   12fb4:	80c00215 	stw	r3,8(r16)
   12fb8:	2c000215 	stw	r16,8(r5)
   12fbc:	1c000315 	stw	r16,12(r3)
   12fc0:	003f3606 	br	12c9c <_malloc_r+0x1a4>
   12fc4:	10c00568 	cmpgeui	r3,r2,21
   12fc8:	18004a26 	beq	r3,zero,130f4 <_malloc_r+0x5fc>
   12fcc:	10c01568 	cmpgeui	r3,r2,85
   12fd0:	18007b1e 	bne	r3,zero,131c0 <_malloc_r+0x6c8>
   12fd4:	8804d33a 	srli	r2,r17,12
   12fd8:	11c01bc4 	addi	r7,r2,111
   12fdc:	380890fa 	slli	r4,r7,3
   12fe0:	12001b84 	addi	r8,r2,110
   12fe4:	003efd06 	br	12bdc <_malloc_r+0xe4>
   12fe8:	63000044 	addi	r12,r12,1
   12fec:	608000cc 	andi	r2,r12,3
   12ff0:	42000204 	addi	r8,r8,8
   12ff4:	103f3e1e 	bne	r2,zero,12cf0 <_malloc_r+0x1f8>
   12ff8:	00004506 	br	13110 <_malloc_r+0x618>
   12ffc:	81000217 	ldw	r4,8(r16)
   13000:	89800054 	ori	r6,r17,1
   13004:	81800115 	stw	r6,4(r16)
   13008:	20800315 	stw	r2,12(r4)
   1300c:	11000215 	stw	r4,8(r2)
   13010:	8463883a 	add	r17,r16,r17
   13014:	9c400515 	stw	r17,20(r19)
   13018:	9c400415 	stw	r17,16(r19)
   1301c:	28800054 	ori	r2,r5,1
   13020:	88800115 	stw	r2,4(r17)
   13024:	8a400315 	stw	r9,12(r17)
   13028:	8a400215 	stw	r9,8(r17)
   1302c:	80c7883a 	add	r3,r16,r3
   13030:	19400015 	stw	r5,0(r3)
   13034:	9009883a 	mov	r4,r18
   13038:	00144180 	call	14418 <__malloc_unlock>
   1303c:	80800204 	addi	r2,r16,8
   13040:	003f4306 	br	12d50 <_malloc_r+0x258>
   13044:	880ed0fa 	srli	r7,r17,3
   13048:	88800204 	addi	r2,r17,8
   1304c:	003ebf06 	br	12b4c <_malloc_r+0x54>
   13050:	8085883a 	add	r2,r16,r2
   13054:	10c00117 	ldw	r3,4(r2)
   13058:	9009883a 	mov	r4,r18
   1305c:	18c00054 	ori	r3,r3,1
   13060:	10c00115 	stw	r3,4(r2)
   13064:	00144180 	call	14418 <__malloc_unlock>
   13068:	80800204 	addi	r2,r16,8
   1306c:	003f3806 	br	12d50 <_malloc_r+0x258>
   13070:	89000054 	ori	r4,r17,1
   13074:	81000115 	stw	r4,4(r16)
   13078:	8463883a 	add	r17,r16,r17
   1307c:	9c400515 	stw	r17,20(r19)
   13080:	9c400415 	stw	r17,16(r19)
   13084:	19000054 	ori	r4,r3,1
   13088:	89000115 	stw	r4,4(r17)
   1308c:	8085883a 	add	r2,r16,r2
   13090:	8a400315 	stw	r9,12(r17)
   13094:	8a400215 	stw	r9,8(r17)
   13098:	10c00015 	stw	r3,0(r2)
   1309c:	9009883a 	mov	r4,r18
   130a0:	00144180 	call	14418 <__malloc_unlock>
   130a4:	80800204 	addi	r2,r16,8
   130a8:	003f2906 	br	12d50 <_malloc_r+0x258>
   130ac:	1006d1ba 	srli	r3,r2,6
   130b0:	19400e44 	addi	r5,r3,57
   130b4:	280a90fa 	slli	r5,r5,3
   130b8:	19000e04 	addi	r4,r3,56
   130bc:	003fb006 	br	12f80 <_malloc_r+0x488>
   130c0:	84c04626 	beq	r16,r19,131dc <_malloc_r+0x6e4>
   130c4:	9c000217 	ldw	r16,8(r19)
   130c8:	85400117 	ldw	r21,4(r16)
   130cc:	00bfff04 	movi	r2,-4
   130d0:	a8aa703a 	and	r21,r21,r2
   130d4:	ac45c83a 	sub	r2,r21,r17
   130d8:	ac400236 	bltu	r21,r17,130e4 <_malloc_r+0x5ec>
   130dc:	10c00408 	cmpgei	r3,r2,16
   130e0:	183f931e 	bne	r3,zero,12f30 <_malloc_r+0x438>
   130e4:	9009883a 	mov	r4,r18
   130e8:	00144180 	call	14418 <__malloc_unlock>
   130ec:	0005883a 	mov	r2,zero
   130f0:	003f1706 	br	12d50 <_malloc_r+0x258>
   130f4:	11c01704 	addi	r7,r2,92
   130f8:	380890fa 	slli	r4,r7,3
   130fc:	120016c4 	addi	r8,r2,91
   13100:	003eb606 	br	12bdc <_malloc_r+0xe4>
   13104:	58800217 	ldw	r2,8(r11)
   13108:	39ffffc4 	addi	r7,r7,-1
   1310c:	12c0701e 	bne	r2,r11,132d0 <_malloc_r+0x7d8>
   13110:	388000cc 	andi	r2,r7,3
   13114:	5afffe04 	addi	r11,r11,-8
   13118:	103ffa1e 	bne	r2,zero,13104 <_malloc_r+0x60c>
   1311c:	98c00117 	ldw	r3,4(r19)
   13120:	0104303a 	nor	r2,zero,r4
   13124:	10c4703a 	and	r2,r2,r3
   13128:	98800115 	stw	r2,4(r19)
   1312c:	2109883a 	add	r4,r4,r4
   13130:	113f2336 	bltu	r2,r4,12dc0 <_malloc_r+0x2c8>
   13134:	203f2226 	beq	r4,zero,12dc0 <_malloc_r+0x2c8>
   13138:	2086703a 	and	r3,r4,r2
   1313c:	1800041e 	bne	r3,zero,13150 <_malloc_r+0x658>
   13140:	2109883a 	add	r4,r4,r4
   13144:	2086703a 	and	r3,r4,r2
   13148:	63000104 	addi	r12,r12,4
   1314c:	183ffc26 	beq	r3,zero,13140 <_malloc_r+0x648>
   13150:	600f883a 	mov	r7,r12
   13154:	003ee206 	br	12ce0 <_malloc_r+0x1e8>
   13158:	ad400404 	addi	r21,r21,16
   1315c:	003f2b06 	br	12e0c <_malloc_r+0x314>
   13160:	2009d0ba 	srai	r4,r4,2
   13164:	00800044 	movi	r2,1
   13168:	99800117 	ldw	r6,4(r19)
   1316c:	1104983a 	sll	r2,r2,r4
   13170:	1184b03a 	or	r2,r2,r6
   13174:	98800115 	stw	r2,4(r19)
   13178:	003f8d06 	br	12fb0 <_malloc_r+0x4b8>
   1317c:	bd69883a 	add	r20,r23,r21
   13180:	0529c83a 	sub	r20,zero,r20
   13184:	a503ffcc 	andi	r20,r20,4095
   13188:	a00b883a 	mov	r5,r20
   1318c:	9009883a 	mov	r4,r18
   13190:	00138040 	call	13804 <_sbrk_r>
   13194:	10ffffe0 	cmpeqi	r3,r2,-1
   13198:	183f3f26 	beq	r3,zero,12e98 <_malloc_r+0x3a0>
   1319c:	0029883a 	mov	r20,zero
   131a0:	003f3f06 	br	12ea0 <_malloc_r+0x3a8>
   131a4:	19001568 	cmpgeui	r4,r3,85
   131a8:	2000201e 	bne	r4,zero,1322c <_malloc_r+0x734>
   131ac:	1006d33a 	srli	r3,r2,12
   131b0:	19401bc4 	addi	r5,r3,111
   131b4:	280a90fa 	slli	r5,r5,3
   131b8:	19001b84 	addi	r4,r3,110
   131bc:	003f7006 	br	12f80 <_malloc_r+0x488>
   131c0:	10c05568 	cmpgeui	r3,r2,341
   131c4:	1800201e 	bne	r3,zero,13248 <_malloc_r+0x750>
   131c8:	8804d3fa 	srli	r2,r17,15
   131cc:	11c01e04 	addi	r7,r2,120
   131d0:	380890fa 	slli	r4,r7,3
   131d4:	12001dc4 	addi	r8,r2,119
   131d8:	003e8006 	br	12bdc <_malloc_r+0xe4>
   131dc:	008000b4 	movhi	r2,2
   131e0:	10ea4e17 	ldw	r3,-22216(r2)
   131e4:	a8c7883a 	add	r3,r21,r3
   131e8:	10ea4e15 	stw	r3,-22216(r2)
   131ec:	003f1406 	br	12e40 <_malloc_r+0x348>
   131f0:	e083ffcc 	andi	r2,fp,4095
   131f4:	103f121e 	bne	r2,zero,12e40 <_malloc_r+0x348>
   131f8:	9c000217 	ldw	r16,8(r19)
   131fc:	b56b883a 	add	r21,r22,r21
   13200:	ad400054 	ori	r21,r21,1
   13204:	85400115 	stw	r21,4(r16)
   13208:	003f3e06 	br	12f04 <_malloc_r+0x40c>
   1320c:	008000b4 	movhi	r2,2
   13210:	15e2f515 	stw	r23,-29740(r2)
   13214:	003f1206 	br	12e60 <_malloc_r+0x368>
   13218:	b821883a 	mov	r16,r23
   1321c:	003f3906 	br	12f04 <_malloc_r+0x40c>
   13220:	00800044 	movi	r2,1
   13224:	b8800115 	stw	r2,4(r23)
   13228:	003fae06 	br	130e4 <_malloc_r+0x5ec>
   1322c:	19005568 	cmpgeui	r4,r3,341
   13230:	2000191e 	bne	r4,zero,13298 <_malloc_r+0x7a0>
   13234:	1006d3fa 	srli	r3,r2,15
   13238:	19401e04 	addi	r5,r3,120
   1323c:	280a90fa 	slli	r5,r5,3
   13240:	19001dc4 	addi	r4,r3,119
   13244:	003f4e06 	br	12f80 <_malloc_r+0x488>
   13248:	10815568 	cmpgeui	r2,r2,1365
   1324c:	1000191e 	bne	r2,zero,132b4 <_malloc_r+0x7bc>
   13250:	8804d4ba 	srli	r2,r17,18
   13254:	11c01f44 	addi	r7,r2,125
   13258:	380890fa 	slli	r4,r7,3
   1325c:	12001f04 	addi	r8,r2,124
   13260:	003e5e06 	br	12bdc <_malloc_r+0xe4>
   13264:	e73ffe04 	addi	fp,fp,-8
   13268:	af2b883a 	add	r21,r21,fp
   1326c:	adebc83a 	sub	r21,r21,r23
   13270:	0029883a 	mov	r20,zero
   13274:	003f0a06 	br	12ea0 <_malloc_r+0x3a8>
   13278:	81400204 	addi	r5,r16,8
   1327c:	9009883a 	mov	r4,r18
   13280:	0011e780 	call	11e78 <_free_r>
   13284:	9c000217 	ldw	r16,8(r19)
   13288:	008000b4 	movhi	r2,2
   1328c:	152a4e17 	ldw	r20,-22216(r2)
   13290:	85400117 	ldw	r21,4(r16)
   13294:	003f1b06 	br	12f04 <_malloc_r+0x40c>
   13298:	18c15568 	cmpgeui	r3,r3,1365
   1329c:	1800091e 	bne	r3,zero,132c4 <_malloc_r+0x7cc>
   132a0:	1006d4ba 	srli	r3,r2,18
   132a4:	19401f44 	addi	r5,r3,125
   132a8:	280a90fa 	slli	r5,r5,3
   132ac:	19001f04 	addi	r4,r3,124
   132b0:	003f3306 	br	12f80 <_malloc_r+0x488>
   132b4:	0100fe04 	movi	r4,1016
   132b8:	01c01fc4 	movi	r7,127
   132bc:	02001f84 	movi	r8,126
   132c0:	003e4606 	br	12bdc <_malloc_r+0xe4>
   132c4:	0140fe04 	movi	r5,1016
   132c8:	01001f84 	movi	r4,126
   132cc:	003f2c06 	br	12f80 <_malloc_r+0x488>
   132d0:	98800117 	ldw	r2,4(r19)
   132d4:	003f9506 	br	1312c <_malloc_r+0x634>

000132d8 <memcpy>:
   132d8:	30c00430 	cmpltui	r3,r6,16
   132dc:	2005883a 	mov	r2,r4
   132e0:	18002d1e 	bne	r3,zero,13398 <memcpy+0xc0>
   132e4:	2906b03a 	or	r3,r5,r4
   132e8:	18c000cc 	andi	r3,r3,3
   132ec:	1800351e 	bne	r3,zero,133c4 <memcpy+0xec>
   132f0:	32fffc04 	addi	r11,r6,-16
   132f4:	5816d13a 	srli	r11,r11,4
   132f8:	280f883a 	mov	r7,r5
   132fc:	2007883a 	mov	r3,r4
   13300:	5ac00044 	addi	r11,r11,1
   13304:	5816913a 	slli	r11,r11,4
   13308:	22d5883a 	add	r10,r4,r11
   1330c:	39000117 	ldw	r4,4(r7)
   13310:	3a400017 	ldw	r9,0(r7)
   13314:	3a000217 	ldw	r8,8(r7)
   13318:	19000115 	stw	r4,4(r3)
   1331c:	39000317 	ldw	r4,12(r7)
   13320:	1a400015 	stw	r9,0(r3)
   13324:	1a000215 	stw	r8,8(r3)
   13328:	19000315 	stw	r4,12(r3)
   1332c:	18c00404 	addi	r3,r3,16
   13330:	39c00404 	addi	r7,r7,16
   13334:	50fff51e 	bne	r10,r3,1330c <memcpy+0x34>
   13338:	3100030c 	andi	r4,r6,12
   1333c:	2acb883a 	add	r5,r5,r11
   13340:	320003cc 	andi	r8,r6,15
   13344:	20002226 	beq	r4,zero,133d0 <memcpy+0xf8>
   13348:	280f883a 	mov	r7,r5
   1334c:	1813883a 	mov	r9,r3
   13350:	39c00104 	addi	r7,r7,4
   13354:	3abfff17 	ldw	r10,-4(r7)
   13358:	41c9c83a 	sub	r4,r8,r7
   1335c:	2909883a 	add	r4,r5,r4
   13360:	4a800015 	stw	r10,0(r9)
   13364:	21000128 	cmpgeui	r4,r4,4
   13368:	4a400104 	addi	r9,r9,4
   1336c:	203ff81e 	bne	r4,zero,13350 <memcpy+0x78>
   13370:	413fff04 	addi	r4,r8,-4
   13374:	2008d0ba 	srli	r4,r4,2
   13378:	318000cc 	andi	r6,r6,3
   1337c:	31ffffc4 	addi	r7,r6,-1
   13380:	21000044 	addi	r4,r4,1
   13384:	200890ba 	slli	r4,r4,2
   13388:	1907883a 	add	r3,r3,r4
   1338c:	290b883a 	add	r5,r5,r4
   13390:	3000041e 	bne	r6,zero,133a4 <memcpy+0xcc>
   13394:	f800283a 	ret
   13398:	2007883a 	mov	r3,r4
   1339c:	31ffffc4 	addi	r7,r6,-1
   133a0:	303ffc26 	beq	r6,zero,13394 <memcpy+0xbc>
   133a4:	39c00044 	addi	r7,r7,1
   133a8:	19cf883a 	add	r7,r3,r7
   133ac:	29800003 	ldbu	r6,0(r5)
   133b0:	18c00044 	addi	r3,r3,1
   133b4:	29400044 	addi	r5,r5,1
   133b8:	19bfffc5 	stb	r6,-1(r3)
   133bc:	38fffb1e 	bne	r7,r3,133ac <memcpy+0xd4>
   133c0:	f800283a 	ret
   133c4:	31ffffc4 	addi	r7,r6,-1
   133c8:	2007883a 	mov	r3,r4
   133cc:	003ff506 	br	133a4 <memcpy+0xcc>
   133d0:	400d883a 	mov	r6,r8
   133d4:	003ff106 	br	1339c <memcpy+0xc4>

000133d8 <memset>:
   133d8:	20c000cc 	andi	r3,r4,3
   133dc:	2005883a 	mov	r2,r4
   133e0:	18003626 	beq	r3,zero,134bc <memset+0xe4>
   133e4:	31ffffc4 	addi	r7,r6,-1
   133e8:	30003326 	beq	r6,zero,134b8 <memset+0xe0>
   133ec:	2811883a 	mov	r8,r5
   133f0:	2007883a 	mov	r3,r4
   133f4:	00000306 	br	13404 <memset+0x2c>
   133f8:	39ffffc4 	addi	r7,r7,-1
   133fc:	39bfffe0 	cmpeqi	r6,r7,-1
   13400:	30002d1e 	bne	r6,zero,134b8 <memset+0xe0>
   13404:	18c00044 	addi	r3,r3,1
   13408:	198000cc 	andi	r6,r3,3
   1340c:	1a3fffc5 	stb	r8,-1(r3)
   13410:	303ff91e 	bne	r6,zero,133f8 <memset+0x20>
   13414:	39000130 	cmpltui	r4,r7,4
   13418:	2000221e 	bne	r4,zero,134a4 <memset+0xcc>
   1341c:	29003fcc 	andi	r4,r5,255
   13420:	200c923a 	slli	r6,r4,8
   13424:	3a000430 	cmpltui	r8,r7,16
   13428:	3108b03a 	or	r4,r6,r4
   1342c:	200c943a 	slli	r6,r4,16
   13430:	310cb03a 	or	r6,r6,r4
   13434:	40000e1e 	bne	r8,zero,13470 <memset+0x98>
   13438:	393ffc04 	addi	r4,r7,-16
   1343c:	2008d13a 	srli	r4,r4,4
   13440:	21000044 	addi	r4,r4,1
   13444:	2008913a 	slli	r4,r4,4
   13448:	1909883a 	add	r4,r3,r4
   1344c:	19800015 	stw	r6,0(r3)
   13450:	19800115 	stw	r6,4(r3)
   13454:	19800215 	stw	r6,8(r3)
   13458:	19800315 	stw	r6,12(r3)
   1345c:	18c00404 	addi	r3,r3,16
   13460:	20fffa1e 	bne	r4,r3,1344c <memset+0x74>
   13464:	3900030c 	andi	r4,r7,12
   13468:	39c003cc 	andi	r7,r7,15
   1346c:	20000d26 	beq	r4,zero,134a4 <memset+0xcc>
   13470:	1811883a 	mov	r8,r3
   13474:	42000104 	addi	r8,r8,4
   13478:	3a09c83a 	sub	r4,r7,r8
   1347c:	1909883a 	add	r4,r3,r4
   13480:	21000128 	cmpgeui	r4,r4,4
   13484:	41bfff15 	stw	r6,-4(r8)
   13488:	203ffa1e 	bne	r4,zero,13474 <memset+0x9c>
   1348c:	393fff04 	addi	r4,r7,-4
   13490:	2008d0ba 	srli	r4,r4,2
   13494:	39c000cc 	andi	r7,r7,3
   13498:	21000044 	addi	r4,r4,1
   1349c:	200890ba 	slli	r4,r4,2
   134a0:	1907883a 	add	r3,r3,r4
   134a4:	38000426 	beq	r7,zero,134b8 <memset+0xe0>
   134a8:	19cf883a 	add	r7,r3,r7
   134ac:	18c00044 	addi	r3,r3,1
   134b0:	197fffc5 	stb	r5,-1(r3)
   134b4:	38fffd1e 	bne	r7,r3,134ac <memset+0xd4>
   134b8:	f800283a 	ret
   134bc:	2007883a 	mov	r3,r4
   134c0:	300f883a 	mov	r7,r6
   134c4:	003fd306 	br	13414 <memset+0x3c>

000134c8 <_open_r>:
   134c8:	2807883a 	mov	r3,r5
   134cc:	defffe04 	addi	sp,sp,-8
   134d0:	dc000015 	stw	r16,0(sp)
   134d4:	300b883a 	mov	r5,r6
   134d8:	008000b4 	movhi	r2,2
   134dc:	380d883a 	mov	r6,r7
   134e0:	2021883a 	mov	r16,r4
   134e4:	1809883a 	mov	r4,r3
   134e8:	dfc00115 	stw	ra,4(sp)
   134ec:	1029c915 	stw	zero,-22748(r2)
   134f0:	00145540 	call	14554 <open>
   134f4:	10ffffd8 	cmpnei	r3,r2,-1
   134f8:	18000426 	beq	r3,zero,1350c <_open_r+0x44>
   134fc:	dfc00117 	ldw	ra,4(sp)
   13500:	dc000017 	ldw	r16,0(sp)
   13504:	dec00204 	addi	sp,sp,8
   13508:	f800283a 	ret
   1350c:	00c000b4 	movhi	r3,2
   13510:	18e9c917 	ldw	r3,-22748(r3)
   13514:	183ff926 	beq	r3,zero,134fc <_open_r+0x34>
   13518:	80c00015 	stw	r3,0(r16)
   1351c:	dfc00117 	ldw	ra,4(sp)
   13520:	dc000017 	ldw	r16,0(sp)
   13524:	dec00204 	addi	sp,sp,8
   13528:	f800283a 	ret

0001352c <lflush>:
   1352c:	2080030b 	ldhu	r2,12(r4)
   13530:	1080024c 	andi	r2,r2,9
   13534:	10800258 	cmpnei	r2,r2,9
   13538:	10000226 	beq	r2,zero,13544 <lflush+0x18>
   1353c:	0005883a 	mov	r2,zero
   13540:	f800283a 	ret
   13544:	00118241 	jmpi	11824 <fflush>

00013548 <__srefill_r>:
   13548:	defffc04 	addi	sp,sp,-16
   1354c:	dc400115 	stw	r17,4(sp)
   13550:	dc000015 	stw	r16,0(sp)
   13554:	dfc00315 	stw	ra,12(sp)
   13558:	dc800215 	stw	r18,8(sp)
   1355c:	2023883a 	mov	r17,r4
   13560:	2821883a 	mov	r16,r5
   13564:	20000226 	beq	r4,zero,13570 <__srefill_r+0x28>
   13568:	20800e17 	ldw	r2,56(r4)
   1356c:	10003a26 	beq	r2,zero,13658 <__srefill_r+0x110>
   13570:	80c0030b 	ldhu	r3,12(r16)
   13574:	1908000c 	andi	r4,r3,8192
   13578:	1805883a 	mov	r2,r3
   1357c:	2000071e 	bne	r4,zero,1359c <__srefill_r+0x54>
   13580:	81001917 	ldw	r4,100(r16)
   13584:	18880014 	ori	r2,r3,8192
   13588:	00f7ffc4 	movi	r3,-8193
   1358c:	20c8703a 	and	r4,r4,r3
   13590:	8080030d 	sth	r2,12(r16)
   13594:	1007883a 	mov	r3,r2
   13598:	81001915 	stw	r4,100(r16)
   1359c:	80000115 	stw	zero,4(r16)
   135a0:	1100080c 	andi	r4,r2,32
   135a4:	20004d1e 	bne	r4,zero,136dc <__srefill_r+0x194>
   135a8:	1100010c 	andi	r4,r2,4
   135ac:	20001c1e 	bne	r4,zero,13620 <__srefill_r+0xd8>
   135b0:	1100040c 	andi	r4,r2,16
   135b4:	20005126 	beq	r4,zero,136fc <__srefill_r+0x1b4>
   135b8:	1080020c 	andi	r2,r2,8
   135bc:	1000371e 	bne	r2,zero,1369c <__srefill_r+0x154>
   135c0:	18c00114 	ori	r3,r3,4
   135c4:	80c0030d 	sth	r3,12(r16)
   135c8:	80800417 	ldw	r2,16(r16)
   135cc:	10003c26 	beq	r2,zero,136c0 <__srefill_r+0x178>
   135d0:	8480030b 	ldhu	r18,12(r16)
   135d4:	908000cc 	andi	r2,r18,3
   135d8:	1000211e 	bne	r2,zero,13660 <__srefill_r+0x118>
   135dc:	81800417 	ldw	r6,16(r16)
   135e0:	80800817 	ldw	r2,32(r16)
   135e4:	81c00517 	ldw	r7,20(r16)
   135e8:	81400717 	ldw	r5,28(r16)
   135ec:	81800015 	stw	r6,0(r16)
   135f0:	8809883a 	mov	r4,r17
   135f4:	103ee83a 	callr	r2
   135f8:	1007883a 	mov	r3,r2
   135fc:	80800115 	stw	r2,4(r16)
   13600:	0005883a 	mov	r2,zero
   13604:	00c0370e 	bge	zero,r3,136e4 <__srefill_r+0x19c>
   13608:	dfc00317 	ldw	ra,12(sp)
   1360c:	dc800217 	ldw	r18,8(sp)
   13610:	dc400117 	ldw	r17,4(sp)
   13614:	dc000017 	ldw	r16,0(sp)
   13618:	dec00404 	addi	sp,sp,16
   1361c:	f800283a 	ret
   13620:	81400c17 	ldw	r5,48(r16)
   13624:	283fe826 	beq	r5,zero,135c8 <__srefill_r+0x80>
   13628:	80801004 	addi	r2,r16,64
   1362c:	28800226 	beq	r5,r2,13638 <__srefill_r+0xf0>
   13630:	8809883a 	mov	r4,r17
   13634:	0011e780 	call	11e78 <_free_r>
   13638:	80800f17 	ldw	r2,60(r16)
   1363c:	80000c15 	stw	zero,48(r16)
   13640:	80800115 	stw	r2,4(r16)
   13644:	103fe026 	beq	r2,zero,135c8 <__srefill_r+0x80>
   13648:	80c00e17 	ldw	r3,56(r16)
   1364c:	0005883a 	mov	r2,zero
   13650:	80c00015 	stw	r3,0(r16)
   13654:	003fec06 	br	13608 <__srefill_r+0xc0>
   13658:	0011c0c0 	call	11c0c <__sinit>
   1365c:	003fc406 	br	13570 <__srefill_r+0x28>
   13660:	008000b4 	movhi	r2,2
   13664:	1122f317 	ldw	r4,-29748(r2)
   13668:	01400074 	movhi	r5,1
   1366c:	00800044 	movi	r2,1
   13670:	8080030d 	sth	r2,12(r16)
   13674:	294d4b04 	addi	r5,r5,13612
   13678:	00126640 	call	12664 <_fwalk>
   1367c:	9080024c 	andi	r2,r18,9
   13680:	8480030d 	sth	r18,12(r16)
   13684:	10800258 	cmpnei	r2,r2,9
   13688:	103fd41e 	bne	r2,zero,135dc <__srefill_r+0x94>
   1368c:	800b883a 	mov	r5,r16
   13690:	8809883a 	mov	r4,r17
   13694:	001159c0 	call	1159c <__sflush_r>
   13698:	003fd006 	br	135dc <__srefill_r+0x94>
   1369c:	800b883a 	mov	r5,r16
   136a0:	8809883a 	mov	r4,r17
   136a4:	00117c40 	call	117c4 <_fflush_r>
   136a8:	10000c1e 	bne	r2,zero,136dc <__srefill_r+0x194>
   136ac:	80c0030b 	ldhu	r3,12(r16)
   136b0:	80000215 	stw	zero,8(r16)
   136b4:	80000615 	stw	zero,24(r16)
   136b8:	18fffdcc 	andi	r3,r3,65527
   136bc:	003fc006 	br	135c0 <__srefill_r+0x78>
   136c0:	800b883a 	mov	r5,r16
   136c4:	8809883a 	mov	r4,r17
   136c8:	00128b00 	call	128b0 <__smakebuf_r>
   136cc:	003fc006 	br	135d0 <__srefill_r+0x88>
   136d0:	10801014 	ori	r2,r2,64
   136d4:	80000115 	stw	zero,4(r16)
   136d8:	8080030d 	sth	r2,12(r16)
   136dc:	00bfffc4 	movi	r2,-1
   136e0:	003fc906 	br	13608 <__srefill_r+0xc0>
   136e4:	8080030b 	ldhu	r2,12(r16)
   136e8:	183ff91e 	bne	r3,zero,136d0 <__srefill_r+0x188>
   136ec:	10800814 	ori	r2,r2,32
   136f0:	8080030d 	sth	r2,12(r16)
   136f4:	00bfffc4 	movi	r2,-1
   136f8:	003fc306 	br	13608 <__srefill_r+0xc0>
   136fc:	00800244 	movi	r2,9
   13700:	88800015 	stw	r2,0(r17)
   13704:	18c01014 	ori	r3,r3,64
   13708:	80c0030d 	sth	r3,12(r16)
   1370c:	00bfffc4 	movi	r2,-1
   13710:	003fbd06 	br	13608 <__srefill_r+0xc0>

00013714 <__srget_r>:
   13714:	defffd04 	addi	sp,sp,-12
   13718:	dc400115 	stw	r17,4(sp)
   1371c:	dc000015 	stw	r16,0(sp)
   13720:	dfc00215 	stw	ra,8(sp)
   13724:	2023883a 	mov	r17,r4
   13728:	2821883a 	mov	r16,r5
   1372c:	20000226 	beq	r4,zero,13738 <__srget_r+0x24>
   13730:	20800e17 	ldw	r2,56(r4)
   13734:	10001026 	beq	r2,zero,13778 <__srget_r+0x64>
   13738:	800b883a 	mov	r5,r16
   1373c:	8809883a 	mov	r4,r17
   13740:	00135480 	call	13548 <__srefill_r>
   13744:	10000e1e 	bne	r2,zero,13780 <__srget_r+0x6c>
   13748:	80c00017 	ldw	r3,0(r16)
   1374c:	80800117 	ldw	r2,4(r16)
   13750:	19000044 	addi	r4,r3,1
   13754:	10bfffc4 	addi	r2,r2,-1
   13758:	80800115 	stw	r2,4(r16)
   1375c:	81000015 	stw	r4,0(r16)
   13760:	18800003 	ldbu	r2,0(r3)
   13764:	dfc00217 	ldw	ra,8(sp)
   13768:	dc400117 	ldw	r17,4(sp)
   1376c:	dc000017 	ldw	r16,0(sp)
   13770:	dec00304 	addi	sp,sp,12
   13774:	f800283a 	ret
   13778:	0011c0c0 	call	11c0c <__sinit>
   1377c:	003fee06 	br	13738 <__srget_r+0x24>
   13780:	00bfffc4 	movi	r2,-1
   13784:	003ff706 	br	13764 <__srget_r+0x50>

00013788 <__srget>:
   13788:	defffd04 	addi	sp,sp,-12
   1378c:	008000b4 	movhi	r2,2
   13790:	dc400115 	stw	r17,4(sp)
   13794:	1462f417 	ldw	r17,-29744(r2)
   13798:	dc000015 	stw	r16,0(sp)
   1379c:	dfc00215 	stw	ra,8(sp)
   137a0:	2021883a 	mov	r16,r4
   137a4:	88000226 	beq	r17,zero,137b0 <__srget+0x28>
   137a8:	88800e17 	ldw	r2,56(r17)
   137ac:	10001026 	beq	r2,zero,137f0 <__srget+0x68>
   137b0:	800b883a 	mov	r5,r16
   137b4:	8809883a 	mov	r4,r17
   137b8:	00135480 	call	13548 <__srefill_r>
   137bc:	10000f1e 	bne	r2,zero,137fc <__srget+0x74>
   137c0:	80c00017 	ldw	r3,0(r16)
   137c4:	80800117 	ldw	r2,4(r16)
   137c8:	19000044 	addi	r4,r3,1
   137cc:	10bfffc4 	addi	r2,r2,-1
   137d0:	80800115 	stw	r2,4(r16)
   137d4:	81000015 	stw	r4,0(r16)
   137d8:	18800003 	ldbu	r2,0(r3)
   137dc:	dfc00217 	ldw	ra,8(sp)
   137e0:	dc400117 	ldw	r17,4(sp)
   137e4:	dc000017 	ldw	r16,0(sp)
   137e8:	dec00304 	addi	sp,sp,12
   137ec:	f800283a 	ret
   137f0:	8809883a 	mov	r4,r17
   137f4:	0011c0c0 	call	11c0c <__sinit>
   137f8:	003fed06 	br	137b0 <__srget+0x28>
   137fc:	00bfffc4 	movi	r2,-1
   13800:	003ff606 	br	137dc <__srget+0x54>

00013804 <_sbrk_r>:
   13804:	defffe04 	addi	sp,sp,-8
   13808:	dc000015 	stw	r16,0(sp)
   1380c:	008000b4 	movhi	r2,2
   13810:	2021883a 	mov	r16,r4
   13814:	2809883a 	mov	r4,r5
   13818:	dfc00115 	stw	ra,4(sp)
   1381c:	1029c915 	stw	zero,-22748(r2)
   13820:	0014ac40 	call	14ac4 <sbrk>
   13824:	10ffffd8 	cmpnei	r3,r2,-1
   13828:	18000426 	beq	r3,zero,1383c <_sbrk_r+0x38>
   1382c:	dfc00117 	ldw	ra,4(sp)
   13830:	dc000017 	ldw	r16,0(sp)
   13834:	dec00204 	addi	sp,sp,8
   13838:	f800283a 	ret
   1383c:	00c000b4 	movhi	r3,2
   13840:	18e9c917 	ldw	r3,-22748(r3)
   13844:	183ff926 	beq	r3,zero,1382c <_sbrk_r+0x28>
   13848:	80c00015 	stw	r3,0(r16)
   1384c:	dfc00117 	ldw	ra,4(sp)
   13850:	dc000017 	ldw	r16,0(sp)
   13854:	dec00204 	addi	sp,sp,8
   13858:	f800283a 	ret

0001385c <__sread>:
   1385c:	defffe04 	addi	sp,sp,-8
   13860:	dc000015 	stw	r16,0(sp)
   13864:	2821883a 	mov	r16,r5
   13868:	2940038f 	ldh	r5,14(r5)
   1386c:	dfc00115 	stw	ra,4(sp)
   13870:	0013c640 	call	13c64 <_read_r>
   13874:	10000716 	blt	r2,zero,13894 <__sread+0x38>
   13878:	80c01417 	ldw	r3,80(r16)
   1387c:	1887883a 	add	r3,r3,r2
   13880:	80c01415 	stw	r3,80(r16)
   13884:	dfc00117 	ldw	ra,4(sp)
   13888:	dc000017 	ldw	r16,0(sp)
   1388c:	dec00204 	addi	sp,sp,8
   13890:	f800283a 	ret
   13894:	80c0030b 	ldhu	r3,12(r16)
   13898:	18fbffcc 	andi	r3,r3,61439
   1389c:	80c0030d 	sth	r3,12(r16)
   138a0:	dfc00117 	ldw	ra,4(sp)
   138a4:	dc000017 	ldw	r16,0(sp)
   138a8:	dec00204 	addi	sp,sp,8
   138ac:	f800283a 	ret

000138b0 <__seofread>:
   138b0:	0005883a 	mov	r2,zero
   138b4:	f800283a 	ret

000138b8 <__swrite>:
   138b8:	2880030b 	ldhu	r2,12(r5)
   138bc:	defffb04 	addi	sp,sp,-20
   138c0:	dcc00315 	stw	r19,12(sp)
   138c4:	dc800215 	stw	r18,8(sp)
   138c8:	dc400115 	stw	r17,4(sp)
   138cc:	dc000015 	stw	r16,0(sp)
   138d0:	dfc00415 	stw	ra,16(sp)
   138d4:	10c0400c 	andi	r3,r2,256
   138d8:	2821883a 	mov	r16,r5
   138dc:	2023883a 	mov	r17,r4
   138e0:	3025883a 	mov	r18,r6
   138e4:	3827883a 	mov	r19,r7
   138e8:	18000d1e 	bne	r3,zero,13920 <__swrite+0x68>
   138ec:	8140038f 	ldh	r5,14(r16)
   138f0:	10bbffcc 	andi	r2,r2,61439
   138f4:	980f883a 	mov	r7,r19
   138f8:	900d883a 	mov	r6,r18
   138fc:	8809883a 	mov	r4,r17
   13900:	8080030d 	sth	r2,12(r16)
   13904:	dfc00417 	ldw	ra,16(sp)
   13908:	dcc00317 	ldw	r19,12(sp)
   1390c:	dc800217 	ldw	r18,8(sp)
   13910:	dc400117 	ldw	r17,4(sp)
   13914:	dc000017 	ldw	r16,0(sp)
   13918:	dec00504 	addi	sp,sp,20
   1391c:	0013a341 	jmpi	13a34 <_write_r>
   13920:	2940038f 	ldh	r5,14(r5)
   13924:	01c00084 	movi	r7,2
   13928:	000d883a 	mov	r6,zero
   1392c:	0013c000 	call	13c00 <_lseek_r>
   13930:	8080030b 	ldhu	r2,12(r16)
   13934:	003fed06 	br	138ec <__swrite+0x34>

00013938 <__sseek>:
   13938:	defffe04 	addi	sp,sp,-8
   1393c:	dc000015 	stw	r16,0(sp)
   13940:	2821883a 	mov	r16,r5
   13944:	2940038f 	ldh	r5,14(r5)
   13948:	dfc00115 	stw	ra,4(sp)
   1394c:	0013c000 	call	13c00 <_lseek_r>
   13950:	10ffffd8 	cmpnei	r3,r2,-1
   13954:	18000826 	beq	r3,zero,13978 <__sseek+0x40>
   13958:	80c0030b 	ldhu	r3,12(r16)
   1395c:	80801415 	stw	r2,80(r16)
   13960:	18c40014 	ori	r3,r3,4096
   13964:	80c0030d 	sth	r3,12(r16)
   13968:	dfc00117 	ldw	ra,4(sp)
   1396c:	dc000017 	ldw	r16,0(sp)
   13970:	dec00204 	addi	sp,sp,8
   13974:	f800283a 	ret
   13978:	80c0030b 	ldhu	r3,12(r16)
   1397c:	18fbffcc 	andi	r3,r3,61439
   13980:	80c0030d 	sth	r3,12(r16)
   13984:	dfc00117 	ldw	ra,4(sp)
   13988:	dc000017 	ldw	r16,0(sp)
   1398c:	dec00204 	addi	sp,sp,8
   13990:	f800283a 	ret

00013994 <__sclose>:
   13994:	2940038f 	ldh	r5,14(r5)
   13998:	0013a981 	jmpi	13a98 <_close_r>

0001399c <strlen>:
   1399c:	208000cc 	andi	r2,r4,3
   139a0:	10000926 	beq	r2,zero,139c8 <strlen+0x2c>
   139a4:	2005883a 	mov	r2,r4
   139a8:	00000306 	br	139b8 <strlen+0x1c>
   139ac:	10800044 	addi	r2,r2,1
   139b0:	10c000cc 	andi	r3,r2,3
   139b4:	18000526 	beq	r3,zero,139cc <strlen+0x30>
   139b8:	10c00007 	ldb	r3,0(r2)
   139bc:	183ffb1e 	bne	r3,zero,139ac <strlen+0x10>
   139c0:	1105c83a 	sub	r2,r2,r4
   139c4:	f800283a 	ret
   139c8:	2005883a 	mov	r2,r4
   139cc:	11400017 	ldw	r5,0(r2)
   139d0:	01ffbff4 	movhi	r7,65279
   139d4:	39ffbfc4 	addi	r7,r7,-257
   139d8:	29c7883a 	add	r3,r5,r7
   139dc:	01a02074 	movhi	r6,32897
   139e0:	014a303a 	nor	r5,zero,r5
   139e4:	1946703a 	and	r3,r3,r5
   139e8:	31a02004 	addi	r6,r6,-32640
   139ec:	1986703a 	and	r3,r3,r6
   139f0:	1800071e 	bne	r3,zero,13a10 <strlen+0x74>
   139f4:	11400117 	ldw	r5,4(r2)
   139f8:	10800104 	addi	r2,r2,4
   139fc:	29c7883a 	add	r3,r5,r7
   13a00:	014a303a 	nor	r5,zero,r5
   13a04:	1946703a 	and	r3,r3,r5
   13a08:	1986703a 	and	r3,r3,r6
   13a0c:	183ff926 	beq	r3,zero,139f4 <strlen+0x58>
   13a10:	10c00007 	ldb	r3,0(r2)
   13a14:	183fea26 	beq	r3,zero,139c0 <strlen+0x24>
   13a18:	10c00047 	ldb	r3,1(r2)
   13a1c:	10800044 	addi	r2,r2,1
   13a20:	183fe726 	beq	r3,zero,139c0 <strlen+0x24>
   13a24:	10c00047 	ldb	r3,1(r2)
   13a28:	10800044 	addi	r2,r2,1
   13a2c:	183ffa1e 	bne	r3,zero,13a18 <strlen+0x7c>
   13a30:	003fe306 	br	139c0 <strlen+0x24>

00013a34 <_write_r>:
   13a34:	2807883a 	mov	r3,r5
   13a38:	defffe04 	addi	sp,sp,-8
   13a3c:	dc000015 	stw	r16,0(sp)
   13a40:	300b883a 	mov	r5,r6
   13a44:	008000b4 	movhi	r2,2
   13a48:	380d883a 	mov	r6,r7
   13a4c:	2021883a 	mov	r16,r4
   13a50:	1809883a 	mov	r4,r3
   13a54:	dfc00115 	stw	ra,4(sp)
   13a58:	1029c915 	stw	zero,-22748(r2)
   13a5c:	0014bb80 	call	14bb8 <write>
   13a60:	10ffffd8 	cmpnei	r3,r2,-1
   13a64:	18000426 	beq	r3,zero,13a78 <_write_r+0x44>
   13a68:	dfc00117 	ldw	ra,4(sp)
   13a6c:	dc000017 	ldw	r16,0(sp)
   13a70:	dec00204 	addi	sp,sp,8
   13a74:	f800283a 	ret
   13a78:	00c000b4 	movhi	r3,2
   13a7c:	18e9c917 	ldw	r3,-22748(r3)
   13a80:	183ff926 	beq	r3,zero,13a68 <_write_r+0x34>
   13a84:	80c00015 	stw	r3,0(r16)
   13a88:	dfc00117 	ldw	ra,4(sp)
   13a8c:	dc000017 	ldw	r16,0(sp)
   13a90:	dec00204 	addi	sp,sp,8
   13a94:	f800283a 	ret

00013a98 <_close_r>:
   13a98:	defffe04 	addi	sp,sp,-8
   13a9c:	dc000015 	stw	r16,0(sp)
   13aa0:	008000b4 	movhi	r2,2
   13aa4:	2021883a 	mov	r16,r4
   13aa8:	2809883a 	mov	r4,r5
   13aac:	dfc00115 	stw	ra,4(sp)
   13ab0:	1029c915 	stw	zero,-22748(r2)
   13ab4:	0013d040 	call	13d04 <close>
   13ab8:	10ffffd8 	cmpnei	r3,r2,-1
   13abc:	18000426 	beq	r3,zero,13ad0 <_close_r+0x38>
   13ac0:	dfc00117 	ldw	ra,4(sp)
   13ac4:	dc000017 	ldw	r16,0(sp)
   13ac8:	dec00204 	addi	sp,sp,8
   13acc:	f800283a 	ret
   13ad0:	00c000b4 	movhi	r3,2
   13ad4:	18e9c917 	ldw	r3,-22748(r3)
   13ad8:	183ff926 	beq	r3,zero,13ac0 <_close_r+0x28>
   13adc:	80c00015 	stw	r3,0(r16)
   13ae0:	dfc00117 	ldw	ra,4(sp)
   13ae4:	dc000017 	ldw	r16,0(sp)
   13ae8:	dec00204 	addi	sp,sp,8
   13aec:	f800283a 	ret

00013af0 <__sflags>:
   13af0:	28800007 	ldb	r2,0(r5)
   13af4:	10c01ca0 	cmpeqi	r3,r2,114
   13af8:	1800271e 	bne	r3,zero,13b98 <__sflags+0xa8>
   13afc:	10c01de0 	cmpeqi	r3,r2,119
   13b00:	1800061e 	bne	r3,zero,13b1c <__sflags+0x2c>
   13b04:	10801860 	cmpeqi	r2,r2,97
   13b08:	10001f1e 	bne	r2,zero,13b88 <__sflags+0x98>
   13b0c:	00800584 	movi	r2,22
   13b10:	20800015 	stw	r2,0(r4)
   13b14:	0005883a 	mov	r2,zero
   13b18:	f800283a 	ret
   13b1c:	02018004 	movi	r8,1536
   13b20:	01000044 	movi	r4,1
   13b24:	00800204 	movi	r2,8
   13b28:	28c00047 	ldb	r3,1(r5)
   13b2c:	29400044 	addi	r5,r5,1
   13b30:	18001226 	beq	r3,zero,13b7c <__sflags+0x8c>
   13b34:	02bff8c4 	movi	r10,-29
   13b38:	027fff04 	movi	r9,-4
   13b3c:	00000506 	br	13b54 <__sflags+0x64>
   13b40:	18000126 	beq	r3,zero,13b48 <__sflags+0x58>
   13b44:	21020014 	ori	r4,r4,2048
   13b48:	28c00047 	ldb	r3,1(r5)
   13b4c:	29400044 	addi	r5,r5,1
   13b50:	18000a26 	beq	r3,zero,13b7c <__sflags+0x8c>
   13b54:	19c00ae0 	cmpeqi	r7,r3,43
   13b58:	18c01e20 	cmpeqi	r3,r3,120
   13b5c:	383ff826 	beq	r7,zero,13b40 <__sflags+0x50>
   13b60:	28c00047 	ldb	r3,1(r5)
   13b64:	1284703a 	and	r2,r2,r10
   13b68:	2248703a 	and	r4,r4,r9
   13b6c:	10800414 	ori	r2,r2,16
   13b70:	21000094 	ori	r4,r4,2
   13b74:	29400044 	addi	r5,r5,1
   13b78:	183ff61e 	bne	r3,zero,13b54 <__sflags+0x64>
   13b7c:	4108b03a 	or	r4,r8,r4
   13b80:	31000015 	stw	r4,0(r6)
   13b84:	f800283a 	ret
   13b88:	02008204 	movi	r8,520
   13b8c:	01000044 	movi	r4,1
   13b90:	00804204 	movi	r2,264
   13b94:	003fe406 	br	13b28 <__sflags+0x38>
   13b98:	0011883a 	mov	r8,zero
   13b9c:	0009883a 	mov	r4,zero
   13ba0:	00800104 	movi	r2,4
   13ba4:	003fe006 	br	13b28 <__sflags+0x38>

00013ba8 <_isatty_r>:
   13ba8:	defffe04 	addi	sp,sp,-8
   13bac:	dc000015 	stw	r16,0(sp)
   13bb0:	008000b4 	movhi	r2,2
   13bb4:	2021883a 	mov	r16,r4
   13bb8:	2809883a 	mov	r4,r5
   13bbc:	dfc00115 	stw	ra,4(sp)
   13bc0:	1029c915 	stw	zero,-22748(r2)
   13bc4:	00140c00 	call	140c0 <isatty>
   13bc8:	10ffffd8 	cmpnei	r3,r2,-1
   13bcc:	18000426 	beq	r3,zero,13be0 <_isatty_r+0x38>
   13bd0:	dfc00117 	ldw	ra,4(sp)
   13bd4:	dc000017 	ldw	r16,0(sp)
   13bd8:	dec00204 	addi	sp,sp,8
   13bdc:	f800283a 	ret
   13be0:	00c000b4 	movhi	r3,2
   13be4:	18e9c917 	ldw	r3,-22748(r3)
   13be8:	183ff926 	beq	r3,zero,13bd0 <_isatty_r+0x28>
   13bec:	80c00015 	stw	r3,0(r16)
   13bf0:	dfc00117 	ldw	ra,4(sp)
   13bf4:	dc000017 	ldw	r16,0(sp)
   13bf8:	dec00204 	addi	sp,sp,8
   13bfc:	f800283a 	ret

00013c00 <_lseek_r>:
   13c00:	2807883a 	mov	r3,r5
   13c04:	defffe04 	addi	sp,sp,-8
   13c08:	dc000015 	stw	r16,0(sp)
   13c0c:	300b883a 	mov	r5,r6
   13c10:	008000b4 	movhi	r2,2
   13c14:	380d883a 	mov	r6,r7
   13c18:	2021883a 	mov	r16,r4
   13c1c:	1809883a 	mov	r4,r3
   13c20:	dfc00115 	stw	ra,4(sp)
   13c24:	1029c915 	stw	zero,-22748(r2)
   13c28:	00142980 	call	14298 <lseek>
   13c2c:	10ffffd8 	cmpnei	r3,r2,-1
   13c30:	18000426 	beq	r3,zero,13c44 <_lseek_r+0x44>
   13c34:	dfc00117 	ldw	ra,4(sp)
   13c38:	dc000017 	ldw	r16,0(sp)
   13c3c:	dec00204 	addi	sp,sp,8
   13c40:	f800283a 	ret
   13c44:	00c000b4 	movhi	r3,2
   13c48:	18e9c917 	ldw	r3,-22748(r3)
   13c4c:	183ff926 	beq	r3,zero,13c34 <_lseek_r+0x34>
   13c50:	80c00015 	stw	r3,0(r16)
   13c54:	dfc00117 	ldw	ra,4(sp)
   13c58:	dc000017 	ldw	r16,0(sp)
   13c5c:	dec00204 	addi	sp,sp,8
   13c60:	f800283a 	ret

00013c64 <_read_r>:
   13c64:	2807883a 	mov	r3,r5
   13c68:	defffe04 	addi	sp,sp,-8
   13c6c:	dc000015 	stw	r16,0(sp)
   13c70:	300b883a 	mov	r5,r6
   13c74:	008000b4 	movhi	r2,2
   13c78:	380d883a 	mov	r6,r7
   13c7c:	2021883a 	mov	r16,r4
   13c80:	1809883a 	mov	r4,r3
   13c84:	dfc00115 	stw	ra,4(sp)
   13c88:	1029c915 	stw	zero,-22748(r2)
   13c8c:	001494c0 	call	1494c <read>
   13c90:	10ffffd8 	cmpnei	r3,r2,-1
   13c94:	18000426 	beq	r3,zero,13ca8 <_read_r+0x44>
   13c98:	dfc00117 	ldw	ra,4(sp)
   13c9c:	dc000017 	ldw	r16,0(sp)
   13ca0:	dec00204 	addi	sp,sp,8
   13ca4:	f800283a 	ret
   13ca8:	00c000b4 	movhi	r3,2
   13cac:	18e9c917 	ldw	r3,-22748(r3)
   13cb0:	183ff926 	beq	r3,zero,13c98 <_read_r+0x34>
   13cb4:	80c00015 	stw	r3,0(r16)
   13cb8:	dfc00117 	ldw	ra,4(sp)
   13cbc:	dc000017 	ldw	r16,0(sp)
   13cc0:	dec00204 	addi	sp,sp,8
   13cc4:	f800283a 	ret

00013cc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13cc8:	defffe04 	addi	sp,sp,-8
   13ccc:	dfc00115 	stw	ra,4(sp)
   13cd0:	df000015 	stw	fp,0(sp)
   13cd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13cd8:	d0a00917 	ldw	r2,-32732(gp)
   13cdc:	10000326 	beq	r2,zero,13cec <alt_get_errno+0x24>
   13ce0:	d0a00917 	ldw	r2,-32732(gp)
   13ce4:	103ee83a 	callr	r2
   13ce8:	00000106 	br	13cf0 <alt_get_errno+0x28>
   13cec:	d0a6d604 	addi	r2,gp,-25768
}
   13cf0:	e037883a 	mov	sp,fp
   13cf4:	dfc00117 	ldw	ra,4(sp)
   13cf8:	df000017 	ldw	fp,0(sp)
   13cfc:	dec00204 	addi	sp,sp,8
   13d00:	f800283a 	ret

00013d04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13d04:	defffb04 	addi	sp,sp,-20
   13d08:	dfc00415 	stw	ra,16(sp)
   13d0c:	df000315 	stw	fp,12(sp)
   13d10:	df000304 	addi	fp,sp,12
   13d14:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13d18:	e0bffd17 	ldw	r2,-12(fp)
   13d1c:	10000916 	blt	r2,zero,13d44 <close+0x40>
   13d20:	e0fffd17 	ldw	r3,-12(fp)
   13d24:	1805883a 	mov	r2,r3
   13d28:	1085883a 	add	r2,r2,r2
   13d2c:	10c5883a 	add	r2,r2,r3
   13d30:	100490ba 	slli	r2,r2,2
   13d34:	00c00074 	movhi	r3,1
   13d38:	18de7004 	addi	r3,r3,31168
   13d3c:	10c5883a 	add	r2,r2,r3
   13d40:	00000106 	br	13d48 <close+0x44>
   13d44:	0005883a 	mov	r2,zero
   13d48:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   13d4c:	e0bfff17 	ldw	r2,-4(fp)
   13d50:	10001926 	beq	r2,zero,13db8 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13d54:	e0bfff17 	ldw	r2,-4(fp)
   13d58:	10800017 	ldw	r2,0(r2)
   13d5c:	10800417 	ldw	r2,16(r2)
   13d60:	10000626 	beq	r2,zero,13d7c <close+0x78>
   13d64:	e0bfff17 	ldw	r2,-4(fp)
   13d68:	10800017 	ldw	r2,0(r2)
   13d6c:	10800417 	ldw	r2,16(r2)
   13d70:	e13fff17 	ldw	r4,-4(fp)
   13d74:	103ee83a 	callr	r2
   13d78:	00000106 	br	13d80 <close+0x7c>
   13d7c:	0005883a 	mov	r2,zero
   13d80:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13d84:	e13ffd17 	ldw	r4,-12(fp)
   13d88:	0014a540 	call	14a54 <alt_release_fd>
    if (rval < 0)
   13d8c:	e0bffe17 	ldw	r2,-8(fp)
   13d90:	1000070e 	bge	r2,zero,13db0 <close+0xac>
    {
      ALT_ERRNO = -rval;
   13d94:	0013cc80 	call	13cc8 <alt_get_errno>
   13d98:	1007883a 	mov	r3,r2
   13d9c:	e0bffe17 	ldw	r2,-8(fp)
   13da0:	0085c83a 	sub	r2,zero,r2
   13da4:	18800015 	stw	r2,0(r3)
      return -1;
   13da8:	00bfffc4 	movi	r2,-1
   13dac:	00000706 	br	13dcc <close+0xc8>
    }
    return 0;
   13db0:	0005883a 	mov	r2,zero
   13db4:	00000506 	br	13dcc <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13db8:	0013cc80 	call	13cc8 <alt_get_errno>
   13dbc:	1007883a 	mov	r3,r2
   13dc0:	00801444 	movi	r2,81
   13dc4:	18800015 	stw	r2,0(r3)
    return -1;
   13dc8:	00bfffc4 	movi	r2,-1
  }
}
   13dcc:	e037883a 	mov	sp,fp
   13dd0:	dfc00117 	ldw	ra,4(sp)
   13dd4:	df000017 	ldw	fp,0(sp)
   13dd8:	dec00204 	addi	sp,sp,8
   13ddc:	f800283a 	ret

00013de0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13de0:	defffc04 	addi	sp,sp,-16
   13de4:	df000315 	stw	fp,12(sp)
   13de8:	df000304 	addi	fp,sp,12
   13dec:	e13fff15 	stw	r4,-4(fp)
   13df0:	e17ffe15 	stw	r5,-8(fp)
   13df4:	e1bffd15 	stw	r6,-12(fp)
  return len;
   13df8:	e0bffd17 	ldw	r2,-12(fp)
}
   13dfc:	e037883a 	mov	sp,fp
   13e00:	df000017 	ldw	fp,0(sp)
   13e04:	dec00104 	addi	sp,sp,4
   13e08:	f800283a 	ret

00013e0c <alt_get_errno>:
{
   13e0c:	defffe04 	addi	sp,sp,-8
   13e10:	dfc00115 	stw	ra,4(sp)
   13e14:	df000015 	stw	fp,0(sp)
   13e18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e1c:	d0a00917 	ldw	r2,-32732(gp)
   13e20:	10000326 	beq	r2,zero,13e30 <alt_get_errno+0x24>
   13e24:	d0a00917 	ldw	r2,-32732(gp)
   13e28:	103ee83a 	callr	r2
   13e2c:	00000106 	br	13e34 <alt_get_errno+0x28>
   13e30:	d0a6d604 	addi	r2,gp,-25768
}
   13e34:	e037883a 	mov	sp,fp
   13e38:	dfc00117 	ldw	ra,4(sp)
   13e3c:	df000017 	ldw	fp,0(sp)
   13e40:	dec00204 	addi	sp,sp,8
   13e44:	f800283a 	ret

00013e48 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13e48:	defffb04 	addi	sp,sp,-20
   13e4c:	dfc00415 	stw	ra,16(sp)
   13e50:	df000315 	stw	fp,12(sp)
   13e54:	df000304 	addi	fp,sp,12
   13e58:	e13ffe15 	stw	r4,-8(fp)
   13e5c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13e60:	e0bffe17 	ldw	r2,-8(fp)
   13e64:	10000916 	blt	r2,zero,13e8c <fstat+0x44>
   13e68:	e0fffe17 	ldw	r3,-8(fp)
   13e6c:	1805883a 	mov	r2,r3
   13e70:	1085883a 	add	r2,r2,r2
   13e74:	10c5883a 	add	r2,r2,r3
   13e78:	100490ba 	slli	r2,r2,2
   13e7c:	00c00074 	movhi	r3,1
   13e80:	18de7004 	addi	r3,r3,31168
   13e84:	10c5883a 	add	r2,r2,r3
   13e88:	00000106 	br	13e90 <fstat+0x48>
   13e8c:	0005883a 	mov	r2,zero
   13e90:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   13e94:	e0bfff17 	ldw	r2,-4(fp)
   13e98:	10001026 	beq	r2,zero,13edc <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13e9c:	e0bfff17 	ldw	r2,-4(fp)
   13ea0:	10800017 	ldw	r2,0(r2)
   13ea4:	10800817 	ldw	r2,32(r2)
   13ea8:	10000726 	beq	r2,zero,13ec8 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   13eac:	e0bfff17 	ldw	r2,-4(fp)
   13eb0:	10800017 	ldw	r2,0(r2)
   13eb4:	10800817 	ldw	r2,32(r2)
   13eb8:	e17ffd17 	ldw	r5,-12(fp)
   13ebc:	e13fff17 	ldw	r4,-4(fp)
   13ec0:	103ee83a 	callr	r2
   13ec4:	00000a06 	br	13ef0 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13ec8:	e0bffd17 	ldw	r2,-12(fp)
   13ecc:	00c80004 	movi	r3,8192
   13ed0:	10c00115 	stw	r3,4(r2)
      return 0;
   13ed4:	0005883a 	mov	r2,zero
   13ed8:	00000506 	br	13ef0 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13edc:	0013e0c0 	call	13e0c <alt_get_errno>
   13ee0:	1007883a 	mov	r3,r2
   13ee4:	00801444 	movi	r2,81
   13ee8:	18800015 	stw	r2,0(r3)
    return -1;
   13eec:	00bfffc4 	movi	r2,-1
  }
}
   13ef0:	e037883a 	mov	sp,fp
   13ef4:	dfc00117 	ldw	ra,4(sp)
   13ef8:	df000017 	ldw	fp,0(sp)
   13efc:	dec00204 	addi	sp,sp,8
   13f00:	f800283a 	ret

00013f04 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   13f04:	defff004 	addi	sp,sp,-64
   13f08:	df000f15 	stw	fp,60(sp)
   13f0c:	df000f04 	addi	fp,sp,60
   13f10:	e13ff315 	stw	r4,-52(fp)
   13f14:	e17ff215 	stw	r5,-56(fp)
   13f18:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   13f1c:	00bffa84 	movi	r2,-22
   13f20:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13f24:	e0bff317 	ldw	r2,-52(fp)
   13f28:	10800828 	cmpgeui	r2,r2,32
   13f2c:	1000501e 	bne	r2,zero,14070 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   13f30:	0005303a 	rdctl	r2,status
   13f34:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f38:	e0fffd17 	ldw	r3,-12(fp)
   13f3c:	00bfff84 	movi	r2,-2
   13f40:	1884703a 	and	r2,r3,r2
   13f44:	1001703a 	wrctl	status,r2
  return context;
   13f48:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   13f4c:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   13f50:	e0bff317 	ldw	r2,-52(fp)
   13f54:	100890fa 	slli	r4,r2,3
   13f58:	e0fff117 	ldw	r3,-60(fp)
   13f5c:	008000b4 	movhi	r2,2
   13f60:	2085883a 	add	r2,r4,r2
   13f64:	10ea5815 	stw	r3,-22176(r2)
    alt_irq[id].context = context;
   13f68:	e0bff317 	ldw	r2,-52(fp)
   13f6c:	100890fa 	slli	r4,r2,3
   13f70:	e0fff217 	ldw	r3,-56(fp)
   13f74:	008000b4 	movhi	r2,2
   13f78:	2085883a 	add	r2,r4,r2
   13f7c:	10ea5915 	stw	r3,-22172(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   13f80:	e0bff117 	ldw	r2,-60(fp)
   13f84:	10001a26 	beq	r2,zero,13ff0 <alt_irq_register+0xec>
   13f88:	e0bff317 	ldw	r2,-52(fp)
   13f8c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   13f90:	0005303a 	rdctl	r2,status
   13f94:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f98:	e0fffb17 	ldw	r3,-20(fp)
   13f9c:	00bfff84 	movi	r2,-2
   13fa0:	1884703a 	and	r2,r3,r2
   13fa4:	1001703a 	wrctl	status,r2
  return context;
   13fa8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13fac:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   13fb0:	00c00044 	movi	r3,1
   13fb4:	e0bffc17 	ldw	r2,-16(fp)
   13fb8:	1884983a 	sll	r2,r3,r2
   13fbc:	1007883a 	mov	r3,r2
   13fc0:	d0a6da17 	ldw	r2,-25752(gp)
   13fc4:	1884b03a 	or	r2,r3,r2
   13fc8:	d0a6da15 	stw	r2,-25752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13fcc:	d0a6da17 	ldw	r2,-25752(gp)
   13fd0:	100170fa 	wrctl	ienable,r2
   13fd4:	e0bffa17 	ldw	r2,-24(fp)
   13fd8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   13fdc:	e0bff917 	ldw	r2,-28(fp)
   13fe0:	1001703a 	wrctl	status,r2
}
   13fe4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   13fe8:	0005883a 	mov	r2,zero
   13fec:	00001a06 	br	14058 <alt_irq_register+0x154>
   13ff0:	e0bff317 	ldw	r2,-52(fp)
   13ff4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   13ff8:	0005303a 	rdctl	r2,status
   13ffc:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14000:	e0fff717 	ldw	r3,-36(fp)
   14004:	00bfff84 	movi	r2,-2
   14008:	1884703a 	and	r2,r3,r2
   1400c:	1001703a 	wrctl	status,r2
  return context;
   14010:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   14014:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   14018:	00c00044 	movi	r3,1
   1401c:	e0bff817 	ldw	r2,-32(fp)
   14020:	1884983a 	sll	r2,r3,r2
   14024:	0084303a 	nor	r2,zero,r2
   14028:	1007883a 	mov	r3,r2
   1402c:	d0a6da17 	ldw	r2,-25752(gp)
   14030:	1884703a 	and	r2,r3,r2
   14034:	d0a6da15 	stw	r2,-25752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14038:	d0a6da17 	ldw	r2,-25752(gp)
   1403c:	100170fa 	wrctl	ienable,r2
   14040:	e0bff617 	ldw	r2,-40(fp)
   14044:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   14048:	e0bff517 	ldw	r2,-44(fp)
   1404c:	1001703a 	wrctl	status,r2
}
   14050:	0001883a 	nop
  return 0;
   14054:	0005883a 	mov	r2,zero
   14058:	e0bfff15 	stw	r2,-4(fp)
   1405c:	e0bffe17 	ldw	r2,-8(fp)
   14060:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   14064:	e0bff417 	ldw	r2,-48(fp)
   14068:	1001703a 	wrctl	status,r2
}
   1406c:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   14070:	e0bfff17 	ldw	r2,-4(fp)
}
   14074:	e037883a 	mov	sp,fp
   14078:	df000017 	ldw	fp,0(sp)
   1407c:	dec00104 	addi	sp,sp,4
   14080:	f800283a 	ret

00014084 <alt_get_errno>:
{
   14084:	defffe04 	addi	sp,sp,-8
   14088:	dfc00115 	stw	ra,4(sp)
   1408c:	df000015 	stw	fp,0(sp)
   14090:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14094:	d0a00917 	ldw	r2,-32732(gp)
   14098:	10000326 	beq	r2,zero,140a8 <alt_get_errno+0x24>
   1409c:	d0a00917 	ldw	r2,-32732(gp)
   140a0:	103ee83a 	callr	r2
   140a4:	00000106 	br	140ac <alt_get_errno+0x28>
   140a8:	d0a6d604 	addi	r2,gp,-25768
}
   140ac:	e037883a 	mov	sp,fp
   140b0:	dfc00117 	ldw	ra,4(sp)
   140b4:	df000017 	ldw	fp,0(sp)
   140b8:	dec00204 	addi	sp,sp,8
   140bc:	f800283a 	ret

000140c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   140c0:	deffea04 	addi	sp,sp,-88
   140c4:	dfc01515 	stw	ra,84(sp)
   140c8:	df001415 	stw	fp,80(sp)
   140cc:	df001404 	addi	fp,sp,80
   140d0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   140d4:	e0bfec17 	ldw	r2,-80(fp)
   140d8:	10000916 	blt	r2,zero,14100 <isatty+0x40>
   140dc:	e0ffec17 	ldw	r3,-80(fp)
   140e0:	1805883a 	mov	r2,r3
   140e4:	1085883a 	add	r2,r2,r2
   140e8:	10c5883a 	add	r2,r2,r3
   140ec:	100490ba 	slli	r2,r2,2
   140f0:	00c00074 	movhi	r3,1
   140f4:	18de7004 	addi	r3,r3,31168
   140f8:	10c5883a 	add	r2,r2,r3
   140fc:	00000106 	br	14104 <isatty+0x44>
   14100:	0005883a 	mov	r2,zero
   14104:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   14108:	e0bfff17 	ldw	r2,-4(fp)
   1410c:	10000e26 	beq	r2,zero,14148 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   14110:	e0bfff17 	ldw	r2,-4(fp)
   14114:	10800017 	ldw	r2,0(r2)
   14118:	10800817 	ldw	r2,32(r2)
   1411c:	1000021e 	bne	r2,zero,14128 <isatty+0x68>
    {
      return 1;
   14120:	00800044 	movi	r2,1
   14124:	00000d06 	br	1415c <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   14128:	e0bfed04 	addi	r2,fp,-76
   1412c:	100b883a 	mov	r5,r2
   14130:	e13fec17 	ldw	r4,-80(fp)
   14134:	0013e480 	call	13e48 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   14138:	e0bfee17 	ldw	r2,-72(fp)
   1413c:	10880020 	cmpeqi	r2,r2,8192
   14140:	10803fcc 	andi	r2,r2,255
   14144:	00000506 	br	1415c <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14148:	00140840 	call	14084 <alt_get_errno>
   1414c:	1007883a 	mov	r3,r2
   14150:	00801444 	movi	r2,81
   14154:	18800015 	stw	r2,0(r3)
    return 0;
   14158:	0005883a 	mov	r2,zero
  }
}
   1415c:	e037883a 	mov	sp,fp
   14160:	dfc00117 	ldw	ra,4(sp)
   14164:	df000017 	ldw	fp,0(sp)
   14168:	dec00204 	addi	sp,sp,8
   1416c:	f800283a 	ret

00014170 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14170:	defffc04 	addi	sp,sp,-16
   14174:	df000315 	stw	fp,12(sp)
   14178:	df000304 	addi	fp,sp,12
   1417c:	e13fff15 	stw	r4,-4(fp)
   14180:	e17ffe15 	stw	r5,-8(fp)
   14184:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   14188:	e0fffe17 	ldw	r3,-8(fp)
   1418c:	e0bfff17 	ldw	r2,-4(fp)
   14190:	18800c26 	beq	r3,r2,141c4 <alt_load_section+0x54>
  {
    while( to != end )
   14194:	00000806 	br	141b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   14198:	e0ffff17 	ldw	r3,-4(fp)
   1419c:	18800104 	addi	r2,r3,4
   141a0:	e0bfff15 	stw	r2,-4(fp)
   141a4:	e0bffe17 	ldw	r2,-8(fp)
   141a8:	11000104 	addi	r4,r2,4
   141ac:	e13ffe15 	stw	r4,-8(fp)
   141b0:	18c00017 	ldw	r3,0(r3)
   141b4:	10c00015 	stw	r3,0(r2)
    while( to != end )
   141b8:	e0fffe17 	ldw	r3,-8(fp)
   141bc:	e0bffd17 	ldw	r2,-12(fp)
   141c0:	18bff51e 	bne	r3,r2,14198 <alt_load_section+0x28>
    }
  }
}
   141c4:	0001883a 	nop
   141c8:	e037883a 	mov	sp,fp
   141cc:	df000017 	ldw	fp,0(sp)
   141d0:	dec00104 	addi	sp,sp,4
   141d4:	f800283a 	ret

000141d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   141d8:	defffe04 	addi	sp,sp,-8
   141dc:	dfc00115 	stw	ra,4(sp)
   141e0:	df000015 	stw	fp,0(sp)
   141e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   141e8:	018000b4 	movhi	r6,2
   141ec:	31a30104 	addi	r6,r6,-29692
   141f0:	01400074 	movhi	r5,1
   141f4:	295c4204 	addi	r5,r5,28936
   141f8:	010000b4 	movhi	r4,2
   141fc:	21230104 	addi	r4,r4,-29692
   14200:	00141700 	call	14170 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   14204:	01800074 	movhi	r6,1
   14208:	31808a04 	addi	r6,r6,552
   1420c:	01400074 	movhi	r5,1
   14210:	29400804 	addi	r5,r5,32
   14214:	01000074 	movhi	r4,1
   14218:	21000804 	addi	r4,r4,32
   1421c:	00141700 	call	14170 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14220:	01800074 	movhi	r6,1
   14224:	319c4204 	addi	r6,r6,28936
   14228:	01400074 	movhi	r5,1
   1422c:	295bac04 	addi	r5,r5,28336
   14230:	01000074 	movhi	r4,1
   14234:	211bac04 	addi	r4,r4,28336
   14238:	00141700 	call	14170 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1423c:	0015f600 	call	15f60 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14240:	001637c0 	call	1637c <alt_icache_flush_all>
}
   14244:	0001883a 	nop
   14248:	e037883a 	mov	sp,fp
   1424c:	dfc00117 	ldw	ra,4(sp)
   14250:	df000017 	ldw	fp,0(sp)
   14254:	dec00204 	addi	sp,sp,8
   14258:	f800283a 	ret

0001425c <alt_get_errno>:
{
   1425c:	defffe04 	addi	sp,sp,-8
   14260:	dfc00115 	stw	ra,4(sp)
   14264:	df000015 	stw	fp,0(sp)
   14268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1426c:	d0a00917 	ldw	r2,-32732(gp)
   14270:	10000326 	beq	r2,zero,14280 <alt_get_errno+0x24>
   14274:	d0a00917 	ldw	r2,-32732(gp)
   14278:	103ee83a 	callr	r2
   1427c:	00000106 	br	14284 <alt_get_errno+0x28>
   14280:	d0a6d604 	addi	r2,gp,-25768
}
   14284:	e037883a 	mov	sp,fp
   14288:	dfc00117 	ldw	ra,4(sp)
   1428c:	df000017 	ldw	fp,0(sp)
   14290:	dec00204 	addi	sp,sp,8
   14294:	f800283a 	ret

00014298 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14298:	defff904 	addi	sp,sp,-28
   1429c:	dfc00615 	stw	ra,24(sp)
   142a0:	df000515 	stw	fp,20(sp)
   142a4:	df000504 	addi	fp,sp,20
   142a8:	e13ffd15 	stw	r4,-12(fp)
   142ac:	e17ffc15 	stw	r5,-16(fp)
   142b0:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   142b4:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   142b8:	e0bffd17 	ldw	r2,-12(fp)
   142bc:	10000916 	blt	r2,zero,142e4 <lseek+0x4c>
   142c0:	e0fffd17 	ldw	r3,-12(fp)
   142c4:	1805883a 	mov	r2,r3
   142c8:	1085883a 	add	r2,r2,r2
   142cc:	10c5883a 	add	r2,r2,r3
   142d0:	100490ba 	slli	r2,r2,2
   142d4:	00c00074 	movhi	r3,1
   142d8:	18de7004 	addi	r3,r3,31168
   142dc:	10c5883a 	add	r2,r2,r3
   142e0:	00000106 	br	142e8 <lseek+0x50>
   142e4:	0005883a 	mov	r2,zero
   142e8:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   142ec:	e0bffe17 	ldw	r2,-8(fp)
   142f0:	10001026 	beq	r2,zero,14334 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   142f4:	e0bffe17 	ldw	r2,-8(fp)
   142f8:	10800017 	ldw	r2,0(r2)
   142fc:	10800717 	ldw	r2,28(r2)
   14300:	10000926 	beq	r2,zero,14328 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14304:	e0bffe17 	ldw	r2,-8(fp)
   14308:	10800017 	ldw	r2,0(r2)
   1430c:	10800717 	ldw	r2,28(r2)
   14310:	e1bffb17 	ldw	r6,-20(fp)
   14314:	e17ffc17 	ldw	r5,-16(fp)
   14318:	e13ffe17 	ldw	r4,-8(fp)
   1431c:	103ee83a 	callr	r2
   14320:	e0bfff15 	stw	r2,-4(fp)
   14324:	00000506 	br	1433c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14328:	00bfde84 	movi	r2,-134
   1432c:	e0bfff15 	stw	r2,-4(fp)
   14330:	00000206 	br	1433c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   14334:	00bfebc4 	movi	r2,-81
   14338:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   1433c:	e0bfff17 	ldw	r2,-4(fp)
   14340:	1000070e 	bge	r2,zero,14360 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   14344:	001425c0 	call	1425c <alt_get_errno>
   14348:	1007883a 	mov	r3,r2
   1434c:	e0bfff17 	ldw	r2,-4(fp)
   14350:	0085c83a 	sub	r2,zero,r2
   14354:	18800015 	stw	r2,0(r3)
    rc = -1;
   14358:	00bfffc4 	movi	r2,-1
   1435c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   14360:	e0bfff17 	ldw	r2,-4(fp)
}
   14364:	e037883a 	mov	sp,fp
   14368:	dfc00117 	ldw	ra,4(sp)
   1436c:	df000017 	ldw	fp,0(sp)
   14370:	dec00204 	addi	sp,sp,8
   14374:	f800283a 	ret

00014378 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14378:	defffd04 	addi	sp,sp,-12
   1437c:	dfc00215 	stw	ra,8(sp)
   14380:	df000115 	stw	fp,4(sp)
   14384:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14388:	0009883a 	mov	r4,zero
   1438c:	0014cf00 	call	14cf0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14390:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14394:	0014d2c0 	call	14d2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14398:	01800074 	movhi	r6,1
   1439c:	319c3404 	addi	r6,r6,28880
   143a0:	01400074 	movhi	r5,1
   143a4:	295c3404 	addi	r5,r5,28880
   143a8:	01000074 	movhi	r4,1
   143ac:	211c3404 	addi	r4,r4,28880
   143b0:	00164700 	call	16470 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   143b4:	00160640 	call	16064 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   143b8:	01000074 	movhi	r4,1
   143bc:	21183204 	addi	r4,r4,24776
   143c0:	00167780 	call	16778 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   143c4:	d0a6db17 	ldw	r2,-25748(gp)
   143c8:	d0e6dc17 	ldw	r3,-25744(gp)
   143cc:	d126dd17 	ldw	r4,-25740(gp)
   143d0:	200d883a 	mov	r6,r4
   143d4:	180b883a 	mov	r5,r3
   143d8:	1009883a 	mov	r4,r2
   143dc:	0010bec0 	call	10bec <main>
   143e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   143e4:	01000044 	movi	r4,1
   143e8:	0013d040 	call	13d04 <close>
  exit (result);
   143ec:	e13fff17 	ldw	r4,-4(fp)
   143f0:	001678c0 	call	1678c <exit>

000143f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   143f4:	defffe04 	addi	sp,sp,-8
   143f8:	df000115 	stw	fp,4(sp)
   143fc:	df000104 	addi	fp,sp,4
   14400:	e13fff15 	stw	r4,-4(fp)
}
   14404:	0001883a 	nop
   14408:	e037883a 	mov	sp,fp
   1440c:	df000017 	ldw	fp,0(sp)
   14410:	dec00104 	addi	sp,sp,4
   14414:	f800283a 	ret

00014418 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14418:	defffe04 	addi	sp,sp,-8
   1441c:	df000115 	stw	fp,4(sp)
   14420:	df000104 	addi	fp,sp,4
   14424:	e13fff15 	stw	r4,-4(fp)
}
   14428:	0001883a 	nop
   1442c:	e037883a 	mov	sp,fp
   14430:	df000017 	ldw	fp,0(sp)
   14434:	dec00104 	addi	sp,sp,4
   14438:	f800283a 	ret

0001443c <alt_get_errno>:
{
   1443c:	defffe04 	addi	sp,sp,-8
   14440:	dfc00115 	stw	ra,4(sp)
   14444:	df000015 	stw	fp,0(sp)
   14448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1444c:	d0a00917 	ldw	r2,-32732(gp)
   14450:	10000326 	beq	r2,zero,14460 <alt_get_errno+0x24>
   14454:	d0a00917 	ldw	r2,-32732(gp)
   14458:	103ee83a 	callr	r2
   1445c:	00000106 	br	14464 <alt_get_errno+0x28>
   14460:	d0a6d604 	addi	r2,gp,-25768
}
   14464:	e037883a 	mov	sp,fp
   14468:	dfc00117 	ldw	ra,4(sp)
   1446c:	df000017 	ldw	fp,0(sp)
   14470:	dec00204 	addi	sp,sp,8
   14474:	f800283a 	ret

00014478 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14478:	defffd04 	addi	sp,sp,-12
   1447c:	df000215 	stw	fp,8(sp)
   14480:	df000204 	addi	fp,sp,8
   14484:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14488:	e0bffe17 	ldw	r2,-8(fp)
   1448c:	10800217 	ldw	r2,8(r2)
   14490:	10d00034 	orhi	r3,r2,16384
   14494:	e0bffe17 	ldw	r2,-8(fp)
   14498:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1449c:	e03fff15 	stw	zero,-4(fp)
   144a0:	00002306 	br	14530 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   144a4:	e0ffff17 	ldw	r3,-4(fp)
   144a8:	1805883a 	mov	r2,r3
   144ac:	1085883a 	add	r2,r2,r2
   144b0:	10c5883a 	add	r2,r2,r3
   144b4:	100490ba 	slli	r2,r2,2
   144b8:	00c00074 	movhi	r3,1
   144bc:	10c7883a 	add	r3,r2,r3
   144c0:	18de7017 	ldw	r3,31168(r3)
   144c4:	e0bffe17 	ldw	r2,-8(fp)
   144c8:	10800017 	ldw	r2,0(r2)
   144cc:	1880151e 	bne	r3,r2,14524 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   144d0:	e0ffff17 	ldw	r3,-4(fp)
   144d4:	1805883a 	mov	r2,r3
   144d8:	1085883a 	add	r2,r2,r2
   144dc:	10c5883a 	add	r2,r2,r3
   144e0:	100490ba 	slli	r2,r2,2
   144e4:	00c00074 	movhi	r3,1
   144e8:	10c7883a 	add	r3,r2,r3
   144ec:	189e7217 	ldw	r2,31176(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   144f0:	10000c0e 	bge	r2,zero,14524 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   144f4:	e0ffff17 	ldw	r3,-4(fp)
   144f8:	1805883a 	mov	r2,r3
   144fc:	1085883a 	add	r2,r2,r2
   14500:	10c5883a 	add	r2,r2,r3
   14504:	100490ba 	slli	r2,r2,2
   14508:	00c00074 	movhi	r3,1
   1450c:	18de7004 	addi	r3,r3,31168
   14510:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14514:	e0fffe17 	ldw	r3,-8(fp)
   14518:	18800226 	beq	r3,r2,14524 <alt_file_locked+0xac>
    {
      return -EACCES;
   1451c:	00bffcc4 	movi	r2,-13
   14520:	00000806 	br	14544 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   14524:	e0bfff17 	ldw	r2,-4(fp)
   14528:	10800044 	addi	r2,r2,1
   1452c:	e0bfff15 	stw	r2,-4(fp)
   14530:	d0a00817 	ldw	r2,-32736(gp)
   14534:	1007883a 	mov	r3,r2
   14538:	e0bfff17 	ldw	r2,-4(fp)
   1453c:	18bfd92e 	bgeu	r3,r2,144a4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14540:	0005883a 	mov	r2,zero
}
   14544:	e037883a 	mov	sp,fp
   14548:	df000017 	ldw	fp,0(sp)
   1454c:	dec00104 	addi	sp,sp,4
   14550:	f800283a 	ret

00014554 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14554:	defff604 	addi	sp,sp,-40
   14558:	dfc00915 	stw	ra,36(sp)
   1455c:	df000815 	stw	fp,32(sp)
   14560:	df000804 	addi	fp,sp,32
   14564:	e13ffa15 	stw	r4,-24(fp)
   14568:	e17ff915 	stw	r5,-28(fp)
   1456c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14570:	00bfffc4 	movi	r2,-1
   14574:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   14578:	00bffb44 	movi	r2,-19
   1457c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   14580:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14584:	d1600604 	addi	r5,gp,-32744
   14588:	e13ffa17 	ldw	r4,-24(fp)
   1458c:	001612c0 	call	1612c <alt_find_dev>
   14590:	e0bfff15 	stw	r2,-4(fp)
   14594:	e0bfff17 	ldw	r2,-4(fp)
   14598:	1000051e 	bne	r2,zero,145b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1459c:	e13ffa17 	ldw	r4,-24(fp)
   145a0:	00161bc0 	call	161bc <alt_find_file>
   145a4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   145a8:	00800044 	movi	r2,1
   145ac:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   145b0:	e0bfff17 	ldw	r2,-4(fp)
   145b4:	10002c26 	beq	r2,zero,14668 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   145b8:	e13fff17 	ldw	r4,-4(fp)
   145bc:	00162c40 	call	162c4 <alt_get_fd>
   145c0:	e0bffe15 	stw	r2,-8(fp)
   145c4:	e0bffe17 	ldw	r2,-8(fp)
   145c8:	1000030e 	bge	r2,zero,145d8 <open+0x84>
    {
      status = index;
   145cc:	e0bffe17 	ldw	r2,-8(fp)
   145d0:	e0bffd15 	stw	r2,-12(fp)
   145d4:	00002606 	br	14670 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   145d8:	e0fffe17 	ldw	r3,-8(fp)
   145dc:	1805883a 	mov	r2,r3
   145e0:	1085883a 	add	r2,r2,r2
   145e4:	10c5883a 	add	r2,r2,r3
   145e8:	100490ba 	slli	r2,r2,2
   145ec:	00c00074 	movhi	r3,1
   145f0:	18de7004 	addi	r3,r3,31168
   145f4:	10c5883a 	add	r2,r2,r3
   145f8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   145fc:	e0fff917 	ldw	r3,-28(fp)
   14600:	00900034 	movhi	r2,16384
   14604:	10bfffc4 	addi	r2,r2,-1
   14608:	1886703a 	and	r3,r3,r2
   1460c:	e0bffb17 	ldw	r2,-20(fp)
   14610:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14614:	e0bffc17 	ldw	r2,-16(fp)
   14618:	1000051e 	bne	r2,zero,14630 <open+0xdc>
   1461c:	e13ffb17 	ldw	r4,-20(fp)
   14620:	00144780 	call	14478 <alt_file_locked>
   14624:	e0bffd15 	stw	r2,-12(fp)
   14628:	e0bffd17 	ldw	r2,-12(fp)
   1462c:	10001016 	blt	r2,zero,14670 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14630:	e0bfff17 	ldw	r2,-4(fp)
   14634:	10800317 	ldw	r2,12(r2)
   14638:	10000826 	beq	r2,zero,1465c <open+0x108>
   1463c:	e0bfff17 	ldw	r2,-4(fp)
   14640:	10800317 	ldw	r2,12(r2)
   14644:	e1fff817 	ldw	r7,-32(fp)
   14648:	e1bff917 	ldw	r6,-28(fp)
   1464c:	e17ffa17 	ldw	r5,-24(fp)
   14650:	e13ffb17 	ldw	r4,-20(fp)
   14654:	103ee83a 	callr	r2
   14658:	00000106 	br	14660 <open+0x10c>
   1465c:	0005883a 	mov	r2,zero
   14660:	e0bffd15 	stw	r2,-12(fp)
   14664:	00000206 	br	14670 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14668:	00bffb44 	movi	r2,-19
   1466c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14670:	e0bffd17 	ldw	r2,-12(fp)
   14674:	1000090e 	bge	r2,zero,1469c <open+0x148>
  {
    alt_release_fd (index);  
   14678:	e13ffe17 	ldw	r4,-8(fp)
   1467c:	0014a540 	call	14a54 <alt_release_fd>
    ALT_ERRNO = -status;
   14680:	001443c0 	call	1443c <alt_get_errno>
   14684:	1007883a 	mov	r3,r2
   14688:	e0bffd17 	ldw	r2,-12(fp)
   1468c:	0085c83a 	sub	r2,zero,r2
   14690:	18800015 	stw	r2,0(r3)
    return -1;
   14694:	00bfffc4 	movi	r2,-1
   14698:	00000106 	br	146a0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   1469c:	e0bffe17 	ldw	r2,-8(fp)
}
   146a0:	e037883a 	mov	sp,fp
   146a4:	dfc00117 	ldw	ra,4(sp)
   146a8:	df000017 	ldw	fp,0(sp)
   146ac:	dec00204 	addi	sp,sp,8
   146b0:	f800283a 	ret

000146b4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   146b4:	defff204 	addi	sp,sp,-56
   146b8:	dfc00a15 	stw	ra,40(sp)
   146bc:	df000915 	stw	fp,36(sp)
   146c0:	df000904 	addi	fp,sp,36
   146c4:	e13ff715 	stw	r4,-36(fp)
   146c8:	e1400215 	stw	r5,8(fp)
   146cc:	e1800315 	stw	r6,12(fp)
   146d0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   146d4:	e0800204 	addi	r2,fp,8
   146d8:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   146dc:	e0bff717 	ldw	r2,-36(fp)
   146e0:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   146e4:	00006f06 	br	148a4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   146e8:	e0bffec7 	ldb	r2,-5(fp)
   146ec:	10800960 	cmpeqi	r2,r2,37
   146f0:	1000041e 	bne	r2,zero,14704 <alt_printf+0x50>
        {
            alt_putchar(c);
   146f4:	e0bffec7 	ldb	r2,-5(fp)
   146f8:	1009883a 	mov	r4,r2
   146fc:	00148e00 	call	148e0 <alt_putchar>
   14700:	00006806 	br	148a4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   14704:	e0bfff17 	ldw	r2,-4(fp)
   14708:	10c00044 	addi	r3,r2,1
   1470c:	e0ffff15 	stw	r3,-4(fp)
   14710:	10800003 	ldbu	r2,0(r2)
   14714:	e0bffec5 	stb	r2,-5(fp)
   14718:	e0bffec7 	ldb	r2,-5(fp)
   1471c:	10006926 	beq	r2,zero,148c4 <alt_printf+0x210>
            {
                if (c == '%')
   14720:	e0bffec7 	ldb	r2,-5(fp)
   14724:	10800958 	cmpnei	r2,r2,37
   14728:	1000041e 	bne	r2,zero,1473c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   1472c:	e0bffec7 	ldb	r2,-5(fp)
   14730:	1009883a 	mov	r4,r2
   14734:	00148e00 	call	148e0 <alt_putchar>
   14738:	00005a06 	br	148a4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   1473c:	e0bffec7 	ldb	r2,-5(fp)
   14740:	108018d8 	cmpnei	r2,r2,99
   14744:	1000081e 	bne	r2,zero,14768 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   14748:	e0bff817 	ldw	r2,-32(fp)
   1474c:	10c00104 	addi	r3,r2,4
   14750:	e0fff815 	stw	r3,-32(fp)
   14754:	10800017 	ldw	r2,0(r2)
   14758:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   1475c:	e13ff917 	ldw	r4,-28(fp)
   14760:	00148e00 	call	148e0 <alt_putchar>
   14764:	00004f06 	br	148a4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   14768:	e0bffec7 	ldb	r2,-5(fp)
   1476c:	10801e18 	cmpnei	r2,r2,120
   14770:	1000341e 	bne	r2,zero,14844 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   14774:	e0bff817 	ldw	r2,-32(fp)
   14778:	10c00104 	addi	r3,r2,4
   1477c:	e0fff815 	stw	r3,-32(fp)
   14780:	10800017 	ldw	r2,0(r2)
   14784:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   14788:	e0bffb17 	ldw	r2,-20(fp)
   1478c:	1000031e 	bne	r2,zero,1479c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   14790:	01000c04 	movi	r4,48
   14794:	00148e00 	call	148e0 <alt_putchar>
                        continue;
   14798:	00004206 	br	148a4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   1479c:	00800704 	movi	r2,28
   147a0:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   147a4:	00000306 	br	147b4 <alt_printf+0x100>
                        digit_shift -= 4;
   147a8:	e0bffd17 	ldw	r2,-12(fp)
   147ac:	10bfff04 	addi	r2,r2,-4
   147b0:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   147b4:	00c003c4 	movi	r3,15
   147b8:	e0bffd17 	ldw	r2,-12(fp)
   147bc:	1884983a 	sll	r2,r3,r2
   147c0:	1007883a 	mov	r3,r2
   147c4:	e0bffb17 	ldw	r2,-20(fp)
   147c8:	1884703a 	and	r2,r3,r2
   147cc:	103ff626 	beq	r2,zero,147a8 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   147d0:	00001906 	br	14838 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   147d4:	00c003c4 	movi	r3,15
   147d8:	e0bffd17 	ldw	r2,-12(fp)
   147dc:	1884983a 	sll	r2,r3,r2
   147e0:	1007883a 	mov	r3,r2
   147e4:	e0bffb17 	ldw	r2,-20(fp)
   147e8:	1886703a 	and	r3,r3,r2
   147ec:	e0bffd17 	ldw	r2,-12(fp)
   147f0:	1884d83a 	srl	r2,r3,r2
   147f4:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   147f8:	e0bffa17 	ldw	r2,-24(fp)
   147fc:	108002a8 	cmpgeui	r2,r2,10
   14800:	1000041e 	bne	r2,zero,14814 <alt_printf+0x160>
                            c = '0' + digit;
   14804:	e0bffa17 	ldw	r2,-24(fp)
   14808:	10800c04 	addi	r2,r2,48
   1480c:	e0bffec5 	stb	r2,-5(fp)
   14810:	00000306 	br	14820 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   14814:	e0bffa17 	ldw	r2,-24(fp)
   14818:	108015c4 	addi	r2,r2,87
   1481c:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   14820:	e0bffec7 	ldb	r2,-5(fp)
   14824:	1009883a 	mov	r4,r2
   14828:	00148e00 	call	148e0 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   1482c:	e0bffd17 	ldw	r2,-12(fp)
   14830:	10bfff04 	addi	r2,r2,-4
   14834:	e0bffd15 	stw	r2,-12(fp)
   14838:	e0bffd17 	ldw	r2,-12(fp)
   1483c:	103fe50e 	bge	r2,zero,147d4 <alt_printf+0x120>
   14840:	00001806 	br	148a4 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   14844:	e0bffec7 	ldb	r2,-5(fp)
   14848:	10801cd8 	cmpnei	r2,r2,115
   1484c:	1000151e 	bne	r2,zero,148a4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   14850:	e0bff817 	ldw	r2,-32(fp)
   14854:	10c00104 	addi	r3,r2,4
   14858:	e0fff815 	stw	r3,-32(fp)
   1485c:	10800017 	ldw	r2,0(r2)
   14860:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   14864:	00000906 	br	1488c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   14868:	e0bffc17 	ldw	r2,-16(fp)
   1486c:	10c00044 	addi	r3,r2,1
   14870:	e0fffc15 	stw	r3,-16(fp)
   14874:	10800003 	ldbu	r2,0(r2)
   14878:	10803fcc 	andi	r2,r2,255
   1487c:	1080201c 	xori	r2,r2,128
   14880:	10bfe004 	addi	r2,r2,-128
   14884:	1009883a 	mov	r4,r2
   14888:	00148e00 	call	148e0 <alt_putchar>
                    while(*s)
   1488c:	e0bffc17 	ldw	r2,-16(fp)
   14890:	10800003 	ldbu	r2,0(r2)
   14894:	10803fcc 	andi	r2,r2,255
   14898:	1080201c 	xori	r2,r2,128
   1489c:	10bfe004 	addi	r2,r2,-128
   148a0:	103ff11e 	bne	r2,zero,14868 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
   148a4:	e0bfff17 	ldw	r2,-4(fp)
   148a8:	10c00044 	addi	r3,r2,1
   148ac:	e0ffff15 	stw	r3,-4(fp)
   148b0:	10800003 	ldbu	r2,0(r2)
   148b4:	e0bffec5 	stb	r2,-5(fp)
   148b8:	e0bffec7 	ldb	r2,-5(fp)
   148bc:	103f8a1e 	bne	r2,zero,146e8 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   148c0:	00000106 	br	148c8 <alt_printf+0x214>
                break;
   148c4:	0001883a 	nop
}
   148c8:	0001883a 	nop
   148cc:	e037883a 	mov	sp,fp
   148d0:	dfc00117 	ldw	ra,4(sp)
   148d4:	df000017 	ldw	fp,0(sp)
   148d8:	dec00504 	addi	sp,sp,20
   148dc:	f800283a 	ret

000148e0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   148e0:	defffd04 	addi	sp,sp,-12
   148e4:	dfc00215 	stw	ra,8(sp)
   148e8:	df000115 	stw	fp,4(sp)
   148ec:	df000104 	addi	fp,sp,4
   148f0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   148f4:	e13fff17 	ldw	r4,-4(fp)
   148f8:	00168400 	call	16840 <putchar>
#endif
#endif
}
   148fc:	e037883a 	mov	sp,fp
   14900:	dfc00117 	ldw	ra,4(sp)
   14904:	df000017 	ldw	fp,0(sp)
   14908:	dec00204 	addi	sp,sp,8
   1490c:	f800283a 	ret

00014910 <alt_get_errno>:
{
   14910:	defffe04 	addi	sp,sp,-8
   14914:	dfc00115 	stw	ra,4(sp)
   14918:	df000015 	stw	fp,0(sp)
   1491c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14920:	d0a00917 	ldw	r2,-32732(gp)
   14924:	10000326 	beq	r2,zero,14934 <alt_get_errno+0x24>
   14928:	d0a00917 	ldw	r2,-32732(gp)
   1492c:	103ee83a 	callr	r2
   14930:	00000106 	br	14938 <alt_get_errno+0x28>
   14934:	d0a6d604 	addi	r2,gp,-25768
}
   14938:	e037883a 	mov	sp,fp
   1493c:	dfc00117 	ldw	ra,4(sp)
   14940:	df000017 	ldw	fp,0(sp)
   14944:	dec00204 	addi	sp,sp,8
   14948:	f800283a 	ret

0001494c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1494c:	defff904 	addi	sp,sp,-28
   14950:	dfc00615 	stw	ra,24(sp)
   14954:	df000515 	stw	fp,20(sp)
   14958:	df000504 	addi	fp,sp,20
   1495c:	e13ffd15 	stw	r4,-12(fp)
   14960:	e17ffc15 	stw	r5,-16(fp)
   14964:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14968:	e0bffd17 	ldw	r2,-12(fp)
   1496c:	10000916 	blt	r2,zero,14994 <read+0x48>
   14970:	e0fffd17 	ldw	r3,-12(fp)
   14974:	1805883a 	mov	r2,r3
   14978:	1085883a 	add	r2,r2,r2
   1497c:	10c5883a 	add	r2,r2,r3
   14980:	100490ba 	slli	r2,r2,2
   14984:	00c00074 	movhi	r3,1
   14988:	18de7004 	addi	r3,r3,31168
   1498c:	10c5883a 	add	r2,r2,r3
   14990:	00000106 	br	14998 <read+0x4c>
   14994:	0005883a 	mov	r2,zero
   14998:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1499c:	e0bfff17 	ldw	r2,-4(fp)
   149a0:	10002226 	beq	r2,zero,14a2c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   149a4:	e0bfff17 	ldw	r2,-4(fp)
   149a8:	10800217 	ldw	r2,8(r2)
   149ac:	108000cc 	andi	r2,r2,3
   149b0:	10800060 	cmpeqi	r2,r2,1
   149b4:	1000181e 	bne	r2,zero,14a18 <read+0xcc>
        (fd->dev->read))
   149b8:	e0bfff17 	ldw	r2,-4(fp)
   149bc:	10800017 	ldw	r2,0(r2)
   149c0:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   149c4:	10001426 	beq	r2,zero,14a18 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   149c8:	e0bfff17 	ldw	r2,-4(fp)
   149cc:	10800017 	ldw	r2,0(r2)
   149d0:	10800517 	ldw	r2,20(r2)
   149d4:	e0fffb17 	ldw	r3,-20(fp)
   149d8:	180d883a 	mov	r6,r3
   149dc:	e17ffc17 	ldw	r5,-16(fp)
   149e0:	e13fff17 	ldw	r4,-4(fp)
   149e4:	103ee83a 	callr	r2
   149e8:	e0bffe15 	stw	r2,-8(fp)
   149ec:	e0bffe17 	ldw	r2,-8(fp)
   149f0:	1000070e 	bge	r2,zero,14a10 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   149f4:	00149100 	call	14910 <alt_get_errno>
   149f8:	1007883a 	mov	r3,r2
   149fc:	e0bffe17 	ldw	r2,-8(fp)
   14a00:	0085c83a 	sub	r2,zero,r2
   14a04:	18800015 	stw	r2,0(r3)
          return -1;
   14a08:	00bfffc4 	movi	r2,-1
   14a0c:	00000c06 	br	14a40 <read+0xf4>
        }
        return rval;
   14a10:	e0bffe17 	ldw	r2,-8(fp)
   14a14:	00000a06 	br	14a40 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14a18:	00149100 	call	14910 <alt_get_errno>
   14a1c:	1007883a 	mov	r3,r2
   14a20:	00800344 	movi	r2,13
   14a24:	18800015 	stw	r2,0(r3)
   14a28:	00000406 	br	14a3c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14a2c:	00149100 	call	14910 <alt_get_errno>
   14a30:	1007883a 	mov	r3,r2
   14a34:	00801444 	movi	r2,81
   14a38:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14a3c:	00bfffc4 	movi	r2,-1
}
   14a40:	e037883a 	mov	sp,fp
   14a44:	dfc00117 	ldw	ra,4(sp)
   14a48:	df000017 	ldw	fp,0(sp)
   14a4c:	dec00204 	addi	sp,sp,8
   14a50:	f800283a 	ret

00014a54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14a54:	defffe04 	addi	sp,sp,-8
   14a58:	df000115 	stw	fp,4(sp)
   14a5c:	df000104 	addi	fp,sp,4
   14a60:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   14a64:	e0bfff17 	ldw	r2,-4(fp)
   14a68:	108000d0 	cmplti	r2,r2,3
   14a6c:	1000101e 	bne	r2,zero,14ab0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   14a70:	e0ffff17 	ldw	r3,-4(fp)
   14a74:	1805883a 	mov	r2,r3
   14a78:	1085883a 	add	r2,r2,r2
   14a7c:	10c5883a 	add	r2,r2,r3
   14a80:	100490ba 	slli	r2,r2,2
   14a84:	00c00074 	movhi	r3,1
   14a88:	10c7883a 	add	r3,r2,r3
   14a8c:	181e7215 	stw	zero,31176(r3)
    alt_fd_list[fd].dev      = 0;
   14a90:	e0ffff17 	ldw	r3,-4(fp)
   14a94:	1805883a 	mov	r2,r3
   14a98:	1085883a 	add	r2,r2,r2
   14a9c:	10c5883a 	add	r2,r2,r3
   14aa0:	100490ba 	slli	r2,r2,2
   14aa4:	00c00074 	movhi	r3,1
   14aa8:	10c7883a 	add	r3,r2,r3
   14aac:	181e7015 	stw	zero,31168(r3)
  }
}
   14ab0:	0001883a 	nop
   14ab4:	e037883a 	mov	sp,fp
   14ab8:	df000017 	ldw	fp,0(sp)
   14abc:	dec00104 	addi	sp,sp,4
   14ac0:	f800283a 	ret

00014ac4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14ac4:	defff904 	addi	sp,sp,-28
   14ac8:	df000615 	stw	fp,24(sp)
   14acc:	df000604 	addi	fp,sp,24
   14ad0:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   14ad4:	0005303a 	rdctl	r2,status
   14ad8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14adc:	e0fffd17 	ldw	r3,-12(fp)
   14ae0:	00bfff84 	movi	r2,-2
   14ae4:	1884703a 	and	r2,r3,r2
   14ae8:	1001703a 	wrctl	status,r2
  return context;
   14aec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14af0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14af4:	d0a00b17 	ldw	r2,-32724(gp)
   14af8:	10c000c4 	addi	r3,r2,3
   14afc:	00bfff04 	movi	r2,-4
   14b00:	1884703a 	and	r2,r3,r2
   14b04:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14b08:	d0e00b17 	ldw	r3,-32724(gp)
   14b0c:	e0bffa17 	ldw	r2,-24(fp)
   14b10:	1887883a 	add	r3,r3,r2
   14b14:	008000b4 	movhi	r2,2
   14b18:	10800004 	addi	r2,r2,0
   14b1c:	10c0072e 	bgeu	r2,r3,14b3c <sbrk+0x78>
   14b20:	e0bfff17 	ldw	r2,-4(fp)
   14b24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14b28:	e0bffc17 	ldw	r2,-16(fp)
   14b2c:	1001703a 	wrctl	status,r2
}
   14b30:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14b34:	00bfffc4 	movi	r2,-1
   14b38:	00000c06 	br	14b6c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   14b3c:	d0a00b17 	ldw	r2,-32724(gp)
   14b40:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   14b44:	d0e00b17 	ldw	r3,-32724(gp)
   14b48:	e0bffa17 	ldw	r2,-24(fp)
   14b4c:	1885883a 	add	r2,r3,r2
   14b50:	d0a00b15 	stw	r2,-32724(gp)
   14b54:	e0bfff17 	ldw	r2,-4(fp)
   14b58:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14b5c:	e0bffb17 	ldw	r2,-20(fp)
   14b60:	1001703a 	wrctl	status,r2
}
   14b64:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14b68:	e0bffe17 	ldw	r2,-8(fp)
} 
   14b6c:	e037883a 	mov	sp,fp
   14b70:	df000017 	ldw	fp,0(sp)
   14b74:	dec00104 	addi	sp,sp,4
   14b78:	f800283a 	ret

00014b7c <alt_get_errno>:
{
   14b7c:	defffe04 	addi	sp,sp,-8
   14b80:	dfc00115 	stw	ra,4(sp)
   14b84:	df000015 	stw	fp,0(sp)
   14b88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b8c:	d0a00917 	ldw	r2,-32732(gp)
   14b90:	10000326 	beq	r2,zero,14ba0 <alt_get_errno+0x24>
   14b94:	d0a00917 	ldw	r2,-32732(gp)
   14b98:	103ee83a 	callr	r2
   14b9c:	00000106 	br	14ba4 <alt_get_errno+0x28>
   14ba0:	d0a6d604 	addi	r2,gp,-25768
}
   14ba4:	e037883a 	mov	sp,fp
   14ba8:	dfc00117 	ldw	ra,4(sp)
   14bac:	df000017 	ldw	fp,0(sp)
   14bb0:	dec00204 	addi	sp,sp,8
   14bb4:	f800283a 	ret

00014bb8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14bb8:	defff904 	addi	sp,sp,-28
   14bbc:	dfc00615 	stw	ra,24(sp)
   14bc0:	df000515 	stw	fp,20(sp)
   14bc4:	df000504 	addi	fp,sp,20
   14bc8:	e13ffd15 	stw	r4,-12(fp)
   14bcc:	e17ffc15 	stw	r5,-16(fp)
   14bd0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14bd4:	e0bffd17 	ldw	r2,-12(fp)
   14bd8:	10000916 	blt	r2,zero,14c00 <write+0x48>
   14bdc:	e0fffd17 	ldw	r3,-12(fp)
   14be0:	1805883a 	mov	r2,r3
   14be4:	1085883a 	add	r2,r2,r2
   14be8:	10c5883a 	add	r2,r2,r3
   14bec:	100490ba 	slli	r2,r2,2
   14bf0:	00c00074 	movhi	r3,1
   14bf4:	18de7004 	addi	r3,r3,31168
   14bf8:	10c5883a 	add	r2,r2,r3
   14bfc:	00000106 	br	14c04 <write+0x4c>
   14c00:	0005883a 	mov	r2,zero
   14c04:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   14c08:	e0bfff17 	ldw	r2,-4(fp)
   14c0c:	10002126 	beq	r2,zero,14c94 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14c10:	e0bfff17 	ldw	r2,-4(fp)
   14c14:	10800217 	ldw	r2,8(r2)
   14c18:	108000cc 	andi	r2,r2,3
   14c1c:	10001826 	beq	r2,zero,14c80 <write+0xc8>
   14c20:	e0bfff17 	ldw	r2,-4(fp)
   14c24:	10800017 	ldw	r2,0(r2)
   14c28:	10800617 	ldw	r2,24(r2)
   14c2c:	10001426 	beq	r2,zero,14c80 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14c30:	e0bfff17 	ldw	r2,-4(fp)
   14c34:	10800017 	ldw	r2,0(r2)
   14c38:	10800617 	ldw	r2,24(r2)
   14c3c:	e0fffb17 	ldw	r3,-20(fp)
   14c40:	180d883a 	mov	r6,r3
   14c44:	e17ffc17 	ldw	r5,-16(fp)
   14c48:	e13fff17 	ldw	r4,-4(fp)
   14c4c:	103ee83a 	callr	r2
   14c50:	e0bffe15 	stw	r2,-8(fp)
   14c54:	e0bffe17 	ldw	r2,-8(fp)
   14c58:	1000070e 	bge	r2,zero,14c78 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   14c5c:	0014b7c0 	call	14b7c <alt_get_errno>
   14c60:	1007883a 	mov	r3,r2
   14c64:	e0bffe17 	ldw	r2,-8(fp)
   14c68:	0085c83a 	sub	r2,zero,r2
   14c6c:	18800015 	stw	r2,0(r3)
        return -1;
   14c70:	00bfffc4 	movi	r2,-1
   14c74:	00000c06 	br	14ca8 <write+0xf0>
      }
      return rval;
   14c78:	e0bffe17 	ldw	r2,-8(fp)
   14c7c:	00000a06 	br	14ca8 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14c80:	0014b7c0 	call	14b7c <alt_get_errno>
   14c84:	1007883a 	mov	r3,r2
   14c88:	00800344 	movi	r2,13
   14c8c:	18800015 	stw	r2,0(r3)
   14c90:	00000406 	br	14ca4 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14c94:	0014b7c0 	call	14b7c <alt_get_errno>
   14c98:	1007883a 	mov	r3,r2
   14c9c:	00801444 	movi	r2,81
   14ca0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14ca4:	00bfffc4 	movi	r2,-1
}
   14ca8:	e037883a 	mov	sp,fp
   14cac:	dfc00117 	ldw	ra,4(sp)
   14cb0:	df000017 	ldw	fp,0(sp)
   14cb4:	dec00204 	addi	sp,sp,8
   14cb8:	f800283a 	ret

00014cbc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14cbc:	defffd04 	addi	sp,sp,-12
   14cc0:	dfc00215 	stw	ra,8(sp)
   14cc4:	df000115 	stw	fp,4(sp)
   14cc8:	df000104 	addi	fp,sp,4
   14ccc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14cd0:	d1600604 	addi	r5,gp,-32744
   14cd4:	e13fff17 	ldw	r4,-4(fp)
   14cd8:	0015fbc0 	call	15fbc <alt_dev_llist_insert>
}
   14cdc:	e037883a 	mov	sp,fp
   14ce0:	dfc00117 	ldw	ra,4(sp)
   14ce4:	df000017 	ldw	fp,0(sp)
   14ce8:	dec00204 	addi	sp,sp,8
   14cec:	f800283a 	ret

00014cf0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14cf0:	defffd04 	addi	sp,sp,-12
   14cf4:	dfc00215 	stw	ra,8(sp)
   14cf8:	df000115 	stw	fp,4(sp)
   14cfc:	df000104 	addi	fp,sp,4
   14d00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   14d04:	00166bc0 	call	166bc <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14d08:	00800044 	movi	r2,1
   14d0c:	1001703a 	wrctl	status,r2
}
   14d10:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   14d14:	0001883a 	nop
   14d18:	e037883a 	mov	sp,fp
   14d1c:	dfc00117 	ldw	ra,4(sp)
   14d20:	df000017 	ldw	fp,0(sp)
   14d24:	dec00204 	addi	sp,sp,8
   14d28:	f800283a 	ret

00014d2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14d2c:	defffe04 	addi	sp,sp,-8
   14d30:	dfc00115 	stw	ra,4(sp)
   14d34:	df000015 	stw	fp,0(sp)
   14d38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   14d3c:	01d38804 	movi	r7,20000
   14d40:	01800084 	movi	r6,2
   14d44:	000b883a 	mov	r5,zero
   14d48:	010000b4 	movhi	r4,2
   14d4c:	21040804 	addi	r4,r4,4128
   14d50:	00158a00 	call	158a0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
   14d54:	008000b4 	movhi	r2,2
   14d58:	10840004 	addi	r2,r2,4096
   14d5c:	d0a6de15 	stw	r2,-25736(gp)
   14d60:	0080bef4 	movhi	r2,763
   14d64:	10bc2004 	addi	r2,r2,-3968
   14d68:	d0a6df15 	stw	r2,-25732(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   14d6c:	000d883a 	mov	r6,zero
   14d70:	000b883a 	mov	r5,zero
   14d74:	01000074 	movhi	r4,1
   14d78:	211eda04 	addi	r4,r4,31592
   14d7c:	0014f180 	call	14f18 <altera_avalon_jtag_uart_init>
   14d80:	01000074 	movhi	r4,1
   14d84:	211ed004 	addi	r4,r4,31552
   14d88:	0014cbc0 	call	14cbc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   14d8c:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   14d90:	010000b4 	movhi	r4,2
   14d94:	2122e804 	addi	r4,r4,-29792
   14d98:	0014cbc0 	call	14cbc <alt_dev_reg>
}
   14d9c:	0001883a 	nop
   14da0:	e037883a 	mov	sp,fp
   14da4:	dfc00117 	ldw	ra,4(sp)
   14da8:	df000017 	ldw	fp,0(sp)
   14dac:	dec00204 	addi	sp,sp,8
   14db0:	f800283a 	ret

00014db4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14db4:	defffa04 	addi	sp,sp,-24
   14db8:	dfc00515 	stw	ra,20(sp)
   14dbc:	df000415 	stw	fp,16(sp)
   14dc0:	df000404 	addi	fp,sp,16
   14dc4:	e13ffe15 	stw	r4,-8(fp)
   14dc8:	e17ffd15 	stw	r5,-12(fp)
   14dcc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14dd0:	e0bffe17 	ldw	r2,-8(fp)
   14dd4:	10800017 	ldw	r2,0(r2)
   14dd8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14ddc:	e0bfff17 	ldw	r2,-4(fp)
   14de0:	10c00a04 	addi	r3,r2,40
   14de4:	e0bffe17 	ldw	r2,-8(fp)
   14de8:	10800217 	ldw	r2,8(r2)
   14dec:	100f883a 	mov	r7,r2
   14df0:	e1bffc17 	ldw	r6,-16(fp)
   14df4:	e17ffd17 	ldw	r5,-12(fp)
   14df8:	1809883a 	mov	r4,r3
   14dfc:	00153d80 	call	153d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14e00:	e037883a 	mov	sp,fp
   14e04:	dfc00117 	ldw	ra,4(sp)
   14e08:	df000017 	ldw	fp,0(sp)
   14e0c:	dec00204 	addi	sp,sp,8
   14e10:	f800283a 	ret

00014e14 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14e14:	defffa04 	addi	sp,sp,-24
   14e18:	dfc00515 	stw	ra,20(sp)
   14e1c:	df000415 	stw	fp,16(sp)
   14e20:	df000404 	addi	fp,sp,16
   14e24:	e13ffe15 	stw	r4,-8(fp)
   14e28:	e17ffd15 	stw	r5,-12(fp)
   14e2c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14e30:	e0bffe17 	ldw	r2,-8(fp)
   14e34:	10800017 	ldw	r2,0(r2)
   14e38:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14e3c:	e0bfff17 	ldw	r2,-4(fp)
   14e40:	10c00a04 	addi	r3,r2,40
   14e44:	e0bffe17 	ldw	r2,-8(fp)
   14e48:	10800217 	ldw	r2,8(r2)
   14e4c:	100f883a 	mov	r7,r2
   14e50:	e1bffc17 	ldw	r6,-16(fp)
   14e54:	e17ffd17 	ldw	r5,-12(fp)
   14e58:	1809883a 	mov	r4,r3
   14e5c:	00155f80 	call	155f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14e60:	e037883a 	mov	sp,fp
   14e64:	dfc00117 	ldw	ra,4(sp)
   14e68:	df000017 	ldw	fp,0(sp)
   14e6c:	dec00204 	addi	sp,sp,8
   14e70:	f800283a 	ret

00014e74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14e74:	defffc04 	addi	sp,sp,-16
   14e78:	dfc00315 	stw	ra,12(sp)
   14e7c:	df000215 	stw	fp,8(sp)
   14e80:	df000204 	addi	fp,sp,8
   14e84:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14e88:	e0bffe17 	ldw	r2,-8(fp)
   14e8c:	10800017 	ldw	r2,0(r2)
   14e90:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   14e94:	e0bfff17 	ldw	r2,-4(fp)
   14e98:	10c00a04 	addi	r3,r2,40
   14e9c:	e0bffe17 	ldw	r2,-8(fp)
   14ea0:	10800217 	ldw	r2,8(r2)
   14ea4:	100b883a 	mov	r5,r2
   14ea8:	1809883a 	mov	r4,r3
   14eac:	001527c0 	call	1527c <altera_avalon_jtag_uart_close>
}
   14eb0:	e037883a 	mov	sp,fp
   14eb4:	dfc00117 	ldw	ra,4(sp)
   14eb8:	df000017 	ldw	fp,0(sp)
   14ebc:	dec00204 	addi	sp,sp,8
   14ec0:	f800283a 	ret

00014ec4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14ec4:	defffa04 	addi	sp,sp,-24
   14ec8:	dfc00515 	stw	ra,20(sp)
   14ecc:	df000415 	stw	fp,16(sp)
   14ed0:	df000404 	addi	fp,sp,16
   14ed4:	e13ffe15 	stw	r4,-8(fp)
   14ed8:	e17ffd15 	stw	r5,-12(fp)
   14edc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14ee0:	e0bffe17 	ldw	r2,-8(fp)
   14ee4:	10800017 	ldw	r2,0(r2)
   14ee8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14eec:	e0bfff17 	ldw	r2,-4(fp)
   14ef0:	10800a04 	addi	r2,r2,40
   14ef4:	e1bffc17 	ldw	r6,-16(fp)
   14ef8:	e17ffd17 	ldw	r5,-12(fp)
   14efc:	1009883a 	mov	r4,r2
   14f00:	00152e40 	call	152e4 <altera_avalon_jtag_uart_ioctl>
}
   14f04:	e037883a 	mov	sp,fp
   14f08:	dfc00117 	ldw	ra,4(sp)
   14f0c:	df000017 	ldw	fp,0(sp)
   14f10:	dec00204 	addi	sp,sp,8
   14f14:	f800283a 	ret

00014f18 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14f18:	defffb04 	addi	sp,sp,-20
   14f1c:	dfc00415 	stw	ra,16(sp)
   14f20:	df000315 	stw	fp,12(sp)
   14f24:	df000304 	addi	fp,sp,12
   14f28:	e13fff15 	stw	r4,-4(fp)
   14f2c:	e17ffe15 	stw	r5,-8(fp)
   14f30:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14f34:	e0bfff17 	ldw	r2,-4(fp)
   14f38:	00c00044 	movi	r3,1
   14f3c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14f40:	e0bfff17 	ldw	r2,-4(fp)
   14f44:	10800017 	ldw	r2,0(r2)
   14f48:	10800104 	addi	r2,r2,4
   14f4c:	1007883a 	mov	r3,r2
   14f50:	e0bfff17 	ldw	r2,-4(fp)
   14f54:	10800817 	ldw	r2,32(r2)
   14f58:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   14f5c:	e0bffd17 	ldw	r2,-12(fp)
   14f60:	01800074 	movhi	r6,1
   14f64:	3193f304 	addi	r6,r6,20428
   14f68:	e17fff17 	ldw	r5,-4(fp)
   14f6c:	1009883a 	mov	r4,r2
   14f70:	0013f040 	call	13f04 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14f74:	e0bfff17 	ldw	r2,-4(fp)
   14f78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14f7c:	e0bfff17 	ldw	r2,-4(fp)
   14f80:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14f84:	d0e6e017 	ldw	r3,-25728(gp)
   14f88:	e1ffff17 	ldw	r7,-4(fp)
   14f8c:	01800074 	movhi	r6,1
   14f90:	31947704 	addi	r6,r6,20956
   14f94:	180b883a 	mov	r5,r3
   14f98:	1009883a 	mov	r4,r2
   14f9c:	0015e000 	call	15e00 <alt_alarm_start>
   14fa0:	1000040e 	bge	r2,zero,14fb4 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14fa4:	e0ffff17 	ldw	r3,-4(fp)
   14fa8:	00a00034 	movhi	r2,32768
   14fac:	10bfffc4 	addi	r2,r2,-1
   14fb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14fb4:	0001883a 	nop
   14fb8:	e037883a 	mov	sp,fp
   14fbc:	dfc00117 	ldw	ra,4(sp)
   14fc0:	df000017 	ldw	fp,0(sp)
   14fc4:	dec00204 	addi	sp,sp,8
   14fc8:	f800283a 	ret

00014fcc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14fcc:	defff704 	addi	sp,sp,-36
   14fd0:	df000815 	stw	fp,32(sp)
   14fd4:	df000804 	addi	fp,sp,32
   14fd8:	e13ff915 	stw	r4,-28(fp)
   14fdc:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14fe0:	e0bff917 	ldw	r2,-28(fp)
   14fe4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   14fe8:	e0bffd17 	ldw	r2,-12(fp)
   14fec:	10800017 	ldw	r2,0(r2)
   14ff0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14ff4:	e0bffc17 	ldw	r2,-16(fp)
   14ff8:	10800104 	addi	r2,r2,4
   14ffc:	10800037 	ldwio	r2,0(r2)
   15000:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   15004:	e0bffb17 	ldw	r2,-20(fp)
   15008:	1080c00c 	andi	r2,r2,768
   1500c:	10006d26 	beq	r2,zero,151c4 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   15010:	e0bffb17 	ldw	r2,-20(fp)
   15014:	1080400c 	andi	r2,r2,256
   15018:	10003526 	beq	r2,zero,150f0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1501c:	00800074 	movhi	r2,1
   15020:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15024:	e0bffd17 	ldw	r2,-12(fp)
   15028:	10800a17 	ldw	r2,40(r2)
   1502c:	10800044 	addi	r2,r2,1
   15030:	1081ffcc 	andi	r2,r2,2047
   15034:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   15038:	e0bffd17 	ldw	r2,-12(fp)
   1503c:	10800b17 	ldw	r2,44(r2)
   15040:	e0fffa17 	ldw	r3,-24(fp)
   15044:	18801526 	beq	r3,r2,1509c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15048:	e0bffc17 	ldw	r2,-16(fp)
   1504c:	10800037 	ldwio	r2,0(r2)
   15050:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15054:	e0bfff17 	ldw	r2,-4(fp)
   15058:	10a0000c 	andi	r2,r2,32768
   1505c:	10001126 	beq	r2,zero,150a4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15060:	e0bffd17 	ldw	r2,-12(fp)
   15064:	10800a17 	ldw	r2,40(r2)
   15068:	e0ffff17 	ldw	r3,-4(fp)
   1506c:	1809883a 	mov	r4,r3
   15070:	e0fffd17 	ldw	r3,-12(fp)
   15074:	1885883a 	add	r2,r3,r2
   15078:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1507c:	e0bffd17 	ldw	r2,-12(fp)
   15080:	10800a17 	ldw	r2,40(r2)
   15084:	10800044 	addi	r2,r2,1
   15088:	10c1ffcc 	andi	r3,r2,2047
   1508c:	e0bffd17 	ldw	r2,-12(fp)
   15090:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   15094:	0001883a 	nop
      {
   15098:	003fe206 	br	15024 <altera_avalon_jtag_uart_irq+0x58>
          break;
   1509c:	0001883a 	nop
   150a0:	00000106 	br	150a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   150a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   150a8:	e0bfff17 	ldw	r2,-4(fp)
   150ac:	10bfffec 	andhi	r2,r2,65535
   150b0:	10000f26 	beq	r2,zero,150f0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   150b4:	e0bffd17 	ldw	r2,-12(fp)
   150b8:	10c00817 	ldw	r3,32(r2)
   150bc:	00bfff84 	movi	r2,-2
   150c0:	1886703a 	and	r3,r3,r2
   150c4:	e0bffd17 	ldw	r2,-12(fp)
   150c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   150cc:	e0bffc17 	ldw	r2,-16(fp)
   150d0:	10800104 	addi	r2,r2,4
   150d4:	1007883a 	mov	r3,r2
   150d8:	e0bffd17 	ldw	r2,-12(fp)
   150dc:	10800817 	ldw	r2,32(r2)
   150e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   150e4:	e0bffc17 	ldw	r2,-16(fp)
   150e8:	10800104 	addi	r2,r2,4
   150ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   150f0:	e0bffb17 	ldw	r2,-20(fp)
   150f4:	1080800c 	andi	r2,r2,512
   150f8:	103fbe26 	beq	r2,zero,14ff4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   150fc:	e0bffb17 	ldw	r2,-20(fp)
   15100:	1004d43a 	srli	r2,r2,16
   15104:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   15108:	00001406 	br	1515c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1510c:	e0bffc17 	ldw	r2,-16(fp)
   15110:	e0fffd17 	ldw	r3,-12(fp)
   15114:	18c00d17 	ldw	r3,52(r3)
   15118:	e13ffd17 	ldw	r4,-12(fp)
   1511c:	20c7883a 	add	r3,r4,r3
   15120:	18c20e03 	ldbu	r3,2104(r3)
   15124:	18c03fcc 	andi	r3,r3,255
   15128:	18c0201c 	xori	r3,r3,128
   1512c:	18ffe004 	addi	r3,r3,-128
   15130:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15134:	e0bffd17 	ldw	r2,-12(fp)
   15138:	10800d17 	ldw	r2,52(r2)
   1513c:	10800044 	addi	r2,r2,1
   15140:	10c1ffcc 	andi	r3,r2,2047
   15144:	e0bffd17 	ldw	r2,-12(fp)
   15148:	10c00d15 	stw	r3,52(r2)
   1514c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   15150:	e0bffe17 	ldw	r2,-8(fp)
   15154:	10bfffc4 	addi	r2,r2,-1
   15158:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   1515c:	e0bffe17 	ldw	r2,-8(fp)
   15160:	10000526 	beq	r2,zero,15178 <altera_avalon_jtag_uart_irq+0x1ac>
   15164:	e0bffd17 	ldw	r2,-12(fp)
   15168:	10c00d17 	ldw	r3,52(r2)
   1516c:	e0bffd17 	ldw	r2,-12(fp)
   15170:	10800c17 	ldw	r2,48(r2)
   15174:	18bfe51e 	bne	r3,r2,1510c <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
   15178:	e0bffe17 	ldw	r2,-8(fp)
   1517c:	103f9d26 	beq	r2,zero,14ff4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15180:	e0bffd17 	ldw	r2,-12(fp)
   15184:	10c00817 	ldw	r3,32(r2)
   15188:	00bfff44 	movi	r2,-3
   1518c:	1886703a 	and	r3,r3,r2
   15190:	e0bffd17 	ldw	r2,-12(fp)
   15194:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15198:	e0bffd17 	ldw	r2,-12(fp)
   1519c:	10800017 	ldw	r2,0(r2)
   151a0:	10800104 	addi	r2,r2,4
   151a4:	1007883a 	mov	r3,r2
   151a8:	e0bffd17 	ldw	r2,-12(fp)
   151ac:	10800817 	ldw	r2,32(r2)
   151b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   151b4:	e0bffc17 	ldw	r2,-16(fp)
   151b8:	10800104 	addi	r2,r2,4
   151bc:	10800037 	ldwio	r2,0(r2)
  {
   151c0:	003f8c06 	br	14ff4 <altera_avalon_jtag_uart_irq+0x28>
      break;
   151c4:	0001883a 	nop
      }
    }
  }
}
   151c8:	0001883a 	nop
   151cc:	e037883a 	mov	sp,fp
   151d0:	df000017 	ldw	fp,0(sp)
   151d4:	dec00104 	addi	sp,sp,4
   151d8:	f800283a 	ret

000151dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   151dc:	defffc04 	addi	sp,sp,-16
   151e0:	df000315 	stw	fp,12(sp)
   151e4:	df000304 	addi	fp,sp,12
   151e8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   151ec:	e0bffd17 	ldw	r2,-12(fp)
   151f0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   151f4:	e0bfff17 	ldw	r2,-4(fp)
   151f8:	10800017 	ldw	r2,0(r2)
   151fc:	10800104 	addi	r2,r2,4
   15200:	10800037 	ldwio	r2,0(r2)
   15204:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   15208:	e0bffe17 	ldw	r2,-8(fp)
   1520c:	1081000c 	andi	r2,r2,1024
   15210:	10000b26 	beq	r2,zero,15240 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   15214:	e0bfff17 	ldw	r2,-4(fp)
   15218:	10800017 	ldw	r2,0(r2)
   1521c:	10800104 	addi	r2,r2,4
   15220:	1007883a 	mov	r3,r2
   15224:	e0bfff17 	ldw	r2,-4(fp)
   15228:	10800817 	ldw	r2,32(r2)
   1522c:	10810014 	ori	r2,r2,1024
   15230:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   15234:	e0bfff17 	ldw	r2,-4(fp)
   15238:	10000915 	stw	zero,36(r2)
   1523c:	00000a06 	br	15268 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15240:	e0bfff17 	ldw	r2,-4(fp)
   15244:	10c00917 	ldw	r3,36(r2)
   15248:	00a00034 	movhi	r2,32768
   1524c:	10bfff04 	addi	r2,r2,-4
   15250:	10c00536 	bltu	r2,r3,15268 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   15254:	e0bfff17 	ldw	r2,-4(fp)
   15258:	10800917 	ldw	r2,36(r2)
   1525c:	10c00044 	addi	r3,r2,1
   15260:	e0bfff17 	ldw	r2,-4(fp)
   15264:	10c00915 	stw	r3,36(r2)
   15268:	d0a6e017 	ldw	r2,-25728(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1526c:	e037883a 	mov	sp,fp
   15270:	df000017 	ldw	fp,0(sp)
   15274:	dec00104 	addi	sp,sp,4
   15278:	f800283a 	ret

0001527c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1527c:	defffd04 	addi	sp,sp,-12
   15280:	df000215 	stw	fp,8(sp)
   15284:	df000204 	addi	fp,sp,8
   15288:	e13fff15 	stw	r4,-4(fp)
   1528c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15290:	00000506 	br	152a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15294:	e0bffe17 	ldw	r2,-8(fp)
   15298:	1090000c 	andi	r2,r2,16384
   1529c:	10000226 	beq	r2,zero,152a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   152a0:	00bffd44 	movi	r2,-11
   152a4:	00000b06 	br	152d4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   152a8:	e0bfff17 	ldw	r2,-4(fp)
   152ac:	10c00d17 	ldw	r3,52(r2)
   152b0:	e0bfff17 	ldw	r2,-4(fp)
   152b4:	10800c17 	ldw	r2,48(r2)
   152b8:	18800526 	beq	r3,r2,152d0 <altera_avalon_jtag_uart_close+0x54>
   152bc:	e0bfff17 	ldw	r2,-4(fp)
   152c0:	10c00917 	ldw	r3,36(r2)
   152c4:	e0bfff17 	ldw	r2,-4(fp)
   152c8:	10800117 	ldw	r2,4(r2)
   152cc:	18bff136 	bltu	r3,r2,15294 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   152d0:	0005883a 	mov	r2,zero
}
   152d4:	e037883a 	mov	sp,fp
   152d8:	df000017 	ldw	fp,0(sp)
   152dc:	dec00104 	addi	sp,sp,4
   152e0:	f800283a 	ret

000152e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   152e4:	defffa04 	addi	sp,sp,-24
   152e8:	df000515 	stw	fp,20(sp)
   152ec:	df000504 	addi	fp,sp,20
   152f0:	e13ffd15 	stw	r4,-12(fp)
   152f4:	e17ffc15 	stw	r5,-16(fp)
   152f8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   152fc:	00bff9c4 	movi	r2,-25
   15300:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   15304:	e0bffc17 	ldw	r2,-16(fp)
   15308:	109a8060 	cmpeqi	r2,r2,27137
   1530c:	1000041e 	bne	r2,zero,15320 <altera_avalon_jtag_uart_ioctl+0x3c>
   15310:	e0bffc17 	ldw	r2,-16(fp)
   15314:	109a80a0 	cmpeqi	r2,r2,27138
   15318:	1000181e 	bne	r2,zero,1537c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1531c:	00002906 	br	153c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   15320:	e0bffd17 	ldw	r2,-12(fp)
   15324:	10c00117 	ldw	r3,4(r2)
   15328:	00a00034 	movhi	r2,32768
   1532c:	10bfffc4 	addi	r2,r2,-1
   15330:	18802126 	beq	r3,r2,153b8 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   15334:	e0bffb17 	ldw	r2,-20(fp)
   15338:	10800017 	ldw	r2,0(r2)
   1533c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15340:	e0bffe17 	ldw	r2,-8(fp)
   15344:	10800090 	cmplti	r2,r2,2
   15348:	1000061e 	bne	r2,zero,15364 <altera_avalon_jtag_uart_ioctl+0x80>
   1534c:	e0fffe17 	ldw	r3,-8(fp)
   15350:	00a00034 	movhi	r2,32768
   15354:	10bfffc4 	addi	r2,r2,-1
   15358:	18800226 	beq	r3,r2,15364 <altera_avalon_jtag_uart_ioctl+0x80>
   1535c:	e0bffe17 	ldw	r2,-8(fp)
   15360:	00000206 	br	1536c <altera_avalon_jtag_uart_ioctl+0x88>
   15364:	00a00034 	movhi	r2,32768
   15368:	10bfff84 	addi	r2,r2,-2
   1536c:	e0fffd17 	ldw	r3,-12(fp)
   15370:	18800115 	stw	r2,4(r3)
      rc = 0;
   15374:	e03fff15 	stw	zero,-4(fp)
    break;
   15378:	00000f06 	br	153b8 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   1537c:	e0bffd17 	ldw	r2,-12(fp)
   15380:	10c00117 	ldw	r3,4(r2)
   15384:	00a00034 	movhi	r2,32768
   15388:	10bfffc4 	addi	r2,r2,-1
   1538c:	18800c26 	beq	r3,r2,153c0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15390:	e0bffd17 	ldw	r2,-12(fp)
   15394:	10c00917 	ldw	r3,36(r2)
   15398:	e0bffd17 	ldw	r2,-12(fp)
   1539c:	10800117 	ldw	r2,4(r2)
   153a0:	1885803a 	cmpltu	r2,r3,r2
   153a4:	10c03fcc 	andi	r3,r2,255
   153a8:	e0bffb17 	ldw	r2,-20(fp)
   153ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
   153b0:	e03fff15 	stw	zero,-4(fp)
    break;
   153b4:	00000206 	br	153c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   153b8:	0001883a 	nop
   153bc:	00000106 	br	153c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   153c0:	0001883a 	nop
  }

  return rc;
   153c4:	e0bfff17 	ldw	r2,-4(fp)
}
   153c8:	e037883a 	mov	sp,fp
   153cc:	df000017 	ldw	fp,0(sp)
   153d0:	dec00104 	addi	sp,sp,4
   153d4:	f800283a 	ret

000153d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   153d8:	defff304 	addi	sp,sp,-52
   153dc:	dfc00c15 	stw	ra,48(sp)
   153e0:	df000b15 	stw	fp,44(sp)
   153e4:	df000b04 	addi	fp,sp,44
   153e8:	e13ff815 	stw	r4,-32(fp)
   153ec:	e17ff715 	stw	r5,-36(fp)
   153f0:	e1bff615 	stw	r6,-40(fp)
   153f4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   153f8:	e0bff717 	ldw	r2,-36(fp)
   153fc:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15400:	00004706 	br	15520 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15404:	e0bff817 	ldw	r2,-32(fp)
   15408:	10800a17 	ldw	r2,40(r2)
   1540c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   15410:	e0bff817 	ldw	r2,-32(fp)
   15414:	10800b17 	ldw	r2,44(r2)
   15418:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   1541c:	e0fffd17 	ldw	r3,-12(fp)
   15420:	e0bffc17 	ldw	r2,-16(fp)
   15424:	18800536 	bltu	r3,r2,1543c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   15428:	e0fffd17 	ldw	r3,-12(fp)
   1542c:	e0bffc17 	ldw	r2,-16(fp)
   15430:	1885c83a 	sub	r2,r3,r2
   15434:	e0bffe15 	stw	r2,-8(fp)
   15438:	00000406 	br	1544c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1543c:	00c20004 	movi	r3,2048
   15440:	e0bffc17 	ldw	r2,-16(fp)
   15444:	1885c83a 	sub	r2,r3,r2
   15448:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   1544c:	e0bffe17 	ldw	r2,-8(fp)
   15450:	10001e26 	beq	r2,zero,154cc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15454:	e0fff617 	ldw	r3,-40(fp)
   15458:	e0bffe17 	ldw	r2,-8(fp)
   1545c:	1880022e 	bgeu	r3,r2,15468 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   15460:	e0bff617 	ldw	r2,-40(fp)
   15464:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15468:	e0bff817 	ldw	r2,-32(fp)
   1546c:	10c00e04 	addi	r3,r2,56
   15470:	e0bffc17 	ldw	r2,-16(fp)
   15474:	1885883a 	add	r2,r3,r2
   15478:	e1bffe17 	ldw	r6,-8(fp)
   1547c:	100b883a 	mov	r5,r2
   15480:	e13fff17 	ldw	r4,-4(fp)
   15484:	00132d80 	call	132d8 <memcpy>
      ptr   += n;
   15488:	e0ffff17 	ldw	r3,-4(fp)
   1548c:	e0bffe17 	ldw	r2,-8(fp)
   15490:	1885883a 	add	r2,r3,r2
   15494:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   15498:	e0fff617 	ldw	r3,-40(fp)
   1549c:	e0bffe17 	ldw	r2,-8(fp)
   154a0:	1885c83a 	sub	r2,r3,r2
   154a4:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   154a8:	e0fffc17 	ldw	r3,-16(fp)
   154ac:	e0bffe17 	ldw	r2,-8(fp)
   154b0:	1885883a 	add	r2,r3,r2
   154b4:	10c1ffcc 	andi	r3,r2,2047
   154b8:	e0bff817 	ldw	r2,-32(fp)
   154bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   154c0:	e0bff617 	ldw	r2,-40(fp)
   154c4:	00bfcf16 	blt	zero,r2,15404 <altera_avalon_jtag_uart_read+0x2c>
   154c8:	00000106 	br	154d0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   154cc:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   154d0:	e0ffff17 	ldw	r3,-4(fp)
   154d4:	e0bff717 	ldw	r2,-36(fp)
   154d8:	1880141e 	bne	r3,r2,1552c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   154dc:	e0bff517 	ldw	r2,-44(fp)
   154e0:	1090000c 	andi	r2,r2,16384
   154e4:	1000131e 	bne	r2,zero,15534 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   154e8:	0001883a 	nop
   154ec:	e0bff817 	ldw	r2,-32(fp)
   154f0:	10800a17 	ldw	r2,40(r2)
   154f4:	e0fffd17 	ldw	r3,-12(fp)
   154f8:	1880051e 	bne	r3,r2,15510 <altera_avalon_jtag_uart_read+0x138>
   154fc:	e0bff817 	ldw	r2,-32(fp)
   15500:	10c00917 	ldw	r3,36(r2)
   15504:	e0bff817 	ldw	r2,-32(fp)
   15508:	10800117 	ldw	r2,4(r2)
   1550c:	18bff736 	bltu	r3,r2,154ec <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15510:	e0bff817 	ldw	r2,-32(fp)
   15514:	10800a17 	ldw	r2,40(r2)
   15518:	e0fffd17 	ldw	r3,-12(fp)
   1551c:	18800726 	beq	r3,r2,1553c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   15520:	e0bff617 	ldw	r2,-40(fp)
   15524:	00bfb716 	blt	zero,r2,15404 <altera_avalon_jtag_uart_read+0x2c>
   15528:	00000506 	br	15540 <altera_avalon_jtag_uart_read+0x168>
      break;
   1552c:	0001883a 	nop
   15530:	00000306 	br	15540 <altera_avalon_jtag_uart_read+0x168>
      break;
   15534:	0001883a 	nop
   15538:	00000106 	br	15540 <altera_avalon_jtag_uart_read+0x168>
      break;
   1553c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   15540:	e0ffff17 	ldw	r3,-4(fp)
   15544:	e0bff717 	ldw	r2,-36(fp)
   15548:	18801926 	beq	r3,r2,155b0 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   1554c:	0005303a 	rdctl	r2,status
   15550:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15554:	e0fff917 	ldw	r3,-28(fp)
   15558:	00bfff84 	movi	r2,-2
   1555c:	1884703a 	and	r2,r3,r2
   15560:	1001703a 	wrctl	status,r2
  return context;
   15564:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15568:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1556c:	e0bff817 	ldw	r2,-32(fp)
   15570:	10800817 	ldw	r2,32(r2)
   15574:	10c00054 	ori	r3,r2,1
   15578:	e0bff817 	ldw	r2,-32(fp)
   1557c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15580:	e0bff817 	ldw	r2,-32(fp)
   15584:	10800017 	ldw	r2,0(r2)
   15588:	10800104 	addi	r2,r2,4
   1558c:	1007883a 	mov	r3,r2
   15590:	e0bff817 	ldw	r2,-32(fp)
   15594:	10800817 	ldw	r2,32(r2)
   15598:	18800035 	stwio	r2,0(r3)
   1559c:	e0bffb17 	ldw	r2,-20(fp)
   155a0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   155a4:	e0bffa17 	ldw	r2,-24(fp)
   155a8:	1001703a 	wrctl	status,r2
}
   155ac:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   155b0:	e0ffff17 	ldw	r3,-4(fp)
   155b4:	e0bff717 	ldw	r2,-36(fp)
   155b8:	18800426 	beq	r3,r2,155cc <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   155bc:	e0ffff17 	ldw	r3,-4(fp)
   155c0:	e0bff717 	ldw	r2,-36(fp)
   155c4:	1885c83a 	sub	r2,r3,r2
   155c8:	00000606 	br	155e4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   155cc:	e0bff517 	ldw	r2,-44(fp)
   155d0:	1090000c 	andi	r2,r2,16384
   155d4:	10000226 	beq	r2,zero,155e0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   155d8:	00bffd44 	movi	r2,-11
   155dc:	00000106 	br	155e4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   155e0:	00bffec4 	movi	r2,-5
}
   155e4:	e037883a 	mov	sp,fp
   155e8:	dfc00117 	ldw	ra,4(sp)
   155ec:	df000017 	ldw	fp,0(sp)
   155f0:	dec00204 	addi	sp,sp,8
   155f4:	f800283a 	ret

000155f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   155f8:	defff304 	addi	sp,sp,-52
   155fc:	dfc00c15 	stw	ra,48(sp)
   15600:	df000b15 	stw	fp,44(sp)
   15604:	df000b04 	addi	fp,sp,44
   15608:	e13ff815 	stw	r4,-32(fp)
   1560c:	e17ff715 	stw	r5,-36(fp)
   15610:	e1bff615 	stw	r6,-40(fp)
   15614:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15618:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1561c:	e0bff717 	ldw	r2,-36(fp)
   15620:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15624:	00003706 	br	15704 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15628:	e0bff817 	ldw	r2,-32(fp)
   1562c:	10800c17 	ldw	r2,48(r2)
   15630:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   15634:	e0bff817 	ldw	r2,-32(fp)
   15638:	10800d17 	ldw	r2,52(r2)
   1563c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   15640:	e0fffc17 	ldw	r3,-16(fp)
   15644:	e0bfff17 	ldw	r2,-4(fp)
   15648:	1880062e 	bgeu	r3,r2,15664 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1564c:	e0ffff17 	ldw	r3,-4(fp)
   15650:	e0bffc17 	ldw	r2,-16(fp)
   15654:	1885c83a 	sub	r2,r3,r2
   15658:	10bfffc4 	addi	r2,r2,-1
   1565c:	e0bffe15 	stw	r2,-8(fp)
   15660:	00000b06 	br	15690 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15664:	e0bfff17 	ldw	r2,-4(fp)
   15668:	10000526 	beq	r2,zero,15680 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1566c:	00c20004 	movi	r3,2048
   15670:	e0bffc17 	ldw	r2,-16(fp)
   15674:	1885c83a 	sub	r2,r3,r2
   15678:	e0bffe15 	stw	r2,-8(fp)
   1567c:	00000406 	br	15690 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15680:	00c1ffc4 	movi	r3,2047
   15684:	e0bffc17 	ldw	r2,-16(fp)
   15688:	1885c83a 	sub	r2,r3,r2
   1568c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   15690:	e0bffe17 	ldw	r2,-8(fp)
   15694:	10001e26 	beq	r2,zero,15710 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15698:	e0fff617 	ldw	r3,-40(fp)
   1569c:	e0bffe17 	ldw	r2,-8(fp)
   156a0:	1880022e 	bgeu	r3,r2,156ac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   156a4:	e0bff617 	ldw	r2,-40(fp)
   156a8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   156ac:	e0bff817 	ldw	r2,-32(fp)
   156b0:	10c20e04 	addi	r3,r2,2104
   156b4:	e0bffc17 	ldw	r2,-16(fp)
   156b8:	1885883a 	add	r2,r3,r2
   156bc:	e1bffe17 	ldw	r6,-8(fp)
   156c0:	e17ff717 	ldw	r5,-36(fp)
   156c4:	1009883a 	mov	r4,r2
   156c8:	00132d80 	call	132d8 <memcpy>
      ptr   += n;
   156cc:	e0fff717 	ldw	r3,-36(fp)
   156d0:	e0bffe17 	ldw	r2,-8(fp)
   156d4:	1885883a 	add	r2,r3,r2
   156d8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   156dc:	e0fff617 	ldw	r3,-40(fp)
   156e0:	e0bffe17 	ldw	r2,-8(fp)
   156e4:	1885c83a 	sub	r2,r3,r2
   156e8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   156ec:	e0fffc17 	ldw	r3,-16(fp)
   156f0:	e0bffe17 	ldw	r2,-8(fp)
   156f4:	1885883a 	add	r2,r3,r2
   156f8:	10c1ffcc 	andi	r3,r2,2047
   156fc:	e0bff817 	ldw	r2,-32(fp)
   15700:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   15704:	e0bff617 	ldw	r2,-40(fp)
   15708:	00bfc716 	blt	zero,r2,15628 <altera_avalon_jtag_uart_write+0x30>
   1570c:	00000106 	br	15714 <altera_avalon_jtag_uart_write+0x11c>
        break;
   15710:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   15714:	0005303a 	rdctl	r2,status
   15718:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1571c:	e0fff917 	ldw	r3,-28(fp)
   15720:	00bfff84 	movi	r2,-2
   15724:	1884703a 	and	r2,r3,r2
   15728:	1001703a 	wrctl	status,r2
  return context;
   1572c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15730:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15734:	e0bff817 	ldw	r2,-32(fp)
   15738:	10800817 	ldw	r2,32(r2)
   1573c:	10c00094 	ori	r3,r2,2
   15740:	e0bff817 	ldw	r2,-32(fp)
   15744:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15748:	e0bff817 	ldw	r2,-32(fp)
   1574c:	10800017 	ldw	r2,0(r2)
   15750:	10800104 	addi	r2,r2,4
   15754:	1007883a 	mov	r3,r2
   15758:	e0bff817 	ldw	r2,-32(fp)
   1575c:	10800817 	ldw	r2,32(r2)
   15760:	18800035 	stwio	r2,0(r3)
   15764:	e0bffb17 	ldw	r2,-20(fp)
   15768:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1576c:	e0bffa17 	ldw	r2,-24(fp)
   15770:	1001703a 	wrctl	status,r2
}
   15774:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15778:	e0bff617 	ldw	r2,-40(fp)
   1577c:	0080100e 	bge	zero,r2,157c0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   15780:	e0bff517 	ldw	r2,-44(fp)
   15784:	1090000c 	andi	r2,r2,16384
   15788:	1000101e 	bne	r2,zero,157cc <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1578c:	0001883a 	nop
   15790:	e0bff817 	ldw	r2,-32(fp)
   15794:	10800d17 	ldw	r2,52(r2)
   15798:	e0ffff17 	ldw	r3,-4(fp)
   1579c:	1880051e 	bne	r3,r2,157b4 <altera_avalon_jtag_uart_write+0x1bc>
   157a0:	e0bff817 	ldw	r2,-32(fp)
   157a4:	10c00917 	ldw	r3,36(r2)
   157a8:	e0bff817 	ldw	r2,-32(fp)
   157ac:	10800117 	ldw	r2,4(r2)
   157b0:	18bff736 	bltu	r3,r2,15790 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   157b4:	e0bff817 	ldw	r2,-32(fp)
   157b8:	10800917 	ldw	r2,36(r2)
   157bc:	1000051e 	bne	r2,zero,157d4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   157c0:	e0bff617 	ldw	r2,-40(fp)
   157c4:	00bfcf16 	blt	zero,r2,15704 <altera_avalon_jtag_uart_write+0x10c>
   157c8:	00000306 	br	157d8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   157cc:	0001883a 	nop
   157d0:	00000106 	br	157d8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   157d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   157d8:	e0fff717 	ldw	r3,-36(fp)
   157dc:	e0bffd17 	ldw	r2,-12(fp)
   157e0:	18800426 	beq	r3,r2,157f4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   157e4:	e0fff717 	ldw	r3,-36(fp)
   157e8:	e0bffd17 	ldw	r2,-12(fp)
   157ec:	1885c83a 	sub	r2,r3,r2
   157f0:	00000606 	br	1580c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   157f4:	e0bff517 	ldw	r2,-44(fp)
   157f8:	1090000c 	andi	r2,r2,16384
   157fc:	10000226 	beq	r2,zero,15808 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   15800:	00bffd44 	movi	r2,-11
   15804:	00000106 	br	1580c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   15808:	00bffec4 	movi	r2,-5
}
   1580c:	e037883a 	mov	sp,fp
   15810:	dfc00117 	ldw	ra,4(sp)
   15814:	df000017 	ldw	fp,0(sp)
   15818:	dec00204 	addi	sp,sp,8
   1581c:	f800283a 	ret

00015820 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15820:	defff904 	addi	sp,sp,-28
   15824:	dfc00615 	stw	ra,24(sp)
   15828:	df000515 	stw	fp,20(sp)
   1582c:	df000504 	addi	fp,sp,20
   15830:	e13ffc15 	stw	r4,-16(fp)
   15834:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15838:	0007883a 	mov	r3,zero
   1583c:	e0bffc17 	ldw	r2,-16(fp)
   15840:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15844:	e0bffc17 	ldw	r2,-16(fp)
   15848:	10800104 	addi	r2,r2,4
   1584c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   15850:	0005303a 	rdctl	r2,status
   15854:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15858:	e0fffd17 	ldw	r3,-12(fp)
   1585c:	00bfff84 	movi	r2,-2
   15860:	1884703a 	and	r2,r3,r2
   15864:	1001703a 	wrctl	status,r2
  return context;
   15868:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1586c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   15870:	00165900 	call	16590 <alt_tick>
   15874:	e0bfff17 	ldw	r2,-4(fp)
   15878:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   1587c:	e0bffe17 	ldw	r2,-8(fp)
   15880:	1001703a 	wrctl	status,r2
}
   15884:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   15888:	0001883a 	nop
   1588c:	e037883a 	mov	sp,fp
   15890:	dfc00117 	ldw	ra,4(sp)
   15894:	df000017 	ldw	fp,0(sp)
   15898:	dec00204 	addi	sp,sp,8
   1589c:	f800283a 	ret

000158a0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   158a0:	defff904 	addi	sp,sp,-28
   158a4:	dfc00615 	stw	ra,24(sp)
   158a8:	df000515 	stw	fp,20(sp)
   158ac:	df000504 	addi	fp,sp,20
   158b0:	e13ffe15 	stw	r4,-8(fp)
   158b4:	e17ffd15 	stw	r5,-12(fp)
   158b8:	e1bffc15 	stw	r6,-16(fp)
   158bc:	e1fffb15 	stw	r7,-20(fp)
   158c0:	e0bffb17 	ldw	r2,-20(fp)
   158c4:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   158c8:	d0a6e017 	ldw	r2,-25728(gp)
   158cc:	1000031e 	bne	r2,zero,158dc <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   158d0:	e0bfff17 	ldw	r2,-4(fp)
   158d4:	d0a6e015 	stw	r2,-25728(gp)
    return 0;
   158d8:	00000106 	br	158e0 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   158dc:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   158e0:	e0bffe17 	ldw	r2,-8(fp)
   158e4:	10800104 	addi	r2,r2,4
   158e8:	00c001c4 	movi	r3,7
   158ec:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   158f0:	01800074 	movhi	r6,1
   158f4:	31960804 	addi	r6,r6,22560
   158f8:	e17ffe17 	ldw	r5,-8(fp)
   158fc:	e13ffc17 	ldw	r4,-16(fp)
   15900:	0013f040 	call	13f04 <alt_irq_register>
#endif  
}
   15904:	0001883a 	nop
   15908:	e037883a 	mov	sp,fp
   1590c:	dfc00117 	ldw	ra,4(sp)
   15910:	df000017 	ldw	fp,0(sp)
   15914:	dec00204 	addi	sp,sp,8
   15918:	f800283a 	ret

0001591c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1591c:	defffe04 	addi	sp,sp,-8
   15920:	df000115 	stw	fp,4(sp)
   15924:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   15928:	d0a6de17 	ldw	r2,-25736(gp)
   1592c:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   15930:	d0a6df17 	ldw	r2,-25732(gp)
   15934:	1000021e 	bne	r2,zero,15940 <alt_timestamp_start+0x24>
  {
    return -1;
   15938:	00bfffc4 	movi	r2,-1
   1593c:	00001106 	br	15984 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   15940:	e0bfff17 	ldw	r2,-4(fp)
   15944:	10800104 	addi	r2,r2,4
   15948:	00c00204 	movi	r3,8
   1594c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   15950:	e0bfff17 	ldw	r2,-4(fp)
   15954:	10800204 	addi	r2,r2,8
   15958:	00ffffd4 	movui	r3,65535
   1595c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   15960:	e0bfff17 	ldw	r2,-4(fp)
   15964:	10800304 	addi	r2,r2,12
   15968:	00ffffd4 	movui	r3,65535
   1596c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   15970:	e0bfff17 	ldw	r2,-4(fp)
   15974:	10800104 	addi	r2,r2,4
   15978:	00c00104 	movi	r3,4
   1597c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   15980:	0005883a 	mov	r2,zero
}
   15984:	e037883a 	mov	sp,fp
   15988:	df000017 	ldw	fp,0(sp)
   1598c:	dec00104 	addi	sp,sp,4
   15990:	f800283a 	ret

00015994 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   15994:	defffc04 	addi	sp,sp,-16
   15998:	df000315 	stw	fp,12(sp)
   1599c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   159a0:	d0a6de17 	ldw	r2,-25736(gp)
   159a4:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   159a8:	d0a6df17 	ldw	r2,-25732(gp)
   159ac:	1000021e 	bne	r2,zero,159b8 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   159b0:	00bfffc4 	movi	r2,-1
   159b4:	00001306 	br	15a04 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   159b8:	e0bfff17 	ldw	r2,-4(fp)
   159bc:	10800404 	addi	r2,r2,16
   159c0:	0007883a 	mov	r3,zero
   159c4:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   159c8:	e0bfff17 	ldw	r2,-4(fp)
   159cc:	10800404 	addi	r2,r2,16
   159d0:	10800037 	ldwio	r2,0(r2)
   159d4:	10bfffcc 	andi	r2,r2,65535
   159d8:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   159dc:	e0bfff17 	ldw	r2,-4(fp)
   159e0:	10800504 	addi	r2,r2,20
   159e4:	10800037 	ldwio	r2,0(r2)
   159e8:	10bfffcc 	andi	r2,r2,65535
   159ec:	e0bffd15 	stw	r2,-12(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   159f0:	e0bffd17 	ldw	r2,-12(fp)
   159f4:	1006943a 	slli	r3,r2,16
   159f8:	e0bffe17 	ldw	r2,-8(fp)
   159fc:	1884b03a 	or	r2,r3,r2
   15a00:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   15a04:	e037883a 	mov	sp,fp
   15a08:	df000017 	ldw	fp,0(sp)
   15a0c:	dec00104 	addi	sp,sp,4
   15a10:	f800283a 	ret

00015a14 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   15a14:	deffff04 	addi	sp,sp,-4
   15a18:	df000015 	stw	fp,0(sp)
   15a1c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   15a20:	d0a6df17 	ldw	r2,-25732(gp)
}
   15a24:	e037883a 	mov	sp,fp
   15a28:	df000017 	ldw	fp,0(sp)
   15a2c:	dec00104 	addi	sp,sp,4
   15a30:	f800283a 	ret

00015a34 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   15a34:	defffc04 	addi	sp,sp,-16
   15a38:	dfc00315 	stw	ra,12(sp)
   15a3c:	df000215 	stw	fp,8(sp)
   15a40:	df000204 	addi	fp,sp,8
   15a44:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   15a48:	d1600604 	addi	r5,gp,-32744
   15a4c:	e13ffe17 	ldw	r4,-8(fp)
   15a50:	001612c0 	call	1612c <alt_find_dev>
   15a54:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   15a58:	e0bfff17 	ldw	r2,-4(fp)
}
   15a5c:	e037883a 	mov	sp,fp
   15a60:	dfc00117 	ldw	ra,4(sp)
   15a64:	df000017 	ldw	fp,0(sp)
   15a68:	dec00204 	addi	sp,sp,8
   15a6c:	f800283a 	ret

00015a70 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   15a70:	defffd04 	addi	sp,sp,-12
   15a74:	df000215 	stw	fp,8(sp)
   15a78:	df000204 	addi	fp,sp,8
   15a7c:	e13fff15 	stw	r4,-4(fp)
   15a80:	e17ffe15 	stw	r5,-8(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   15a84:	e0bfff17 	ldw	r2,-4(fp)
   15a88:	10800a17 	ldw	r2,40(r2)
   15a8c:	10800023 	ldbuio	r2,0(r2)
   15a90:	10803fcc 	andi	r2,r2,255
   15a94:	1007883a 	mov	r3,r2
   15a98:	e0bffe17 	ldw	r2,-8(fp)
   15a9c:	10c00005 	stb	r3,0(r2)

	return 0;
   15aa0:	0005883a 	mov	r2,zero
}
   15aa4:	e037883a 	mov	sp,fp
   15aa8:	df000017 	ldw	fp,0(sp)
   15aac:	dec00104 	addi	sp,sp,4
   15ab0:	f800283a 	ret

00015ab4 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   15ab4:	defffc04 	addi	sp,sp,-16
   15ab8:	df000315 	stw	fp,12(sp)
   15abc:	df000304 	addi	fp,sp,12
   15ac0:	e13fff15 	stw	r4,-4(fp)
   15ac4:	2805883a 	mov	r2,r5
   15ac8:	e1bffd15 	stw	r6,-12(fp)
   15acc:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15ad0:	e0bfff17 	ldw	r2,-4(fp)
   15ad4:	10800a17 	ldw	r2,40(r2)
   15ad8:	1007883a 	mov	r3,r2
   15adc:	e0bffe03 	ldbu	r2,-8(fp)
   15ae0:	10800fcc 	andi	r2,r2,63
   15ae4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15ae8:	e0bfff17 	ldw	r2,-4(fp)
   15aec:	10800a17 	ldw	r2,40(r2)
   15af0:	10800044 	addi	r2,r2,1
   15af4:	10800023 	ldbuio	r2,0(r2)
   15af8:	10803fcc 	andi	r2,r2,255
   15afc:	1007883a 	mov	r3,r2
   15b00:	e0bffd17 	ldw	r2,-12(fp)
   15b04:	10c00005 	stb	r3,0(r2)

	return 0;
   15b08:	0005883a 	mov	r2,zero
}
   15b0c:	e037883a 	mov	sp,fp
   15b10:	df000017 	ldw	fp,0(sp)
   15b14:	dec00104 	addi	sp,sp,4
   15b18:	f800283a 	ret

00015b1c <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   15b1c:	defffc04 	addi	sp,sp,-16
   15b20:	df000315 	stw	fp,12(sp)
   15b24:	df000304 	addi	fp,sp,12
   15b28:	e13fff15 	stw	r4,-4(fp)
   15b2c:	2805883a 	mov	r2,r5
   15b30:	3007883a 	mov	r3,r6
   15b34:	e0bffe05 	stb	r2,-8(fp)
   15b38:	1805883a 	mov	r2,r3
   15b3c:	e0bffd05 	stb	r2,-12(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15b40:	e0bfff17 	ldw	r2,-4(fp)
   15b44:	10800a17 	ldw	r2,40(r2)
   15b48:	1007883a 	mov	r3,r2
   15b4c:	e0bffe03 	ldbu	r2,-8(fp)
   15b50:	10800fcc 	andi	r2,r2,63
   15b54:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   15b58:	e0bfff17 	ldw	r2,-4(fp)
   15b5c:	10800a17 	ldw	r2,40(r2)
   15b60:	10800044 	addi	r2,r2,1
   15b64:	1007883a 	mov	r3,r2
   15b68:	e0bffd03 	ldbu	r2,-12(fp)
   15b6c:	18800025 	stbio	r2,0(r3)

	return 0;
   15b70:	0005883a 	mov	r2,zero
}
   15b74:	e037883a 	mov	sp,fp
   15b78:	df000017 	ldw	fp,0(sp)
   15b7c:	dec00104 	addi	sp,sp,4
   15b80:	f800283a 	ret

00015b84 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   15b84:	defffd04 	addi	sp,sp,-12
   15b88:	df000215 	stw	fp,8(sp)
   15b8c:	df000204 	addi	fp,sp,8
   15b90:	e13fff15 	stw	r4,-4(fp)
   15b94:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15b98:	e0bfff17 	ldw	r2,-4(fp)
   15b9c:	10800a17 	ldw	r2,40(r2)
   15ba0:	1007883a 	mov	r3,r2
   15ba4:	00800c84 	movi	r2,50
   15ba8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15bac:	e0bfff17 	ldw	r2,-4(fp)
   15bb0:	10800a17 	ldw	r2,40(r2)
   15bb4:	10800044 	addi	r2,r2,1
   15bb8:	10800023 	ldbuio	r2,0(r2)
   15bbc:	10803fcc 	andi	r2,r2,255
   15bc0:	10ffffcc 	andi	r3,r2,65535
   15bc4:	e0bffe17 	ldw	r2,-8(fp)
   15bc8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15bcc:	e0bfff17 	ldw	r2,-4(fp)
   15bd0:	10800a17 	ldw	r2,40(r2)
   15bd4:	1007883a 	mov	r3,r2
   15bd8:	00800cc4 	movi	r2,51
   15bdc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15be0:	e0bfff17 	ldw	r2,-4(fp)
   15be4:	10800a17 	ldw	r2,40(r2)
   15be8:	10800044 	addi	r2,r2,1
   15bec:	10800023 	ldbuio	r2,0(r2)
   15bf0:	10803fcc 	andi	r2,r2,255
   15bf4:	1006923a 	slli	r3,r2,8
   15bf8:	00804034 	movhi	r2,256
   15bfc:	10bfc004 	addi	r2,r2,-256
   15c00:	1884703a 	and	r2,r3,r2
   15c04:	e0fffe17 	ldw	r3,-8(fp)
   15c08:	18c00017 	ldw	r3,0(r3)
   15c0c:	10c5883a 	add	r2,r2,r3
   15c10:	1007883a 	mov	r3,r2
   15c14:	e0bffe17 	ldw	r2,-8(fp)
   15c18:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   15c1c:	e0bffe17 	ldw	r2,-8(fp)
   15c20:	10800017 	ldw	r2,0(r2)
   15c24:	10a0000c 	andi	r2,r2,32768
   15c28:	10000626 	beq	r2,zero,15c44 <alt_up_accelerometer_spi_read_x_axis+0xc0>
	{
		*(x_axis) |= 0xFFFF0000;
   15c2c:	e0bffe17 	ldw	r2,-8(fp)
   15c30:	10800017 	ldw	r2,0(r2)
   15c34:	10bffff4 	orhi	r2,r2,65535
   15c38:	1007883a 	mov	r3,r2
   15c3c:	e0bffe17 	ldw	r2,-8(fp)
   15c40:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   15c44:	0005883a 	mov	r2,zero
}
   15c48:	e037883a 	mov	sp,fp
   15c4c:	df000017 	ldw	fp,0(sp)
   15c50:	dec00104 	addi	sp,sp,4
   15c54:	f800283a 	ret

00015c58 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   15c58:	defffd04 	addi	sp,sp,-12
   15c5c:	df000215 	stw	fp,8(sp)
   15c60:	df000204 	addi	fp,sp,8
   15c64:	e13fff15 	stw	r4,-4(fp)
   15c68:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15c6c:	e0bfff17 	ldw	r2,-4(fp)
   15c70:	10800a17 	ldw	r2,40(r2)
   15c74:	1007883a 	mov	r3,r2
   15c78:	00800d04 	movi	r2,52
   15c7c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15c80:	e0bfff17 	ldw	r2,-4(fp)
   15c84:	10800a17 	ldw	r2,40(r2)
   15c88:	10800044 	addi	r2,r2,1
   15c8c:	10800023 	ldbuio	r2,0(r2)
   15c90:	10803fcc 	andi	r2,r2,255
   15c94:	10ffffcc 	andi	r3,r2,65535
   15c98:	e0bffe17 	ldw	r2,-8(fp)
   15c9c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15ca0:	e0bfff17 	ldw	r2,-4(fp)
   15ca4:	10800a17 	ldw	r2,40(r2)
   15ca8:	1007883a 	mov	r3,r2
   15cac:	00800d44 	movi	r2,53
   15cb0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15cb4:	e0bfff17 	ldw	r2,-4(fp)
   15cb8:	10800a17 	ldw	r2,40(r2)
   15cbc:	10800044 	addi	r2,r2,1
   15cc0:	10800023 	ldbuio	r2,0(r2)
   15cc4:	10803fcc 	andi	r2,r2,255
   15cc8:	1006923a 	slli	r3,r2,8
   15ccc:	00804034 	movhi	r2,256
   15cd0:	10bfc004 	addi	r2,r2,-256
   15cd4:	1884703a 	and	r2,r3,r2
   15cd8:	e0fffe17 	ldw	r3,-8(fp)
   15cdc:	18c00017 	ldw	r3,0(r3)
   15ce0:	10c5883a 	add	r2,r2,r3
   15ce4:	1007883a 	mov	r3,r2
   15ce8:	e0bffe17 	ldw	r2,-8(fp)
   15cec:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   15cf0:	e0bffe17 	ldw	r2,-8(fp)
   15cf4:	10800017 	ldw	r2,0(r2)
   15cf8:	10a0000c 	andi	r2,r2,32768
   15cfc:	10000626 	beq	r2,zero,15d18 <alt_up_accelerometer_spi_read_y_axis+0xc0>
	{
		*(y_axis) |= 0xFFFF0000;
   15d00:	e0bffe17 	ldw	r2,-8(fp)
   15d04:	10800017 	ldw	r2,0(r2)
   15d08:	10bffff4 	orhi	r2,r2,65535
   15d0c:	1007883a 	mov	r3,r2
   15d10:	e0bffe17 	ldw	r2,-8(fp)
   15d14:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   15d18:	0005883a 	mov	r2,zero
}
   15d1c:	e037883a 	mov	sp,fp
   15d20:	df000017 	ldw	fp,0(sp)
   15d24:	dec00104 	addi	sp,sp,4
   15d28:	f800283a 	ret

00015d2c <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   15d2c:	defffd04 	addi	sp,sp,-12
   15d30:	df000215 	stw	fp,8(sp)
   15d34:	df000204 	addi	fp,sp,8
   15d38:	e13fff15 	stw	r4,-4(fp)
   15d3c:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15d40:	e0bfff17 	ldw	r2,-4(fp)
   15d44:	10800a17 	ldw	r2,40(r2)
   15d48:	1007883a 	mov	r3,r2
   15d4c:	00800d84 	movi	r2,54
   15d50:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15d54:	e0bfff17 	ldw	r2,-4(fp)
   15d58:	10800a17 	ldw	r2,40(r2)
   15d5c:	10800044 	addi	r2,r2,1
   15d60:	10800023 	ldbuio	r2,0(r2)
   15d64:	10803fcc 	andi	r2,r2,255
   15d68:	10ffffcc 	andi	r3,r2,65535
   15d6c:	e0bffe17 	ldw	r2,-8(fp)
   15d70:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15d74:	e0bfff17 	ldw	r2,-4(fp)
   15d78:	10800a17 	ldw	r2,40(r2)
   15d7c:	1007883a 	mov	r3,r2
   15d80:	00800dc4 	movi	r2,55
   15d84:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15d88:	e0bfff17 	ldw	r2,-4(fp)
   15d8c:	10800a17 	ldw	r2,40(r2)
   15d90:	10800044 	addi	r2,r2,1
   15d94:	10800023 	ldbuio	r2,0(r2)
   15d98:	10803fcc 	andi	r2,r2,255
   15d9c:	1006923a 	slli	r3,r2,8
   15da0:	00804034 	movhi	r2,256
   15da4:	10bfc004 	addi	r2,r2,-256
   15da8:	1884703a 	and	r2,r3,r2
   15dac:	e0fffe17 	ldw	r3,-8(fp)
   15db0:	18c00017 	ldw	r3,0(r3)
   15db4:	10c5883a 	add	r2,r2,r3
   15db8:	1007883a 	mov	r3,r2
   15dbc:	e0bffe17 	ldw	r2,-8(fp)
   15dc0:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   15dc4:	e0bffe17 	ldw	r2,-8(fp)
   15dc8:	10800017 	ldw	r2,0(r2)
   15dcc:	10a0000c 	andi	r2,r2,32768
   15dd0:	10000626 	beq	r2,zero,15dec <alt_up_accelerometer_spi_read_z_axis+0xc0>
	{
		*(z_axis) |= 0xFFFF0000;
   15dd4:	e0bffe17 	ldw	r2,-8(fp)
   15dd8:	10800017 	ldw	r2,0(r2)
   15ddc:	10bffff4 	orhi	r2,r2,65535
   15de0:	1007883a 	mov	r3,r2
   15de4:	e0bffe17 	ldw	r2,-8(fp)
   15de8:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   15dec:	0005883a 	mov	r2,zero
}
   15df0:	e037883a 	mov	sp,fp
   15df4:	df000017 	ldw	fp,0(sp)
   15df8:	dec00104 	addi	sp,sp,4
   15dfc:	f800283a 	ret

00015e00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   15e00:	defff404 	addi	sp,sp,-48
   15e04:	df000b15 	stw	fp,44(sp)
   15e08:	df000b04 	addi	fp,sp,44
   15e0c:	e13ff815 	stw	r4,-32(fp)
   15e10:	e17ff715 	stw	r5,-36(fp)
   15e14:	e1bff615 	stw	r6,-40(fp)
   15e18:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   15e1c:	e03ffe15 	stw	zero,-8(fp)
   15e20:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   15e24:	d0a6e017 	ldw	r2,-25728(gp)
  
  if (alt_ticks_per_second ())
   15e28:	10004826 	beq	r2,zero,15f4c <alt_alarm_start+0x14c>
  {
    if (alarm)
   15e2c:	e0bff817 	ldw	r2,-32(fp)
   15e30:	10004426 	beq	r2,zero,15f44 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   15e34:	e0bff817 	ldw	r2,-32(fp)
   15e38:	e0fff617 	ldw	r3,-40(fp)
   15e3c:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   15e40:	e0bff817 	ldw	r2,-32(fp)
   15e44:	e0fff517 	ldw	r3,-44(fp)
   15e48:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   15e4c:	0005303a 	rdctl	r2,status
   15e50:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e54:	e0fff917 	ldw	r3,-28(fp)
   15e58:	00bfff84 	movi	r2,-2
   15e5c:	1884703a 	and	r2,r3,r2
   15e60:	1001703a 	wrctl	status,r2
  return context;
   15e64:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   15e68:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15e6c:	d0a6e117 	ldw	r2,-25724(gp)
   15e70:	d0e6e217 	ldw	r3,-25720(gp)
      
      current_nticks = alt_nticks();
   15e74:	e0bffe15 	stw	r2,-8(fp)
   15e78:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   15e7c:	e0bff717 	ldw	r2,-36(fp)
   15e80:	1011883a 	mov	r8,r2
   15e84:	0013883a 	mov	r9,zero
   15e88:	e13ffe17 	ldw	r4,-8(fp)
   15e8c:	e17fff17 	ldw	r5,-4(fp)
   15e90:	4105883a 	add	r2,r8,r4
   15e94:	120d803a 	cmpltu	r6,r2,r8
   15e98:	4947883a 	add	r3,r9,r5
   15e9c:	30c9883a 	add	r4,r6,r3
   15ea0:	2007883a 	mov	r3,r4
   15ea4:	1009883a 	mov	r4,r2
   15ea8:	180b883a 	mov	r5,r3
   15eac:	01800044 	movi	r6,1
   15eb0:	000f883a 	mov	r7,zero
   15eb4:	2185883a 	add	r2,r4,r6
   15eb8:	1111803a 	cmpltu	r8,r2,r4
   15ebc:	29c7883a 	add	r3,r5,r7
   15ec0:	40c9883a 	add	r4,r8,r3
   15ec4:	2007883a 	mov	r3,r4
   15ec8:	1009883a 	mov	r4,r2
   15ecc:	180b883a 	mov	r5,r3
   15ed0:	e0bff817 	ldw	r2,-32(fp)
   15ed4:	11000215 	stw	r4,8(r2)
   15ed8:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15edc:	e0bff817 	ldw	r2,-32(fp)
   15ee0:	d0e00c04 	addi	r3,gp,-32720
   15ee4:	e0fffb15 	stw	r3,-20(fp)
   15ee8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15eec:	e0bffa17 	ldw	r2,-24(fp)
   15ef0:	e0fffb17 	ldw	r3,-20(fp)
   15ef4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15ef8:	e0bffb17 	ldw	r2,-20(fp)
   15efc:	10c00017 	ldw	r3,0(r2)
   15f00:	e0bffa17 	ldw	r2,-24(fp)
   15f04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15f08:	e0bffb17 	ldw	r2,-20(fp)
   15f0c:	10800017 	ldw	r2,0(r2)
   15f10:	e0fffa17 	ldw	r3,-24(fp)
   15f14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15f18:	e0bffb17 	ldw	r2,-20(fp)
   15f1c:	e0fffa17 	ldw	r3,-24(fp)
   15f20:	10c00015 	stw	r3,0(r2)
}
   15f24:	0001883a 	nop
   15f28:	e0bffd17 	ldw	r2,-12(fp)
   15f2c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15f30:	e0bffc17 	ldw	r2,-16(fp)
   15f34:	1001703a 	wrctl	status,r2
}
   15f38:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   15f3c:	0005883a 	mov	r2,zero
   15f40:	00000306 	br	15f50 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   15f44:	00bffa84 	movi	r2,-22
   15f48:	00000106 	br	15f50 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   15f4c:	00bfde84 	movi	r2,-134
  }
}
   15f50:	e037883a 	mov	sp,fp
   15f54:	df000017 	ldw	fp,0(sp)
   15f58:	dec00104 	addi	sp,sp,4
   15f5c:	f800283a 	ret

00015f60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15f60:	deffff04 	addi	sp,sp,-4
   15f64:	df000015 	stw	fp,0(sp)
   15f68:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15f6c:	0001883a 	nop
   15f70:	e037883a 	mov	sp,fp
   15f74:	df000017 	ldw	fp,0(sp)
   15f78:	dec00104 	addi	sp,sp,4
   15f7c:	f800283a 	ret

00015f80 <alt_get_errno>:
{
   15f80:	defffe04 	addi	sp,sp,-8
   15f84:	dfc00115 	stw	ra,4(sp)
   15f88:	df000015 	stw	fp,0(sp)
   15f8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15f90:	d0a00917 	ldw	r2,-32732(gp)
   15f94:	10000326 	beq	r2,zero,15fa4 <alt_get_errno+0x24>
   15f98:	d0a00917 	ldw	r2,-32732(gp)
   15f9c:	103ee83a 	callr	r2
   15fa0:	00000106 	br	15fa8 <alt_get_errno+0x28>
   15fa4:	d0a6d604 	addi	r2,gp,-25768
}
   15fa8:	e037883a 	mov	sp,fp
   15fac:	dfc00117 	ldw	ra,4(sp)
   15fb0:	df000017 	ldw	fp,0(sp)
   15fb4:	dec00204 	addi	sp,sp,8
   15fb8:	f800283a 	ret

00015fbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15fbc:	defffa04 	addi	sp,sp,-24
   15fc0:	dfc00515 	stw	ra,20(sp)
   15fc4:	df000415 	stw	fp,16(sp)
   15fc8:	df000404 	addi	fp,sp,16
   15fcc:	e13ffd15 	stw	r4,-12(fp)
   15fd0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15fd4:	e0bffd17 	ldw	r2,-12(fp)
   15fd8:	10000326 	beq	r2,zero,15fe8 <alt_dev_llist_insert+0x2c>
   15fdc:	e0bffd17 	ldw	r2,-12(fp)
   15fe0:	10800217 	ldw	r2,8(r2)
   15fe4:	1000061e 	bne	r2,zero,16000 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   15fe8:	0015f800 	call	15f80 <alt_get_errno>
   15fec:	1007883a 	mov	r3,r2
   15ff0:	00800584 	movi	r2,22
   15ff4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   15ff8:	00bffa84 	movi	r2,-22
   15ffc:	00001406 	br	16050 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16000:	e0bffd17 	ldw	r2,-12(fp)
   16004:	e0fffc17 	ldw	r3,-16(fp)
   16008:	e0ffff15 	stw	r3,-4(fp)
   1600c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   16010:	e0bffe17 	ldw	r2,-8(fp)
   16014:	e0ffff17 	ldw	r3,-4(fp)
   16018:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1601c:	e0bfff17 	ldw	r2,-4(fp)
   16020:	10c00017 	ldw	r3,0(r2)
   16024:	e0bffe17 	ldw	r2,-8(fp)
   16028:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   1602c:	e0bfff17 	ldw	r2,-4(fp)
   16030:	10800017 	ldw	r2,0(r2)
   16034:	e0fffe17 	ldw	r3,-8(fp)
   16038:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1603c:	e0bfff17 	ldw	r2,-4(fp)
   16040:	e0fffe17 	ldw	r3,-8(fp)
   16044:	10c00015 	stw	r3,0(r2)
}
   16048:	0001883a 	nop

  return 0;  
   1604c:	0005883a 	mov	r2,zero
}
   16050:	e037883a 	mov	sp,fp
   16054:	dfc00117 	ldw	ra,4(sp)
   16058:	df000017 	ldw	fp,0(sp)
   1605c:	dec00204 	addi	sp,sp,8
   16060:	f800283a 	ret

00016064 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   16064:	defffd04 	addi	sp,sp,-12
   16068:	dfc00215 	stw	ra,8(sp)
   1606c:	df000115 	stw	fp,4(sp)
   16070:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16074:	00800074 	movhi	r2,1
   16078:	109bab04 	addi	r2,r2,28332
   1607c:	e0bfff15 	stw	r2,-4(fp)
   16080:	00000606 	br	1609c <_do_ctors+0x38>
        (*ctor) (); 
   16084:	e0bfff17 	ldw	r2,-4(fp)
   16088:	10800017 	ldw	r2,0(r2)
   1608c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16090:	e0bfff17 	ldw	r2,-4(fp)
   16094:	10bfff04 	addi	r2,r2,-4
   16098:	e0bfff15 	stw	r2,-4(fp)
   1609c:	e0ffff17 	ldw	r3,-4(fp)
   160a0:	00800074 	movhi	r2,1
   160a4:	109bac04 	addi	r2,r2,28336
   160a8:	18bff62e 	bgeu	r3,r2,16084 <_do_ctors+0x20>
}
   160ac:	0001883a 	nop
   160b0:	0001883a 	nop
   160b4:	e037883a 	mov	sp,fp
   160b8:	dfc00117 	ldw	ra,4(sp)
   160bc:	df000017 	ldw	fp,0(sp)
   160c0:	dec00204 	addi	sp,sp,8
   160c4:	f800283a 	ret

000160c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   160c8:	defffd04 	addi	sp,sp,-12
   160cc:	dfc00215 	stw	ra,8(sp)
   160d0:	df000115 	stw	fp,4(sp)
   160d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   160d8:	00800074 	movhi	r2,1
   160dc:	109bab04 	addi	r2,r2,28332
   160e0:	e0bfff15 	stw	r2,-4(fp)
   160e4:	00000606 	br	16100 <_do_dtors+0x38>
        (*dtor) (); 
   160e8:	e0bfff17 	ldw	r2,-4(fp)
   160ec:	10800017 	ldw	r2,0(r2)
   160f0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   160f4:	e0bfff17 	ldw	r2,-4(fp)
   160f8:	10bfff04 	addi	r2,r2,-4
   160fc:	e0bfff15 	stw	r2,-4(fp)
   16100:	e0ffff17 	ldw	r3,-4(fp)
   16104:	00800074 	movhi	r2,1
   16108:	109bac04 	addi	r2,r2,28336
   1610c:	18bff62e 	bgeu	r3,r2,160e8 <_do_dtors+0x20>
}
   16110:	0001883a 	nop
   16114:	0001883a 	nop
   16118:	e037883a 	mov	sp,fp
   1611c:	dfc00117 	ldw	ra,4(sp)
   16120:	df000017 	ldw	fp,0(sp)
   16124:	dec00204 	addi	sp,sp,8
   16128:	f800283a 	ret

0001612c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1612c:	defffa04 	addi	sp,sp,-24
   16130:	dfc00515 	stw	ra,20(sp)
   16134:	df000415 	stw	fp,16(sp)
   16138:	df000404 	addi	fp,sp,16
   1613c:	e13ffd15 	stw	r4,-12(fp)
   16140:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16144:	e0bffc17 	ldw	r2,-16(fp)
   16148:	10800017 	ldw	r2,0(r2)
   1614c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16150:	e13ffd17 	ldw	r4,-12(fp)
   16154:	001399c0 	call	1399c <strlen>
   16158:	10800044 	addi	r2,r2,1
   1615c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16160:	00000d06 	br	16198 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16164:	e0bfff17 	ldw	r2,-4(fp)
   16168:	10800217 	ldw	r2,8(r2)
   1616c:	e0fffe17 	ldw	r3,-8(fp)
   16170:	180d883a 	mov	r6,r3
   16174:	e17ffd17 	ldw	r5,-12(fp)
   16178:	1009883a 	mov	r4,r2
   1617c:	00167c00 	call	167c0 <memcmp>
   16180:	1000021e 	bne	r2,zero,1618c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16184:	e0bfff17 	ldw	r2,-4(fp)
   16188:	00000706 	br	161a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1618c:	e0bfff17 	ldw	r2,-4(fp)
   16190:	10800017 	ldw	r2,0(r2)
   16194:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   16198:	e0ffff17 	ldw	r3,-4(fp)
   1619c:	e0bffc17 	ldw	r2,-16(fp)
   161a0:	18bff01e 	bne	r3,r2,16164 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   161a4:	0005883a 	mov	r2,zero
}
   161a8:	e037883a 	mov	sp,fp
   161ac:	dfc00117 	ldw	ra,4(sp)
   161b0:	df000017 	ldw	fp,0(sp)
   161b4:	dec00204 	addi	sp,sp,8
   161b8:	f800283a 	ret

000161bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   161bc:	defffb04 	addi	sp,sp,-20
   161c0:	dfc00415 	stw	ra,16(sp)
   161c4:	df000315 	stw	fp,12(sp)
   161c8:	df000304 	addi	fp,sp,12
   161cc:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   161d0:	d0a00417 	ldw	r2,-32752(gp)
   161d4:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   161d8:	00003106 	br	162a0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   161dc:	e0bfff17 	ldw	r2,-4(fp)
   161e0:	10800217 	ldw	r2,8(r2)
   161e4:	1009883a 	mov	r4,r2
   161e8:	001399c0 	call	1399c <strlen>
   161ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   161f0:	e0bfff17 	ldw	r2,-4(fp)
   161f4:	10c00217 	ldw	r3,8(r2)
   161f8:	e0bffe17 	ldw	r2,-8(fp)
   161fc:	10bfffc4 	addi	r2,r2,-1
   16200:	1885883a 	add	r2,r3,r2
   16204:	10800003 	ldbu	r2,0(r2)
   16208:	10803fcc 	andi	r2,r2,255
   1620c:	1080201c 	xori	r2,r2,128
   16210:	10bfe004 	addi	r2,r2,-128
   16214:	10800bd8 	cmpnei	r2,r2,47
   16218:	1000031e 	bne	r2,zero,16228 <alt_find_file+0x6c>
    {
      len -= 1;
   1621c:	e0bffe17 	ldw	r2,-8(fp)
   16220:	10bfffc4 	addi	r2,r2,-1
   16224:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16228:	e0bffe17 	ldw	r2,-8(fp)
   1622c:	e0fffd17 	ldw	r3,-12(fp)
   16230:	1885883a 	add	r2,r3,r2
   16234:	10800003 	ldbu	r2,0(r2)
   16238:	10803fcc 	andi	r2,r2,255
   1623c:	1080201c 	xori	r2,r2,128
   16240:	10bfe004 	addi	r2,r2,-128
   16244:	10800be0 	cmpeqi	r2,r2,47
   16248:	1000081e 	bne	r2,zero,1626c <alt_find_file+0xb0>
   1624c:	e0bffe17 	ldw	r2,-8(fp)
   16250:	e0fffd17 	ldw	r3,-12(fp)
   16254:	1885883a 	add	r2,r3,r2
   16258:	10800003 	ldbu	r2,0(r2)
   1625c:	10803fcc 	andi	r2,r2,255
   16260:	1080201c 	xori	r2,r2,128
   16264:	10bfe004 	addi	r2,r2,-128
   16268:	10000a1e 	bne	r2,zero,16294 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1626c:	e0bfff17 	ldw	r2,-4(fp)
   16270:	10800217 	ldw	r2,8(r2)
   16274:	e0fffe17 	ldw	r3,-8(fp)
   16278:	180d883a 	mov	r6,r3
   1627c:	e17ffd17 	ldw	r5,-12(fp)
   16280:	1009883a 	mov	r4,r2
   16284:	00167c00 	call	167c0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   16288:	1000021e 	bne	r2,zero,16294 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   1628c:	e0bfff17 	ldw	r2,-4(fp)
   16290:	00000706 	br	162b0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   16294:	e0bfff17 	ldw	r2,-4(fp)
   16298:	10800017 	ldw	r2,0(r2)
   1629c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   162a0:	e0ffff17 	ldw	r3,-4(fp)
   162a4:	d0a00404 	addi	r2,gp,-32752
   162a8:	18bfcc1e 	bne	r3,r2,161dc <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   162ac:	0005883a 	mov	r2,zero
}
   162b0:	e037883a 	mov	sp,fp
   162b4:	dfc00117 	ldw	ra,4(sp)
   162b8:	df000017 	ldw	fp,0(sp)
   162bc:	dec00204 	addi	sp,sp,8
   162c0:	f800283a 	ret

000162c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   162c4:	defffc04 	addi	sp,sp,-16
   162c8:	df000315 	stw	fp,12(sp)
   162cc:	df000304 	addi	fp,sp,12
   162d0:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   162d4:	00bffa04 	movi	r2,-24
   162d8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   162dc:	e03fff15 	stw	zero,-4(fp)
   162e0:	00001d06 	br	16358 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   162e4:	e0ffff17 	ldw	r3,-4(fp)
   162e8:	1805883a 	mov	r2,r3
   162ec:	1085883a 	add	r2,r2,r2
   162f0:	10c5883a 	add	r2,r2,r3
   162f4:	100490ba 	slli	r2,r2,2
   162f8:	00c00074 	movhi	r3,1
   162fc:	10c7883a 	add	r3,r2,r3
   16300:	189e7017 	ldw	r2,31168(r3)
   16304:	1000111e 	bne	r2,zero,1634c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   16308:	e0ffff17 	ldw	r3,-4(fp)
   1630c:	1805883a 	mov	r2,r3
   16310:	1085883a 	add	r2,r2,r2
   16314:	10c5883a 	add	r2,r2,r3
   16318:	100490ba 	slli	r2,r2,2
   1631c:	e13ffd17 	ldw	r4,-12(fp)
   16320:	00c00074 	movhi	r3,1
   16324:	10c7883a 	add	r3,r2,r3
   16328:	191e7015 	stw	r4,31168(r3)
      if (i > alt_max_fd)
   1632c:	d0e00817 	ldw	r3,-32736(gp)
   16330:	e0bfff17 	ldw	r2,-4(fp)
   16334:	1880020e 	bge	r3,r2,16340 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   16338:	e0bfff17 	ldw	r2,-4(fp)
   1633c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   16340:	e0bfff17 	ldw	r2,-4(fp)
   16344:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   16348:	00000706 	br	16368 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   1634c:	e0bfff17 	ldw	r2,-4(fp)
   16350:	10800044 	addi	r2,r2,1
   16354:	e0bfff15 	stw	r2,-4(fp)
   16358:	e0bfff17 	ldw	r2,-4(fp)
   1635c:	10800810 	cmplti	r2,r2,32
   16360:	103fe01e 	bne	r2,zero,162e4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   16364:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16368:	e0bffe17 	ldw	r2,-8(fp)
}
   1636c:	e037883a 	mov	sp,fp
   16370:	df000017 	ldw	fp,0(sp)
   16374:	dec00104 	addi	sp,sp,4
   16378:	f800283a 	ret

0001637c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1637c:	deffff04 	addi	sp,sp,-4
   16380:	df000015 	stw	fp,0(sp)
   16384:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   16388:	0001883a 	nop
   1638c:	e037883a 	mov	sp,fp
   16390:	df000017 	ldw	fp,0(sp)
   16394:	dec00104 	addi	sp,sp,4
   16398:	f800283a 	ret

0001639c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1639c:	defff904 	addi	sp,sp,-28
   163a0:	dfc00615 	stw	ra,24(sp)
   163a4:	df000515 	stw	fp,20(sp)
   163a8:	df000504 	addi	fp,sp,20
   163ac:	e13ffe15 	stw	r4,-8(fp)
   163b0:	e17ffd15 	stw	r5,-12(fp)
   163b4:	e1bffc15 	stw	r6,-16(fp)
   163b8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   163bc:	e1bffb17 	ldw	r6,-20(fp)
   163c0:	e17ffc17 	ldw	r5,-16(fp)
   163c4:	e13ffd17 	ldw	r4,-12(fp)
   163c8:	00145540 	call	14554 <open>
   163cc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   163d0:	e0bfff17 	ldw	r2,-4(fp)
   163d4:	10002016 	blt	r2,zero,16458 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   163d8:	e0ffff17 	ldw	r3,-4(fp)
   163dc:	1805883a 	mov	r2,r3
   163e0:	1085883a 	add	r2,r2,r2
   163e4:	10c5883a 	add	r2,r2,r3
   163e8:	100490ba 	slli	r2,r2,2
   163ec:	00c00074 	movhi	r3,1
   163f0:	10c7883a 	add	r3,r2,r3
   163f4:	18de7017 	ldw	r3,31168(r3)
   163f8:	e0bffe17 	ldw	r2,-8(fp)
   163fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16400:	e0ffff17 	ldw	r3,-4(fp)
   16404:	1805883a 	mov	r2,r3
   16408:	1085883a 	add	r2,r2,r2
   1640c:	10c5883a 	add	r2,r2,r3
   16410:	100490ba 	slli	r2,r2,2
   16414:	00c00074 	movhi	r3,1
   16418:	10c7883a 	add	r3,r2,r3
   1641c:	18de7117 	ldw	r3,31172(r3)
   16420:	e0bffe17 	ldw	r2,-8(fp)
   16424:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16428:	e0ffff17 	ldw	r3,-4(fp)
   1642c:	1805883a 	mov	r2,r3
   16430:	1085883a 	add	r2,r2,r2
   16434:	10c5883a 	add	r2,r2,r3
   16438:	100490ba 	slli	r2,r2,2
   1643c:	00c00074 	movhi	r3,1
   16440:	10c7883a 	add	r3,r2,r3
   16444:	18de7217 	ldw	r3,31176(r3)
   16448:	e0bffe17 	ldw	r2,-8(fp)
   1644c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16450:	e13fff17 	ldw	r4,-4(fp)
   16454:	0014a540 	call	14a54 <alt_release_fd>
  }
} 
   16458:	0001883a 	nop
   1645c:	e037883a 	mov	sp,fp
   16460:	dfc00117 	ldw	ra,4(sp)
   16464:	df000017 	ldw	fp,0(sp)
   16468:	dec00204 	addi	sp,sp,8
   1646c:	f800283a 	ret

00016470 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16470:	defffb04 	addi	sp,sp,-20
   16474:	dfc00415 	stw	ra,16(sp)
   16478:	df000315 	stw	fp,12(sp)
   1647c:	df000304 	addi	fp,sp,12
   16480:	e13fff15 	stw	r4,-4(fp)
   16484:	e17ffe15 	stw	r5,-8(fp)
   16488:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1648c:	01c07fc4 	movi	r7,511
   16490:	01800044 	movi	r6,1
   16494:	e17fff17 	ldw	r5,-4(fp)
   16498:	01000074 	movhi	r4,1
   1649c:	211e7304 	addi	r4,r4,31180
   164a0:	001639c0 	call	1639c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   164a4:	01c07fc4 	movi	r7,511
   164a8:	000d883a 	mov	r6,zero
   164ac:	e17ffe17 	ldw	r5,-8(fp)
   164b0:	01000074 	movhi	r4,1
   164b4:	211e7004 	addi	r4,r4,31168
   164b8:	001639c0 	call	1639c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   164bc:	01c07fc4 	movi	r7,511
   164c0:	01800044 	movi	r6,1
   164c4:	e17ffd17 	ldw	r5,-12(fp)
   164c8:	01000074 	movhi	r4,1
   164cc:	211e7604 	addi	r4,r4,31192
   164d0:	001639c0 	call	1639c <alt_open_fd>
}  
   164d4:	0001883a 	nop
   164d8:	e037883a 	mov	sp,fp
   164dc:	dfc00117 	ldw	ra,4(sp)
   164e0:	df000017 	ldw	fp,0(sp)
   164e4:	dec00204 	addi	sp,sp,8
   164e8:	f800283a 	ret

000164ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   164ec:	defffa04 	addi	sp,sp,-24
   164f0:	df000515 	stw	fp,20(sp)
   164f4:	df000504 	addi	fp,sp,20
   164f8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   164fc:	0005303a 	rdctl	r2,status
   16500:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16504:	e0fffc17 	ldw	r3,-16(fp)
   16508:	00bfff84 	movi	r2,-2
   1650c:	1884703a 	and	r2,r3,r2
   16510:	1001703a 	wrctl	status,r2
  return context;
   16514:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16518:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   1651c:	e0bffb17 	ldw	r2,-20(fp)
   16520:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16524:	e0bffd17 	ldw	r2,-12(fp)
   16528:	10800017 	ldw	r2,0(r2)
   1652c:	e0fffd17 	ldw	r3,-12(fp)
   16530:	18c00117 	ldw	r3,4(r3)
   16534:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16538:	e0bffd17 	ldw	r2,-12(fp)
   1653c:	10800117 	ldw	r2,4(r2)
   16540:	e0fffd17 	ldw	r3,-12(fp)
   16544:	18c00017 	ldw	r3,0(r3)
   16548:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1654c:	e0bffd17 	ldw	r2,-12(fp)
   16550:	e0fffd17 	ldw	r3,-12(fp)
   16554:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16558:	e0bffd17 	ldw	r2,-12(fp)
   1655c:	e0fffd17 	ldw	r3,-12(fp)
   16560:	10c00015 	stw	r3,0(r2)
} 
   16564:	0001883a 	nop
   16568:	e0bfff17 	ldw	r2,-4(fp)
   1656c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   16570:	e0bffe17 	ldw	r2,-8(fp)
   16574:	1001703a 	wrctl	status,r2
}
   16578:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   1657c:	0001883a 	nop
   16580:	e037883a 	mov	sp,fp
   16584:	df000017 	ldw	fp,0(sp)
   16588:	dec00104 	addi	sp,sp,4
   1658c:	f800283a 	ret

00016590 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16590:	defff904 	addi	sp,sp,-28
   16594:	dfc00615 	stw	ra,24(sp)
   16598:	df000515 	stw	fp,20(sp)
   1659c:	dc400415 	stw	r17,16(sp)
   165a0:	dc000315 	stw	r16,12(sp)
   165a4:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   165a8:	d0a00c17 	ldw	r2,-32720(gp)
   165ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   165b0:	d126e117 	ldw	r4,-25724(gp)
   165b4:	d166e217 	ldw	r5,-25720(gp)
   165b8:	01800044 	movi	r6,1
   165bc:	000f883a 	mov	r7,zero
   165c0:	2185883a 	add	r2,r4,r6
   165c4:	1111803a 	cmpltu	r8,r2,r4
   165c8:	29c7883a 	add	r3,r5,r7
   165cc:	40c9883a 	add	r4,r8,r3
   165d0:	2007883a 	mov	r3,r4
   165d4:	1009883a 	mov	r4,r2
   165d8:	180b883a 	mov	r5,r3
   165dc:	d126e115 	stw	r4,-25724(gp)
   165e0:	d166e215 	stw	r5,-25720(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   165e4:	00002906 	br	1668c <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   165e8:	e0bffd17 	ldw	r2,-12(fp)
   165ec:	10800017 	ldw	r2,0(r2)
   165f0:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   165f4:	e13ffd17 	ldw	r4,-12(fp)
   165f8:	20800217 	ldw	r2,8(r4)
   165fc:	20c00317 	ldw	r3,12(r4)
   16600:	d126e117 	ldw	r4,-25724(gp)
   16604:	d166e217 	ldw	r5,-25720(gp)
   16608:	28c01e36 	bltu	r5,r3,16684 <alt_tick+0xf4>
   1660c:	1940011e 	bne	r3,r5,16614 <alt_tick+0x84>
   16610:	20801c36 	bltu	r4,r2,16684 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   16614:	e0bffd17 	ldw	r2,-12(fp)
   16618:	10800417 	ldw	r2,16(r2)
   1661c:	e0fffd17 	ldw	r3,-12(fp)
   16620:	18c00517 	ldw	r3,20(r3)
   16624:	1809883a 	mov	r4,r3
   16628:	103ee83a 	callr	r2
   1662c:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16630:	e0bffb17 	ldw	r2,-20(fp)
   16634:	1000031e 	bne	r2,zero,16644 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   16638:	e13ffd17 	ldw	r4,-12(fp)
   1663c:	00164ec0 	call	164ec <alt_alarm_stop>
   16640:	00001006 	br	16684 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   16644:	e0bffd17 	ldw	r2,-12(fp)
   16648:	11000217 	ldw	r4,8(r2)
   1664c:	11400317 	ldw	r5,12(r2)
   16650:	e0bffb17 	ldw	r2,-20(fp)
   16654:	1021883a 	mov	r16,r2
   16658:	0023883a 	mov	r17,zero
   1665c:	2405883a 	add	r2,r4,r16
   16660:	110d803a 	cmpltu	r6,r2,r4
   16664:	2c47883a 	add	r3,r5,r17
   16668:	30c9883a 	add	r4,r6,r3
   1666c:	2007883a 	mov	r3,r4
   16670:	1009883a 	mov	r4,r2
   16674:	180b883a 	mov	r5,r3
   16678:	e0bffd17 	ldw	r2,-12(fp)
   1667c:	11000215 	stw	r4,8(r2)
   16680:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   16684:	e0bffc17 	ldw	r2,-16(fp)
   16688:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   1668c:	e0fffd17 	ldw	r3,-12(fp)
   16690:	d0a00c04 	addi	r2,gp,-32720
   16694:	18bfd41e 	bne	r3,r2,165e8 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16698:	0001883a 	nop
}
   1669c:	0001883a 	nop
   166a0:	e6fffe04 	addi	sp,fp,-8
   166a4:	dfc00317 	ldw	ra,12(sp)
   166a8:	df000217 	ldw	fp,8(sp)
   166ac:	dc400117 	ldw	r17,4(sp)
   166b0:	dc000017 	ldw	r16,0(sp)
   166b4:	dec00404 	addi	sp,sp,16
   166b8:	f800283a 	ret

000166bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   166bc:	deffff04 	addi	sp,sp,-4
   166c0:	df000015 	stw	fp,0(sp)
   166c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   166c8:	000170fa 	wrctl	ienable,zero
}
   166cc:	0001883a 	nop
   166d0:	e037883a 	mov	sp,fp
   166d4:	df000017 	ldw	fp,0(sp)
   166d8:	dec00104 	addi	sp,sp,4
   166dc:	f800283a 	ret

000166e0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   166e0:	defffe04 	addi	sp,sp,-8
   166e4:	df000115 	stw	fp,4(sp)
   166e8:	df000104 	addi	fp,sp,4
   166ec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   166f0:	e0bfff17 	ldw	r2,-4(fp)
   166f4:	10bffe84 	addi	r2,r2,-6
   166f8:	10c00428 	cmpgeui	r3,r2,16
   166fc:	1800191e 	bne	r3,zero,16764 <alt_exception_cause_generated_bad_addr+0x84>
   16700:	100690ba 	slli	r3,r2,2
   16704:	00800074 	movhi	r2,1
   16708:	1885883a 	add	r2,r3,r2
   1670c:	1099c517 	ldw	r2,26388(r2)
   16710:	1000683a 	jmp	r2
   16714:	00016754 	movui	zero,1437
   16718:	00016754 	movui	zero,1437
   1671c:	00016764 	muli	zero,zero,1437
   16720:	00016764 	muli	zero,zero,1437
   16724:	00016764 	muli	zero,zero,1437
   16728:	00016754 	movui	zero,1437
   1672c:	0001675c 	xori	zero,zero,1437
   16730:	00016764 	muli	zero,zero,1437
   16734:	00016754 	movui	zero,1437
   16738:	00016754 	movui	zero,1437
   1673c:	00016764 	muli	zero,zero,1437
   16740:	00016754 	movui	zero,1437
   16744:	0001675c 	xori	zero,zero,1437
   16748:	00016764 	muli	zero,zero,1437
   1674c:	00016764 	muli	zero,zero,1437
   16750:	00016754 	movui	zero,1437
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   16754:	00800044 	movi	r2,1
   16758:	00000306 	br	16768 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1675c:	0005883a 	mov	r2,zero
   16760:	00000106 	br	16768 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   16764:	0005883a 	mov	r2,zero
  }
}
   16768:	e037883a 	mov	sp,fp
   1676c:	df000017 	ldw	fp,0(sp)
   16770:	dec00104 	addi	sp,sp,4
   16774:	f800283a 	ret

00016778 <atexit>:
   16778:	200b883a 	mov	r5,r4
   1677c:	000f883a 	mov	r7,zero
   16780:	000d883a 	mov	r6,zero
   16784:	0009883a 	mov	r4,zero
   16788:	00168581 	jmpi	16858 <__register_exitproc>

0001678c <exit>:
   1678c:	defffe04 	addi	sp,sp,-8
   16790:	000b883a 	mov	r5,zero
   16794:	dc000015 	stw	r16,0(sp)
   16798:	dfc00115 	stw	ra,4(sp)
   1679c:	2021883a 	mov	r16,r4
   167a0:	00168e80 	call	168e8 <__call_exitprocs>
   167a4:	008000b4 	movhi	r2,2
   167a8:	1122f317 	ldw	r4,-29748(r2)
   167ac:	20800f17 	ldw	r2,60(r4)
   167b0:	10000126 	beq	r2,zero,167b8 <exit+0x2c>
   167b4:	103ee83a 	callr	r2
   167b8:	8009883a 	mov	r4,r16
   167bc:	0016e780 	call	16e78 <_exit>

000167c0 <memcmp>:
   167c0:	30800130 	cmpltui	r2,r6,4
   167c4:	10000b1e 	bne	r2,zero,167f4 <memcmp+0x34>
   167c8:	2144b03a 	or	r2,r4,r5
   167cc:	108000cc 	andi	r2,r2,3
   167d0:	1000171e 	bne	r2,zero,16830 <memcmp+0x70>
   167d4:	20c00017 	ldw	r3,0(r4)
   167d8:	28800017 	ldw	r2,0(r5)
   167dc:	1880141e 	bne	r3,r2,16830 <memcmp+0x70>
   167e0:	31bfff04 	addi	r6,r6,-4
   167e4:	30800128 	cmpgeui	r2,r6,4
   167e8:	21000104 	addi	r4,r4,4
   167ec:	29400104 	addi	r5,r5,4
   167f0:	103ff81e 	bne	r2,zero,167d4 <memcmp+0x14>
   167f4:	30bfffc4 	addi	r2,r6,-1
   167f8:	30000b26 	beq	r6,zero,16828 <memcmp+0x68>
   167fc:	11800044 	addi	r6,r2,1
   16800:	218d883a 	add	r6,r4,r6
   16804:	00000106 	br	1680c <memcmp+0x4c>
   16808:	21800726 	beq	r4,r6,16828 <memcmp+0x68>
   1680c:	20800003 	ldbu	r2,0(r4)
   16810:	28c00003 	ldbu	r3,0(r5)
   16814:	21000044 	addi	r4,r4,1
   16818:	29400044 	addi	r5,r5,1
   1681c:	10fffa26 	beq	r2,r3,16808 <memcmp+0x48>
   16820:	10c5c83a 	sub	r2,r2,r3
   16824:	f800283a 	ret
   16828:	0005883a 	mov	r2,zero
   1682c:	f800283a 	ret
   16830:	30bfffc4 	addi	r2,r6,-1
   16834:	003ff106 	br	167fc <memcmp+0x3c>

00016838 <_putchar_r>:
   16838:	21800217 	ldw	r6,8(r4)
   1683c:	0016a081 	jmpi	16a08 <_putc_r>

00016840 <putchar>:
   16840:	008000b4 	movhi	r2,2
   16844:	10a2f417 	ldw	r2,-29744(r2)
   16848:	200b883a 	mov	r5,r4
   1684c:	11800217 	ldw	r6,8(r2)
   16850:	1009883a 	mov	r4,r2
   16854:	0016a081 	jmpi	16a08 <_putc_r>

00016858 <__register_exitproc>:
   16858:	008000b4 	movhi	r2,2
   1685c:	10e2f317 	ldw	r3,-29748(r2)
   16860:	18805217 	ldw	r2,328(r3)
   16864:	10001726 	beq	r2,zero,168c4 <__register_exitproc+0x6c>
   16868:	10c00117 	ldw	r3,4(r2)
   1686c:	1a000808 	cmpgei	r8,r3,32
   16870:	40001b1e 	bne	r8,zero,168e0 <__register_exitproc+0x88>
   16874:	20000b26 	beq	r4,zero,168a4 <__register_exitproc+0x4c>
   16878:	181090ba 	slli	r8,r3,2
   1687c:	02400044 	movi	r9,1
   16880:	48d2983a 	sll	r9,r9,r3
   16884:	1211883a 	add	r8,r2,r8
   16888:	41802215 	stw	r6,136(r8)
   1688c:	11806217 	ldw	r6,392(r2)
   16890:	21000098 	cmpnei	r4,r4,2
   16894:	324cb03a 	or	r6,r6,r9
   16898:	11806215 	stw	r6,392(r2)
   1689c:	41c04215 	stw	r7,264(r8)
   168a0:	20000b26 	beq	r4,zero,168d0 <__register_exitproc+0x78>
   168a4:	19000084 	addi	r4,r3,2
   168a8:	200890ba 	slli	r4,r4,2
   168ac:	18c00044 	addi	r3,r3,1
   168b0:	10c00115 	stw	r3,4(r2)
   168b4:	1105883a 	add	r2,r2,r4
   168b8:	11400015 	stw	r5,0(r2)
   168bc:	0005883a 	mov	r2,zero
   168c0:	f800283a 	ret
   168c4:	18805304 	addi	r2,r3,332
   168c8:	18805215 	stw	r2,328(r3)
   168cc:	003fe606 	br	16868 <__register_exitproc+0x10>
   168d0:	11006317 	ldw	r4,396(r2)
   168d4:	2252b03a 	or	r9,r4,r9
   168d8:	12406315 	stw	r9,396(r2)
   168dc:	003ff106 	br	168a4 <__register_exitproc+0x4c>
   168e0:	00bfffc4 	movi	r2,-1
   168e4:	f800283a 	ret

000168e8 <__call_exitprocs>:
   168e8:	defff704 	addi	sp,sp,-36
   168ec:	008000b4 	movhi	r2,2
   168f0:	dcc00315 	stw	r19,12(sp)
   168f4:	14e2f317 	ldw	r19,-29748(r2)
   168f8:	dc800215 	stw	r18,8(sp)
   168fc:	dfc00815 	stw	ra,32(sp)
   16900:	9c805217 	ldw	r18,328(r19)
   16904:	ddc00715 	stw	r23,28(sp)
   16908:	dd800615 	stw	r22,24(sp)
   1690c:	dd400515 	stw	r21,20(sp)
   16910:	dd000415 	stw	r20,16(sp)
   16914:	dc400115 	stw	r17,4(sp)
   16918:	dc000015 	stw	r16,0(sp)
   1691c:	90001026 	beq	r18,zero,16960 <__call_exitprocs+0x78>
   16920:	202b883a 	mov	r21,r4
   16924:	282d883a 	mov	r22,r5
   16928:	05000044 	movi	r20,1
   1692c:	94000117 	ldw	r16,4(r18)
   16930:	847fffc4 	addi	r17,r16,-1
   16934:	88000a16 	blt	r17,zero,16960 <__call_exitprocs+0x78>
   16938:	84000044 	addi	r16,r16,1
   1693c:	802090ba 	slli	r16,r16,2
   16940:	9421883a 	add	r16,r18,r16
   16944:	b0001126 	beq	r22,zero,1698c <__call_exitprocs+0xa4>
   16948:	80804017 	ldw	r2,256(r16)
   1694c:	15800f26 	beq	r2,r22,1698c <__call_exitprocs+0xa4>
   16950:	8c7fffc4 	addi	r17,r17,-1
   16954:	88bfffd8 	cmpnei	r2,r17,-1
   16958:	843fff04 	addi	r16,r16,-4
   1695c:	103ff91e 	bne	r2,zero,16944 <__call_exitprocs+0x5c>
   16960:	dfc00817 	ldw	ra,32(sp)
   16964:	ddc00717 	ldw	r23,28(sp)
   16968:	dd800617 	ldw	r22,24(sp)
   1696c:	dd400517 	ldw	r21,20(sp)
   16970:	dd000417 	ldw	r20,16(sp)
   16974:	dcc00317 	ldw	r19,12(sp)
   16978:	dc800217 	ldw	r18,8(sp)
   1697c:	dc400117 	ldw	r17,4(sp)
   16980:	dc000017 	ldw	r16,0(sp)
   16984:	dec00904 	addi	sp,sp,36
   16988:	f800283a 	ret
   1698c:	90800117 	ldw	r2,4(r18)
   16990:	81800017 	ldw	r6,0(r16)
   16994:	10bfffc4 	addi	r2,r2,-1
   16998:	14401726 	beq	r2,r17,169f8 <__call_exitprocs+0x110>
   1699c:	80000015 	stw	zero,0(r16)
   169a0:	303feb26 	beq	r6,zero,16950 <__call_exitprocs+0x68>
   169a4:	a446983a 	sll	r3,r20,r17
   169a8:	90806217 	ldw	r2,392(r18)
   169ac:	95c00117 	ldw	r23,4(r18)
   169b0:	1884703a 	and	r2,r3,r2
   169b4:	1000081e 	bne	r2,zero,169d8 <__call_exitprocs+0xf0>
   169b8:	303ee83a 	callr	r6
   169bc:	90c00117 	ldw	r3,4(r18)
   169c0:	98805217 	ldw	r2,328(r19)
   169c4:	1dc0011e 	bne	r3,r23,169cc <__call_exitprocs+0xe4>
   169c8:	90bfe126 	beq	r18,r2,16950 <__call_exitprocs+0x68>
   169cc:	103fe426 	beq	r2,zero,16960 <__call_exitprocs+0x78>
   169d0:	1025883a 	mov	r18,r2
   169d4:	003fd506 	br	1692c <__call_exitprocs+0x44>
   169d8:	90806317 	ldw	r2,396(r18)
   169dc:	81002017 	ldw	r4,128(r16)
   169e0:	1886703a 	and	r3,r3,r2
   169e4:	1800061e 	bne	r3,zero,16a00 <__call_exitprocs+0x118>
   169e8:	200b883a 	mov	r5,r4
   169ec:	a809883a 	mov	r4,r21
   169f0:	303ee83a 	callr	r6
   169f4:	003ff106 	br	169bc <__call_exitprocs+0xd4>
   169f8:	94400115 	stw	r17,4(r18)
   169fc:	003fe806 	br	169a0 <__call_exitprocs+0xb8>
   16a00:	303ee83a 	callr	r6
   16a04:	003fed06 	br	169bc <__call_exitprocs+0xd4>

00016a08 <_putc_r>:
   16a08:	defffc04 	addi	sp,sp,-16
   16a0c:	dc400215 	stw	r17,8(sp)
   16a10:	dfc00315 	stw	ra,12(sp)
   16a14:	2023883a 	mov	r17,r4
   16a18:	20000226 	beq	r4,zero,16a24 <_putc_r+0x1c>
   16a1c:	20800e17 	ldw	r2,56(r4)
   16a20:	10000e26 	beq	r2,zero,16a5c <_putc_r+0x54>
   16a24:	30800217 	ldw	r2,8(r6)
   16a28:	10bfffc4 	addi	r2,r2,-1
   16a2c:	30800215 	stw	r2,8(r6)
   16a30:	10001316 	blt	r2,zero,16a80 <_putc_r+0x78>
   16a34:	30800017 	ldw	r2,0(r6)
   16a38:	11400005 	stb	r5,0(r2)
   16a3c:	30800017 	ldw	r2,0(r6)
   16a40:	10c00044 	addi	r3,r2,1
   16a44:	30c00015 	stw	r3,0(r6)
   16a48:	10800003 	ldbu	r2,0(r2)
   16a4c:	dfc00317 	ldw	ra,12(sp)
   16a50:	dc400217 	ldw	r17,8(sp)
   16a54:	dec00404 	addi	sp,sp,16
   16a58:	f800283a 	ret
   16a5c:	d9800115 	stw	r6,4(sp)
   16a60:	d9400015 	stw	r5,0(sp)
   16a64:	0011c0c0 	call	11c0c <__sinit>
   16a68:	d9800117 	ldw	r6,4(sp)
   16a6c:	d9400017 	ldw	r5,0(sp)
   16a70:	30800217 	ldw	r2,8(r6)
   16a74:	10bfffc4 	addi	r2,r2,-1
   16a78:	30800215 	stw	r2,8(r6)
   16a7c:	103fed0e 	bge	r2,zero,16a34 <_putc_r+0x2c>
   16a80:	30c00617 	ldw	r3,24(r6)
   16a84:	10c00e16 	blt	r2,r3,16ac0 <_putc_r+0xb8>
   16a88:	30800017 	ldw	r2,0(r6)
   16a8c:	11400005 	stb	r5,0(r2)
   16a90:	30c00017 	ldw	r3,0(r6)
   16a94:	18800003 	ldbu	r2,0(r3)
   16a98:	108002a0 	cmpeqi	r2,r2,10
   16a9c:	1000071e 	bne	r2,zero,16abc <_putc_r+0xb4>
   16aa0:	18800044 	addi	r2,r3,1
   16aa4:	30800015 	stw	r2,0(r6)
   16aa8:	18800003 	ldbu	r2,0(r3)
   16aac:	dfc00317 	ldw	ra,12(sp)
   16ab0:	dc400217 	ldw	r17,8(sp)
   16ab4:	dec00404 	addi	sp,sp,16
   16ab8:	f800283a 	ret
   16abc:	01400284 	movi	r5,10
   16ac0:	8809883a 	mov	r4,r17
   16ac4:	dfc00317 	ldw	ra,12(sp)
   16ac8:	dc400217 	ldw	r17,8(sp)
   16acc:	dec00404 	addi	sp,sp,16
   16ad0:	0016bb41 	jmpi	16bb4 <__swbuf_r>

00016ad4 <putc>:
   16ad4:	defffc04 	addi	sp,sp,-16
   16ad8:	008000b4 	movhi	r2,2
   16adc:	dc800215 	stw	r18,8(sp)
   16ae0:	14a2f417 	ldw	r18,-29744(r2)
   16ae4:	dc400115 	stw	r17,4(sp)
   16ae8:	dfc00315 	stw	ra,12(sp)
   16aec:	2023883a 	mov	r17,r4
   16af0:	90000226 	beq	r18,zero,16afc <putc+0x28>
   16af4:	90800e17 	ldw	r2,56(r18)
   16af8:	10000f26 	beq	r2,zero,16b38 <putc+0x64>
   16afc:	28800217 	ldw	r2,8(r5)
   16b00:	10bfffc4 	addi	r2,r2,-1
   16b04:	28800215 	stw	r2,8(r5)
   16b08:	10001316 	blt	r2,zero,16b58 <putc+0x84>
   16b0c:	28800017 	ldw	r2,0(r5)
   16b10:	14400005 	stb	r17,0(r2)
   16b14:	28800017 	ldw	r2,0(r5)
   16b18:	10c00044 	addi	r3,r2,1
   16b1c:	28c00015 	stw	r3,0(r5)
   16b20:	10800003 	ldbu	r2,0(r2)
   16b24:	dfc00317 	ldw	ra,12(sp)
   16b28:	dc800217 	ldw	r18,8(sp)
   16b2c:	dc400117 	ldw	r17,4(sp)
   16b30:	dec00404 	addi	sp,sp,16
   16b34:	f800283a 	ret
   16b38:	9009883a 	mov	r4,r18
   16b3c:	d9400015 	stw	r5,0(sp)
   16b40:	0011c0c0 	call	11c0c <__sinit>
   16b44:	d9400017 	ldw	r5,0(sp)
   16b48:	28800217 	ldw	r2,8(r5)
   16b4c:	10bfffc4 	addi	r2,r2,-1
   16b50:	28800215 	stw	r2,8(r5)
   16b54:	103fed0e 	bge	r2,zero,16b0c <putc+0x38>
   16b58:	28c00617 	ldw	r3,24(r5)
   16b5c:	10c00a16 	blt	r2,r3,16b88 <putc+0xb4>
   16b60:	28800017 	ldw	r2,0(r5)
   16b64:	14400005 	stb	r17,0(r2)
   16b68:	28c00017 	ldw	r3,0(r5)
   16b6c:	18800003 	ldbu	r2,0(r3)
   16b70:	108002a0 	cmpeqi	r2,r2,10
   16b74:	10000c1e 	bne	r2,zero,16ba8 <putc+0xd4>
   16b78:	18800044 	addi	r2,r3,1
   16b7c:	28800015 	stw	r2,0(r5)
   16b80:	18800003 	ldbu	r2,0(r3)
   16b84:	003fe706 	br	16b24 <putc+0x50>
   16b88:	280d883a 	mov	r6,r5
   16b8c:	880b883a 	mov	r5,r17
   16b90:	9009883a 	mov	r4,r18
   16b94:	dfc00317 	ldw	ra,12(sp)
   16b98:	dc800217 	ldw	r18,8(sp)
   16b9c:	dc400117 	ldw	r17,4(sp)
   16ba0:	dec00404 	addi	sp,sp,16
   16ba4:	0016bb41 	jmpi	16bb4 <__swbuf_r>
   16ba8:	280d883a 	mov	r6,r5
   16bac:	01400284 	movi	r5,10
   16bb0:	003ff706 	br	16b90 <putc+0xbc>

00016bb4 <__swbuf_r>:
   16bb4:	defffb04 	addi	sp,sp,-20
   16bb8:	dcc00315 	stw	r19,12(sp)
   16bbc:	dc400115 	stw	r17,4(sp)
   16bc0:	dc000015 	stw	r16,0(sp)
   16bc4:	dfc00415 	stw	ra,16(sp)
   16bc8:	dc800215 	stw	r18,8(sp)
   16bcc:	2027883a 	mov	r19,r4
   16bd0:	2823883a 	mov	r17,r5
   16bd4:	3021883a 	mov	r16,r6
   16bd8:	20000226 	beq	r4,zero,16be4 <__swbuf_r+0x30>
   16bdc:	20800e17 	ldw	r2,56(r4)
   16be0:	10003e26 	beq	r2,zero,16cdc <__swbuf_r+0x128>
   16be4:	80800617 	ldw	r2,24(r16)
   16be8:	80c0030b 	ldhu	r3,12(r16)
   16bec:	80800215 	stw	r2,8(r16)
   16bf0:	1880020c 	andi	r2,r3,8
   16bf4:	10001f26 	beq	r2,zero,16c74 <__swbuf_r+0xc0>
   16bf8:	80800417 	ldw	r2,16(r16)
   16bfc:	10001d26 	beq	r2,zero,16c74 <__swbuf_r+0xc0>
   16c00:	1948000c 	andi	r5,r3,8192
   16c04:	8c803fcc 	andi	r18,r17,255
   16c08:	28002326 	beq	r5,zero,16c98 <__swbuf_r+0xe4>
   16c0c:	80c00017 	ldw	r3,0(r16)
   16c10:	81000517 	ldw	r4,20(r16)
   16c14:	1885c83a 	sub	r2,r3,r2
   16c18:	1100290e 	bge	r2,r4,16cc0 <__swbuf_r+0x10c>
   16c1c:	10800044 	addi	r2,r2,1
   16c20:	81400217 	ldw	r5,8(r16)
   16c24:	19000044 	addi	r4,r3,1
   16c28:	81000015 	stw	r4,0(r16)
   16c2c:	297fffc4 	addi	r5,r5,-1
   16c30:	81400215 	stw	r5,8(r16)
   16c34:	1c400005 	stb	r17,0(r3)
   16c38:	80c00517 	ldw	r3,20(r16)
   16c3c:	18802926 	beq	r3,r2,16ce4 <__swbuf_r+0x130>
   16c40:	8080030b 	ldhu	r2,12(r16)
   16c44:	1080004c 	andi	r2,r2,1
   16c48:	10000226 	beq	r2,zero,16c54 <__swbuf_r+0xa0>
   16c4c:	90800298 	cmpnei	r2,r18,10
   16c50:	10002426 	beq	r2,zero,16ce4 <__swbuf_r+0x130>
   16c54:	9005883a 	mov	r2,r18
   16c58:	dfc00417 	ldw	ra,16(sp)
   16c5c:	dcc00317 	ldw	r19,12(sp)
   16c60:	dc800217 	ldw	r18,8(sp)
   16c64:	dc400117 	ldw	r17,4(sp)
   16c68:	dc000017 	ldw	r16,0(sp)
   16c6c:	dec00504 	addi	sp,sp,20
   16c70:	f800283a 	ret
   16c74:	800b883a 	mov	r5,r16
   16c78:	9809883a 	mov	r4,r19
   16c7c:	0016d140 	call	16d14 <__swsetup_r>
   16c80:	10001c1e 	bne	r2,zero,16cf4 <__swbuf_r+0x140>
   16c84:	80c0030b 	ldhu	r3,12(r16)
   16c88:	80800417 	ldw	r2,16(r16)
   16c8c:	8c803fcc 	andi	r18,r17,255
   16c90:	1948000c 	andi	r5,r3,8192
   16c94:	283fdd1e 	bne	r5,zero,16c0c <__swbuf_r+0x58>
   16c98:	81001917 	ldw	r4,100(r16)
   16c9c:	18c80014 	ori	r3,r3,8192
   16ca0:	0177ffc4 	movi	r5,-8193
   16ca4:	2148703a 	and	r4,r4,r5
   16ca8:	80c0030d 	sth	r3,12(r16)
   16cac:	80c00017 	ldw	r3,0(r16)
   16cb0:	81001915 	stw	r4,100(r16)
   16cb4:	81000517 	ldw	r4,20(r16)
   16cb8:	1885c83a 	sub	r2,r3,r2
   16cbc:	113fd716 	blt	r2,r4,16c1c <__swbuf_r+0x68>
   16cc0:	800b883a 	mov	r5,r16
   16cc4:	9809883a 	mov	r4,r19
   16cc8:	00117c40 	call	117c4 <_fflush_r>
   16ccc:	1000091e 	bne	r2,zero,16cf4 <__swbuf_r+0x140>
   16cd0:	80c00017 	ldw	r3,0(r16)
   16cd4:	00800044 	movi	r2,1
   16cd8:	003fd106 	br	16c20 <__swbuf_r+0x6c>
   16cdc:	0011c0c0 	call	11c0c <__sinit>
   16ce0:	003fc006 	br	16be4 <__swbuf_r+0x30>
   16ce4:	800b883a 	mov	r5,r16
   16ce8:	9809883a 	mov	r4,r19
   16cec:	00117c40 	call	117c4 <_fflush_r>
   16cf0:	103fd826 	beq	r2,zero,16c54 <__swbuf_r+0xa0>
   16cf4:	04bfffc4 	movi	r18,-1
   16cf8:	003fd606 	br	16c54 <__swbuf_r+0xa0>

00016cfc <__swbuf>:
   16cfc:	00c000b4 	movhi	r3,2
   16d00:	2005883a 	mov	r2,r4
   16d04:	1922f417 	ldw	r4,-29744(r3)
   16d08:	280d883a 	mov	r6,r5
   16d0c:	100b883a 	mov	r5,r2
   16d10:	0016bb41 	jmpi	16bb4 <__swbuf_r>

00016d14 <__swsetup_r>:
   16d14:	008000b4 	movhi	r2,2
   16d18:	10a2f417 	ldw	r2,-29744(r2)
   16d1c:	defffd04 	addi	sp,sp,-12
   16d20:	dc400115 	stw	r17,4(sp)
   16d24:	dc000015 	stw	r16,0(sp)
   16d28:	dfc00215 	stw	ra,8(sp)
   16d2c:	2023883a 	mov	r17,r4
   16d30:	2821883a 	mov	r16,r5
   16d34:	10000226 	beq	r2,zero,16d40 <__swsetup_r+0x2c>
   16d38:	10c00e17 	ldw	r3,56(r2)
   16d3c:	18001f26 	beq	r3,zero,16dbc <__swsetup_r+0xa8>
   16d40:	8180030b 	ldhu	r6,12(r16)
   16d44:	30c0020c 	andi	r3,r6,8
   16d48:	3005883a 	mov	r2,r6
   16d4c:	18002126 	beq	r3,zero,16dd4 <__swsetup_r+0xc0>
   16d50:	80c00417 	ldw	r3,16(r16)
   16d54:	18002826 	beq	r3,zero,16df8 <__swsetup_r+0xe4>
   16d58:	1100004c 	andi	r4,r2,1
   16d5c:	20000b1e 	bne	r4,zero,16d8c <__swsetup_r+0x78>
   16d60:	1100008c 	andi	r4,r2,2
   16d64:	20002e1e 	bne	r4,zero,16e20 <__swsetup_r+0x10c>
   16d68:	81000517 	ldw	r4,20(r16)
   16d6c:	81000215 	stw	r4,8(r16)
   16d70:	18000b26 	beq	r3,zero,16da0 <__swsetup_r+0x8c>
   16d74:	0005883a 	mov	r2,zero
   16d78:	dfc00217 	ldw	ra,8(sp)
   16d7c:	dc400117 	ldw	r17,4(sp)
   16d80:	dc000017 	ldw	r16,0(sp)
   16d84:	dec00304 	addi	sp,sp,12
   16d88:	f800283a 	ret
   16d8c:	81000517 	ldw	r4,20(r16)
   16d90:	80000215 	stw	zero,8(r16)
   16d94:	0109c83a 	sub	r4,zero,r4
   16d98:	81000615 	stw	r4,24(r16)
   16d9c:	183ff51e 	bne	r3,zero,16d74 <__swsetup_r+0x60>
   16da0:	10c0200c 	andi	r3,r2,128
   16da4:	0005883a 	mov	r2,zero
   16da8:	183ff326 	beq	r3,zero,16d78 <__swsetup_r+0x64>
   16dac:	31801014 	ori	r6,r6,64
   16db0:	8180030d 	sth	r6,12(r16)
   16db4:	00bfffc4 	movi	r2,-1
   16db8:	003fef06 	br	16d78 <__swsetup_r+0x64>
   16dbc:	1009883a 	mov	r4,r2
   16dc0:	0011c0c0 	call	11c0c <__sinit>
   16dc4:	8180030b 	ldhu	r6,12(r16)
   16dc8:	30c0020c 	andi	r3,r6,8
   16dcc:	3005883a 	mov	r2,r6
   16dd0:	183fdf1e 	bne	r3,zero,16d50 <__swsetup_r+0x3c>
   16dd4:	3080040c 	andi	r2,r6,16
   16dd8:	10002126 	beq	r2,zero,16e60 <__swsetup_r+0x14c>
   16ddc:	3080010c 	andi	r2,r6,4
   16de0:	1000111e 	bne	r2,zero,16e28 <__swsetup_r+0x114>
   16de4:	80c00417 	ldw	r3,16(r16)
   16de8:	30800214 	ori	r2,r6,8
   16dec:	8080030d 	sth	r2,12(r16)
   16df0:	100d883a 	mov	r6,r2
   16df4:	183fd81e 	bne	r3,zero,16d58 <__swsetup_r+0x44>
   16df8:	1100a00c 	andi	r4,r2,640
   16dfc:	21008020 	cmpeqi	r4,r4,512
   16e00:	203fd51e 	bne	r4,zero,16d58 <__swsetup_r+0x44>
   16e04:	800b883a 	mov	r5,r16
   16e08:	8809883a 	mov	r4,r17
   16e0c:	00128b00 	call	128b0 <__smakebuf_r>
   16e10:	8180030b 	ldhu	r6,12(r16)
   16e14:	80c00417 	ldw	r3,16(r16)
   16e18:	3005883a 	mov	r2,r6
   16e1c:	003fce06 	br	16d58 <__swsetup_r+0x44>
   16e20:	0009883a 	mov	r4,zero
   16e24:	003fd106 	br	16d6c <__swsetup_r+0x58>
   16e28:	81400c17 	ldw	r5,48(r16)
   16e2c:	28000626 	beq	r5,zero,16e48 <__swsetup_r+0x134>
   16e30:	80801004 	addi	r2,r16,64
   16e34:	28800326 	beq	r5,r2,16e44 <__swsetup_r+0x130>
   16e38:	8809883a 	mov	r4,r17
   16e3c:	0011e780 	call	11e78 <_free_r>
   16e40:	8180030b 	ldhu	r6,12(r16)
   16e44:	80000c15 	stw	zero,48(r16)
   16e48:	80c00417 	ldw	r3,16(r16)
   16e4c:	00bff6c4 	movi	r2,-37
   16e50:	118c703a 	and	r6,r2,r6
   16e54:	80000115 	stw	zero,4(r16)
   16e58:	80c00015 	stw	r3,0(r16)
   16e5c:	003fe206 	br	16de8 <__swsetup_r+0xd4>
   16e60:	00800244 	movi	r2,9
   16e64:	88800015 	stw	r2,0(r17)
   16e68:	31801014 	ori	r6,r6,64
   16e6c:	8180030d 	sth	r6,12(r16)
   16e70:	00bfffc4 	movi	r2,-1
   16e74:	003fc006 	br	16d78 <__swsetup_r+0x64>

00016e78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16e78:	defffd04 	addi	sp,sp,-12
   16e7c:	df000215 	stw	fp,8(sp)
   16e80:	df000204 	addi	fp,sp,8
   16e84:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   16e88:	0001883a 	nop
   16e8c:	e0bffe17 	ldw	r2,-8(fp)
   16e90:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   16e94:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16e98:	10000226 	beq	r2,zero,16ea4 <_exit+0x2c>
    ALT_SIM_FAIL();
   16e9c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   16ea0:	00000106 	br	16ea8 <_exit+0x30>
    ALT_SIM_PASS();
   16ea4:	002af0b0 	cmpltui	zero,zero,43970
}
   16ea8:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   16eac:	003fff06 	br	16eac <_exit+0x34>
