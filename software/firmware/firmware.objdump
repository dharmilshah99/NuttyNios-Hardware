
firmware.elf:     file format elf32-littlenios2
firmware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006d50 memsz 0x00006d50 flags r-x
    LOAD off    0x00007d70 vaddr 0x00016d70 paddr 0x0001886c align 2**12
         filesz 0x00001afc memsz 0x00001afc flags rw-
    LOAD off    0x0000a368 vaddr 0x0001a368 paddr 0x0001a368 align 2**12
         filesz 0x00000000 memsz 0x00000318 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000068d0  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000026c  00016b04  00016b04  00007b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  00016d70  0001886c  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000318  0001a368  0001a368  0000a368  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001a680  0001a680  0000986c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000986c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000bd8  00000000  00000000  00009890  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001c662  00000000  00000000  0000a468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007768  00000000  00000000  00026aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007fed  00000000  00000000  0002e232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b68  00000000  00000000  00036220  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e11  00000000  00000000  00037d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004631  00000000  00000000  0003ab99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003f1cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006b8  00000000  00000000  0003f1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000425fe  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00042601  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00042604  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00042605  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00042606  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004260a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004260e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00042612  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0004261b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00042624  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0004262d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00042638  2**0
                  CONTENTS, READONLY
 29 .jdi          0000491a  00000000  00000000  00042659  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00077ce7  00000000  00000000  00046f73  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
00016b04 l    d  .rodata	00000000 .rodata
00016d70 l    d  .rwdata	00000000 .rwdata
0001a368 l    d  .bss	00000000 .bss
0001a680 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../firmware_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001152c l     F .text	00000008 __fp_unlock
00011540 l     F .text	0000019c __sinit.part.1
000116dc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00016dd4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 refill.c
00013210 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00013924 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013a38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013a64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00013cd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013dc0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013eac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00014088 l     F .text	0000003c alt_get_errno
000140c4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00014574 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00018860 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000147e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014924 l     F .text	00000034 alt_dev_reg
000177a8 l     O .rwdata	00001060 jtag_uart
00018808 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014c30 l     F .text	00000210 altera_avalon_jtag_uart_irq
00014e40 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015478 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015b7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015f98 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001a3ac g     O .bss	00000004 alt_instruction_exception_handler
00013810 g     F .text	00000054 _isatty_r
00013fc4 g     F .text	0000007c alt_main
000103bc g     F .text	00000064 read_accerometer
0001a580 g     O .bss	00000100 alt_irq
00013864 g     F .text	00000060 _lseek_r
0001886c g       *ABS*	00000000 __flash_rwdata_start
00013764 g     F .text	000000ac __sflags
0001a680 g       *ABS*	00000000 __alt_heap_start
00016d70 g     O .rwdata	00000064 filter_coeff_float
000135b4 g     F .text	0000005c __sseek
0001188c g     F .text	00000010 __sinit
0001658c g     F .text	00000140 __swbuf_r
0001090c g     F .text	00000054 get_accler_isr
000116e4 g     F .text	00000078 __sfmoreglue
00014064 g     F .text	00000024 __malloc_unlock
00010664 g     F .text	0000004c fixed23_to_float
0001036c g     F .text	00000028 read_switches
00010bb8 g     F .text	00000440 .hidden __divsf3
000104e0 g     F .text	0000008c shiftBuffer
0001a3a0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00011874 g     F .text	00000018 _cleanup
0001629c g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
000157cc g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001229c g     F .text	0000005c _fstat_r
0001a37c g     O .bss	00000004 errno
00013474 g     F .text	00000014 __srget
00013530 g     F .text	00000008 __seofread
0001a394 g     O .bss	00000004 alt_argv
00020834 g       *ABS*	00000000 _gp
0001a414 g     O .bss	00000064 fir_mem_fixed_y
00017628 g     O .rwdata	00000180 alt_fd_list
00012480 g     F .text	00000070 _getc_r
000124f0 g     F .text	00000088 getc
0001a504 g     O .bss	0000000c filtered_coords
00015d1c g     F .text	00000090 alt_find_dev
00012f40 g     F .text	00000148 memcpy
00016b04 g     O .rodata	0000004b seven_seg_digits_decode_abcdefg
00011534 g     F .text	0000000c _cleanup_r
0001607c g     F .text	0000007c alt_io_redirect
00016b04 g       *ABS*	00000000 __DTOR_END__
000106b0 g     F .text	0000012c fir_filter_fixed
000162c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00015038 g     F .text	0000021c altera_avalon_jtag_uart_read
00013d14 g     F .text	000000ac isatty
000107dc g     F .text	0000008c generate_fixed
0001a388 g     O .bss	00000004 __malloc_top_pad
0001a36c g     O .bss	00000004 coord_data_ready
00013488 g     F .text	00000054 _sbrk_r
000138c4 g     F .text	00000060 _read_r
00018854 g     O .rwdata	00000004 alt_max_fd
00011180 g     F .text	000000f0 _fclose_r
000114fc g     F .text	00000030 fflush
0001a384 g     O .bss	00000004 __malloc_max_sbrked_mem
00013b58 g     F .text	00000180 alt_irq_register
00010420 g     F .text	00000068 decode_7seg
00013ee8 g     F .text	000000dc lseek
00018834 g     O .rwdata	00000004 _global_impure_ptr
0001a680 g       *ABS*	00000000 __bss_end
00016194 g     F .text	00000108 alt_tick
000118ac g     F .text	00000018 __fp_lock_all
0001a368 g     O .bss	00000001 state
00010868 g     F .text	000000a4 uart_recieve
000160f8 g     F .text	0000009c alt_alarm_stop
0001a38c g     O .bss	00000004 alt_irq_active
00011e3c g     F .text	00000444 _fseeko_r
000100fc g     F .exceptions	000000d8 alt_irq_handler
00017600 g     O .rwdata	00000028 alt_dev_null
00015b5c g     F .text	00000020 alt_dcache_flush_all
0001886c g       *ABS*	00000000 __ram_rwdata_end
00010960 g     F .text	00000090 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0001884c g     O .rwdata	00000008 alt_dev_list
00014824 g     F .text	00000100 write
00016424 g     F .text	000000a0 _putc_r
00015660 g     F .text	00000020 alt_timestamp_freq
00016d70 g       *ABS*	00000000 __ram_rodata_end
0001a478 g     O .bss	00000064 fir_mem_fixed_z
00013aa0 g     F .text	000000b8 fstat
00010394 g     F .text	00000028 read_buttons
00010270 g     F .text	00000034 write_leds
0001a680 g       *ABS*	00000000 end
00012280 g     F .text	0000001c fseeko
000102a4 g     F .text	000000c8 write_hex
00011e20 g     F .text	0000001c fseek
00014b7c g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
0001a370 g     O .bss	00000004 switches
00016b04 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000154f4 g     F .text	00000074 alt_avalon_timer_sc_init
0001111c g     F .text	00000064 .hidden __clzsi2
00015254 g     F .text	00000224 altera_avalon_jtag_uart_write
0001189c g     F .text	00000004 __sfp_lock_acquire
00011b0c g     F .text	00000310 _free_r
0001430c g     F .text	0000022c alt_printf
00016950 g     F .text	00000180 __call_exitprocs
00013400 g     F .text	00000074 __srget_r
0001883c g     O .rwdata	00000004 __malloc_sbrk_base
00010234 g     F .text	0000003c _start
0001a3a4 g     O .bss	00000004 _alt_tick_rate
0001a3a8 g     O .bss	00000004 _alt_nticks
000145b0 g     F .text	00000104 read
00014990 g     F .text	00000088 alt_sys_init
000156bc g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
00010ff8 g     F .text	00000124 .hidden __floatsisf
000131b0 g     F .text	00000060 _open_r
00016838 g     F .text	00000118 __register_exitproc
0001056c g     F .text	00000040 getWindow
00014ee0 g     F .text	00000068 altera_avalon_jtag_uart_close
00010b90 g     F .text	00000028 .hidden __mulsi3
00016d70 g       *ABS*	00000000 __ram_rwdata_start
00016b04 g       *ABS*	00000000 __ram_rodata_start
0001a4dc g     O .bss	00000028 __malloc_current_mallinfo
00014a18 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015eb4 g     F .text	000000c4 alt_get_fd
00015898 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
00013710 g     F .text	00000054 _close_r
000163a8 g     F .text	0000007c memcmp
00014ad8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a680 g       *ABS*	00000000 __alt_stack_base
00014b28 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000166e4 g     F .text	00000154 __swsetup_r
0001175c g     F .text	00000118 __sfp
000171f8 g     O .rwdata	00000408 __malloc_av_
000118a8 g     F .text	00000004 __sinit_lock_release
000134dc g     F .text	00000054 __sread
00015dac g     F .text	00000108 alt_find_file
00015bb8 g     F .text	000000a4 alt_dev_llist_insert
00014040 g     F .text	00000024 __malloc_lock
00014738 g     F .text	000000b0 sbrk
000114a0 g     F .text	0000005c _fflush_r
000119d0 g     F .text	00000018 fopen
0001a368 g       *ABS*	00000000 __bss_start
00013088 g     F .text	00000128 memset
00010a2c g     F .text	00000164 main
0001a398 g     O .bss	00000004 alt_envp
0001a380 g     O .bss	00000004 __malloc_max_total_mem
000109f0 g     F .text	0000003c getState
00014a78 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001a374 g     O .bss	00000004 buttons
000166cc g     F .text	00000018 __swbuf
00013610 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00011270 g     F .text	00000014 fclose
00015568 g     F .text	00000078 alt_timestamp_start
00012734 g     F .text	0000080c _malloc_r
00018858 g     O .rwdata	00000004 alt_errno
000122f8 g     F .text	000000c4 _fwalk
000164c4 g     F .text	000000c8 putc
000119e8 g     F .text	00000124 _malloc_trim_r
00016b04 g       *ABS*	00000000 __CTOR_END__
00016b04 g       *ABS*	00000000 __flash_rodata_start
00016b04 g       *ABS*	00000000 __DTOR_LIST__
00010488 g     F .text	00000058 setBuffer
00014958 g     F .text	00000038 alt_irq_init
000146b4 g     F .text	00000084 alt_release_fd
00016c28 g     O .rodata	00000100 .hidden __clz_tab
00016b4f g     O .rodata	0000004b seven_seg_digits_decode_gfedcba
0001635c g     F .text	00000014 atexit
000136b0 g     F .text	00000060 _write_r
00018838 g     O .rwdata	00000004 _impure_ptr
0001a390 g     O .bss	00000004 alt_argc
00011284 g     F .text	0000021c __sflush_r
000105ac g     F .text	000000b8 float_to_fixed23
0001a3b0 g     O .bss	00000064 fir_mem_fixed_x
0001a39c g     O .bss	00000004 altera_avalon_timer_ts_base
00015cbc g     F .text	00000060 _do_dtors
00011e1c g     F .text	00000004 _fseek_r
0001322c g     F .text	000001d4 __srefill_r
00010020 g       .exceptions	00000000 alt_irq_entry
000118c4 g     F .text	00000018 __fp_unlock_all
00018844 g     O .rwdata	00000008 alt_fs_list
0001a510 g     O .bss	0000000c coords
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015680 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
000155e0 g     F .text	00000080 alt_timestamp
0001886c g       *ABS*	00000000 _edata
0001a680 g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
00014f48 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00013538 g     F .text	0000007c __swrite
00018840 g     O .rwdata	00000004 __malloc_trim_threshold
00016370 g     F .text	00000038 exit
000123bc g     F .text	000000c4 _fwalk_reent
00015964 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000118a0 g     F .text	00000004 __sfp_lock_release
000118dc g     F .text	000000f4 _fopen_r
00016ad0 g     F .text	00000034 _exit
00015a30 g     F .text	0000012c alt_alarm_start
00015700 g     F .text	00000068 alt_up_accelerometer_spi_read
00015768 g     F .text	00000064 alt_up_accelerometer_spi_write
00012578 g     F .text	000001bc __smakebuf_r
00013618 g     F .text	00000098 strlen
000141b0 g     F .text	0000015c open
00014538 g     F .text	0000003c alt_putchar
00015f78 g     F .text	00000020 alt_icache_flush_all
0001885c g     O .rwdata	00000004 alt_priority_mask
0001a51c g     O .bss	00000064 filter_coeff_fixed
0001a378 g     O .bss	00000004 acc_dev
00018864 g     O .rwdata	00000008 alt_alarm_list
00015c5c g     F .text	00000060 _do_ctors
00013960 g     F .text	000000d8 close
00013e28 g     F .text	00000084 alt_load
000118a4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a96004 	addi	r2,r2,-23168
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a96004 	addi	r2,r2,-23168
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <_gp+0xfffef8f8>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <_gp+0xfffef8ec>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a6de17 	ldw	r2,-25736(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a6de17 	ldw	r2,-25736(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1023c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   10240:	d6820d14 	ori	gp,gp,2100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10a8da14 	ori	r2,r2,41832

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18e9a014 	ori	r3,r3,42624

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <_gp+0xfffefa24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	0013e280 	call	13e28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	0013fc40 	call	13fc4 <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <_gp+0xfffefa38>

00010270 <write_leds>:
#include "altera_avalon_pio_regs.h"

#ifndef UTILS_H_
#define UTILS_H_

void write_leds(int leds){
   10270:	defffe04 	addi	sp,sp,-8
   10274:	df000115 	stw	fp,4(sp)
   10278:	df000104 	addi	fp,sp,4
   1027c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, leds);
   10280:	008000b4 	movhi	r2,2
   10284:	10843004 	addi	r2,r2,4288
   10288:	e0ffff17 	ldw	r3,-4(fp)
   1028c:	10c00035 	stwio	r3,0(r2)
}
   10290:	0001883a 	nop
   10294:	e037883a 	mov	sp,fp
   10298:	df000017 	ldw	fp,0(sp)
   1029c:	dec00104 	addi	sp,sp,4
   102a0:	f800283a 	ret

000102a4 <write_hex>:

void write_hex(unsigned char hex[6]) {
   102a4:	defffe04 	addi	sp,sp,-8
   102a8:	df000115 	stw	fp,4(sp)
   102ac:	df000104 	addi	fp,sp,4
   102b0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, hex[5]);
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	10800144 	addi	r2,r2,5
   102bc:	10800003 	ldbu	r2,0(r2)
   102c0:	10c03fcc 	andi	r3,r2,255
   102c4:	008000b4 	movhi	r2,2
   102c8:	10842804 	addi	r2,r2,4256
   102cc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, hex[4]);
   102d0:	e0bfff17 	ldw	r2,-4(fp)
   102d4:	10800104 	addi	r2,r2,4
   102d8:	10800003 	ldbu	r2,0(r2)
   102dc:	10c03fcc 	andi	r3,r2,255
   102e0:	008000b4 	movhi	r2,2
   102e4:	10842404 	addi	r2,r2,4240
   102e8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, hex[3]);
   102ec:	e0bfff17 	ldw	r2,-4(fp)
   102f0:	108000c4 	addi	r2,r2,3
   102f4:	10800003 	ldbu	r2,0(r2)
   102f8:	10c03fcc 	andi	r3,r2,255
   102fc:	008000b4 	movhi	r2,2
   10300:	10842004 	addi	r2,r2,4224
   10304:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, hex[2]);
   10308:	e0bfff17 	ldw	r2,-4(fp)
   1030c:	10800084 	addi	r2,r2,2
   10310:	10800003 	ldbu	r2,0(r2)
   10314:	10c03fcc 	andi	r3,r2,255
   10318:	008000b4 	movhi	r2,2
   1031c:	10841c04 	addi	r2,r2,4208
   10320:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, hex[1]);
   10324:	e0bfff17 	ldw	r2,-4(fp)
   10328:	10800044 	addi	r2,r2,1
   1032c:	10800003 	ldbu	r2,0(r2)
   10330:	10c03fcc 	andi	r3,r2,255
   10334:	008000b4 	movhi	r2,2
   10338:	10841804 	addi	r2,r2,4192
   1033c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, hex[0]);
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	10800003 	ldbu	r2,0(r2)
   10348:	10c03fcc 	andi	r3,r2,255
   1034c:	008000b4 	movhi	r2,2
   10350:	10841404 	addi	r2,r2,4176
   10354:	10c00035 	stwio	r3,0(r2)
}
   10358:	0001883a 	nop
   1035c:	e037883a 	mov	sp,fp
   10360:	df000017 	ldw	fp,0(sp)
   10364:	dec00104 	addi	sp,sp,4
   10368:	f800283a 	ret

0001036c <read_switches>:

int read_switches() {
   1036c:	deffff04 	addi	sp,sp,-4
   10370:	df000015 	stw	fp,0(sp)
   10374:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10378:	008000b4 	movhi	r2,2
   1037c:	10842c04 	addi	r2,r2,4272
   10380:	10800037 	ldwio	r2,0(r2)
}
   10384:	e037883a 	mov	sp,fp
   10388:	df000017 	ldw	fp,0(sp)
   1038c:	dec00104 	addi	sp,sp,4
   10390:	f800283a 	ret

00010394 <read_buttons>:

int read_buttons() {
   10394:	deffff04 	addi	sp,sp,-4
   10398:	df000015 	stw	fp,0(sp)
   1039c:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   103a0:	008000b4 	movhi	r2,2
   103a4:	10841004 	addi	r2,r2,4160
   103a8:	10800037 	ldwio	r2,0(r2)
}
   103ac:	e037883a 	mov	sp,fp
   103b0:	df000017 	ldw	fp,0(sp)
   103b4:	dec00104 	addi	sp,sp,4
   103b8:	f800283a 	ret

000103bc <read_accerometer>:

void read_accerometer(alt_up_accelerometer_spi_dev *acc_dev, alt_32 coords[3]) {
   103bc:	defffc04 	addi	sp,sp,-16
   103c0:	dfc00315 	stw	ra,12(sp)
   103c4:	df000215 	stw	fp,8(sp)
   103c8:	df000204 	addi	fp,sp,8
   103cc:	e13ffe15 	stw	r4,-8(fp)
   103d0:	e17fff15 	stw	r5,-4(fp)
	alt_up_accelerometer_spi_read_x_axis(acc_dev, &coords[0]);
   103d4:	e17fff17 	ldw	r5,-4(fp)
   103d8:	e13ffe17 	ldw	r4,-8(fp)
   103dc:	00157cc0 	call	157cc <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, &coords[1]);
   103e0:	e0bfff17 	ldw	r2,-4(fp)
   103e4:	10800104 	addi	r2,r2,4
   103e8:	100b883a 	mov	r5,r2
   103ec:	e13ffe17 	ldw	r4,-8(fp)
   103f0:	00158980 	call	15898 <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, &coords[2]);
   103f4:	e0bfff17 	ldw	r2,-4(fp)
   103f8:	10800204 	addi	r2,r2,8
   103fc:	100b883a 	mov	r5,r2
   10400:	e13ffe17 	ldw	r4,-8(fp)
   10404:	00159640 	call	15964 <alt_up_accelerometer_spi_read_z_axis>
}
   10408:	0001883a 	nop
   1040c:	e037883a 	mov	sp,fp
   10410:	dfc00117 	ldw	ra,4(sp)
   10414:	df000017 	ldw	fp,0(sp)
   10418:	dec00204 	addi	sp,sp,8
   1041c:	f800283a 	ret

00010420 <decode_7seg>:
/*  x     y     z     */
    0x64, 0x6E, 0x5B
};

unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
   10420:	defffe04 	addi	sp,sp,-8
   10424:	df000115 	stw	fp,4(sp)
   10428:	df000104 	addi	fp,sp,4
   1042c:	2005883a 	mov	r2,r4
   10430:	e0bfff05 	stb	r2,-4(fp)
	if (chr == ' ') return 0xFF;
   10434:	e0bfff03 	ldbu	r2,-4(fp)
   10438:	10800818 	cmpnei	r2,r2,32
   1043c:	1000021e 	bne	r2,zero,10448 <decode_7seg+0x28>
   10440:	00bfffc4 	movi	r2,-1
   10444:	00000c06 	br	10478 <decode_7seg+0x58>
    if (chr > (unsigned char)'z')
   10448:	e0bfff03 	ldbu	r2,-4(fp)
   1044c:	10801ef0 	cmpltui	r2,r2,123
   10450:	1000021e 	bne	r2,zero,1045c <decode_7seg+0x3c>
        return 0xFF;
   10454:	00bfffc4 	movi	r2,-1
   10458:	00000706 	br	10478 <decode_7seg+0x58>
//    return ~seven_seg_digits_decode_abcdefg[chr - '0'];
	return ~seven_seg_digits_decode_gfedcba[chr - '0'];
   1045c:	e0bfff03 	ldbu	r2,-4(fp)
   10460:	10fff404 	addi	r3,r2,-48
   10464:	00800074 	movhi	r2,1
   10468:	109ad3c4 	addi	r2,r2,27471
   1046c:	10c5883a 	add	r2,r2,r3
   10470:	10800003 	ldbu	r2,0(r2)
   10474:	0084303a 	nor	r2,zero,r2
}
   10478:	e037883a 	mov	sp,fp
   1047c:	df000017 	ldw	fp,0(sp)
   10480:	dec00104 	addi	sp,sp,4
   10484:	f800283a 	ret

00010488 <setBuffer>:

void setBuffer(unsigned char* word, unsigned char buffer[40]){
   10488:	defffc04 	addi	sp,sp,-16
   1048c:	dfc00315 	stw	ra,12(sp)
   10490:	df000215 	stw	fp,8(sp)
   10494:	df000204 	addi	fp,sp,8
   10498:	e13ffe15 	stw	r4,-8(fp)
   1049c:	e17fff15 	stw	r5,-4(fp)
	memset(buffer, 255, 40);
   104a0:	01800a04 	movi	r6,40
   104a4:	01403fc4 	movi	r5,255
   104a8:	e13fff17 	ldw	r4,-4(fp)
   104ac:	00130880 	call	13088 <memset>
	memcpy(buffer, word, strlen(word));
   104b0:	e13ffe17 	ldw	r4,-8(fp)
   104b4:	00136180 	call	13618 <strlen>
   104b8:	100d883a 	mov	r6,r2
   104bc:	e17ffe17 	ldw	r5,-8(fp)
   104c0:	e13fff17 	ldw	r4,-4(fp)
   104c4:	0012f400 	call	12f40 <memcpy>
}
   104c8:	0001883a 	nop
   104cc:	e037883a 	mov	sp,fp
   104d0:	dfc00117 	ldw	ra,4(sp)
   104d4:	df000017 	ldw	fp,0(sp)
   104d8:	dec00204 	addi	sp,sp,8
   104dc:	f800283a 	ret

000104e0 <shiftBuffer>:

void shiftBuffer(unsigned char buffer[40]){
   104e0:	defffc04 	addi	sp,sp,-16
   104e4:	df000315 	stw	fp,12(sp)
   104e8:	df000304 	addi	fp,sp,12
   104ec:	e13fff15 	stw	r4,-4(fp)
	int tmp = buffer[0];
   104f0:	e0bfff17 	ldw	r2,-4(fp)
   104f4:	10800003 	ldbu	r2,0(r2)
   104f8:	10803fcc 	andi	r2,r2,255
   104fc:	e0bffe15 	stw	r2,-8(fp)
	for(int i = 1; i < 40; i++){
   10500:	00800044 	movi	r2,1
   10504:	e0bffd15 	stw	r2,-12(fp)
   10508:	00000c06 	br	1053c <shiftBuffer+0x5c>
		buffer[i-1] = buffer[i];
   1050c:	e0bffd17 	ldw	r2,-12(fp)
   10510:	10bfffc4 	addi	r2,r2,-1
   10514:	e0ffff17 	ldw	r3,-4(fp)
   10518:	1885883a 	add	r2,r3,r2
   1051c:	e0fffd17 	ldw	r3,-12(fp)
   10520:	e13fff17 	ldw	r4,-4(fp)
   10524:	20c7883a 	add	r3,r4,r3
   10528:	18c00003 	ldbu	r3,0(r3)
   1052c:	10c00005 	stb	r3,0(r2)
	memcpy(buffer, word, strlen(word));
}

void shiftBuffer(unsigned char buffer[40]){
	int tmp = buffer[0];
	for(int i = 1; i < 40; i++){
   10530:	e0bffd17 	ldw	r2,-12(fp)
   10534:	10800044 	addi	r2,r2,1
   10538:	e0bffd15 	stw	r2,-12(fp)
   1053c:	e0bffd17 	ldw	r2,-12(fp)
   10540:	10800a10 	cmplti	r2,r2,40
   10544:	103ff11e 	bne	r2,zero,1050c <_gp+0xfffefcd8>
		buffer[i-1] = buffer[i];
	}
	buffer[39] = tmp;
   10548:	e0bfff17 	ldw	r2,-4(fp)
   1054c:	108009c4 	addi	r2,r2,39
   10550:	e0fffe17 	ldw	r3,-8(fp)
   10554:	10c00005 	stb	r3,0(r2)
}
   10558:	0001883a 	nop
   1055c:	e037883a 	mov	sp,fp
   10560:	df000017 	ldw	fp,0(sp)
   10564:	dec00104 	addi	sp,sp,4
   10568:	f800283a 	ret

0001056c <getWindow>:

void getWindow(unsigned char window[6], unsigned char buffer[40]){
   1056c:	defffc04 	addi	sp,sp,-16
   10570:	dfc00315 	stw	ra,12(sp)
   10574:	df000215 	stw	fp,8(sp)
   10578:	df000204 	addi	fp,sp,8
   1057c:	e13ffe15 	stw	r4,-8(fp)
   10580:	e17fff15 	stw	r5,-4(fp)
	memcpy(window, buffer, 6);
   10584:	01800184 	movi	r6,6
   10588:	e17fff17 	ldw	r5,-4(fp)
   1058c:	e13ffe17 	ldw	r4,-8(fp)
   10590:	0012f400 	call	12f40 <memcpy>
}
   10594:	0001883a 	nop
   10598:	e037883a 	mov	sp,fp
   1059c:	dfc00117 	ldw	ra,4(sp)
   105a0:	df000017 	ldw	fp,0(sp)
   105a4:	dec00204 	addi	sp,sp,8
   105a8:	f800283a 	ret

000105ac <float_to_fixed23>:

alt_32 fir_mem_fixed_x[25] = {0};
alt_32 fir_mem_fixed_y[25] = {0};
alt_32 fir_mem_fixed_z[25] = {0};

alt_32 float_to_fixed23(float f) {
   105ac:	defff804 	addi	sp,sp,-32
   105b0:	df000715 	stw	fp,28(sp)
   105b4:	df000704 	addi	fp,sp,28
   105b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 f_bits = *(alt_u32*)(&f);
   105bc:	e0bfff04 	addi	r2,fp,-4
   105c0:	10800017 	ldw	r2,0(r2)
   105c4:	e0bff915 	stw	r2,-28(fp)
	alt_u32 sign = f_bits & (1 << 31); // gets sign bit
   105c8:	e0bff917 	ldw	r2,-28(fp)
   105cc:	10a0002c 	andhi	r2,r2,32768
   105d0:	e0bffa15 	stw	r2,-24(fp)
	alt_32 exp = ((f_bits >> 23) & (0xFF)) - 127; // exponent
   105d4:	e0bff917 	ldw	r2,-28(fp)
   105d8:	1004d5fa 	srli	r2,r2,23
   105dc:	10803fcc 	andi	r2,r2,255
   105e0:	10bfe044 	addi	r2,r2,-127
   105e4:	e0bffb15 	stw	r2,-20(fp)
	alt_u32 fraction = f_bits & (0x007FFFFF); // fraction bit mask
   105e8:	e0fff917 	ldw	r3,-28(fp)
   105ec:	00802034 	movhi	r2,128
   105f0:	10bfffc4 	addi	r2,r2,-1
   105f4:	1884703a 	and	r2,r3,r2
   105f8:	e0bffc15 	stw	r2,-16(fp)
	fraction = fraction | (1 << 23); // put back implicit 1 in float
   105fc:	e0bffc17 	ldw	r2,-16(fp)
   10600:	10802034 	orhi	r2,r2,128
   10604:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 fixed = (exp < 0) ? fraction >> -exp : fraction << exp;
   10608:	e0bffb17 	ldw	r2,-20(fp)
   1060c:	1000050e 	bge	r2,zero,10624 <float_to_fixed23+0x78>
   10610:	e0bffb17 	ldw	r2,-20(fp)
   10614:	0085c83a 	sub	r2,zero,r2
   10618:	e0fffc17 	ldw	r3,-16(fp)
   1061c:	1884d83a 	srl	r2,r3,r2
   10620:	00000306 	br	10630 <float_to_fixed23+0x84>
   10624:	e0fffc17 	ldw	r3,-16(fp)
   10628:	e0bffb17 	ldw	r2,-20(fp)
   1062c:	1884983a 	sll	r2,r3,r2
   10630:	e0bffd15 	stw	r2,-12(fp)
	alt_32 signed_fixed = sign ? -fixed : fixed;
   10634:	e0bffa17 	ldw	r2,-24(fp)
   10638:	10000326 	beq	r2,zero,10648 <float_to_fixed23+0x9c>
   1063c:	e0bffd17 	ldw	r2,-12(fp)
   10640:	0085c83a 	sub	r2,zero,r2
   10644:	00000106 	br	1064c <float_to_fixed23+0xa0>
   10648:	e0bffd17 	ldw	r2,-12(fp)
   1064c:	e0bffe15 	stw	r2,-8(fp)
	return signed_fixed;
   10650:	e0bffe17 	ldw	r2,-8(fp)
}
   10654:	e037883a 	mov	sp,fp
   10658:	df000017 	ldw	fp,0(sp)
   1065c:	dec00104 	addi	sp,sp,4
   10660:	f800283a 	ret

00010664 <fixed23_to_float>:

float fixed23_to_float(alt_32 fixed){
   10664:	defffd04 	addi	sp,sp,-12
   10668:	dfc00215 	stw	ra,8(sp)
   1066c:	df000115 	stw	fp,4(sp)
   10670:	df000104 	addi	fp,sp,4
   10674:	e13fff15 	stw	r4,-4(fp)
	return (float)fixed / (float)(1<<23);
   10678:	e13fff17 	ldw	r4,-4(fp)
   1067c:	0010ff80 	call	10ff8 <__floatsisf>
   10680:	1007883a 	mov	r3,r2
   10684:	0152c034 	movhi	r5,19200
   10688:	1809883a 	mov	r4,r3
   1068c:	0010bb80 	call	10bb8 <__divsf3>
   10690:	1009883a 	mov	r4,r2
   10694:	2007883a 	mov	r3,r4
   10698:	1805883a 	mov	r2,r3
}
   1069c:	e037883a 	mov	sp,fp
   106a0:	dfc00117 	ldw	ra,4(sp)
   106a4:	df000017 	ldw	fp,0(sp)
   106a8:	dec00204 	addi	sp,sp,8
   106ac:	f800283a 	ret

000106b0 <fir_filter_fixed>:

void fir_filter_fixed(alt_32 memory[25], alt_32 data, alt_32 *average){
   106b0:	defff804 	addi	sp,sp,-32
   106b4:	dfc00715 	stw	ra,28(sp)
   106b8:	df000615 	stw	fp,24(sp)
   106bc:	df000604 	addi	fp,sp,24
   106c0:	e13ffd15 	stw	r4,-12(fp)
   106c4:	e17ffe15 	stw	r5,-8(fp)
   106c8:	e1bfff15 	stw	r6,-4(fp)
	memory[0] = data;
   106cc:	e0bffd17 	ldw	r2,-12(fp)
   106d0:	e0fffe17 	ldw	r3,-8(fp)
   106d4:	10c00015 	stw	r3,0(r2)

	alt_32 acc = 0;
   106d8:	e03ffa15 	stw	zero,-24(fp)
	for(int i = 0; i < 25; i++){
   106dc:	e03ffb15 	stw	zero,-20(fp)
   106e0:	00001806 	br	10744 <fir_filter_fixed+0x94>
		acc += filter_coeff_fixed[i] * memory[i];
   106e4:	008000b4 	movhi	r2,2
   106e8:	10a94704 	addi	r2,r2,-23268
   106ec:	e0fffb17 	ldw	r3,-20(fp)
   106f0:	18c7883a 	add	r3,r3,r3
   106f4:	18c7883a 	add	r3,r3,r3
   106f8:	10c5883a 	add	r2,r2,r3
   106fc:	10c00017 	ldw	r3,0(r2)
   10700:	e0bffb17 	ldw	r2,-20(fp)
   10704:	1085883a 	add	r2,r2,r2
   10708:	1085883a 	add	r2,r2,r2
   1070c:	1009883a 	mov	r4,r2
   10710:	e0bffd17 	ldw	r2,-12(fp)
   10714:	1105883a 	add	r2,r2,r4
   10718:	10800017 	ldw	r2,0(r2)
   1071c:	100b883a 	mov	r5,r2
   10720:	1809883a 	mov	r4,r3
   10724:	0010b900 	call	10b90 <__mulsi3>
   10728:	1007883a 	mov	r3,r2
   1072c:	e0bffa17 	ldw	r2,-24(fp)
   10730:	1885883a 	add	r2,r3,r2
   10734:	e0bffa15 	stw	r2,-24(fp)

void fir_filter_fixed(alt_32 memory[25], alt_32 data, alt_32 *average){
	memory[0] = data;

	alt_32 acc = 0;
	for(int i = 0; i < 25; i++){
   10738:	e0bffb17 	ldw	r2,-20(fp)
   1073c:	10800044 	addi	r2,r2,1
   10740:	e0bffb15 	stw	r2,-20(fp)
   10744:	e0bffb17 	ldw	r2,-20(fp)
   10748:	10800650 	cmplti	r2,r2,25
   1074c:	103fe51e 	bne	r2,zero,106e4 <_gp+0xfffefeb0>
		acc += filter_coeff_fixed[i] * memory[i];
	}
	*average = acc;
   10750:	e0bfff17 	ldw	r2,-4(fp)
   10754:	e0fffa17 	ldw	r3,-24(fp)
   10758:	10c00015 	stw	r3,0(r2)

	for(int i = 1; i < 25; i++){
   1075c:	00800044 	movi	r2,1
   10760:	e0bffc15 	stw	r2,-16(fp)
   10764:	00001406 	br	107b8 <fir_filter_fixed+0x108>
		memory[i] = memory[i-1];
   10768:	e0bffc17 	ldw	r2,-16(fp)
   1076c:	1085883a 	add	r2,r2,r2
   10770:	1085883a 	add	r2,r2,r2
   10774:	1007883a 	mov	r3,r2
   10778:	e0bffd17 	ldw	r2,-12(fp)
   1077c:	10c7883a 	add	r3,r2,r3
   10780:	e13ffc17 	ldw	r4,-16(fp)
   10784:	00900034 	movhi	r2,16384
   10788:	10bfffc4 	addi	r2,r2,-1
   1078c:	2085883a 	add	r2,r4,r2
   10790:	1085883a 	add	r2,r2,r2
   10794:	1085883a 	add	r2,r2,r2
   10798:	1009883a 	mov	r4,r2
   1079c:	e0bffd17 	ldw	r2,-12(fp)
   107a0:	1105883a 	add	r2,r2,r4
   107a4:	10800017 	ldw	r2,0(r2)
   107a8:	18800015 	stw	r2,0(r3)
	for(int i = 0; i < 25; i++){
		acc += filter_coeff_fixed[i] * memory[i];
	}
	*average = acc;

	for(int i = 1; i < 25; i++){
   107ac:	e0bffc17 	ldw	r2,-16(fp)
   107b0:	10800044 	addi	r2,r2,1
   107b4:	e0bffc15 	stw	r2,-16(fp)
   107b8:	e0bffc17 	ldw	r2,-16(fp)
   107bc:	10800650 	cmplti	r2,r2,25
   107c0:	103fe91e 	bne	r2,zero,10768 <_gp+0xfffeff34>
		memory[i] = memory[i-1];
	}
}
   107c4:	0001883a 	nop
   107c8:	e037883a 	mov	sp,fp
   107cc:	dfc00117 	ldw	ra,4(sp)
   107d0:	df000017 	ldw	fp,0(sp)
   107d4:	dec00204 	addi	sp,sp,8
   107d8:	f800283a 	ret

000107dc <generate_fixed>:

void generate_fixed(){
   107dc:	defffd04 	addi	sp,sp,-12
   107e0:	dfc00215 	stw	ra,8(sp)
   107e4:	df000115 	stw	fp,4(sp)
   107e8:	df000104 	addi	fp,sp,4
	for(int i = 0; i < 25; i++){
   107ec:	e03fff15 	stw	zero,-4(fp)
   107f0:	00001406 	br	10844 <generate_fixed+0x68>
		filter_coeff_fixed[i] = float_to_fixed23(filter_coeff_float[i]);
   107f4:	00800074 	movhi	r2,1
   107f8:	109b5c04 	addi	r2,r2,28016
   107fc:	e0ffff17 	ldw	r3,-4(fp)
   10800:	18c7883a 	add	r3,r3,r3
   10804:	18c7883a 	add	r3,r3,r3
   10808:	10c5883a 	add	r2,r2,r3
   1080c:	10c00017 	ldw	r3,0(r2)
   10810:	1809883a 	mov	r4,r3
   10814:	00105ac0 	call	105ac <float_to_fixed23>
   10818:	1009883a 	mov	r4,r2
   1081c:	008000b4 	movhi	r2,2
   10820:	10a94704 	addi	r2,r2,-23268
   10824:	e0ffff17 	ldw	r3,-4(fp)
   10828:	18c7883a 	add	r3,r3,r3
   1082c:	18c7883a 	add	r3,r3,r3
   10830:	10c5883a 	add	r2,r2,r3
   10834:	11000015 	stw	r4,0(r2)
		memory[i] = memory[i-1];
	}
}

void generate_fixed(){
	for(int i = 0; i < 25; i++){
   10838:	e0bfff17 	ldw	r2,-4(fp)
   1083c:	10800044 	addi	r2,r2,1
   10840:	e0bfff15 	stw	r2,-4(fp)
   10844:	e0bfff17 	ldw	r2,-4(fp)
   10848:	10800650 	cmplti	r2,r2,25
   1084c:	103fe91e 	bne	r2,zero,107f4 <_gp+0xfffeffc0>
		filter_coeff_fixed[i] = float_to_fixed23(filter_coeff_float[i]);
	}
}
   10850:	0001883a 	nop
   10854:	e037883a 	mov	sp,fp
   10858:	dfc00117 	ldw	ra,4(sp)
   1085c:	df000017 	ldw	fp,0(sp)
   10860:	dec00204 	addi	sp,sp,8
   10864:	f800283a 	ret

00010868 <uart_recieve>:

void uart_recieve(unsigned char* buffer){
   10868:	defffa04 	addi	sp,sp,-24
   1086c:	dfc00515 	stw	ra,20(sp)
   10870:	df000415 	stw	fp,16(sp)
   10874:	df000404 	addi	fp,sp,16
   10878:	e13fff15 	stw	r4,-4(fp)
	FILE* fp;
	int i = 0;
   1087c:	e03ffc15 	stw	zero,-16(fp)
	char c = 0;
   10880:	e03ffd05 	stb	zero,-12(fp)
	fp = fopen("/dev/jtag_uart", "r");
   10884:	01400074 	movhi	r5,1
   10888:	295ae704 	addi	r5,r5,27548
   1088c:	01000074 	movhi	r4,1
   10890:	211ae804 	addi	r4,r4,27552
   10894:	00119d00 	call	119d0 <fopen>
   10898:	e0bffe15 	stw	r2,-8(fp)
	if(fp){
   1089c:	e0bffe17 	ldw	r2,-8(fp)
   108a0:	10001426 	beq	r2,zero,108f4 <uart_recieve+0x8c>
		while(c != '>'){
   108a4:	00000b06 	br	108d4 <uart_recieve+0x6c>
			c = getc(fp);
   108a8:	e13ffe17 	ldw	r4,-8(fp)
   108ac:	00124f00 	call	124f0 <getc>
   108b0:	e0bffd05 	stb	r2,-12(fp)
			buffer[i] = c;
   108b4:	e0bffc17 	ldw	r2,-16(fp)
   108b8:	e0ffff17 	ldw	r3,-4(fp)
   108bc:	1885883a 	add	r2,r3,r2
   108c0:	e0fffd03 	ldbu	r3,-12(fp)
   108c4:	10c00005 	stb	r3,0(r2)
			i++;
   108c8:	e0bffc17 	ldw	r2,-16(fp)
   108cc:	10800044 	addi	r2,r2,1
   108d0:	e0bffc15 	stw	r2,-16(fp)
	FILE* fp;
	int i = 0;
	char c = 0;
	fp = fopen("/dev/jtag_uart", "r");
	if(fp){
		while(c != '>'){
   108d4:	e0bffd07 	ldb	r2,-12(fp)
   108d8:	10800f98 	cmpnei	r2,r2,62
   108dc:	103ff21e 	bne	r2,zero,108a8 <_gp+0xffff0074>
			c = getc(fp);
			buffer[i] = c;
			i++;
		}
		fclose(fp);
   108e0:	e13ffe17 	ldw	r4,-8(fp)
   108e4:	00112700 	call	11270 <fclose>
		alt_printf("[DEBUG] CLOSED FP\n");
   108e8:	01000074 	movhi	r4,1
   108ec:	211aec04 	addi	r4,r4,27568
   108f0:	001430c0 	call	1430c <alt_printf>
	}
}
   108f4:	0001883a 	nop
   108f8:	e037883a 	mov	sp,fp
   108fc:	dfc00117 	ldw	ra,4(sp)
   10900:	df000017 	ldw	fp,0(sp)
   10904:	dec00204 	addi	sp,sp,8
   10908:	f800283a 	ret

0001090c <get_accler_isr>:
//    alt_u8 val = (acc_read >> 6) & 0x07;
//    * led = (8 >> val) | (8 << (8 - val));
//    * level = (acc_read >> 1) & 0x1f;
//}

void get_accler_isr() {
   1090c:	defffe04 	addi	sp,sp,-8
   10910:	dfc00115 	stw	ra,4(sp)
   10914:	df000015 	stw	fp,0(sp)
   10918:	d839883a 	mov	fp,sp
	// reset timer
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER0_BASE, 0);
   1091c:	0007883a 	mov	r3,zero
   10920:	008000b4 	movhi	r2,2
   10924:	10840804 	addi	r2,r2,4128
   10928:	10c00035 	stwio	r3,0(r2)

	read_accerometer(acc_dev, coords);
   1092c:	d0a6d117 	ldw	r2,-25788(gp)
   10930:	014000b4 	movhi	r5,2
   10934:	29694404 	addi	r5,r5,-23280
   10938:	1009883a 	mov	r4,r2
   1093c:	00103bc0 	call	103bc <read_accerometer>
	coord_data_ready = 1;
   10940:	00800044 	movi	r2,1
   10944:	d0a6ce15 	stw	r2,-25800(gp)
}
   10948:	0001883a 	nop
   1094c:	e037883a 	mov	sp,fp
   10950:	dfc00117 	ldw	ra,4(sp)
   10954:	df000017 	ldw	fp,0(sp)
   10958:	dec00204 	addi	sp,sp,8
   1095c:	f800283a 	ret

00010960 <timer_init>:

void timer_init(void *isr) {
   10960:	defffd04 	addi	sp,sp,-12
   10964:	dfc00215 	stw	ra,8(sp)
   10968:	df000115 	stw	fp,4(sp)
   1096c:	df000104 	addi	fp,sp,4
   10970:	e13fff15 	stw	r4,-4(fp)
	// timer0: 20000 ticks per sec, T = 50us.

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER0_BASE, 0x0003);
   10974:	00c000c4 	movi	r3,3
   10978:	008000b4 	movhi	r2,2
   1097c:	10840904 	addi	r2,r2,4132
   10980:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER0_BASE, 0);
   10984:	0007883a 	mov	r3,zero
   10988:	008000b4 	movhi	r2,2
   1098c:	10840804 	addi	r2,r2,4128
   10990:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER0_BASE, 0xC4F0); // ~1000Hz Sampling
   10994:	00f13c14 	movui	r3,50416
   10998:	008000b4 	movhi	r2,2
   1099c:	10840a04 	addi	r2,r2,4136
   109a0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER0_BASE, 0x0000);
   109a4:	0007883a 	mov	r3,zero
   109a8:	008000b4 	movhi	r2,2
   109ac:	10840b04 	addi	r2,r2,4140
   109b0:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER0_IRQ, 0, isr);
   109b4:	e0bfff17 	ldw	r2,-4(fp)
   109b8:	100d883a 	mov	r6,r2
   109bc:	000b883a 	mov	r5,zero
   109c0:	01000084 	movi	r4,2
   109c4:	0013b580 	call	13b58 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER0_BASE, 0x0007);
   109c8:	00c001c4 	movi	r3,7
   109cc:	008000b4 	movhi	r2,2
   109d0:	10840904 	addi	r2,r2,4132
   109d4:	10c00035 	stwio	r3,0(r2)

}
   109d8:	0001883a 	nop
   109dc:	e037883a 	mov	sp,fp
   109e0:	dfc00117 	ldw	ra,4(sp)
   109e4:	df000017 	ldw	fp,0(sp)
   109e8:	dec00204 	addi	sp,sp,8
   109ec:	f800283a 	ret

000109f0 <getState>:

char state = 0;
void getState(){
   109f0:	defffe04 	addi	sp,sp,-8
   109f4:	dfc00115 	stw	ra,4(sp)
   109f8:	df000015 	stw	fp,0(sp)
   109fc:	d839883a 	mov	fp,sp
	state = getchar();
   10a00:	d0a00117 	ldw	r2,-32764(gp)
   10a04:	10800117 	ldw	r2,4(r2)
   10a08:	1009883a 	mov	r4,r2
   10a0c:	00124f00 	call	124f0 <getc>
   10a10:	d0a6cd05 	stb	r2,-25804(gp)
}
   10a14:	0001883a 	nop
   10a18:	e037883a 	mov	sp,fp
   10a1c:	dfc00117 	ldw	ra,4(sp)
   10a20:	df000017 	ldw	fp,0(sp)
   10a24:	dec00204 	addi	sp,sp,8
   10a28:	f800283a 	ret

00010a2c <main>:



int main() {
   10a2c:	defffc04 	addi	sp,sp,-16
   10a30:	dfc00315 	stw	ra,12(sp)
   10a34:	df000215 	stw	fp,8(sp)
   10a38:	df000204 	addi	fp,sp,8

	// make fixed point filter coeff.
	generate_fixed();
   10a3c:	00107dc0 	call	107dc <generate_fixed>

	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10a40:	01000074 	movhi	r4,1
   10a44:	211af104 	addi	r4,r4,27588
   10a48:	00156800 	call	15680 <alt_up_accelerometer_spi_open_dev>
   10a4c:	d0a6d115 	stw	r2,-25788(gp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10a50:	d0a6d117 	ldw	r2,-25788(gp)
   10a54:	1000051e 	bne	r2,zero,10a6c <main+0x40>
    	alt_printf("[ERROR] ACCELEROMETER MISSING\n");
   10a58:	01000074 	movhi	r4,1
   10a5c:	211af704 	addi	r4,r4,27612
   10a60:	001430c0 	call	1430c <alt_printf>
    	return 1;
   10a64:	00800044 	movi	r2,1
   10a68:	00004406 	br	10b7c <main+0x150>
    }
    timer_init(get_accler_isr);
   10a6c:	01000074 	movhi	r4,1
   10a70:	21024304 	addi	r4,r4,2316
   10a74:	00109600 	call	10960 <timer_init>

    if(alt_timestamp_start() < 0) {
   10a78:	00155680 	call	15568 <alt_timestamp_start>
   10a7c:	1000030e 	bge	r2,zero,10a8c <main+0x60>
    	alt_printf("[ERROR] NO TIMESTAMP TIMER\n");
   10a80:	01000074 	movhi	r4,1
   10a84:	211aff04 	addi	r4,r4,27644
   10a88:	001430c0 	call	1430c <alt_printf>

	// infinite polling loop
    while (1) {

    	// only output if there is new sample
    	if(coord_data_ready){
   10a8c:	d0a6ce17 	ldw	r2,-25800(gp)
   10a90:	103ffe26 	beq	r2,zero,10a8c <_gp+0xffff0258>

    		// accelerometer input
    		fir_filter_fixed(fir_mem_fixed_x, coords[0], filtered_coords);
   10a94:	008000b4 	movhi	r2,2
   10a98:	10a94404 	addi	r2,r2,-23280
   10a9c:	10800017 	ldw	r2,0(r2)
   10aa0:	018000b4 	movhi	r6,2
   10aa4:	31a94104 	addi	r6,r6,-23292
   10aa8:	100b883a 	mov	r5,r2
   10aac:	010000b4 	movhi	r4,2
   10ab0:	2128ec04 	addi	r4,r4,-23632
   10ab4:	00106b00 	call	106b0 <fir_filter_fixed>
    		fir_filter_fixed(fir_mem_fixed_y, coords[1], filtered_coords+1);
   10ab8:	008000b4 	movhi	r2,2
   10abc:	10a94404 	addi	r2,r2,-23280
   10ac0:	10c00117 	ldw	r3,4(r2)
   10ac4:	008000b4 	movhi	r2,2
   10ac8:	10a94204 	addi	r2,r2,-23288
   10acc:	100d883a 	mov	r6,r2
   10ad0:	180b883a 	mov	r5,r3
   10ad4:	010000b4 	movhi	r4,2
   10ad8:	21290504 	addi	r4,r4,-23532
   10adc:	00106b00 	call	106b0 <fir_filter_fixed>
    		fir_filter_fixed(fir_mem_fixed_z, coords[2], filtered_coords+2);
   10ae0:	008000b4 	movhi	r2,2
   10ae4:	10a94404 	addi	r2,r2,-23280
   10ae8:	10c00217 	ldw	r3,8(r2)
   10aec:	008000b4 	movhi	r2,2
   10af0:	10a94304 	addi	r2,r2,-23284
   10af4:	100d883a 	mov	r6,r2
   10af8:	180b883a 	mov	r5,r3
   10afc:	010000b4 	movhi	r4,2
   10b00:	21291e04 	addi	r4,r4,-23432
   10b04:	00106b00 	call	106b0 <fir_filter_fixed>

    		// button & switch input
			buttons = read_buttons();
   10b08:	00103940 	call	10394 <read_buttons>
   10b0c:	d0a6d015 	stw	r2,-25792(gp)
			switches = read_switches();
   10b10:	001036c0 	call	1036c <read_switches>
   10b14:	d0a6cf15 	stw	r2,-25796(gp)

    		alt_printf("%x,%x,%x,%x,%x\n", \
   10b18:	008000b4 	movhi	r2,2
   10b1c:	10a94104 	addi	r2,r2,-23292
   10b20:	11000017 	ldw	r4,0(r2)
   10b24:	008000b4 	movhi	r2,2
   10b28:	10a94104 	addi	r2,r2,-23292
   10b2c:	11400117 	ldw	r5,4(r2)
   10b30:	008000b4 	movhi	r2,2
   10b34:	10a94104 	addi	r2,r2,-23292
   10b38:	11800217 	ldw	r6,8(r2)
   10b3c:	d0a6d017 	ldw	r2,-25792(gp)
   10b40:	d0e6cf17 	ldw	r3,-25796(gp)
   10b44:	d8c00115 	stw	r3,4(sp)
   10b48:	d8800015 	stw	r2,0(sp)
   10b4c:	300f883a 	mov	r7,r6
   10b50:	280d883a 	mov	r6,r5
   10b54:	200b883a 	mov	r5,r4
   10b58:	01000074 	movhi	r4,1
   10b5c:	211b0604 	addi	r4,r4,27672
   10b60:	001430c0 	call	1430c <alt_printf>
    				filtered_coords[0], filtered_coords[1], filtered_coords[2], \
					buttons, switches);
    		fflush(stdout);
   10b64:	d0a00117 	ldw	r2,-32764(gp)
   10b68:	10800217 	ldw	r2,8(r2)
   10b6c:	1009883a 	mov	r4,r2
   10b70:	00114fc0 	call	114fc <fflush>

    		coord_data_ready = 0;
   10b74:	d026ce15 	stw	zero,-25800(gp)
//		} else {
//			write_leds(0b0000000000);
//		}

    	// write_leds(leds);
    }
   10b78:	003fc406 	br	10a8c <_gp+0xffff0258>
//    alt_printf("\n\nTotal Running Time (HEX): 0x%x uS\n", totaltime_uS);
//    alt_printf("Average Time (HEX): 0x%x uS\n", averagetime_uS);
//    alt_printf("Sampling Rate (HEX): 0x%x Hz\n", 1000000/averagetime_uS);

    return 0;
}
   10b7c:	e037883a 	mov	sp,fp
   10b80:	dfc00117 	ldw	ra,4(sp)
   10b84:	df000017 	ldw	fp,0(sp)
   10b88:	dec00204 	addi	sp,sp,8
   10b8c:	f800283a 	ret

00010b90 <__mulsi3>:
   10b90:	0005883a 	mov	r2,zero
   10b94:	20000726 	beq	r4,zero,10bb4 <__mulsi3+0x24>
   10b98:	20c0004c 	andi	r3,r4,1
   10b9c:	2008d07a 	srli	r4,r4,1
   10ba0:	18000126 	beq	r3,zero,10ba8 <__mulsi3+0x18>
   10ba4:	1145883a 	add	r2,r2,r5
   10ba8:	294b883a 	add	r5,r5,r5
   10bac:	203ffa1e 	bne	r4,zero,10b98 <_gp+0xffff0364>
   10bb0:	f800283a 	ret
   10bb4:	f800283a 	ret

00010bb8 <__divsf3>:
   10bb8:	defff504 	addi	sp,sp,-44
   10bbc:	200cd5fa 	srli	r6,r4,23
   10bc0:	dcc00415 	stw	r19,16(sp)
   10bc4:	2026d7fa 	srli	r19,r4,31
   10bc8:	00c02034 	movhi	r3,128
   10bcc:	dd800715 	stw	r22,28(sp)
   10bd0:	dd000515 	stw	r20,20(sp)
   10bd4:	dc800315 	stw	r18,12(sp)
   10bd8:	18ffffc4 	addi	r3,r3,-1
   10bdc:	dfc00a15 	stw	ra,40(sp)
   10be0:	df000915 	stw	fp,36(sp)
   10be4:	ddc00815 	stw	r23,32(sp)
   10be8:	dd400615 	stw	r21,24(sp)
   10bec:	dc400215 	stw	r17,8(sp)
   10bf0:	dc000115 	stw	r16,4(sp)
   10bf4:	35003fcc 	andi	r20,r6,255
   10bf8:	1924703a 	and	r18,r3,r4
   10bfc:	9d803fcc 	andi	r22,r19,255
   10c00:	a0005226 	beq	r20,zero,10d4c <__divsf3+0x194>
   10c04:	00803fc4 	movi	r2,255
   10c08:	a0802e26 	beq	r20,r2,10cc4 <__divsf3+0x10c>
   10c0c:	91002034 	orhi	r4,r18,128
   10c10:	202490fa 	slli	r18,r4,3
   10c14:	a53fe044 	addi	r20,r20,-127
   10c18:	0021883a 	mov	r16,zero
   10c1c:	002f883a 	mov	r23,zero
   10c20:	280cd5fa 	srli	r6,r5,23
   10c24:	282ad7fa 	srli	r21,r5,31
   10c28:	00c02034 	movhi	r3,128
   10c2c:	18ffffc4 	addi	r3,r3,-1
   10c30:	31803fcc 	andi	r6,r6,255
   10c34:	1962703a 	and	r17,r3,r5
   10c38:	af003fcc 	andi	fp,r21,255
   10c3c:	30004a26 	beq	r6,zero,10d68 <__divsf3+0x1b0>
   10c40:	00803fc4 	movi	r2,255
   10c44:	30804526 	beq	r6,r2,10d5c <__divsf3+0x1a4>
   10c48:	89402034 	orhi	r5,r17,128
   10c4c:	282290fa 	slli	r17,r5,3
   10c50:	31bfe044 	addi	r6,r6,-127
   10c54:	000b883a 	mov	r5,zero
   10c58:	2c20b03a 	or	r16,r5,r16
   10c5c:	802090ba 	slli	r16,r16,2
   10c60:	00800074 	movhi	r2,1
   10c64:	10832104 	addi	r2,r2,3204
   10c68:	80a1883a 	add	r16,r16,r2
   10c6c:	81000017 	ldw	r4,0(r16)
   10c70:	9d46f03a 	xor	r3,r19,r21
   10c74:	180f883a 	mov	r7,r3
   10c78:	18803fcc 	andi	r2,r3,255
   10c7c:	a18dc83a 	sub	r6,r20,r6
   10c80:	2000683a 	jmp	r4
   10c84:	00010e68 	cmpgeui	zero,zero,1081
   10c88:	00010cec 	andhi	zero,zero,1075
   10c8c:	00010e5c 	xori	zero,zero,1081
   10c90:	00010cd8 	cmpnei	zero,zero,1075
   10c94:	00010e5c 	xori	zero,zero,1081
   10c98:	00010e34 	movhi	zero,1080
   10c9c:	00010e5c 	xori	zero,zero,1081
   10ca0:	00010cd8 	cmpnei	zero,zero,1075
   10ca4:	00010cec 	andhi	zero,zero,1075
   10ca8:	00010cec 	andhi	zero,zero,1075
   10cac:	00010e34 	movhi	zero,1080
   10cb0:	00010cd8 	cmpnei	zero,zero,1075
   10cb4:	00010f48 	cmpgei	zero,zero,1085
   10cb8:	00010f48 	cmpgei	zero,zero,1085
   10cbc:	00010f48 	cmpgei	zero,zero,1085
   10cc0:	00010efc 	xorhi	zero,zero,1083
   10cc4:	9000581e 	bne	r18,zero,10e28 <__divsf3+0x270>
   10cc8:	04000204 	movi	r16,8
   10ccc:	05c00084 	movi	r23,2
   10cd0:	003fd306 	br	10c20 <_gp+0xffff03ec>
   10cd4:	0023883a 	mov	r17,zero
   10cd8:	e02d883a 	mov	r22,fp
   10cdc:	282f883a 	mov	r23,r5
   10ce0:	00800084 	movi	r2,2
   10ce4:	b8808f1e 	bne	r23,r2,10f24 <__divsf3+0x36c>
   10ce8:	b005883a 	mov	r2,r22
   10cec:	11c0004c 	andi	r7,r2,1
   10cf0:	013fffc4 	movi	r4,-1
   10cf4:	000d883a 	mov	r6,zero
   10cf8:	21003fcc 	andi	r4,r4,255
   10cfc:	200895fa 	slli	r4,r4,23
   10d00:	38803fcc 	andi	r2,r7,255
   10d04:	00c02034 	movhi	r3,128
   10d08:	100497fa 	slli	r2,r2,31
   10d0c:	18ffffc4 	addi	r3,r3,-1
   10d10:	30c6703a 	and	r3,r6,r3
   10d14:	1906b03a 	or	r3,r3,r4
   10d18:	1884b03a 	or	r2,r3,r2
   10d1c:	dfc00a17 	ldw	ra,40(sp)
   10d20:	df000917 	ldw	fp,36(sp)
   10d24:	ddc00817 	ldw	r23,32(sp)
   10d28:	dd800717 	ldw	r22,28(sp)
   10d2c:	dd400617 	ldw	r21,24(sp)
   10d30:	dd000517 	ldw	r20,20(sp)
   10d34:	dcc00417 	ldw	r19,16(sp)
   10d38:	dc800317 	ldw	r18,12(sp)
   10d3c:	dc400217 	ldw	r17,8(sp)
   10d40:	dc000117 	ldw	r16,4(sp)
   10d44:	dec00b04 	addi	sp,sp,44
   10d48:	f800283a 	ret
   10d4c:	90002b1e 	bne	r18,zero,10dfc <__divsf3+0x244>
   10d50:	04000104 	movi	r16,4
   10d54:	05c00044 	movi	r23,1
   10d58:	003fb106 	br	10c20 <_gp+0xffff03ec>
   10d5c:	8800251e 	bne	r17,zero,10df4 <__divsf3+0x23c>
   10d60:	01400084 	movi	r5,2
   10d64:	00000206 	br	10d70 <__divsf3+0x1b8>
   10d68:	88001a1e 	bne	r17,zero,10dd4 <__divsf3+0x21c>
   10d6c:	01400044 	movi	r5,1
   10d70:	8160b03a 	or	r16,r16,r5
   10d74:	802090ba 	slli	r16,r16,2
   10d78:	00c00074 	movhi	r3,1
   10d7c:	18c36504 	addi	r3,r3,3476
   10d80:	80e1883a 	add	r16,r16,r3
   10d84:	80c00017 	ldw	r3,0(r16)
   10d88:	9d44f03a 	xor	r2,r19,r21
   10d8c:	a18dc83a 	sub	r6,r20,r6
   10d90:	1800683a 	jmp	r3
   10d94:	00010cec 	andhi	zero,zero,1075
   10d98:	00010cec 	andhi	zero,zero,1075
   10d9c:	00010f38 	rdprs	zero,zero,1084
   10da0:	00010cd4 	movui	zero,1075
   10da4:	00010f38 	rdprs	zero,zero,1084
   10da8:	00010e34 	movhi	zero,1080
   10dac:	00010f38 	rdprs	zero,zero,1084
   10db0:	00010cd4 	movui	zero,1075
   10db4:	00010cec 	andhi	zero,zero,1075
   10db8:	00010cec 	andhi	zero,zero,1075
   10dbc:	00010e34 	movhi	zero,1080
   10dc0:	00010cd4 	movui	zero,1075
   10dc4:	00010f48 	cmpgei	zero,zero,1085
   10dc8:	00010f48 	cmpgei	zero,zero,1085
   10dcc:	00010f48 	cmpgei	zero,zero,1085
   10dd0:	00010f60 	cmpeqi	zero,zero,1085
   10dd4:	8809883a 	mov	r4,r17
   10dd8:	001111c0 	call	1111c <__clzsi2>
   10ddc:	10fffec4 	addi	r3,r2,-5
   10de0:	10801d84 	addi	r2,r2,118
   10de4:	88e2983a 	sll	r17,r17,r3
   10de8:	008dc83a 	sub	r6,zero,r2
   10dec:	000b883a 	mov	r5,zero
   10df0:	003f9906 	br	10c58 <_gp+0xffff0424>
   10df4:	014000c4 	movi	r5,3
   10df8:	003f9706 	br	10c58 <_gp+0xffff0424>
   10dfc:	9009883a 	mov	r4,r18
   10e00:	d9400015 	stw	r5,0(sp)
   10e04:	001111c0 	call	1111c <__clzsi2>
   10e08:	10fffec4 	addi	r3,r2,-5
   10e0c:	11801d84 	addi	r6,r2,118
   10e10:	90e4983a 	sll	r18,r18,r3
   10e14:	01a9c83a 	sub	r20,zero,r6
   10e18:	0021883a 	mov	r16,zero
   10e1c:	002f883a 	mov	r23,zero
   10e20:	d9400017 	ldw	r5,0(sp)
   10e24:	003f7e06 	br	10c20 <_gp+0xffff03ec>
   10e28:	04000304 	movi	r16,12
   10e2c:	05c000c4 	movi	r23,3
   10e30:	003f7b06 	br	10c20 <_gp+0xffff03ec>
   10e34:	01802034 	movhi	r6,128
   10e38:	000f883a 	mov	r7,zero
   10e3c:	31bfffc4 	addi	r6,r6,-1
   10e40:	013fffc4 	movi	r4,-1
   10e44:	003fac06 	br	10cf8 <_gp+0xffff04c4>
   10e48:	01400044 	movi	r5,1
   10e4c:	2909c83a 	sub	r4,r5,r4
   10e50:	00c006c4 	movi	r3,27
   10e54:	19004b0e 	bge	r3,r4,10f84 <__divsf3+0x3cc>
   10e58:	114e703a 	and	r7,r2,r5
   10e5c:	0009883a 	mov	r4,zero
   10e60:	000d883a 	mov	r6,zero
   10e64:	003fa406 	br	10cf8 <_gp+0xffff04c4>
   10e68:	9006917a 	slli	r3,r18,5
   10e6c:	8822917a 	slli	r17,r17,5
   10e70:	1c40372e 	bgeu	r3,r17,10f50 <__divsf3+0x398>
   10e74:	31bfffc4 	addi	r6,r6,-1
   10e78:	010006c4 	movi	r4,27
   10e7c:	000b883a 	mov	r5,zero
   10e80:	180f883a 	mov	r7,r3
   10e84:	294b883a 	add	r5,r5,r5
   10e88:	18c7883a 	add	r3,r3,r3
   10e8c:	38000116 	blt	r7,zero,10e94 <__divsf3+0x2dc>
   10e90:	1c400236 	bltu	r3,r17,10e9c <__divsf3+0x2e4>
   10e94:	1c47c83a 	sub	r3,r3,r17
   10e98:	29400054 	ori	r5,r5,1
   10e9c:	213fffc4 	addi	r4,r4,-1
   10ea0:	203ff71e 	bne	r4,zero,10e80 <_gp+0xffff064c>
   10ea4:	1806c03a 	cmpne	r3,r3,zero
   10ea8:	1962b03a 	or	r17,r3,r5
   10eac:	31001fc4 	addi	r4,r6,127
   10eb0:	013fe50e 	bge	zero,r4,10e48 <_gp+0xffff0614>
   10eb4:	88c001cc 	andi	r3,r17,7
   10eb8:	18000426 	beq	r3,zero,10ecc <__divsf3+0x314>
   10ebc:	88c003cc 	andi	r3,r17,15
   10ec0:	01400104 	movi	r5,4
   10ec4:	19400126 	beq	r3,r5,10ecc <__divsf3+0x314>
   10ec8:	8963883a 	add	r17,r17,r5
   10ecc:	88c2002c 	andhi	r3,r17,2048
   10ed0:	18000426 	beq	r3,zero,10ee4 <__divsf3+0x32c>
   10ed4:	00fe0034 	movhi	r3,63488
   10ed8:	18ffffc4 	addi	r3,r3,-1
   10edc:	31002004 	addi	r4,r6,128
   10ee0:	88e2703a 	and	r17,r17,r3
   10ee4:	00c03f84 	movi	r3,254
   10ee8:	193f8016 	blt	r3,r4,10cec <_gp+0xffff04b8>
   10eec:	880c91ba 	slli	r6,r17,6
   10ef0:	11c0004c 	andi	r7,r2,1
   10ef4:	300cd27a 	srli	r6,r6,9
   10ef8:	003f7f06 	br	10cf8 <_gp+0xffff04c4>
   10efc:	9080102c 	andhi	r2,r18,64
   10f00:	10000226 	beq	r2,zero,10f0c <__divsf3+0x354>
   10f04:	8880102c 	andhi	r2,r17,64
   10f08:	10001826 	beq	r2,zero,10f6c <__divsf3+0x3b4>
   10f0c:	00802034 	movhi	r2,128
   10f10:	91801034 	orhi	r6,r18,64
   10f14:	10bfffc4 	addi	r2,r2,-1
   10f18:	980f883a 	mov	r7,r19
   10f1c:	308c703a 	and	r6,r6,r2
   10f20:	003fc706 	br	10e40 <_gp+0xffff060c>
   10f24:	008000c4 	movi	r2,3
   10f28:	b8802d26 	beq	r23,r2,10fe0 <__divsf3+0x428>
   10f2c:	00c00044 	movi	r3,1
   10f30:	b005883a 	mov	r2,r22
   10f34:	b8ffdd1e 	bne	r23,r3,10eac <_gp+0xffff0678>
   10f38:	11c0004c 	andi	r7,r2,1
   10f3c:	0009883a 	mov	r4,zero
   10f40:	000d883a 	mov	r6,zero
   10f44:	003f6c06 	br	10cf8 <_gp+0xffff04c4>
   10f48:	9023883a 	mov	r17,r18
   10f4c:	003f6406 	br	10ce0 <_gp+0xffff04ac>
   10f50:	1c47c83a 	sub	r3,r3,r17
   10f54:	01000684 	movi	r4,26
   10f58:	01400044 	movi	r5,1
   10f5c:	003fc806 	br	10e80 <_gp+0xffff064c>
   10f60:	9080102c 	andhi	r2,r18,64
   10f64:	103fe926 	beq	r2,zero,10f0c <_gp+0xffff06d8>
   10f68:	0023883a 	mov	r17,zero
   10f6c:	00802034 	movhi	r2,128
   10f70:	89801034 	orhi	r6,r17,64
   10f74:	10bfffc4 	addi	r2,r2,-1
   10f78:	a80f883a 	mov	r7,r21
   10f7c:	308c703a 	and	r6,r6,r2
   10f80:	003faf06 	br	10e40 <_gp+0xffff060c>
   10f84:	01c00804 	movi	r7,32
   10f88:	390fc83a 	sub	r7,r7,r4
   10f8c:	89ce983a 	sll	r7,r17,r7
   10f90:	890ad83a 	srl	r5,r17,r4
   10f94:	380ec03a 	cmpne	r7,r7,zero
   10f98:	29cab03a 	or	r5,r5,r7
   10f9c:	28c001cc 	andi	r3,r5,7
   10fa0:	18000426 	beq	r3,zero,10fb4 <__divsf3+0x3fc>
   10fa4:	28c003cc 	andi	r3,r5,15
   10fa8:	01000104 	movi	r4,4
   10fac:	19000126 	beq	r3,r4,10fb4 <__divsf3+0x3fc>
   10fb0:	290b883a 	add	r5,r5,r4
   10fb4:	28c1002c 	andhi	r3,r5,1024
   10fb8:	18000426 	beq	r3,zero,10fcc <__divsf3+0x414>
   10fbc:	11c0004c 	andi	r7,r2,1
   10fc0:	01000044 	movi	r4,1
   10fc4:	000d883a 	mov	r6,zero
   10fc8:	003f4b06 	br	10cf8 <_gp+0xffff04c4>
   10fcc:	280a91ba 	slli	r5,r5,6
   10fd0:	11c0004c 	andi	r7,r2,1
   10fd4:	0009883a 	mov	r4,zero
   10fd8:	280cd27a 	srli	r6,r5,9
   10fdc:	003f4606 	br	10cf8 <_gp+0xffff04c4>
   10fe0:	00802034 	movhi	r2,128
   10fe4:	89801034 	orhi	r6,r17,64
   10fe8:	10bfffc4 	addi	r2,r2,-1
   10fec:	b00f883a 	mov	r7,r22
   10ff0:	308c703a 	and	r6,r6,r2
   10ff4:	003f9206 	br	10e40 <_gp+0xffff060c>

00010ff8 <__floatsisf>:
   10ff8:	defffd04 	addi	sp,sp,-12
   10ffc:	dfc00215 	stw	ra,8(sp)
   11000:	dc400115 	stw	r17,4(sp)
   11004:	dc000015 	stw	r16,0(sp)
   11008:	20003526 	beq	r4,zero,110e0 <__floatsisf+0xe8>
   1100c:	2021883a 	mov	r16,r4
   11010:	2022d7fa 	srli	r17,r4,31
   11014:	20003616 	blt	r4,zero,110f0 <__floatsisf+0xf8>
   11018:	8009883a 	mov	r4,r16
   1101c:	001111c0 	call	1111c <__clzsi2>
   11020:	00c02784 	movi	r3,158
   11024:	1887c83a 	sub	r3,r3,r2
   11028:	01002584 	movi	r4,150
   1102c:	20c01416 	blt	r4,r3,11080 <__floatsisf+0x88>
   11030:	20c9c83a 	sub	r4,r4,r3
   11034:	8120983a 	sll	r16,r16,r4
   11038:	00802034 	movhi	r2,128
   1103c:	10bfffc4 	addi	r2,r2,-1
   11040:	8809883a 	mov	r4,r17
   11044:	80a0703a 	and	r16,r16,r2
   11048:	18803fcc 	andi	r2,r3,255
   1104c:	100695fa 	slli	r3,r2,23
   11050:	20803fcc 	andi	r2,r4,255
   11054:	100897fa 	slli	r4,r2,31
   11058:	00802034 	movhi	r2,128
   1105c:	10bfffc4 	addi	r2,r2,-1
   11060:	8084703a 	and	r2,r16,r2
   11064:	10c4b03a 	or	r2,r2,r3
   11068:	1104b03a 	or	r2,r2,r4
   1106c:	dfc00217 	ldw	ra,8(sp)
   11070:	dc400117 	ldw	r17,4(sp)
   11074:	dc000017 	ldw	r16,0(sp)
   11078:	dec00304 	addi	sp,sp,12
   1107c:	f800283a 	ret
   11080:	01002644 	movi	r4,153
   11084:	20c01c16 	blt	r4,r3,110f8 <__floatsisf+0x100>
   11088:	20c9c83a 	sub	r4,r4,r3
   1108c:	8120983a 	sll	r16,r16,r4
   11090:	013f0034 	movhi	r4,64512
   11094:	213fffc4 	addi	r4,r4,-1
   11098:	814001cc 	andi	r5,r16,7
   1109c:	8108703a 	and	r4,r16,r4
   110a0:	28000426 	beq	r5,zero,110b4 <__floatsisf+0xbc>
   110a4:	840003cc 	andi	r16,r16,15
   110a8:	01400104 	movi	r5,4
   110ac:	81400126 	beq	r16,r5,110b4 <__floatsisf+0xbc>
   110b0:	2149883a 	add	r4,r4,r5
   110b4:	2141002c 	andhi	r5,r4,1024
   110b8:	28000526 	beq	r5,zero,110d0 <__floatsisf+0xd8>
   110bc:	00c027c4 	movi	r3,159
   110c0:	1887c83a 	sub	r3,r3,r2
   110c4:	00bf0034 	movhi	r2,64512
   110c8:	10bfffc4 	addi	r2,r2,-1
   110cc:	2088703a 	and	r4,r4,r2
   110d0:	202091ba 	slli	r16,r4,6
   110d4:	8809883a 	mov	r4,r17
   110d8:	8020d27a 	srli	r16,r16,9
   110dc:	003fda06 	br	11048 <_gp+0xffff0814>
   110e0:	0009883a 	mov	r4,zero
   110e4:	0007883a 	mov	r3,zero
   110e8:	0021883a 	mov	r16,zero
   110ec:	003fd606 	br	11048 <_gp+0xffff0814>
   110f0:	0121c83a 	sub	r16,zero,r4
   110f4:	003fc806 	br	11018 <_gp+0xffff07e4>
   110f8:	01002e44 	movi	r4,185
   110fc:	20c9c83a 	sub	r4,r4,r3
   11100:	01400144 	movi	r5,5
   11104:	8108983a 	sll	r4,r16,r4
   11108:	288bc83a 	sub	r5,r5,r2
   1110c:	8160d83a 	srl	r16,r16,r5
   11110:	2008c03a 	cmpne	r4,r4,zero
   11114:	8120b03a 	or	r16,r16,r4
   11118:	003fdd06 	br	11090 <_gp+0xffff085c>

0001111c <__clzsi2>:
   1111c:	00bfffd4 	movui	r2,65535
   11120:	11000536 	bltu	r2,r4,11138 <__clzsi2+0x1c>
   11124:	00803fc4 	movi	r2,255
   11128:	11000f36 	bltu	r2,r4,11168 <__clzsi2+0x4c>
   1112c:	00800804 	movi	r2,32
   11130:	0007883a 	mov	r3,zero
   11134:	00000506 	br	1114c <__clzsi2+0x30>
   11138:	00804034 	movhi	r2,256
   1113c:	10bfffc4 	addi	r2,r2,-1
   11140:	11000c2e 	bgeu	r2,r4,11174 <__clzsi2+0x58>
   11144:	00800204 	movi	r2,8
   11148:	00c00604 	movi	r3,24
   1114c:	20c8d83a 	srl	r4,r4,r3
   11150:	00c00074 	movhi	r3,1
   11154:	18db0a04 	addi	r3,r3,27688
   11158:	1909883a 	add	r4,r3,r4
   1115c:	20c00003 	ldbu	r3,0(r4)
   11160:	10c5c83a 	sub	r2,r2,r3
   11164:	f800283a 	ret
   11168:	00800604 	movi	r2,24
   1116c:	00c00204 	movi	r3,8
   11170:	003ff606 	br	1114c <_gp+0xffff0918>
   11174:	00800404 	movi	r2,16
   11178:	1007883a 	mov	r3,r2
   1117c:	003ff306 	br	1114c <_gp+0xffff0918>

00011180 <_fclose_r>:
   11180:	28003926 	beq	r5,zero,11268 <_fclose_r+0xe8>
   11184:	defffc04 	addi	sp,sp,-16
   11188:	dc400115 	stw	r17,4(sp)
   1118c:	dc000015 	stw	r16,0(sp)
   11190:	dfc00315 	stw	ra,12(sp)
   11194:	dc800215 	stw	r18,8(sp)
   11198:	2023883a 	mov	r17,r4
   1119c:	2821883a 	mov	r16,r5
   111a0:	20000226 	beq	r4,zero,111ac <_fclose_r+0x2c>
   111a4:	20800e17 	ldw	r2,56(r4)
   111a8:	10002726 	beq	r2,zero,11248 <_fclose_r+0xc8>
   111ac:	8080030f 	ldh	r2,12(r16)
   111b0:	1000071e 	bne	r2,zero,111d0 <_fclose_r+0x50>
   111b4:	0005883a 	mov	r2,zero
   111b8:	dfc00317 	ldw	ra,12(sp)
   111bc:	dc800217 	ldw	r18,8(sp)
   111c0:	dc400117 	ldw	r17,4(sp)
   111c4:	dc000017 	ldw	r16,0(sp)
   111c8:	dec00404 	addi	sp,sp,16
   111cc:	f800283a 	ret
   111d0:	800b883a 	mov	r5,r16
   111d4:	8809883a 	mov	r4,r17
   111d8:	00112840 	call	11284 <__sflush_r>
   111dc:	1025883a 	mov	r18,r2
   111e0:	80800b17 	ldw	r2,44(r16)
   111e4:	10000426 	beq	r2,zero,111f8 <_fclose_r+0x78>
   111e8:	81400717 	ldw	r5,28(r16)
   111ec:	8809883a 	mov	r4,r17
   111f0:	103ee83a 	callr	r2
   111f4:	10001616 	blt	r2,zero,11250 <_fclose_r+0xd0>
   111f8:	8080030b 	ldhu	r2,12(r16)
   111fc:	1080200c 	andi	r2,r2,128
   11200:	1000151e 	bne	r2,zero,11258 <_fclose_r+0xd8>
   11204:	81400c17 	ldw	r5,48(r16)
   11208:	28000526 	beq	r5,zero,11220 <_fclose_r+0xa0>
   1120c:	80801004 	addi	r2,r16,64
   11210:	28800226 	beq	r5,r2,1121c <_fclose_r+0x9c>
   11214:	8809883a 	mov	r4,r17
   11218:	0011b0c0 	call	11b0c <_free_r>
   1121c:	80000c15 	stw	zero,48(r16)
   11220:	81401117 	ldw	r5,68(r16)
   11224:	28000326 	beq	r5,zero,11234 <_fclose_r+0xb4>
   11228:	8809883a 	mov	r4,r17
   1122c:	0011b0c0 	call	11b0c <_free_r>
   11230:	80001115 	stw	zero,68(r16)
   11234:	001189c0 	call	1189c <__sfp_lock_acquire>
   11238:	8000030d 	sth	zero,12(r16)
   1123c:	00118a00 	call	118a0 <__sfp_lock_release>
   11240:	9005883a 	mov	r2,r18
   11244:	003fdc06 	br	111b8 <_gp+0xffff0984>
   11248:	001188c0 	call	1188c <__sinit>
   1124c:	003fd706 	br	111ac <_gp+0xffff0978>
   11250:	04bfffc4 	movi	r18,-1
   11254:	003fe806 	br	111f8 <_gp+0xffff09c4>
   11258:	81400417 	ldw	r5,16(r16)
   1125c:	8809883a 	mov	r4,r17
   11260:	0011b0c0 	call	11b0c <_free_r>
   11264:	003fe706 	br	11204 <_gp+0xffff09d0>
   11268:	0005883a 	mov	r2,zero
   1126c:	f800283a 	ret

00011270 <fclose>:
   11270:	008000b4 	movhi	r2,2
   11274:	10a20e04 	addi	r2,r2,-30664
   11278:	200b883a 	mov	r5,r4
   1127c:	11000017 	ldw	r4,0(r2)
   11280:	00111801 	jmpi	11180 <_fclose_r>

00011284 <__sflush_r>:
   11284:	2880030b 	ldhu	r2,12(r5)
   11288:	defffb04 	addi	sp,sp,-20
   1128c:	dcc00315 	stw	r19,12(sp)
   11290:	dc400115 	stw	r17,4(sp)
   11294:	dfc00415 	stw	ra,16(sp)
   11298:	dc800215 	stw	r18,8(sp)
   1129c:	dc000015 	stw	r16,0(sp)
   112a0:	10c0020c 	andi	r3,r2,8
   112a4:	2823883a 	mov	r17,r5
   112a8:	2027883a 	mov	r19,r4
   112ac:	1800311e 	bne	r3,zero,11374 <__sflush_r+0xf0>
   112b0:	28c00117 	ldw	r3,4(r5)
   112b4:	10820014 	ori	r2,r2,2048
   112b8:	2880030d 	sth	r2,12(r5)
   112bc:	00c04b0e 	bge	zero,r3,113ec <__sflush_r+0x168>
   112c0:	8a000a17 	ldw	r8,40(r17)
   112c4:	40002326 	beq	r8,zero,11354 <__sflush_r+0xd0>
   112c8:	9c000017 	ldw	r16,0(r19)
   112cc:	10c4000c 	andi	r3,r2,4096
   112d0:	98000015 	stw	zero,0(r19)
   112d4:	18004826 	beq	r3,zero,113f8 <__sflush_r+0x174>
   112d8:	89801417 	ldw	r6,80(r17)
   112dc:	10c0010c 	andi	r3,r2,4
   112e0:	18000626 	beq	r3,zero,112fc <__sflush_r+0x78>
   112e4:	88c00117 	ldw	r3,4(r17)
   112e8:	88800c17 	ldw	r2,48(r17)
   112ec:	30cdc83a 	sub	r6,r6,r3
   112f0:	10000226 	beq	r2,zero,112fc <__sflush_r+0x78>
   112f4:	88800f17 	ldw	r2,60(r17)
   112f8:	308dc83a 	sub	r6,r6,r2
   112fc:	89400717 	ldw	r5,28(r17)
   11300:	000f883a 	mov	r7,zero
   11304:	9809883a 	mov	r4,r19
   11308:	403ee83a 	callr	r8
   1130c:	00ffffc4 	movi	r3,-1
   11310:	10c04426 	beq	r2,r3,11424 <__sflush_r+0x1a0>
   11314:	88c0030b 	ldhu	r3,12(r17)
   11318:	89000417 	ldw	r4,16(r17)
   1131c:	88000115 	stw	zero,4(r17)
   11320:	197dffcc 	andi	r5,r3,63487
   11324:	8940030d 	sth	r5,12(r17)
   11328:	89000015 	stw	r4,0(r17)
   1132c:	18c4000c 	andi	r3,r3,4096
   11330:	18002c1e 	bne	r3,zero,113e4 <__sflush_r+0x160>
   11334:	89400c17 	ldw	r5,48(r17)
   11338:	9c000015 	stw	r16,0(r19)
   1133c:	28000526 	beq	r5,zero,11354 <__sflush_r+0xd0>
   11340:	88801004 	addi	r2,r17,64
   11344:	28800226 	beq	r5,r2,11350 <__sflush_r+0xcc>
   11348:	9809883a 	mov	r4,r19
   1134c:	0011b0c0 	call	11b0c <_free_r>
   11350:	88000c15 	stw	zero,48(r17)
   11354:	0005883a 	mov	r2,zero
   11358:	dfc00417 	ldw	ra,16(sp)
   1135c:	dcc00317 	ldw	r19,12(sp)
   11360:	dc800217 	ldw	r18,8(sp)
   11364:	dc400117 	ldw	r17,4(sp)
   11368:	dc000017 	ldw	r16,0(sp)
   1136c:	dec00504 	addi	sp,sp,20
   11370:	f800283a 	ret
   11374:	2c800417 	ldw	r18,16(r5)
   11378:	903ff626 	beq	r18,zero,11354 <_gp+0xffff0b20>
   1137c:	2c000017 	ldw	r16,0(r5)
   11380:	108000cc 	andi	r2,r2,3
   11384:	2c800015 	stw	r18,0(r5)
   11388:	84a1c83a 	sub	r16,r16,r18
   1138c:	1000131e 	bne	r2,zero,113dc <__sflush_r+0x158>
   11390:	28800517 	ldw	r2,20(r5)
   11394:	88800215 	stw	r2,8(r17)
   11398:	04000316 	blt	zero,r16,113a8 <__sflush_r+0x124>
   1139c:	003fed06 	br	11354 <_gp+0xffff0b20>
   113a0:	90a5883a 	add	r18,r18,r2
   113a4:	043feb0e 	bge	zero,r16,11354 <_gp+0xffff0b20>
   113a8:	88800917 	ldw	r2,36(r17)
   113ac:	89400717 	ldw	r5,28(r17)
   113b0:	800f883a 	mov	r7,r16
   113b4:	900d883a 	mov	r6,r18
   113b8:	9809883a 	mov	r4,r19
   113bc:	103ee83a 	callr	r2
   113c0:	80a1c83a 	sub	r16,r16,r2
   113c4:	00bff616 	blt	zero,r2,113a0 <_gp+0xffff0b6c>
   113c8:	88c0030b 	ldhu	r3,12(r17)
   113cc:	00bfffc4 	movi	r2,-1
   113d0:	18c01014 	ori	r3,r3,64
   113d4:	88c0030d 	sth	r3,12(r17)
   113d8:	003fdf06 	br	11358 <_gp+0xffff0b24>
   113dc:	0005883a 	mov	r2,zero
   113e0:	003fec06 	br	11394 <_gp+0xffff0b60>
   113e4:	88801415 	stw	r2,80(r17)
   113e8:	003fd206 	br	11334 <_gp+0xffff0b00>
   113ec:	28c00f17 	ldw	r3,60(r5)
   113f0:	00ffb316 	blt	zero,r3,112c0 <_gp+0xffff0a8c>
   113f4:	003fd706 	br	11354 <_gp+0xffff0b20>
   113f8:	89400717 	ldw	r5,28(r17)
   113fc:	000d883a 	mov	r6,zero
   11400:	01c00044 	movi	r7,1
   11404:	9809883a 	mov	r4,r19
   11408:	403ee83a 	callr	r8
   1140c:	100d883a 	mov	r6,r2
   11410:	00bfffc4 	movi	r2,-1
   11414:	30801426 	beq	r6,r2,11468 <__sflush_r+0x1e4>
   11418:	8880030b 	ldhu	r2,12(r17)
   1141c:	8a000a17 	ldw	r8,40(r17)
   11420:	003fae06 	br	112dc <_gp+0xffff0aa8>
   11424:	98c00017 	ldw	r3,0(r19)
   11428:	183fba26 	beq	r3,zero,11314 <_gp+0xffff0ae0>
   1142c:	01000744 	movi	r4,29
   11430:	19000626 	beq	r3,r4,1144c <__sflush_r+0x1c8>
   11434:	01000584 	movi	r4,22
   11438:	19000426 	beq	r3,r4,1144c <__sflush_r+0x1c8>
   1143c:	88c0030b 	ldhu	r3,12(r17)
   11440:	18c01014 	ori	r3,r3,64
   11444:	88c0030d 	sth	r3,12(r17)
   11448:	003fc306 	br	11358 <_gp+0xffff0b24>
   1144c:	8880030b 	ldhu	r2,12(r17)
   11450:	88c00417 	ldw	r3,16(r17)
   11454:	88000115 	stw	zero,4(r17)
   11458:	10bdffcc 	andi	r2,r2,63487
   1145c:	8880030d 	sth	r2,12(r17)
   11460:	88c00015 	stw	r3,0(r17)
   11464:	003fb306 	br	11334 <_gp+0xffff0b00>
   11468:	98800017 	ldw	r2,0(r19)
   1146c:	103fea26 	beq	r2,zero,11418 <_gp+0xffff0be4>
   11470:	00c00744 	movi	r3,29
   11474:	10c00226 	beq	r2,r3,11480 <__sflush_r+0x1fc>
   11478:	00c00584 	movi	r3,22
   1147c:	10c0031e 	bne	r2,r3,1148c <__sflush_r+0x208>
   11480:	9c000015 	stw	r16,0(r19)
   11484:	0005883a 	mov	r2,zero
   11488:	003fb306 	br	11358 <_gp+0xffff0b24>
   1148c:	88c0030b 	ldhu	r3,12(r17)
   11490:	3005883a 	mov	r2,r6
   11494:	18c01014 	ori	r3,r3,64
   11498:	88c0030d 	sth	r3,12(r17)
   1149c:	003fae06 	br	11358 <_gp+0xffff0b24>

000114a0 <_fflush_r>:
   114a0:	defffd04 	addi	sp,sp,-12
   114a4:	dc000115 	stw	r16,4(sp)
   114a8:	dfc00215 	stw	ra,8(sp)
   114ac:	2021883a 	mov	r16,r4
   114b0:	20000226 	beq	r4,zero,114bc <_fflush_r+0x1c>
   114b4:	20800e17 	ldw	r2,56(r4)
   114b8:	10000c26 	beq	r2,zero,114ec <_fflush_r+0x4c>
   114bc:	2880030f 	ldh	r2,12(r5)
   114c0:	1000051e 	bne	r2,zero,114d8 <_fflush_r+0x38>
   114c4:	0005883a 	mov	r2,zero
   114c8:	dfc00217 	ldw	ra,8(sp)
   114cc:	dc000117 	ldw	r16,4(sp)
   114d0:	dec00304 	addi	sp,sp,12
   114d4:	f800283a 	ret
   114d8:	8009883a 	mov	r4,r16
   114dc:	dfc00217 	ldw	ra,8(sp)
   114e0:	dc000117 	ldw	r16,4(sp)
   114e4:	dec00304 	addi	sp,sp,12
   114e8:	00112841 	jmpi	11284 <__sflush_r>
   114ec:	d9400015 	stw	r5,0(sp)
   114f0:	001188c0 	call	1188c <__sinit>
   114f4:	d9400017 	ldw	r5,0(sp)
   114f8:	003ff006 	br	114bc <_gp+0xffff0c88>

000114fc <fflush>:
   114fc:	20000526 	beq	r4,zero,11514 <fflush+0x18>
   11500:	008000b4 	movhi	r2,2
   11504:	10a20e04 	addi	r2,r2,-30664
   11508:	200b883a 	mov	r5,r4
   1150c:	11000017 	ldw	r4,0(r2)
   11510:	00114a01 	jmpi	114a0 <_fflush_r>
   11514:	008000b4 	movhi	r2,2
   11518:	10a20d04 	addi	r2,r2,-30668
   1151c:	11000017 	ldw	r4,0(r2)
   11520:	01400074 	movhi	r5,1
   11524:	29452804 	addi	r5,r5,5280
   11528:	00123bc1 	jmpi	123bc <_fwalk_reent>

0001152c <__fp_unlock>:
   1152c:	0005883a 	mov	r2,zero
   11530:	f800283a 	ret

00011534 <_cleanup_r>:
   11534:	01400074 	movhi	r5,1
   11538:	29446004 	addi	r5,r5,4480
   1153c:	00123bc1 	jmpi	123bc <_fwalk_reent>

00011540 <__sinit.part.1>:
   11540:	defff704 	addi	sp,sp,-36
   11544:	00c00074 	movhi	r3,1
   11548:	dfc00815 	stw	ra,32(sp)
   1154c:	ddc00715 	stw	r23,28(sp)
   11550:	dd800615 	stw	r22,24(sp)
   11554:	dd400515 	stw	r21,20(sp)
   11558:	dd000415 	stw	r20,16(sp)
   1155c:	dcc00315 	stw	r19,12(sp)
   11560:	dc800215 	stw	r18,8(sp)
   11564:	dc400115 	stw	r17,4(sp)
   11568:	dc000015 	stw	r16,0(sp)
   1156c:	18c54d04 	addi	r3,r3,5428
   11570:	24000117 	ldw	r16,4(r4)
   11574:	20c00f15 	stw	r3,60(r4)
   11578:	2080bb04 	addi	r2,r4,748
   1157c:	00c000c4 	movi	r3,3
   11580:	20c0b915 	stw	r3,740(r4)
   11584:	2080ba15 	stw	r2,744(r4)
   11588:	2000b815 	stw	zero,736(r4)
   1158c:	05c00204 	movi	r23,8
   11590:	00800104 	movi	r2,4
   11594:	2025883a 	mov	r18,r4
   11598:	b80d883a 	mov	r6,r23
   1159c:	81001704 	addi	r4,r16,92
   115a0:	000b883a 	mov	r5,zero
   115a4:	80000015 	stw	zero,0(r16)
   115a8:	80000115 	stw	zero,4(r16)
   115ac:	80000215 	stw	zero,8(r16)
   115b0:	8080030d 	sth	r2,12(r16)
   115b4:	80001915 	stw	zero,100(r16)
   115b8:	8000038d 	sth	zero,14(r16)
   115bc:	80000415 	stw	zero,16(r16)
   115c0:	80000515 	stw	zero,20(r16)
   115c4:	80000615 	stw	zero,24(r16)
   115c8:	00130880 	call	13088 <memset>
   115cc:	05800074 	movhi	r22,1
   115d0:	94400217 	ldw	r17,8(r18)
   115d4:	05400074 	movhi	r21,1
   115d8:	05000074 	movhi	r20,1
   115dc:	04c00074 	movhi	r19,1
   115e0:	b58d3704 	addi	r22,r22,13532
   115e4:	ad4d4e04 	addi	r21,r21,13624
   115e8:	a50d6d04 	addi	r20,r20,13748
   115ec:	9ccd8404 	addi	r19,r19,13840
   115f0:	85800815 	stw	r22,32(r16)
   115f4:	85400915 	stw	r21,36(r16)
   115f8:	85000a15 	stw	r20,40(r16)
   115fc:	84c00b15 	stw	r19,44(r16)
   11600:	84000715 	stw	r16,28(r16)
   11604:	00800284 	movi	r2,10
   11608:	8880030d 	sth	r2,12(r17)
   1160c:	00800044 	movi	r2,1
   11610:	b80d883a 	mov	r6,r23
   11614:	89001704 	addi	r4,r17,92
   11618:	000b883a 	mov	r5,zero
   1161c:	88000015 	stw	zero,0(r17)
   11620:	88000115 	stw	zero,4(r17)
   11624:	88000215 	stw	zero,8(r17)
   11628:	88001915 	stw	zero,100(r17)
   1162c:	8880038d 	sth	r2,14(r17)
   11630:	88000415 	stw	zero,16(r17)
   11634:	88000515 	stw	zero,20(r17)
   11638:	88000615 	stw	zero,24(r17)
   1163c:	00130880 	call	13088 <memset>
   11640:	94000317 	ldw	r16,12(r18)
   11644:	00800484 	movi	r2,18
   11648:	8c400715 	stw	r17,28(r17)
   1164c:	8d800815 	stw	r22,32(r17)
   11650:	8d400915 	stw	r21,36(r17)
   11654:	8d000a15 	stw	r20,40(r17)
   11658:	8cc00b15 	stw	r19,44(r17)
   1165c:	8080030d 	sth	r2,12(r16)
   11660:	00800084 	movi	r2,2
   11664:	80000015 	stw	zero,0(r16)
   11668:	80000115 	stw	zero,4(r16)
   1166c:	80000215 	stw	zero,8(r16)
   11670:	80001915 	stw	zero,100(r16)
   11674:	8080038d 	sth	r2,14(r16)
   11678:	80000415 	stw	zero,16(r16)
   1167c:	80000515 	stw	zero,20(r16)
   11680:	80000615 	stw	zero,24(r16)
   11684:	b80d883a 	mov	r6,r23
   11688:	000b883a 	mov	r5,zero
   1168c:	81001704 	addi	r4,r16,92
   11690:	00130880 	call	13088 <memset>
   11694:	00800044 	movi	r2,1
   11698:	84000715 	stw	r16,28(r16)
   1169c:	85800815 	stw	r22,32(r16)
   116a0:	85400915 	stw	r21,36(r16)
   116a4:	85000a15 	stw	r20,40(r16)
   116a8:	84c00b15 	stw	r19,44(r16)
   116ac:	90800e15 	stw	r2,56(r18)
   116b0:	dfc00817 	ldw	ra,32(sp)
   116b4:	ddc00717 	ldw	r23,28(sp)
   116b8:	dd800617 	ldw	r22,24(sp)
   116bc:	dd400517 	ldw	r21,20(sp)
   116c0:	dd000417 	ldw	r20,16(sp)
   116c4:	dcc00317 	ldw	r19,12(sp)
   116c8:	dc800217 	ldw	r18,8(sp)
   116cc:	dc400117 	ldw	r17,4(sp)
   116d0:	dc000017 	ldw	r16,0(sp)
   116d4:	dec00904 	addi	sp,sp,36
   116d8:	f800283a 	ret

000116dc <__fp_lock>:
   116dc:	0005883a 	mov	r2,zero
   116e0:	f800283a 	ret

000116e4 <__sfmoreglue>:
   116e4:	defffc04 	addi	sp,sp,-16
   116e8:	dc800215 	stw	r18,8(sp)
   116ec:	2825883a 	mov	r18,r5
   116f0:	dc000015 	stw	r16,0(sp)
   116f4:	01401a04 	movi	r5,104
   116f8:	2021883a 	mov	r16,r4
   116fc:	913fffc4 	addi	r4,r18,-1
   11700:	dfc00315 	stw	ra,12(sp)
   11704:	dc400115 	stw	r17,4(sp)
   11708:	0010b900 	call	10b90 <__mulsi3>
   1170c:	8009883a 	mov	r4,r16
   11710:	11401d04 	addi	r5,r2,116
   11714:	1023883a 	mov	r17,r2
   11718:	00127340 	call	12734 <_malloc_r>
   1171c:	1021883a 	mov	r16,r2
   11720:	10000726 	beq	r2,zero,11740 <__sfmoreglue+0x5c>
   11724:	11000304 	addi	r4,r2,12
   11728:	10000015 	stw	zero,0(r2)
   1172c:	14800115 	stw	r18,4(r2)
   11730:	11000215 	stw	r4,8(r2)
   11734:	89801a04 	addi	r6,r17,104
   11738:	000b883a 	mov	r5,zero
   1173c:	00130880 	call	13088 <memset>
   11740:	8005883a 	mov	r2,r16
   11744:	dfc00317 	ldw	ra,12(sp)
   11748:	dc800217 	ldw	r18,8(sp)
   1174c:	dc400117 	ldw	r17,4(sp)
   11750:	dc000017 	ldw	r16,0(sp)
   11754:	dec00404 	addi	sp,sp,16
   11758:	f800283a 	ret

0001175c <__sfp>:
   1175c:	defffb04 	addi	sp,sp,-20
   11760:	dc000015 	stw	r16,0(sp)
   11764:	040000b4 	movhi	r16,2
   11768:	84220d04 	addi	r16,r16,-30668
   1176c:	dcc00315 	stw	r19,12(sp)
   11770:	2027883a 	mov	r19,r4
   11774:	81000017 	ldw	r4,0(r16)
   11778:	dfc00415 	stw	ra,16(sp)
   1177c:	dc800215 	stw	r18,8(sp)
   11780:	20800e17 	ldw	r2,56(r4)
   11784:	dc400115 	stw	r17,4(sp)
   11788:	1000021e 	bne	r2,zero,11794 <__sfp+0x38>
   1178c:	00115400 	call	11540 <__sinit.part.1>
   11790:	81000017 	ldw	r4,0(r16)
   11794:	2480b804 	addi	r18,r4,736
   11798:	047fffc4 	movi	r17,-1
   1179c:	91000117 	ldw	r4,4(r18)
   117a0:	94000217 	ldw	r16,8(r18)
   117a4:	213fffc4 	addi	r4,r4,-1
   117a8:	20000a16 	blt	r4,zero,117d4 <__sfp+0x78>
   117ac:	8080030f 	ldh	r2,12(r16)
   117b0:	10000c26 	beq	r2,zero,117e4 <__sfp+0x88>
   117b4:	80c01d04 	addi	r3,r16,116
   117b8:	00000206 	br	117c4 <__sfp+0x68>
   117bc:	18bfe60f 	ldh	r2,-104(r3)
   117c0:	10000826 	beq	r2,zero,117e4 <__sfp+0x88>
   117c4:	213fffc4 	addi	r4,r4,-1
   117c8:	1c3ffd04 	addi	r16,r3,-12
   117cc:	18c01a04 	addi	r3,r3,104
   117d0:	247ffa1e 	bne	r4,r17,117bc <_gp+0xffff0f88>
   117d4:	90800017 	ldw	r2,0(r18)
   117d8:	10001d26 	beq	r2,zero,11850 <__sfp+0xf4>
   117dc:	1025883a 	mov	r18,r2
   117e0:	003fee06 	br	1179c <_gp+0xffff0f68>
   117e4:	00bfffc4 	movi	r2,-1
   117e8:	8080038d 	sth	r2,14(r16)
   117ec:	00800044 	movi	r2,1
   117f0:	8080030d 	sth	r2,12(r16)
   117f4:	80001915 	stw	zero,100(r16)
   117f8:	80000015 	stw	zero,0(r16)
   117fc:	80000215 	stw	zero,8(r16)
   11800:	80000115 	stw	zero,4(r16)
   11804:	80000415 	stw	zero,16(r16)
   11808:	80000515 	stw	zero,20(r16)
   1180c:	80000615 	stw	zero,24(r16)
   11810:	01800204 	movi	r6,8
   11814:	000b883a 	mov	r5,zero
   11818:	81001704 	addi	r4,r16,92
   1181c:	00130880 	call	13088 <memset>
   11820:	8005883a 	mov	r2,r16
   11824:	80000c15 	stw	zero,48(r16)
   11828:	80000d15 	stw	zero,52(r16)
   1182c:	80001115 	stw	zero,68(r16)
   11830:	80001215 	stw	zero,72(r16)
   11834:	dfc00417 	ldw	ra,16(sp)
   11838:	dcc00317 	ldw	r19,12(sp)
   1183c:	dc800217 	ldw	r18,8(sp)
   11840:	dc400117 	ldw	r17,4(sp)
   11844:	dc000017 	ldw	r16,0(sp)
   11848:	dec00504 	addi	sp,sp,20
   1184c:	f800283a 	ret
   11850:	01400104 	movi	r5,4
   11854:	9809883a 	mov	r4,r19
   11858:	00116e40 	call	116e4 <__sfmoreglue>
   1185c:	90800015 	stw	r2,0(r18)
   11860:	103fde1e 	bne	r2,zero,117dc <_gp+0xffff0fa8>
   11864:	00800304 	movi	r2,12
   11868:	98800015 	stw	r2,0(r19)
   1186c:	0005883a 	mov	r2,zero
   11870:	003ff006 	br	11834 <_gp+0xffff1000>

00011874 <_cleanup>:
   11874:	008000b4 	movhi	r2,2
   11878:	10a20d04 	addi	r2,r2,-30668
   1187c:	11000017 	ldw	r4,0(r2)
   11880:	01400074 	movhi	r5,1
   11884:	29446004 	addi	r5,r5,4480
   11888:	00123bc1 	jmpi	123bc <_fwalk_reent>

0001188c <__sinit>:
   1188c:	20800e17 	ldw	r2,56(r4)
   11890:	10000126 	beq	r2,zero,11898 <__sinit+0xc>
   11894:	f800283a 	ret
   11898:	00115401 	jmpi	11540 <__sinit.part.1>

0001189c <__sfp_lock_acquire>:
   1189c:	f800283a 	ret

000118a0 <__sfp_lock_release>:
   118a0:	f800283a 	ret

000118a4 <__sinit_lock_acquire>:
   118a4:	f800283a 	ret

000118a8 <__sinit_lock_release>:
   118a8:	f800283a 	ret

000118ac <__fp_lock_all>:
   118ac:	008000b4 	movhi	r2,2
   118b0:	10a20e04 	addi	r2,r2,-30664
   118b4:	11000017 	ldw	r4,0(r2)
   118b8:	01400074 	movhi	r5,1
   118bc:	2945b704 	addi	r5,r5,5852
   118c0:	00122f81 	jmpi	122f8 <_fwalk>

000118c4 <__fp_unlock_all>:
   118c4:	008000b4 	movhi	r2,2
   118c8:	10a20e04 	addi	r2,r2,-30664
   118cc:	11000017 	ldw	r4,0(r2)
   118d0:	01400074 	movhi	r5,1
   118d4:	29454b04 	addi	r5,r5,5420
   118d8:	00122f81 	jmpi	122f8 <_fwalk>

000118dc <_fopen_r>:
   118dc:	defffa04 	addi	sp,sp,-24
   118e0:	3005883a 	mov	r2,r6
   118e4:	dcc00415 	stw	r19,16(sp)
   118e8:	d80d883a 	mov	r6,sp
   118ec:	2827883a 	mov	r19,r5
   118f0:	100b883a 	mov	r5,r2
   118f4:	dc800315 	stw	r18,12(sp)
   118f8:	dfc00515 	stw	ra,20(sp)
   118fc:	dc400215 	stw	r17,8(sp)
   11900:	dc000115 	stw	r16,4(sp)
   11904:	2025883a 	mov	r18,r4
   11908:	00137640 	call	13764 <__sflags>
   1190c:	10002726 	beq	r2,zero,119ac <_fopen_r+0xd0>
   11910:	9009883a 	mov	r4,r18
   11914:	1023883a 	mov	r17,r2
   11918:	001175c0 	call	1175c <__sfp>
   1191c:	1021883a 	mov	r16,r2
   11920:	10002226 	beq	r2,zero,119ac <_fopen_r+0xd0>
   11924:	d9800017 	ldw	r6,0(sp)
   11928:	01c06d84 	movi	r7,438
   1192c:	980b883a 	mov	r5,r19
   11930:	9009883a 	mov	r4,r18
   11934:	00131b00 	call	131b0 <_open_r>
   11938:	10001916 	blt	r2,zero,119a0 <_fopen_r+0xc4>
   1193c:	8080038d 	sth	r2,14(r16)
   11940:	00800074 	movhi	r2,1
   11944:	108d3704 	addi	r2,r2,13532
   11948:	80800815 	stw	r2,32(r16)
   1194c:	00800074 	movhi	r2,1
   11950:	108d4e04 	addi	r2,r2,13624
   11954:	80800915 	stw	r2,36(r16)
   11958:	00800074 	movhi	r2,1
   1195c:	108d6d04 	addi	r2,r2,13748
   11960:	80800a15 	stw	r2,40(r16)
   11964:	00800074 	movhi	r2,1
   11968:	108d8404 	addi	r2,r2,13840
   1196c:	8440030d 	sth	r17,12(r16)
   11970:	84000715 	stw	r16,28(r16)
   11974:	80800b15 	stw	r2,44(r16)
   11978:	8c40400c 	andi	r17,r17,256
   1197c:	88000d1e 	bne	r17,zero,119b4 <_fopen_r+0xd8>
   11980:	8005883a 	mov	r2,r16
   11984:	dfc00517 	ldw	ra,20(sp)
   11988:	dcc00417 	ldw	r19,16(sp)
   1198c:	dc800317 	ldw	r18,12(sp)
   11990:	dc400217 	ldw	r17,8(sp)
   11994:	dc000117 	ldw	r16,4(sp)
   11998:	dec00604 	addi	sp,sp,24
   1199c:	f800283a 	ret
   119a0:	001189c0 	call	1189c <__sfp_lock_acquire>
   119a4:	8000030d 	sth	zero,12(r16)
   119a8:	00118a00 	call	118a0 <__sfp_lock_release>
   119ac:	0005883a 	mov	r2,zero
   119b0:	003ff406 	br	11984 <_gp+0xffff1150>
   119b4:	01c00084 	movi	r7,2
   119b8:	000d883a 	mov	r6,zero
   119bc:	800b883a 	mov	r5,r16
   119c0:	9009883a 	mov	r4,r18
   119c4:	0011e1c0 	call	11e1c <_fseek_r>
   119c8:	8005883a 	mov	r2,r16
   119cc:	003fed06 	br	11984 <_gp+0xffff1150>

000119d0 <fopen>:
   119d0:	008000b4 	movhi	r2,2
   119d4:	10a20e04 	addi	r2,r2,-30664
   119d8:	280d883a 	mov	r6,r5
   119dc:	200b883a 	mov	r5,r4
   119e0:	11000017 	ldw	r4,0(r2)
   119e4:	00118dc1 	jmpi	118dc <_fopen_r>

000119e8 <_malloc_trim_r>:
   119e8:	defffb04 	addi	sp,sp,-20
   119ec:	dcc00315 	stw	r19,12(sp)
   119f0:	04c00074 	movhi	r19,1
   119f4:	dc800215 	stw	r18,8(sp)
   119f8:	dc400115 	stw	r17,4(sp)
   119fc:	dc000015 	stw	r16,0(sp)
   11a00:	dfc00415 	stw	ra,16(sp)
   11a04:	2821883a 	mov	r16,r5
   11a08:	9cdc7e04 	addi	r19,r19,29176
   11a0c:	2025883a 	mov	r18,r4
   11a10:	00140400 	call	14040 <__malloc_lock>
   11a14:	98800217 	ldw	r2,8(r19)
   11a18:	14400117 	ldw	r17,4(r2)
   11a1c:	00bfff04 	movi	r2,-4
   11a20:	88a2703a 	and	r17,r17,r2
   11a24:	8c21c83a 	sub	r16,r17,r16
   11a28:	8403fbc4 	addi	r16,r16,4079
   11a2c:	8020d33a 	srli	r16,r16,12
   11a30:	0083ffc4 	movi	r2,4095
   11a34:	843fffc4 	addi	r16,r16,-1
   11a38:	8020933a 	slli	r16,r16,12
   11a3c:	1400060e 	bge	r2,r16,11a58 <_malloc_trim_r+0x70>
   11a40:	000b883a 	mov	r5,zero
   11a44:	9009883a 	mov	r4,r18
   11a48:	00134880 	call	13488 <_sbrk_r>
   11a4c:	98c00217 	ldw	r3,8(r19)
   11a50:	1c47883a 	add	r3,r3,r17
   11a54:	10c00a26 	beq	r2,r3,11a80 <_malloc_trim_r+0x98>
   11a58:	9009883a 	mov	r4,r18
   11a5c:	00140640 	call	14064 <__malloc_unlock>
   11a60:	0005883a 	mov	r2,zero
   11a64:	dfc00417 	ldw	ra,16(sp)
   11a68:	dcc00317 	ldw	r19,12(sp)
   11a6c:	dc800217 	ldw	r18,8(sp)
   11a70:	dc400117 	ldw	r17,4(sp)
   11a74:	dc000017 	ldw	r16,0(sp)
   11a78:	dec00504 	addi	sp,sp,20
   11a7c:	f800283a 	ret
   11a80:	040bc83a 	sub	r5,zero,r16
   11a84:	9009883a 	mov	r4,r18
   11a88:	00134880 	call	13488 <_sbrk_r>
   11a8c:	00ffffc4 	movi	r3,-1
   11a90:	10c00d26 	beq	r2,r3,11ac8 <_malloc_trim_r+0xe0>
   11a94:	00c000b4 	movhi	r3,2
   11a98:	18e93704 	addi	r3,r3,-23332
   11a9c:	18800017 	ldw	r2,0(r3)
   11aa0:	99000217 	ldw	r4,8(r19)
   11aa4:	8c23c83a 	sub	r17,r17,r16
   11aa8:	8c400054 	ori	r17,r17,1
   11aac:	1421c83a 	sub	r16,r2,r16
   11ab0:	24400115 	stw	r17,4(r4)
   11ab4:	9009883a 	mov	r4,r18
   11ab8:	1c000015 	stw	r16,0(r3)
   11abc:	00140640 	call	14064 <__malloc_unlock>
   11ac0:	00800044 	movi	r2,1
   11ac4:	003fe706 	br	11a64 <_gp+0xffff1230>
   11ac8:	000b883a 	mov	r5,zero
   11acc:	9009883a 	mov	r4,r18
   11ad0:	00134880 	call	13488 <_sbrk_r>
   11ad4:	99000217 	ldw	r4,8(r19)
   11ad8:	014003c4 	movi	r5,15
   11adc:	1107c83a 	sub	r3,r2,r4
   11ae0:	28ffdd0e 	bge	r5,r3,11a58 <_gp+0xffff1224>
   11ae4:	014000b4 	movhi	r5,2
   11ae8:	29620f04 	addi	r5,r5,-30660
   11aec:	29400017 	ldw	r5,0(r5)
   11af0:	18c00054 	ori	r3,r3,1
   11af4:	20c00115 	stw	r3,4(r4)
   11af8:	00c000b4 	movhi	r3,2
   11afc:	1145c83a 	sub	r2,r2,r5
   11b00:	18e93704 	addi	r3,r3,-23332
   11b04:	18800015 	stw	r2,0(r3)
   11b08:	003fd306 	br	11a58 <_gp+0xffff1224>

00011b0c <_free_r>:
   11b0c:	28004126 	beq	r5,zero,11c14 <_free_r+0x108>
   11b10:	defffd04 	addi	sp,sp,-12
   11b14:	dc400115 	stw	r17,4(sp)
   11b18:	dc000015 	stw	r16,0(sp)
   11b1c:	2023883a 	mov	r17,r4
   11b20:	2821883a 	mov	r16,r5
   11b24:	dfc00215 	stw	ra,8(sp)
   11b28:	00140400 	call	14040 <__malloc_lock>
   11b2c:	81ffff17 	ldw	r7,-4(r16)
   11b30:	00bfff84 	movi	r2,-2
   11b34:	01000074 	movhi	r4,1
   11b38:	81bffe04 	addi	r6,r16,-8
   11b3c:	3884703a 	and	r2,r7,r2
   11b40:	211c7e04 	addi	r4,r4,29176
   11b44:	308b883a 	add	r5,r6,r2
   11b48:	2a400117 	ldw	r9,4(r5)
   11b4c:	22000217 	ldw	r8,8(r4)
   11b50:	00ffff04 	movi	r3,-4
   11b54:	48c6703a 	and	r3,r9,r3
   11b58:	2a005726 	beq	r5,r8,11cb8 <_free_r+0x1ac>
   11b5c:	28c00115 	stw	r3,4(r5)
   11b60:	39c0004c 	andi	r7,r7,1
   11b64:	3800091e 	bne	r7,zero,11b8c <_free_r+0x80>
   11b68:	823ffe17 	ldw	r8,-8(r16)
   11b6c:	22400204 	addi	r9,r4,8
   11b70:	320dc83a 	sub	r6,r6,r8
   11b74:	31c00217 	ldw	r7,8(r6)
   11b78:	1205883a 	add	r2,r2,r8
   11b7c:	3a406526 	beq	r7,r9,11d14 <_free_r+0x208>
   11b80:	32000317 	ldw	r8,12(r6)
   11b84:	3a000315 	stw	r8,12(r7)
   11b88:	41c00215 	stw	r7,8(r8)
   11b8c:	28cf883a 	add	r7,r5,r3
   11b90:	39c00117 	ldw	r7,4(r7)
   11b94:	39c0004c 	andi	r7,r7,1
   11b98:	38003a26 	beq	r7,zero,11c84 <_free_r+0x178>
   11b9c:	10c00054 	ori	r3,r2,1
   11ba0:	30c00115 	stw	r3,4(r6)
   11ba4:	3087883a 	add	r3,r6,r2
   11ba8:	18800015 	stw	r2,0(r3)
   11bac:	00c07fc4 	movi	r3,511
   11bb0:	18801936 	bltu	r3,r2,11c18 <_free_r+0x10c>
   11bb4:	1004d0fa 	srli	r2,r2,3
   11bb8:	01c00044 	movi	r7,1
   11bbc:	21400117 	ldw	r5,4(r4)
   11bc0:	10c00044 	addi	r3,r2,1
   11bc4:	18c7883a 	add	r3,r3,r3
   11bc8:	1005d0ba 	srai	r2,r2,2
   11bcc:	18c7883a 	add	r3,r3,r3
   11bd0:	18c7883a 	add	r3,r3,r3
   11bd4:	1907883a 	add	r3,r3,r4
   11bd8:	3884983a 	sll	r2,r7,r2
   11bdc:	19c00017 	ldw	r7,0(r3)
   11be0:	1a3ffe04 	addi	r8,r3,-8
   11be4:	1144b03a 	or	r2,r2,r5
   11be8:	32000315 	stw	r8,12(r6)
   11bec:	31c00215 	stw	r7,8(r6)
   11bf0:	20800115 	stw	r2,4(r4)
   11bf4:	19800015 	stw	r6,0(r3)
   11bf8:	39800315 	stw	r6,12(r7)
   11bfc:	8809883a 	mov	r4,r17
   11c00:	dfc00217 	ldw	ra,8(sp)
   11c04:	dc400117 	ldw	r17,4(sp)
   11c08:	dc000017 	ldw	r16,0(sp)
   11c0c:	dec00304 	addi	sp,sp,12
   11c10:	00140641 	jmpi	14064 <__malloc_unlock>
   11c14:	f800283a 	ret
   11c18:	100ad27a 	srli	r5,r2,9
   11c1c:	00c00104 	movi	r3,4
   11c20:	19404a36 	bltu	r3,r5,11d4c <_free_r+0x240>
   11c24:	100ad1ba 	srli	r5,r2,6
   11c28:	28c00e44 	addi	r3,r5,57
   11c2c:	18c7883a 	add	r3,r3,r3
   11c30:	29400e04 	addi	r5,r5,56
   11c34:	18c7883a 	add	r3,r3,r3
   11c38:	18c7883a 	add	r3,r3,r3
   11c3c:	1909883a 	add	r4,r3,r4
   11c40:	20c00017 	ldw	r3,0(r4)
   11c44:	01c00074 	movhi	r7,1
   11c48:	213ffe04 	addi	r4,r4,-8
   11c4c:	39dc7e04 	addi	r7,r7,29176
   11c50:	20c04426 	beq	r4,r3,11d64 <_free_r+0x258>
   11c54:	01ffff04 	movi	r7,-4
   11c58:	19400117 	ldw	r5,4(r3)
   11c5c:	29ca703a 	and	r5,r5,r7
   11c60:	1140022e 	bgeu	r2,r5,11c6c <_free_r+0x160>
   11c64:	18c00217 	ldw	r3,8(r3)
   11c68:	20fffb1e 	bne	r4,r3,11c58 <_gp+0xffff1424>
   11c6c:	19000317 	ldw	r4,12(r3)
   11c70:	31000315 	stw	r4,12(r6)
   11c74:	30c00215 	stw	r3,8(r6)
   11c78:	21800215 	stw	r6,8(r4)
   11c7c:	19800315 	stw	r6,12(r3)
   11c80:	003fde06 	br	11bfc <_gp+0xffff13c8>
   11c84:	29c00217 	ldw	r7,8(r5)
   11c88:	10c5883a 	add	r2,r2,r3
   11c8c:	00c00074 	movhi	r3,1
   11c90:	18dc8004 	addi	r3,r3,29184
   11c94:	38c03b26 	beq	r7,r3,11d84 <_free_r+0x278>
   11c98:	2a000317 	ldw	r8,12(r5)
   11c9c:	11400054 	ori	r5,r2,1
   11ca0:	3087883a 	add	r3,r6,r2
   11ca4:	3a000315 	stw	r8,12(r7)
   11ca8:	41c00215 	stw	r7,8(r8)
   11cac:	31400115 	stw	r5,4(r6)
   11cb0:	18800015 	stw	r2,0(r3)
   11cb4:	003fbd06 	br	11bac <_gp+0xffff1378>
   11cb8:	39c0004c 	andi	r7,r7,1
   11cbc:	10c5883a 	add	r2,r2,r3
   11cc0:	3800071e 	bne	r7,zero,11ce0 <_free_r+0x1d4>
   11cc4:	81fffe17 	ldw	r7,-8(r16)
   11cc8:	31cdc83a 	sub	r6,r6,r7
   11ccc:	30c00317 	ldw	r3,12(r6)
   11cd0:	31400217 	ldw	r5,8(r6)
   11cd4:	11c5883a 	add	r2,r2,r7
   11cd8:	28c00315 	stw	r3,12(r5)
   11cdc:	19400215 	stw	r5,8(r3)
   11ce0:	10c00054 	ori	r3,r2,1
   11ce4:	30c00115 	stw	r3,4(r6)
   11ce8:	00c000b4 	movhi	r3,2
   11cec:	18e21004 	addi	r3,r3,-30656
   11cf0:	18c00017 	ldw	r3,0(r3)
   11cf4:	21800215 	stw	r6,8(r4)
   11cf8:	10ffc036 	bltu	r2,r3,11bfc <_gp+0xffff13c8>
   11cfc:	008000b4 	movhi	r2,2
   11d00:	10a8e204 	addi	r2,r2,-23672
   11d04:	11400017 	ldw	r5,0(r2)
   11d08:	8809883a 	mov	r4,r17
   11d0c:	00119e80 	call	119e8 <_malloc_trim_r>
   11d10:	003fba06 	br	11bfc <_gp+0xffff13c8>
   11d14:	28c9883a 	add	r4,r5,r3
   11d18:	21000117 	ldw	r4,4(r4)
   11d1c:	2100004c 	andi	r4,r4,1
   11d20:	2000391e 	bne	r4,zero,11e08 <_free_r+0x2fc>
   11d24:	29c00217 	ldw	r7,8(r5)
   11d28:	29000317 	ldw	r4,12(r5)
   11d2c:	1885883a 	add	r2,r3,r2
   11d30:	10c00054 	ori	r3,r2,1
   11d34:	39000315 	stw	r4,12(r7)
   11d38:	21c00215 	stw	r7,8(r4)
   11d3c:	30c00115 	stw	r3,4(r6)
   11d40:	308d883a 	add	r6,r6,r2
   11d44:	30800015 	stw	r2,0(r6)
   11d48:	003fac06 	br	11bfc <_gp+0xffff13c8>
   11d4c:	00c00504 	movi	r3,20
   11d50:	19401536 	bltu	r3,r5,11da8 <_free_r+0x29c>
   11d54:	28c01704 	addi	r3,r5,92
   11d58:	18c7883a 	add	r3,r3,r3
   11d5c:	294016c4 	addi	r5,r5,91
   11d60:	003fb406 	br	11c34 <_gp+0xffff1400>
   11d64:	280bd0ba 	srai	r5,r5,2
   11d68:	00c00044 	movi	r3,1
   11d6c:	38800117 	ldw	r2,4(r7)
   11d70:	194a983a 	sll	r5,r3,r5
   11d74:	2007883a 	mov	r3,r4
   11d78:	2884b03a 	or	r2,r5,r2
   11d7c:	38800115 	stw	r2,4(r7)
   11d80:	003fbb06 	br	11c70 <_gp+0xffff143c>
   11d84:	21800515 	stw	r6,20(r4)
   11d88:	21800415 	stw	r6,16(r4)
   11d8c:	10c00054 	ori	r3,r2,1
   11d90:	31c00315 	stw	r7,12(r6)
   11d94:	31c00215 	stw	r7,8(r6)
   11d98:	30c00115 	stw	r3,4(r6)
   11d9c:	308d883a 	add	r6,r6,r2
   11da0:	30800015 	stw	r2,0(r6)
   11da4:	003f9506 	br	11bfc <_gp+0xffff13c8>
   11da8:	00c01504 	movi	r3,84
   11dac:	19400536 	bltu	r3,r5,11dc4 <_free_r+0x2b8>
   11db0:	100ad33a 	srli	r5,r2,12
   11db4:	28c01bc4 	addi	r3,r5,111
   11db8:	18c7883a 	add	r3,r3,r3
   11dbc:	29401b84 	addi	r5,r5,110
   11dc0:	003f9c06 	br	11c34 <_gp+0xffff1400>
   11dc4:	00c05504 	movi	r3,340
   11dc8:	19400536 	bltu	r3,r5,11de0 <_free_r+0x2d4>
   11dcc:	100ad3fa 	srli	r5,r2,15
   11dd0:	28c01e04 	addi	r3,r5,120
   11dd4:	18c7883a 	add	r3,r3,r3
   11dd8:	29401dc4 	addi	r5,r5,119
   11ddc:	003f9506 	br	11c34 <_gp+0xffff1400>
   11de0:	00c15504 	movi	r3,1364
   11de4:	19400536 	bltu	r3,r5,11dfc <_free_r+0x2f0>
   11de8:	100ad4ba 	srli	r5,r2,18
   11dec:	28c01f44 	addi	r3,r5,125
   11df0:	18c7883a 	add	r3,r3,r3
   11df4:	29401f04 	addi	r5,r5,124
   11df8:	003f8e06 	br	11c34 <_gp+0xffff1400>
   11dfc:	00c03f84 	movi	r3,254
   11e00:	01401f84 	movi	r5,126
   11e04:	003f8b06 	br	11c34 <_gp+0xffff1400>
   11e08:	10c00054 	ori	r3,r2,1
   11e0c:	30c00115 	stw	r3,4(r6)
   11e10:	308d883a 	add	r6,r6,r2
   11e14:	30800015 	stw	r2,0(r6)
   11e18:	003f7806 	br	11bfc <_gp+0xffff13c8>

00011e1c <_fseek_r>:
   11e1c:	0011e3c1 	jmpi	11e3c <_fseeko_r>

00011e20 <fseek>:
   11e20:	008000b4 	movhi	r2,2
   11e24:	10a20e04 	addi	r2,r2,-30664
   11e28:	300f883a 	mov	r7,r6
   11e2c:	280d883a 	mov	r6,r5
   11e30:	200b883a 	mov	r5,r4
   11e34:	11000017 	ldw	r4,0(r2)
   11e38:	0011e3c1 	jmpi	11e3c <_fseeko_r>

00011e3c <_fseeko_r>:
   11e3c:	deffe804 	addi	sp,sp,-96
   11e40:	dd401415 	stw	r21,80(sp)
   11e44:	dc801115 	stw	r18,68(sp)
   11e48:	dc401015 	stw	r17,64(sp)
   11e4c:	dc000f15 	stw	r16,60(sp)
   11e50:	dfc01715 	stw	ra,92(sp)
   11e54:	ddc01615 	stw	r23,88(sp)
   11e58:	dd801515 	stw	r22,84(sp)
   11e5c:	dd001315 	stw	r20,76(sp)
   11e60:	dcc01215 	stw	r19,72(sp)
   11e64:	2023883a 	mov	r17,r4
   11e68:	2821883a 	mov	r16,r5
   11e6c:	302b883a 	mov	r21,r6
   11e70:	3825883a 	mov	r18,r7
   11e74:	20000226 	beq	r4,zero,11e80 <_fseeko_r+0x44>
   11e78:	20800e17 	ldw	r2,56(r4)
   11e7c:	10005a26 	beq	r2,zero,11fe8 <_fseeko_r+0x1ac>
   11e80:	8080030b 	ldhu	r2,12(r16)
   11e84:	00c04204 	movi	r3,264
   11e88:	1080420c 	andi	r2,r2,264
   11e8c:	10c05b26 	beq	r2,r3,11ffc <_fseeko_r+0x1c0>
   11e90:	85000a17 	ldw	r20,40(r16)
   11e94:	a000f626 	beq	r20,zero,12270 <_fseeko_r+0x434>
   11e98:	00800044 	movi	r2,1
   11e9c:	90803e26 	beq	r18,r2,11f98 <_fseeko_r+0x15c>
   11ea0:	00800084 	movi	r2,2
   11ea4:	90801026 	beq	r18,r2,11ee8 <_fseeko_r+0xac>
   11ea8:	90000f26 	beq	r18,zero,11ee8 <_fseeko_r+0xac>
   11eac:	00800584 	movi	r2,22
   11eb0:	88800015 	stw	r2,0(r17)
   11eb4:	04ffffc4 	movi	r19,-1
   11eb8:	9805883a 	mov	r2,r19
   11ebc:	dfc01717 	ldw	ra,92(sp)
   11ec0:	ddc01617 	ldw	r23,88(sp)
   11ec4:	dd801517 	ldw	r22,84(sp)
   11ec8:	dd401417 	ldw	r21,80(sp)
   11ecc:	dd001317 	ldw	r20,76(sp)
   11ed0:	dcc01217 	ldw	r19,72(sp)
   11ed4:	dc801117 	ldw	r18,68(sp)
   11ed8:	dc401017 	ldw	r17,64(sp)
   11edc:	dc000f17 	ldw	r16,60(sp)
   11ee0:	dec01804 	addi	sp,sp,96
   11ee4:	f800283a 	ret
   11ee8:	80800417 	ldw	r2,16(r16)
   11eec:	002f883a 	mov	r23,zero
   11ef0:	0027883a 	mov	r19,zero
   11ef4:	1000cb26 	beq	r2,zero,12224 <_fseeko_r+0x3e8>
   11ef8:	8080030b 	ldhu	r2,12(r16)
   11efc:	10c2068c 	andi	r3,r2,2074
   11f00:	1800071e 	bne	r3,zero,11f20 <_fseeko_r+0xe4>
   11f04:	10c1000c 	andi	r3,r2,1024
   11f08:	1800451e 	bne	r3,zero,12020 <_fseeko_r+0x1e4>
   11f0c:	00c00074 	movhi	r3,1
   11f10:	18cd6d04 	addi	r3,r3,13748
   11f14:	a0c0b726 	beq	r20,r3,121f4 <_fseeko_r+0x3b8>
   11f18:	10820014 	ori	r2,r2,2048
   11f1c:	8080030d 	sth	r2,12(r16)
   11f20:	800b883a 	mov	r5,r16
   11f24:	8809883a 	mov	r4,r17
   11f28:	00114a00 	call	114a0 <_fflush_r>
   11f2c:	1027883a 	mov	r19,r2
   11f30:	103fe01e 	bne	r2,zero,11eb4 <_gp+0xffff1680>
   11f34:	81400717 	ldw	r5,28(r16)
   11f38:	900f883a 	mov	r7,r18
   11f3c:	a80d883a 	mov	r6,r21
   11f40:	8809883a 	mov	r4,r17
   11f44:	a03ee83a 	callr	r20
   11f48:	00ffffc4 	movi	r3,-1
   11f4c:	10ffd926 	beq	r2,r3,11eb4 <_gp+0xffff1680>
   11f50:	81400c17 	ldw	r5,48(r16)
   11f54:	28000526 	beq	r5,zero,11f6c <_fseeko_r+0x130>
   11f58:	80801004 	addi	r2,r16,64
   11f5c:	28800226 	beq	r5,r2,11f68 <_fseeko_r+0x12c>
   11f60:	8809883a 	mov	r4,r17
   11f64:	0011b0c0 	call	11b0c <_free_r>
   11f68:	80000c15 	stw	zero,48(r16)
   11f6c:	8080030b 	ldhu	r2,12(r16)
   11f70:	80c00417 	ldw	r3,16(r16)
   11f74:	80000115 	stw	zero,4(r16)
   11f78:	10bdf7cc 	andi	r2,r2,63455
   11f7c:	80c00015 	stw	r3,0(r16)
   11f80:	8080030d 	sth	r2,12(r16)
   11f84:	01800204 	movi	r6,8
   11f88:	000b883a 	mov	r5,zero
   11f8c:	81001704 	addi	r4,r16,92
   11f90:	00130880 	call	13088 <memset>
   11f94:	003fc806 	br	11eb8 <_gp+0xffff1684>
   11f98:	800b883a 	mov	r5,r16
   11f9c:	8809883a 	mov	r4,r17
   11fa0:	00114a00 	call	114a0 <_fflush_r>
   11fa4:	8080030b 	ldhu	r2,12(r16)
   11fa8:	10c4000c 	andi	r3,r2,4096
   11fac:	18008726 	beq	r3,zero,121cc <_fseeko_r+0x390>
   11fb0:	84c01417 	ldw	r19,80(r16)
   11fb4:	10c0010c 	andi	r3,r2,4
   11fb8:	1800431e 	bne	r3,zero,120c8 <_fseeko_r+0x28c>
   11fbc:	1080020c 	andi	r2,r2,8
   11fc0:	10008026 	beq	r2,zero,121c4 <_fseeko_r+0x388>
   11fc4:	80c00017 	ldw	r3,0(r16)
   11fc8:	80800417 	ldw	r2,16(r16)
   11fcc:	18000226 	beq	r3,zero,11fd8 <_fseeko_r+0x19c>
   11fd0:	1887c83a 	sub	r3,r3,r2
   11fd4:	98e7883a 	add	r19,r19,r3
   11fd8:	aceb883a 	add	r21,r21,r19
   11fdc:	05c00044 	movi	r23,1
   11fe0:	0025883a 	mov	r18,zero
   11fe4:	003fc306 	br	11ef4 <_gp+0xffff16c0>
   11fe8:	001188c0 	call	1188c <__sinit>
   11fec:	8080030b 	ldhu	r2,12(r16)
   11ff0:	00c04204 	movi	r3,264
   11ff4:	1080420c 	andi	r2,r2,264
   11ff8:	10ffa51e 	bne	r2,r3,11e90 <_gp+0xffff165c>
   11ffc:	800b883a 	mov	r5,r16
   12000:	8809883a 	mov	r4,r17
   12004:	00114a00 	call	114a0 <_fflush_r>
   12008:	003fa106 	br	11e90 <_gp+0xffff165c>
   1200c:	8080030b 	ldhu	r2,12(r16)
   12010:	00c10004 	movi	r3,1024
   12014:	80c01315 	stw	r3,76(r16)
   12018:	10c4b03a 	or	r2,r2,r3
   1201c:	8080030d 	sth	r2,12(r16)
   12020:	9000311e 	bne	r18,zero,120e8 <_fseeko_r+0x2ac>
   12024:	a82d883a 	mov	r22,r21
   12028:	b800371e 	bne	r23,zero,12108 <_fseeko_r+0x2cc>
   1202c:	8080030b 	ldhu	r2,12(r16)
   12030:	1084000c 	andi	r2,r2,4096
   12034:	10007f26 	beq	r2,zero,12234 <_fseeko_r+0x3f8>
   12038:	80801417 	ldw	r2,80(r16)
   1203c:	81800117 	ldw	r6,4(r16)
   12040:	81400c17 	ldw	r5,48(r16)
   12044:	11a7c83a 	sub	r19,r2,r6
   12048:	28008226 	beq	r5,zero,12254 <_fseeko_r+0x418>
   1204c:	81c00f17 	ldw	r7,60(r16)
   12050:	99e7c83a 	sub	r19,r19,r7
   12054:	81000e17 	ldw	r4,56(r16)
   12058:	80800417 	ldw	r2,16(r16)
   1205c:	99a7883a 	add	r19,r19,r6
   12060:	2087c83a 	sub	r3,r4,r2
   12064:	98e7c83a 	sub	r19,r19,r3
   12068:	38c7883a 	add	r3,r7,r3
   1206c:	b4c02b16 	blt	r22,r19,1211c <_fseeko_r+0x2e0>
   12070:	98c9883a 	add	r4,r19,r3
   12074:	b100292e 	bgeu	r22,r4,1211c <_fseeko_r+0x2e0>
   12078:	b4e7c83a 	sub	r19,r22,r19
   1207c:	14c5883a 	add	r2,r2,r19
   12080:	1ce7c83a 	sub	r19,r3,r19
   12084:	80800015 	stw	r2,0(r16)
   12088:	84c00115 	stw	r19,4(r16)
   1208c:	28000526 	beq	r5,zero,120a4 <_fseeko_r+0x268>
   12090:	80801004 	addi	r2,r16,64
   12094:	28800226 	beq	r5,r2,120a0 <_fseeko_r+0x264>
   12098:	8809883a 	mov	r4,r17
   1209c:	0011b0c0 	call	11b0c <_free_r>
   120a0:	80000c15 	stw	zero,48(r16)
   120a4:	8080030b 	ldhu	r2,12(r16)
   120a8:	01800204 	movi	r6,8
   120ac:	000b883a 	mov	r5,zero
   120b0:	10bff7cc 	andi	r2,r2,65503
   120b4:	8080030d 	sth	r2,12(r16)
   120b8:	81001704 	addi	r4,r16,92
   120bc:	00130880 	call	13088 <memset>
   120c0:	0027883a 	mov	r19,zero
   120c4:	003f7c06 	br	11eb8 <_gp+0xffff1684>
   120c8:	80c00117 	ldw	r3,4(r16)
   120cc:	80800c17 	ldw	r2,48(r16)
   120d0:	98e7c83a 	sub	r19,r19,r3
   120d4:	10003b26 	beq	r2,zero,121c4 <_fseeko_r+0x388>
   120d8:	80c00f17 	ldw	r3,60(r16)
   120dc:	80800417 	ldw	r2,16(r16)
   120e0:	98e7c83a 	sub	r19,r19,r3
   120e4:	003fbc06 	br	11fd8 <_gp+0xffff17a4>
   120e8:	8140038f 	ldh	r5,14(r16)
   120ec:	d80d883a 	mov	r6,sp
   120f0:	8809883a 	mov	r4,r17
   120f4:	001229c0 	call	1229c <_fstat_r>
   120f8:	103f891e 	bne	r2,zero,11f20 <_gp+0xffff16ec>
   120fc:	dd800417 	ldw	r22,16(sp)
   12100:	adad883a 	add	r22,r21,r22
   12104:	b83fc926 	beq	r23,zero,1202c <_gp+0xffff17f8>
   12108:	81400c17 	ldw	r5,48(r16)
   1210c:	81800117 	ldw	r6,4(r16)
   12110:	28005026 	beq	r5,zero,12254 <_fseeko_r+0x418>
   12114:	81c00f17 	ldw	r7,60(r16)
   12118:	003fce06 	br	12054 <_gp+0xffff1820>
   1211c:	84c01317 	ldw	r19,76(r16)
   12120:	81400717 	ldw	r5,28(r16)
   12124:	000f883a 	mov	r7,zero
   12128:	04e7c83a 	sub	r19,zero,r19
   1212c:	9da6703a 	and	r19,r19,r22
   12130:	980d883a 	mov	r6,r19
   12134:	8809883a 	mov	r4,r17
   12138:	a03ee83a 	callr	r20
   1213c:	00ffffc4 	movi	r3,-1
   12140:	10ff7726 	beq	r2,r3,11f20 <_gp+0xffff16ec>
   12144:	80800417 	ldw	r2,16(r16)
   12148:	81400c17 	ldw	r5,48(r16)
   1214c:	80000115 	stw	zero,4(r16)
   12150:	80800015 	stw	r2,0(r16)
   12154:	28000526 	beq	r5,zero,1216c <_fseeko_r+0x330>
   12158:	80801004 	addi	r2,r16,64
   1215c:	28800226 	beq	r5,r2,12168 <_fseeko_r+0x32c>
   12160:	8809883a 	mov	r4,r17
   12164:	0011b0c0 	call	11b0c <_free_r>
   12168:	80000c15 	stw	zero,48(r16)
   1216c:	8080030b 	ldhu	r2,12(r16)
   12170:	b4e7c83a 	sub	r19,r22,r19
   12174:	10bff7cc 	andi	r2,r2,65503
   12178:	8080030d 	sth	r2,12(r16)
   1217c:	98000b26 	beq	r19,zero,121ac <_fseeko_r+0x370>
   12180:	800b883a 	mov	r5,r16
   12184:	8809883a 	mov	r4,r17
   12188:	001322c0 	call	1322c <__srefill_r>
   1218c:	103f641e 	bne	r2,zero,11f20 <_gp+0xffff16ec>
   12190:	80800117 	ldw	r2,4(r16)
   12194:	14ff6236 	bltu	r2,r19,11f20 <_gp+0xffff16ec>
   12198:	80c00017 	ldw	r3,0(r16)
   1219c:	14c5c83a 	sub	r2,r2,r19
   121a0:	80800115 	stw	r2,4(r16)
   121a4:	1ce7883a 	add	r19,r3,r19
   121a8:	84c00015 	stw	r19,0(r16)
   121ac:	01800204 	movi	r6,8
   121b0:	000b883a 	mov	r5,zero
   121b4:	81001704 	addi	r4,r16,92
   121b8:	00130880 	call	13088 <memset>
   121bc:	0027883a 	mov	r19,zero
   121c0:	003f3d06 	br	11eb8 <_gp+0xffff1684>
   121c4:	80800417 	ldw	r2,16(r16)
   121c8:	003f8306 	br	11fd8 <_gp+0xffff17a4>
   121cc:	81400717 	ldw	r5,28(r16)
   121d0:	900f883a 	mov	r7,r18
   121d4:	000d883a 	mov	r6,zero
   121d8:	8809883a 	mov	r4,r17
   121dc:	a03ee83a 	callr	r20
   121e0:	1027883a 	mov	r19,r2
   121e4:	00bfffc4 	movi	r2,-1
   121e8:	98bf3226 	beq	r19,r2,11eb4 <_gp+0xffff1680>
   121ec:	8080030b 	ldhu	r2,12(r16)
   121f0:	003f7006 	br	11fb4 <_gp+0xffff1780>
   121f4:	8140038f 	ldh	r5,14(r16)
   121f8:	283f4716 	blt	r5,zero,11f18 <_gp+0xffff16e4>
   121fc:	d80d883a 	mov	r6,sp
   12200:	8809883a 	mov	r4,r17
   12204:	001229c0 	call	1229c <_fstat_r>
   12208:	1000041e 	bne	r2,zero,1221c <_fseeko_r+0x3e0>
   1220c:	d8800117 	ldw	r2,4(sp)
   12210:	00e00014 	movui	r3,32768
   12214:	10bc000c 	andi	r2,r2,61440
   12218:	10ff7c26 	beq	r2,r3,1200c <_gp+0xffff17d8>
   1221c:	8080030b 	ldhu	r2,12(r16)
   12220:	003f3d06 	br	11f18 <_gp+0xffff16e4>
   12224:	800b883a 	mov	r5,r16
   12228:	8809883a 	mov	r4,r17
   1222c:	00125780 	call	12578 <__smakebuf_r>
   12230:	003f3106 	br	11ef8 <_gp+0xffff16c4>
   12234:	81400717 	ldw	r5,28(r16)
   12238:	01c00044 	movi	r7,1
   1223c:	000d883a 	mov	r6,zero
   12240:	8809883a 	mov	r4,r17
   12244:	a03ee83a 	callr	r20
   12248:	00ffffc4 	movi	r3,-1
   1224c:	10ff7b1e 	bne	r2,r3,1203c <_gp+0xffff1808>
   12250:	003f3306 	br	11f20 <_gp+0xffff16ec>
   12254:	80c00017 	ldw	r3,0(r16)
   12258:	80800417 	ldw	r2,16(r16)
   1225c:	000b883a 	mov	r5,zero
   12260:	1887c83a 	sub	r3,r3,r2
   12264:	98e7c83a 	sub	r19,r19,r3
   12268:	30c7883a 	add	r3,r6,r3
   1226c:	003f7f06 	br	1206c <_gp+0xffff1838>
   12270:	00800744 	movi	r2,29
   12274:	88800015 	stw	r2,0(r17)
   12278:	04ffffc4 	movi	r19,-1
   1227c:	003f0e06 	br	11eb8 <_gp+0xffff1684>

00012280 <fseeko>:
   12280:	008000b4 	movhi	r2,2
   12284:	10a20e04 	addi	r2,r2,-30664
   12288:	300f883a 	mov	r7,r6
   1228c:	280d883a 	mov	r6,r5
   12290:	200b883a 	mov	r5,r4
   12294:	11000017 	ldw	r4,0(r2)
   12298:	0011e3c1 	jmpi	11e3c <_fseeko_r>

0001229c <_fstat_r>:
   1229c:	defffd04 	addi	sp,sp,-12
   122a0:	2805883a 	mov	r2,r5
   122a4:	dc000015 	stw	r16,0(sp)
   122a8:	040000b4 	movhi	r16,2
   122ac:	dc400115 	stw	r17,4(sp)
   122b0:	8428df04 	addi	r16,r16,-23684
   122b4:	2023883a 	mov	r17,r4
   122b8:	300b883a 	mov	r5,r6
   122bc:	1009883a 	mov	r4,r2
   122c0:	dfc00215 	stw	ra,8(sp)
   122c4:	80000015 	stw	zero,0(r16)
   122c8:	0013aa00 	call	13aa0 <fstat>
   122cc:	00ffffc4 	movi	r3,-1
   122d0:	10c00526 	beq	r2,r3,122e8 <_fstat_r+0x4c>
   122d4:	dfc00217 	ldw	ra,8(sp)
   122d8:	dc400117 	ldw	r17,4(sp)
   122dc:	dc000017 	ldw	r16,0(sp)
   122e0:	dec00304 	addi	sp,sp,12
   122e4:	f800283a 	ret
   122e8:	80c00017 	ldw	r3,0(r16)
   122ec:	183ff926 	beq	r3,zero,122d4 <_gp+0xffff1aa0>
   122f0:	88c00015 	stw	r3,0(r17)
   122f4:	003ff706 	br	122d4 <_gp+0xffff1aa0>

000122f8 <_fwalk>:
   122f8:	defff704 	addi	sp,sp,-36
   122fc:	dd000415 	stw	r20,16(sp)
   12300:	dfc00815 	stw	ra,32(sp)
   12304:	ddc00715 	stw	r23,28(sp)
   12308:	dd800615 	stw	r22,24(sp)
   1230c:	dd400515 	stw	r21,20(sp)
   12310:	dcc00315 	stw	r19,12(sp)
   12314:	dc800215 	stw	r18,8(sp)
   12318:	dc400115 	stw	r17,4(sp)
   1231c:	dc000015 	stw	r16,0(sp)
   12320:	2500b804 	addi	r20,r4,736
   12324:	a0002326 	beq	r20,zero,123b4 <_fwalk+0xbc>
   12328:	282b883a 	mov	r21,r5
   1232c:	002f883a 	mov	r23,zero
   12330:	05800044 	movi	r22,1
   12334:	04ffffc4 	movi	r19,-1
   12338:	a4400117 	ldw	r17,4(r20)
   1233c:	a4800217 	ldw	r18,8(r20)
   12340:	8c7fffc4 	addi	r17,r17,-1
   12344:	88000d16 	blt	r17,zero,1237c <_fwalk+0x84>
   12348:	94000304 	addi	r16,r18,12
   1234c:	94800384 	addi	r18,r18,14
   12350:	8080000b 	ldhu	r2,0(r16)
   12354:	8c7fffc4 	addi	r17,r17,-1
   12358:	813ffd04 	addi	r4,r16,-12
   1235c:	b080042e 	bgeu	r22,r2,12370 <_fwalk+0x78>
   12360:	9080000f 	ldh	r2,0(r18)
   12364:	14c00226 	beq	r2,r19,12370 <_fwalk+0x78>
   12368:	a83ee83a 	callr	r21
   1236c:	b8aeb03a 	or	r23,r23,r2
   12370:	84001a04 	addi	r16,r16,104
   12374:	94801a04 	addi	r18,r18,104
   12378:	8cfff51e 	bne	r17,r19,12350 <_gp+0xffff1b1c>
   1237c:	a5000017 	ldw	r20,0(r20)
   12380:	a03fed1e 	bne	r20,zero,12338 <_gp+0xffff1b04>
   12384:	b805883a 	mov	r2,r23
   12388:	dfc00817 	ldw	ra,32(sp)
   1238c:	ddc00717 	ldw	r23,28(sp)
   12390:	dd800617 	ldw	r22,24(sp)
   12394:	dd400517 	ldw	r21,20(sp)
   12398:	dd000417 	ldw	r20,16(sp)
   1239c:	dcc00317 	ldw	r19,12(sp)
   123a0:	dc800217 	ldw	r18,8(sp)
   123a4:	dc400117 	ldw	r17,4(sp)
   123a8:	dc000017 	ldw	r16,0(sp)
   123ac:	dec00904 	addi	sp,sp,36
   123b0:	f800283a 	ret
   123b4:	002f883a 	mov	r23,zero
   123b8:	003ff206 	br	12384 <_gp+0xffff1b50>

000123bc <_fwalk_reent>:
   123bc:	defff704 	addi	sp,sp,-36
   123c0:	dd000415 	stw	r20,16(sp)
   123c4:	dfc00815 	stw	ra,32(sp)
   123c8:	ddc00715 	stw	r23,28(sp)
   123cc:	dd800615 	stw	r22,24(sp)
   123d0:	dd400515 	stw	r21,20(sp)
   123d4:	dcc00315 	stw	r19,12(sp)
   123d8:	dc800215 	stw	r18,8(sp)
   123dc:	dc400115 	stw	r17,4(sp)
   123e0:	dc000015 	stw	r16,0(sp)
   123e4:	2500b804 	addi	r20,r4,736
   123e8:	a0002326 	beq	r20,zero,12478 <_fwalk_reent+0xbc>
   123ec:	282b883a 	mov	r21,r5
   123f0:	2027883a 	mov	r19,r4
   123f4:	002f883a 	mov	r23,zero
   123f8:	05800044 	movi	r22,1
   123fc:	04bfffc4 	movi	r18,-1
   12400:	a4400117 	ldw	r17,4(r20)
   12404:	a4000217 	ldw	r16,8(r20)
   12408:	8c7fffc4 	addi	r17,r17,-1
   1240c:	88000c16 	blt	r17,zero,12440 <_fwalk_reent+0x84>
   12410:	84000304 	addi	r16,r16,12
   12414:	8080000b 	ldhu	r2,0(r16)
   12418:	8c7fffc4 	addi	r17,r17,-1
   1241c:	817ffd04 	addi	r5,r16,-12
   12420:	b080052e 	bgeu	r22,r2,12438 <_fwalk_reent+0x7c>
   12424:	8080008f 	ldh	r2,2(r16)
   12428:	9809883a 	mov	r4,r19
   1242c:	14800226 	beq	r2,r18,12438 <_fwalk_reent+0x7c>
   12430:	a83ee83a 	callr	r21
   12434:	b8aeb03a 	or	r23,r23,r2
   12438:	84001a04 	addi	r16,r16,104
   1243c:	8cbff51e 	bne	r17,r18,12414 <_gp+0xffff1be0>
   12440:	a5000017 	ldw	r20,0(r20)
   12444:	a03fee1e 	bne	r20,zero,12400 <_gp+0xffff1bcc>
   12448:	b805883a 	mov	r2,r23
   1244c:	dfc00817 	ldw	ra,32(sp)
   12450:	ddc00717 	ldw	r23,28(sp)
   12454:	dd800617 	ldw	r22,24(sp)
   12458:	dd400517 	ldw	r21,20(sp)
   1245c:	dd000417 	ldw	r20,16(sp)
   12460:	dcc00317 	ldw	r19,12(sp)
   12464:	dc800217 	ldw	r18,8(sp)
   12468:	dc400117 	ldw	r17,4(sp)
   1246c:	dc000017 	ldw	r16,0(sp)
   12470:	dec00904 	addi	sp,sp,36
   12474:	f800283a 	ret
   12478:	002f883a 	mov	r23,zero
   1247c:	003ff206 	br	12448 <_gp+0xffff1c14>

00012480 <_getc_r>:
   12480:	defffd04 	addi	sp,sp,-12
   12484:	dc000115 	stw	r16,4(sp)
   12488:	dfc00215 	stw	ra,8(sp)
   1248c:	2021883a 	mov	r16,r4
   12490:	20000226 	beq	r4,zero,1249c <_getc_r+0x1c>
   12494:	20800e17 	ldw	r2,56(r4)
   12498:	10000c26 	beq	r2,zero,124cc <_getc_r+0x4c>
   1249c:	28800117 	ldw	r2,4(r5)
   124a0:	10bfffc4 	addi	r2,r2,-1
   124a4:	28800115 	stw	r2,4(r5)
   124a8:	10000c16 	blt	r2,zero,124dc <_getc_r+0x5c>
   124ac:	28800017 	ldw	r2,0(r5)
   124b0:	10c00044 	addi	r3,r2,1
   124b4:	28c00015 	stw	r3,0(r5)
   124b8:	10800003 	ldbu	r2,0(r2)
   124bc:	dfc00217 	ldw	ra,8(sp)
   124c0:	dc000117 	ldw	r16,4(sp)
   124c4:	dec00304 	addi	sp,sp,12
   124c8:	f800283a 	ret
   124cc:	d9400015 	stw	r5,0(sp)
   124d0:	001188c0 	call	1188c <__sinit>
   124d4:	d9400017 	ldw	r5,0(sp)
   124d8:	003ff006 	br	1249c <_gp+0xffff1c68>
   124dc:	8009883a 	mov	r4,r16
   124e0:	dfc00217 	ldw	ra,8(sp)
   124e4:	dc000117 	ldw	r16,4(sp)
   124e8:	dec00304 	addi	sp,sp,12
   124ec:	00134001 	jmpi	13400 <__srget_r>

000124f0 <getc>:
   124f0:	008000b4 	movhi	r2,2
   124f4:	defffd04 	addi	sp,sp,-12
   124f8:	10a20e04 	addi	r2,r2,-30664
   124fc:	dc400115 	stw	r17,4(sp)
   12500:	14400017 	ldw	r17,0(r2)
   12504:	dc000015 	stw	r16,0(sp)
   12508:	dfc00215 	stw	ra,8(sp)
   1250c:	2021883a 	mov	r16,r4
   12510:	88000226 	beq	r17,zero,1251c <getc+0x2c>
   12514:	88800e17 	ldw	r2,56(r17)
   12518:	10000d26 	beq	r2,zero,12550 <getc+0x60>
   1251c:	80800117 	ldw	r2,4(r16)
   12520:	10bfffc4 	addi	r2,r2,-1
   12524:	80800115 	stw	r2,4(r16)
   12528:	10000c16 	blt	r2,zero,1255c <getc+0x6c>
   1252c:	80800017 	ldw	r2,0(r16)
   12530:	10c00044 	addi	r3,r2,1
   12534:	80c00015 	stw	r3,0(r16)
   12538:	10800003 	ldbu	r2,0(r2)
   1253c:	dfc00217 	ldw	ra,8(sp)
   12540:	dc400117 	ldw	r17,4(sp)
   12544:	dc000017 	ldw	r16,0(sp)
   12548:	dec00304 	addi	sp,sp,12
   1254c:	f800283a 	ret
   12550:	8809883a 	mov	r4,r17
   12554:	001188c0 	call	1188c <__sinit>
   12558:	003ff006 	br	1251c <_gp+0xffff1ce8>
   1255c:	800b883a 	mov	r5,r16
   12560:	8809883a 	mov	r4,r17
   12564:	dfc00217 	ldw	ra,8(sp)
   12568:	dc400117 	ldw	r17,4(sp)
   1256c:	dc000017 	ldw	r16,0(sp)
   12570:	dec00304 	addi	sp,sp,12
   12574:	00134001 	jmpi	13400 <__srget_r>

00012578 <__smakebuf_r>:
   12578:	2880030b 	ldhu	r2,12(r5)
   1257c:	10c0008c 	andi	r3,r2,2
   12580:	1800411e 	bne	r3,zero,12688 <__smakebuf_r+0x110>
   12584:	deffec04 	addi	sp,sp,-80
   12588:	dc000f15 	stw	r16,60(sp)
   1258c:	2821883a 	mov	r16,r5
   12590:	2940038f 	ldh	r5,14(r5)
   12594:	dc401015 	stw	r17,64(sp)
   12598:	dfc01315 	stw	ra,76(sp)
   1259c:	dcc01215 	stw	r19,72(sp)
   125a0:	dc801115 	stw	r18,68(sp)
   125a4:	2023883a 	mov	r17,r4
   125a8:	28001c16 	blt	r5,zero,1261c <__smakebuf_r+0xa4>
   125ac:	d80d883a 	mov	r6,sp
   125b0:	001229c0 	call	1229c <_fstat_r>
   125b4:	10001816 	blt	r2,zero,12618 <__smakebuf_r+0xa0>
   125b8:	d8800117 	ldw	r2,4(sp)
   125bc:	00e00014 	movui	r3,32768
   125c0:	10bc000c 	andi	r2,r2,61440
   125c4:	14c80020 	cmpeqi	r19,r2,8192
   125c8:	10c03726 	beq	r2,r3,126a8 <__smakebuf_r+0x130>
   125cc:	80c0030b 	ldhu	r3,12(r16)
   125d0:	18c20014 	ori	r3,r3,2048
   125d4:	80c0030d 	sth	r3,12(r16)
   125d8:	00c80004 	movi	r3,8192
   125dc:	10c0521e 	bne	r2,r3,12728 <__smakebuf_r+0x1b0>
   125e0:	8140038f 	ldh	r5,14(r16)
   125e4:	8809883a 	mov	r4,r17
   125e8:	00138100 	call	13810 <_isatty_r>
   125ec:	10004c26 	beq	r2,zero,12720 <__smakebuf_r+0x1a8>
   125f0:	8080030b 	ldhu	r2,12(r16)
   125f4:	80c010c4 	addi	r3,r16,67
   125f8:	80c00015 	stw	r3,0(r16)
   125fc:	10800054 	ori	r2,r2,1
   12600:	8080030d 	sth	r2,12(r16)
   12604:	00800044 	movi	r2,1
   12608:	80c00415 	stw	r3,16(r16)
   1260c:	80800515 	stw	r2,20(r16)
   12610:	04810004 	movi	r18,1024
   12614:	00000706 	br	12634 <__smakebuf_r+0xbc>
   12618:	8080030b 	ldhu	r2,12(r16)
   1261c:	10c0200c 	andi	r3,r2,128
   12620:	18001f1e 	bne	r3,zero,126a0 <__smakebuf_r+0x128>
   12624:	04810004 	movi	r18,1024
   12628:	10820014 	ori	r2,r2,2048
   1262c:	8080030d 	sth	r2,12(r16)
   12630:	0027883a 	mov	r19,zero
   12634:	900b883a 	mov	r5,r18
   12638:	8809883a 	mov	r4,r17
   1263c:	00127340 	call	12734 <_malloc_r>
   12640:	10002c26 	beq	r2,zero,126f4 <__smakebuf_r+0x17c>
   12644:	80c0030b 	ldhu	r3,12(r16)
   12648:	01000074 	movhi	r4,1
   1264c:	21054d04 	addi	r4,r4,5428
   12650:	89000f15 	stw	r4,60(r17)
   12654:	18c02014 	ori	r3,r3,128
   12658:	80c0030d 	sth	r3,12(r16)
   1265c:	80800015 	stw	r2,0(r16)
   12660:	80800415 	stw	r2,16(r16)
   12664:	84800515 	stw	r18,20(r16)
   12668:	98001a1e 	bne	r19,zero,126d4 <__smakebuf_r+0x15c>
   1266c:	dfc01317 	ldw	ra,76(sp)
   12670:	dcc01217 	ldw	r19,72(sp)
   12674:	dc801117 	ldw	r18,68(sp)
   12678:	dc401017 	ldw	r17,64(sp)
   1267c:	dc000f17 	ldw	r16,60(sp)
   12680:	dec01404 	addi	sp,sp,80
   12684:	f800283a 	ret
   12688:	288010c4 	addi	r2,r5,67
   1268c:	28800015 	stw	r2,0(r5)
   12690:	28800415 	stw	r2,16(r5)
   12694:	00800044 	movi	r2,1
   12698:	28800515 	stw	r2,20(r5)
   1269c:	f800283a 	ret
   126a0:	04801004 	movi	r18,64
   126a4:	003fe006 	br	12628 <_gp+0xffff1df4>
   126a8:	81000a17 	ldw	r4,40(r16)
   126ac:	00c00074 	movhi	r3,1
   126b0:	18cd6d04 	addi	r3,r3,13748
   126b4:	20ffc51e 	bne	r4,r3,125cc <_gp+0xffff1d98>
   126b8:	8080030b 	ldhu	r2,12(r16)
   126bc:	04810004 	movi	r18,1024
   126c0:	84801315 	stw	r18,76(r16)
   126c4:	1484b03a 	or	r2,r2,r18
   126c8:	8080030d 	sth	r2,12(r16)
   126cc:	0027883a 	mov	r19,zero
   126d0:	003fd806 	br	12634 <_gp+0xffff1e00>
   126d4:	8140038f 	ldh	r5,14(r16)
   126d8:	8809883a 	mov	r4,r17
   126dc:	00138100 	call	13810 <_isatty_r>
   126e0:	103fe226 	beq	r2,zero,1266c <_gp+0xffff1e38>
   126e4:	8080030b 	ldhu	r2,12(r16)
   126e8:	10800054 	ori	r2,r2,1
   126ec:	8080030d 	sth	r2,12(r16)
   126f0:	003fde06 	br	1266c <_gp+0xffff1e38>
   126f4:	8080030b 	ldhu	r2,12(r16)
   126f8:	10c0800c 	andi	r3,r2,512
   126fc:	183fdb1e 	bne	r3,zero,1266c <_gp+0xffff1e38>
   12700:	10800094 	ori	r2,r2,2
   12704:	80c010c4 	addi	r3,r16,67
   12708:	8080030d 	sth	r2,12(r16)
   1270c:	00800044 	movi	r2,1
   12710:	80c00015 	stw	r3,0(r16)
   12714:	80c00415 	stw	r3,16(r16)
   12718:	80800515 	stw	r2,20(r16)
   1271c:	003fd306 	br	1266c <_gp+0xffff1e38>
   12720:	04810004 	movi	r18,1024
   12724:	003fc306 	br	12634 <_gp+0xffff1e00>
   12728:	0027883a 	mov	r19,zero
   1272c:	04810004 	movi	r18,1024
   12730:	003fc006 	br	12634 <_gp+0xffff1e00>

00012734 <_malloc_r>:
   12734:	defff504 	addi	sp,sp,-44
   12738:	dc800315 	stw	r18,12(sp)
   1273c:	dfc00a15 	stw	ra,40(sp)
   12740:	df000915 	stw	fp,36(sp)
   12744:	ddc00815 	stw	r23,32(sp)
   12748:	dd800715 	stw	r22,28(sp)
   1274c:	dd400615 	stw	r21,24(sp)
   12750:	dd000515 	stw	r20,20(sp)
   12754:	dcc00415 	stw	r19,16(sp)
   12758:	dc400215 	stw	r17,8(sp)
   1275c:	dc000115 	stw	r16,4(sp)
   12760:	288002c4 	addi	r2,r5,11
   12764:	00c00584 	movi	r3,22
   12768:	2025883a 	mov	r18,r4
   1276c:	18807f2e 	bgeu	r3,r2,1296c <_malloc_r+0x238>
   12770:	047ffe04 	movi	r17,-8
   12774:	1462703a 	and	r17,r2,r17
   12778:	8800a316 	blt	r17,zero,12a08 <_malloc_r+0x2d4>
   1277c:	8940a236 	bltu	r17,r5,12a08 <_malloc_r+0x2d4>
   12780:	00140400 	call	14040 <__malloc_lock>
   12784:	00807dc4 	movi	r2,503
   12788:	1441e92e 	bgeu	r2,r17,12f30 <_malloc_r+0x7fc>
   1278c:	8804d27a 	srli	r2,r17,9
   12790:	1000a126 	beq	r2,zero,12a18 <_malloc_r+0x2e4>
   12794:	00c00104 	movi	r3,4
   12798:	18811e36 	bltu	r3,r2,12c14 <_malloc_r+0x4e0>
   1279c:	8804d1ba 	srli	r2,r17,6
   127a0:	12000e44 	addi	r8,r2,57
   127a4:	11c00e04 	addi	r7,r2,56
   127a8:	4209883a 	add	r4,r8,r8
   127ac:	04c00074 	movhi	r19,1
   127b0:	2109883a 	add	r4,r4,r4
   127b4:	9cdc7e04 	addi	r19,r19,29176
   127b8:	2109883a 	add	r4,r4,r4
   127bc:	9909883a 	add	r4,r19,r4
   127c0:	24000117 	ldw	r16,4(r4)
   127c4:	213ffe04 	addi	r4,r4,-8
   127c8:	24009726 	beq	r4,r16,12a28 <_malloc_r+0x2f4>
   127cc:	80800117 	ldw	r2,4(r16)
   127d0:	01bfff04 	movi	r6,-4
   127d4:	014003c4 	movi	r5,15
   127d8:	1184703a 	and	r2,r2,r6
   127dc:	1447c83a 	sub	r3,r2,r17
   127e0:	28c00716 	blt	r5,r3,12800 <_malloc_r+0xcc>
   127e4:	1800920e 	bge	r3,zero,12a30 <_malloc_r+0x2fc>
   127e8:	84000317 	ldw	r16,12(r16)
   127ec:	24008e26 	beq	r4,r16,12a28 <_malloc_r+0x2f4>
   127f0:	80800117 	ldw	r2,4(r16)
   127f4:	1184703a 	and	r2,r2,r6
   127f8:	1447c83a 	sub	r3,r2,r17
   127fc:	28fff90e 	bge	r5,r3,127e4 <_gp+0xffff1fb0>
   12800:	3809883a 	mov	r4,r7
   12804:	01800074 	movhi	r6,1
   12808:	9c000417 	ldw	r16,16(r19)
   1280c:	319c7e04 	addi	r6,r6,29176
   12810:	32000204 	addi	r8,r6,8
   12814:	82013426 	beq	r16,r8,12ce8 <_malloc_r+0x5b4>
   12818:	80c00117 	ldw	r3,4(r16)
   1281c:	00bfff04 	movi	r2,-4
   12820:	188e703a 	and	r7,r3,r2
   12824:	3c45c83a 	sub	r2,r7,r17
   12828:	00c003c4 	movi	r3,15
   1282c:	18811f16 	blt	r3,r2,12cac <_malloc_r+0x578>
   12830:	32000515 	stw	r8,20(r6)
   12834:	32000415 	stw	r8,16(r6)
   12838:	10007f0e 	bge	r2,zero,12a38 <_malloc_r+0x304>
   1283c:	00807fc4 	movi	r2,511
   12840:	11c0fd36 	bltu	r2,r7,12c38 <_malloc_r+0x504>
   12844:	3806d0fa 	srli	r3,r7,3
   12848:	01c00044 	movi	r7,1
   1284c:	30800117 	ldw	r2,4(r6)
   12850:	19400044 	addi	r5,r3,1
   12854:	294b883a 	add	r5,r5,r5
   12858:	1807d0ba 	srai	r3,r3,2
   1285c:	294b883a 	add	r5,r5,r5
   12860:	294b883a 	add	r5,r5,r5
   12864:	298b883a 	add	r5,r5,r6
   12868:	38c6983a 	sll	r3,r7,r3
   1286c:	29c00017 	ldw	r7,0(r5)
   12870:	2a7ffe04 	addi	r9,r5,-8
   12874:	1886b03a 	or	r3,r3,r2
   12878:	82400315 	stw	r9,12(r16)
   1287c:	81c00215 	stw	r7,8(r16)
   12880:	30c00115 	stw	r3,4(r6)
   12884:	2c000015 	stw	r16,0(r5)
   12888:	3c000315 	stw	r16,12(r7)
   1288c:	2005d0ba 	srai	r2,r4,2
   12890:	01400044 	movi	r5,1
   12894:	288a983a 	sll	r5,r5,r2
   12898:	19406f36 	bltu	r3,r5,12a58 <_malloc_r+0x324>
   1289c:	28c4703a 	and	r2,r5,r3
   128a0:	10000a1e 	bne	r2,zero,128cc <_malloc_r+0x198>
   128a4:	00bfff04 	movi	r2,-4
   128a8:	294b883a 	add	r5,r5,r5
   128ac:	2088703a 	and	r4,r4,r2
   128b0:	28c4703a 	and	r2,r5,r3
   128b4:	21000104 	addi	r4,r4,4
   128b8:	1000041e 	bne	r2,zero,128cc <_malloc_r+0x198>
   128bc:	294b883a 	add	r5,r5,r5
   128c0:	28c4703a 	and	r2,r5,r3
   128c4:	21000104 	addi	r4,r4,4
   128c8:	103ffc26 	beq	r2,zero,128bc <_gp+0xffff2088>
   128cc:	02bfff04 	movi	r10,-4
   128d0:	024003c4 	movi	r9,15
   128d4:	21800044 	addi	r6,r4,1
   128d8:	318d883a 	add	r6,r6,r6
   128dc:	318d883a 	add	r6,r6,r6
   128e0:	318d883a 	add	r6,r6,r6
   128e4:	998d883a 	add	r6,r19,r6
   128e8:	333ffe04 	addi	r12,r6,-8
   128ec:	2017883a 	mov	r11,r4
   128f0:	31800104 	addi	r6,r6,4
   128f4:	34000017 	ldw	r16,0(r6)
   128f8:	31fffd04 	addi	r7,r6,-12
   128fc:	81c0041e 	bne	r16,r7,12910 <_malloc_r+0x1dc>
   12900:	0000fb06 	br	12cf0 <_malloc_r+0x5bc>
   12904:	1801030e 	bge	r3,zero,12d14 <_malloc_r+0x5e0>
   12908:	84000317 	ldw	r16,12(r16)
   1290c:	81c0f826 	beq	r16,r7,12cf0 <_malloc_r+0x5bc>
   12910:	80800117 	ldw	r2,4(r16)
   12914:	1284703a 	and	r2,r2,r10
   12918:	1447c83a 	sub	r3,r2,r17
   1291c:	48fff90e 	bge	r9,r3,12904 <_gp+0xffff20d0>
   12920:	80800317 	ldw	r2,12(r16)
   12924:	81000217 	ldw	r4,8(r16)
   12928:	89400054 	ori	r5,r17,1
   1292c:	81400115 	stw	r5,4(r16)
   12930:	20800315 	stw	r2,12(r4)
   12934:	11000215 	stw	r4,8(r2)
   12938:	8463883a 	add	r17,r16,r17
   1293c:	9c400515 	stw	r17,20(r19)
   12940:	9c400415 	stw	r17,16(r19)
   12944:	18800054 	ori	r2,r3,1
   12948:	88800115 	stw	r2,4(r17)
   1294c:	8a000315 	stw	r8,12(r17)
   12950:	8a000215 	stw	r8,8(r17)
   12954:	88e3883a 	add	r17,r17,r3
   12958:	88c00015 	stw	r3,0(r17)
   1295c:	9009883a 	mov	r4,r18
   12960:	00140640 	call	14064 <__malloc_unlock>
   12964:	80800204 	addi	r2,r16,8
   12968:	00001b06 	br	129d8 <_malloc_r+0x2a4>
   1296c:	04400404 	movi	r17,16
   12970:	89402536 	bltu	r17,r5,12a08 <_malloc_r+0x2d4>
   12974:	00140400 	call	14040 <__malloc_lock>
   12978:	00800184 	movi	r2,6
   1297c:	01000084 	movi	r4,2
   12980:	04c00074 	movhi	r19,1
   12984:	1085883a 	add	r2,r2,r2
   12988:	9cdc7e04 	addi	r19,r19,29176
   1298c:	1085883a 	add	r2,r2,r2
   12990:	9885883a 	add	r2,r19,r2
   12994:	14000117 	ldw	r16,4(r2)
   12998:	10fffe04 	addi	r3,r2,-8
   1299c:	80c0d926 	beq	r16,r3,12d04 <_malloc_r+0x5d0>
   129a0:	80c00117 	ldw	r3,4(r16)
   129a4:	81000317 	ldw	r4,12(r16)
   129a8:	00bfff04 	movi	r2,-4
   129ac:	1884703a 	and	r2,r3,r2
   129b0:	81400217 	ldw	r5,8(r16)
   129b4:	8085883a 	add	r2,r16,r2
   129b8:	10c00117 	ldw	r3,4(r2)
   129bc:	29000315 	stw	r4,12(r5)
   129c0:	21400215 	stw	r5,8(r4)
   129c4:	18c00054 	ori	r3,r3,1
   129c8:	10c00115 	stw	r3,4(r2)
   129cc:	9009883a 	mov	r4,r18
   129d0:	00140640 	call	14064 <__malloc_unlock>
   129d4:	80800204 	addi	r2,r16,8
   129d8:	dfc00a17 	ldw	ra,40(sp)
   129dc:	df000917 	ldw	fp,36(sp)
   129e0:	ddc00817 	ldw	r23,32(sp)
   129e4:	dd800717 	ldw	r22,28(sp)
   129e8:	dd400617 	ldw	r21,24(sp)
   129ec:	dd000517 	ldw	r20,20(sp)
   129f0:	dcc00417 	ldw	r19,16(sp)
   129f4:	dc800317 	ldw	r18,12(sp)
   129f8:	dc400217 	ldw	r17,8(sp)
   129fc:	dc000117 	ldw	r16,4(sp)
   12a00:	dec00b04 	addi	sp,sp,44
   12a04:	f800283a 	ret
   12a08:	00800304 	movi	r2,12
   12a0c:	90800015 	stw	r2,0(r18)
   12a10:	0005883a 	mov	r2,zero
   12a14:	003ff006 	br	129d8 <_gp+0xffff21a4>
   12a18:	01002004 	movi	r4,128
   12a1c:	02001004 	movi	r8,64
   12a20:	01c00fc4 	movi	r7,63
   12a24:	003f6106 	br	127ac <_gp+0xffff1f78>
   12a28:	4009883a 	mov	r4,r8
   12a2c:	003f7506 	br	12804 <_gp+0xffff1fd0>
   12a30:	81000317 	ldw	r4,12(r16)
   12a34:	003fde06 	br	129b0 <_gp+0xffff217c>
   12a38:	81c5883a 	add	r2,r16,r7
   12a3c:	11400117 	ldw	r5,4(r2)
   12a40:	9009883a 	mov	r4,r18
   12a44:	29400054 	ori	r5,r5,1
   12a48:	11400115 	stw	r5,4(r2)
   12a4c:	00140640 	call	14064 <__malloc_unlock>
   12a50:	80800204 	addi	r2,r16,8
   12a54:	003fe006 	br	129d8 <_gp+0xffff21a4>
   12a58:	9c000217 	ldw	r16,8(r19)
   12a5c:	00bfff04 	movi	r2,-4
   12a60:	85800117 	ldw	r22,4(r16)
   12a64:	b0ac703a 	and	r22,r22,r2
   12a68:	b4400336 	bltu	r22,r17,12a78 <_malloc_r+0x344>
   12a6c:	b445c83a 	sub	r2,r22,r17
   12a70:	00c003c4 	movi	r3,15
   12a74:	18805d16 	blt	r3,r2,12bec <_malloc_r+0x4b8>
   12a78:	05c000b4 	movhi	r23,2
   12a7c:	008000b4 	movhi	r2,2
   12a80:	10a8e204 	addi	r2,r2,-23672
   12a84:	bde20f04 	addi	r23,r23,-30660
   12a88:	15400017 	ldw	r21,0(r2)
   12a8c:	b8c00017 	ldw	r3,0(r23)
   12a90:	00bfffc4 	movi	r2,-1
   12a94:	858d883a 	add	r6,r16,r22
   12a98:	8d6b883a 	add	r21,r17,r21
   12a9c:	1880ea26 	beq	r3,r2,12e48 <_malloc_r+0x714>
   12aa0:	ad4403c4 	addi	r21,r21,4111
   12aa4:	00bc0004 	movi	r2,-4096
   12aa8:	a8aa703a 	and	r21,r21,r2
   12aac:	a80b883a 	mov	r5,r21
   12ab0:	9009883a 	mov	r4,r18
   12ab4:	d9800015 	stw	r6,0(sp)
   12ab8:	00134880 	call	13488 <_sbrk_r>
   12abc:	1029883a 	mov	r20,r2
   12ac0:	00bfffc4 	movi	r2,-1
   12ac4:	d9800017 	ldw	r6,0(sp)
   12ac8:	a080e826 	beq	r20,r2,12e6c <_malloc_r+0x738>
   12acc:	a180a636 	bltu	r20,r6,12d68 <_malloc_r+0x634>
   12ad0:	070000b4 	movhi	fp,2
   12ad4:	e7293704 	addi	fp,fp,-23332
   12ad8:	e0800017 	ldw	r2,0(fp)
   12adc:	a887883a 	add	r3,r21,r2
   12ae0:	e0c00015 	stw	r3,0(fp)
   12ae4:	3500e626 	beq	r6,r20,12e80 <_malloc_r+0x74c>
   12ae8:	b9000017 	ldw	r4,0(r23)
   12aec:	00bfffc4 	movi	r2,-1
   12af0:	2080ee26 	beq	r4,r2,12eac <_malloc_r+0x778>
   12af4:	a185c83a 	sub	r2,r20,r6
   12af8:	10c5883a 	add	r2,r2,r3
   12afc:	e0800015 	stw	r2,0(fp)
   12b00:	a0c001cc 	andi	r3,r20,7
   12b04:	1800bc26 	beq	r3,zero,12df8 <_malloc_r+0x6c4>
   12b08:	a0e9c83a 	sub	r20,r20,r3
   12b0c:	00840204 	movi	r2,4104
   12b10:	a5000204 	addi	r20,r20,8
   12b14:	10c7c83a 	sub	r3,r2,r3
   12b18:	a545883a 	add	r2,r20,r21
   12b1c:	1083ffcc 	andi	r2,r2,4095
   12b20:	18abc83a 	sub	r21,r3,r2
   12b24:	a80b883a 	mov	r5,r21
   12b28:	9009883a 	mov	r4,r18
   12b2c:	00134880 	call	13488 <_sbrk_r>
   12b30:	00ffffc4 	movi	r3,-1
   12b34:	10c0e126 	beq	r2,r3,12ebc <_malloc_r+0x788>
   12b38:	1505c83a 	sub	r2,r2,r20
   12b3c:	1545883a 	add	r2,r2,r21
   12b40:	10800054 	ori	r2,r2,1
   12b44:	e0c00017 	ldw	r3,0(fp)
   12b48:	9d000215 	stw	r20,8(r19)
   12b4c:	a0800115 	stw	r2,4(r20)
   12b50:	a8c7883a 	add	r3,r21,r3
   12b54:	e0c00015 	stw	r3,0(fp)
   12b58:	84c00e26 	beq	r16,r19,12b94 <_malloc_r+0x460>
   12b5c:	018003c4 	movi	r6,15
   12b60:	3580a72e 	bgeu	r6,r22,12e00 <_malloc_r+0x6cc>
   12b64:	81400117 	ldw	r5,4(r16)
   12b68:	013ffe04 	movi	r4,-8
   12b6c:	b0bffd04 	addi	r2,r22,-12
   12b70:	1104703a 	and	r2,r2,r4
   12b74:	2900004c 	andi	r4,r5,1
   12b78:	2088b03a 	or	r4,r4,r2
   12b7c:	81000115 	stw	r4,4(r16)
   12b80:	01400144 	movi	r5,5
   12b84:	8089883a 	add	r4,r16,r2
   12b88:	21400115 	stw	r5,4(r4)
   12b8c:	21400215 	stw	r5,8(r4)
   12b90:	3080cd36 	bltu	r6,r2,12ec8 <_malloc_r+0x794>
   12b94:	008000b4 	movhi	r2,2
   12b98:	10a8e104 	addi	r2,r2,-23676
   12b9c:	11000017 	ldw	r4,0(r2)
   12ba0:	20c0012e 	bgeu	r4,r3,12ba8 <_malloc_r+0x474>
   12ba4:	10c00015 	stw	r3,0(r2)
   12ba8:	008000b4 	movhi	r2,2
   12bac:	10a8e004 	addi	r2,r2,-23680
   12bb0:	11000017 	ldw	r4,0(r2)
   12bb4:	9c000217 	ldw	r16,8(r19)
   12bb8:	20c0012e 	bgeu	r4,r3,12bc0 <_malloc_r+0x48c>
   12bbc:	10c00015 	stw	r3,0(r2)
   12bc0:	80c00117 	ldw	r3,4(r16)
   12bc4:	00bfff04 	movi	r2,-4
   12bc8:	1886703a 	and	r3,r3,r2
   12bcc:	1c45c83a 	sub	r2,r3,r17
   12bd0:	1c400236 	bltu	r3,r17,12bdc <_malloc_r+0x4a8>
   12bd4:	00c003c4 	movi	r3,15
   12bd8:	18800416 	blt	r3,r2,12bec <_malloc_r+0x4b8>
   12bdc:	9009883a 	mov	r4,r18
   12be0:	00140640 	call	14064 <__malloc_unlock>
   12be4:	0005883a 	mov	r2,zero
   12be8:	003f7b06 	br	129d8 <_gp+0xffff21a4>
   12bec:	88c00054 	ori	r3,r17,1
   12bf0:	80c00115 	stw	r3,4(r16)
   12bf4:	8463883a 	add	r17,r16,r17
   12bf8:	10800054 	ori	r2,r2,1
   12bfc:	9c400215 	stw	r17,8(r19)
   12c00:	88800115 	stw	r2,4(r17)
   12c04:	9009883a 	mov	r4,r18
   12c08:	00140640 	call	14064 <__malloc_unlock>
   12c0c:	80800204 	addi	r2,r16,8
   12c10:	003f7106 	br	129d8 <_gp+0xffff21a4>
   12c14:	00c00504 	movi	r3,20
   12c18:	18804a2e 	bgeu	r3,r2,12d44 <_malloc_r+0x610>
   12c1c:	00c01504 	movi	r3,84
   12c20:	18806e36 	bltu	r3,r2,12ddc <_malloc_r+0x6a8>
   12c24:	8804d33a 	srli	r2,r17,12
   12c28:	12001bc4 	addi	r8,r2,111
   12c2c:	11c01b84 	addi	r7,r2,110
   12c30:	4209883a 	add	r4,r8,r8
   12c34:	003edd06 	br	127ac <_gp+0xffff1f78>
   12c38:	3804d27a 	srli	r2,r7,9
   12c3c:	00c00104 	movi	r3,4
   12c40:	1880442e 	bgeu	r3,r2,12d54 <_malloc_r+0x620>
   12c44:	00c00504 	movi	r3,20
   12c48:	18808136 	bltu	r3,r2,12e50 <_malloc_r+0x71c>
   12c4c:	11401704 	addi	r5,r2,92
   12c50:	10c016c4 	addi	r3,r2,91
   12c54:	294b883a 	add	r5,r5,r5
   12c58:	294b883a 	add	r5,r5,r5
   12c5c:	294b883a 	add	r5,r5,r5
   12c60:	994b883a 	add	r5,r19,r5
   12c64:	28800017 	ldw	r2,0(r5)
   12c68:	01800074 	movhi	r6,1
   12c6c:	297ffe04 	addi	r5,r5,-8
   12c70:	319c7e04 	addi	r6,r6,29176
   12c74:	28806526 	beq	r5,r2,12e0c <_malloc_r+0x6d8>
   12c78:	01bfff04 	movi	r6,-4
   12c7c:	10c00117 	ldw	r3,4(r2)
   12c80:	1986703a 	and	r3,r3,r6
   12c84:	38c0022e 	bgeu	r7,r3,12c90 <_malloc_r+0x55c>
   12c88:	10800217 	ldw	r2,8(r2)
   12c8c:	28bffb1e 	bne	r5,r2,12c7c <_gp+0xffff2448>
   12c90:	11400317 	ldw	r5,12(r2)
   12c94:	98c00117 	ldw	r3,4(r19)
   12c98:	81400315 	stw	r5,12(r16)
   12c9c:	80800215 	stw	r2,8(r16)
   12ca0:	2c000215 	stw	r16,8(r5)
   12ca4:	14000315 	stw	r16,12(r2)
   12ca8:	003ef806 	br	1288c <_gp+0xffff2058>
   12cac:	88c00054 	ori	r3,r17,1
   12cb0:	80c00115 	stw	r3,4(r16)
   12cb4:	8463883a 	add	r17,r16,r17
   12cb8:	34400515 	stw	r17,20(r6)
   12cbc:	34400415 	stw	r17,16(r6)
   12cc0:	10c00054 	ori	r3,r2,1
   12cc4:	8a000315 	stw	r8,12(r17)
   12cc8:	8a000215 	stw	r8,8(r17)
   12ccc:	88c00115 	stw	r3,4(r17)
   12cd0:	88a3883a 	add	r17,r17,r2
   12cd4:	88800015 	stw	r2,0(r17)
   12cd8:	9009883a 	mov	r4,r18
   12cdc:	00140640 	call	14064 <__malloc_unlock>
   12ce0:	80800204 	addi	r2,r16,8
   12ce4:	003f3c06 	br	129d8 <_gp+0xffff21a4>
   12ce8:	30c00117 	ldw	r3,4(r6)
   12cec:	003ee706 	br	1288c <_gp+0xffff2058>
   12cf0:	5ac00044 	addi	r11,r11,1
   12cf4:	588000cc 	andi	r2,r11,3
   12cf8:	31800204 	addi	r6,r6,8
   12cfc:	103efd1e 	bne	r2,zero,128f4 <_gp+0xffff20c0>
   12d00:	00002406 	br	12d94 <_malloc_r+0x660>
   12d04:	14000317 	ldw	r16,12(r2)
   12d08:	143f251e 	bne	r2,r16,129a0 <_gp+0xffff216c>
   12d0c:	21000084 	addi	r4,r4,2
   12d10:	003ebc06 	br	12804 <_gp+0xffff1fd0>
   12d14:	8085883a 	add	r2,r16,r2
   12d18:	10c00117 	ldw	r3,4(r2)
   12d1c:	81000317 	ldw	r4,12(r16)
   12d20:	81400217 	ldw	r5,8(r16)
   12d24:	18c00054 	ori	r3,r3,1
   12d28:	10c00115 	stw	r3,4(r2)
   12d2c:	29000315 	stw	r4,12(r5)
   12d30:	21400215 	stw	r5,8(r4)
   12d34:	9009883a 	mov	r4,r18
   12d38:	00140640 	call	14064 <__malloc_unlock>
   12d3c:	80800204 	addi	r2,r16,8
   12d40:	003f2506 	br	129d8 <_gp+0xffff21a4>
   12d44:	12001704 	addi	r8,r2,92
   12d48:	11c016c4 	addi	r7,r2,91
   12d4c:	4209883a 	add	r4,r8,r8
   12d50:	003e9606 	br	127ac <_gp+0xffff1f78>
   12d54:	3804d1ba 	srli	r2,r7,6
   12d58:	11400e44 	addi	r5,r2,57
   12d5c:	10c00e04 	addi	r3,r2,56
   12d60:	294b883a 	add	r5,r5,r5
   12d64:	003fbc06 	br	12c58 <_gp+0xffff2424>
   12d68:	84ff5926 	beq	r16,r19,12ad0 <_gp+0xffff229c>
   12d6c:	00800074 	movhi	r2,1
   12d70:	109c7e04 	addi	r2,r2,29176
   12d74:	14000217 	ldw	r16,8(r2)
   12d78:	00bfff04 	movi	r2,-4
   12d7c:	80c00117 	ldw	r3,4(r16)
   12d80:	1886703a 	and	r3,r3,r2
   12d84:	003f9106 	br	12bcc <_gp+0xffff2398>
   12d88:	60800217 	ldw	r2,8(r12)
   12d8c:	213fffc4 	addi	r4,r4,-1
   12d90:	1300651e 	bne	r2,r12,12f28 <_malloc_r+0x7f4>
   12d94:	208000cc 	andi	r2,r4,3
   12d98:	633ffe04 	addi	r12,r12,-8
   12d9c:	103ffa1e 	bne	r2,zero,12d88 <_gp+0xffff2554>
   12da0:	98800117 	ldw	r2,4(r19)
   12da4:	0146303a 	nor	r3,zero,r5
   12da8:	1884703a 	and	r2,r3,r2
   12dac:	98800115 	stw	r2,4(r19)
   12db0:	294b883a 	add	r5,r5,r5
   12db4:	117f2836 	bltu	r2,r5,12a58 <_gp+0xffff2224>
   12db8:	283f2726 	beq	r5,zero,12a58 <_gp+0xffff2224>
   12dbc:	2886703a 	and	r3,r5,r2
   12dc0:	5809883a 	mov	r4,r11
   12dc4:	183ec31e 	bne	r3,zero,128d4 <_gp+0xffff20a0>
   12dc8:	294b883a 	add	r5,r5,r5
   12dcc:	2886703a 	and	r3,r5,r2
   12dd0:	21000104 	addi	r4,r4,4
   12dd4:	183ffc26 	beq	r3,zero,12dc8 <_gp+0xffff2594>
   12dd8:	003ebe06 	br	128d4 <_gp+0xffff20a0>
   12ddc:	00c05504 	movi	r3,340
   12de0:	18801236 	bltu	r3,r2,12e2c <_malloc_r+0x6f8>
   12de4:	8804d3fa 	srli	r2,r17,15
   12de8:	12001e04 	addi	r8,r2,120
   12dec:	11c01dc4 	addi	r7,r2,119
   12df0:	4209883a 	add	r4,r8,r8
   12df4:	003e6d06 	br	127ac <_gp+0xffff1f78>
   12df8:	00c40004 	movi	r3,4096
   12dfc:	003f4606 	br	12b18 <_gp+0xffff22e4>
   12e00:	00800044 	movi	r2,1
   12e04:	a0800115 	stw	r2,4(r20)
   12e08:	003f7406 	br	12bdc <_gp+0xffff23a8>
   12e0c:	1805d0ba 	srai	r2,r3,2
   12e10:	01c00044 	movi	r7,1
   12e14:	30c00117 	ldw	r3,4(r6)
   12e18:	388e983a 	sll	r7,r7,r2
   12e1c:	2805883a 	mov	r2,r5
   12e20:	38c6b03a 	or	r3,r7,r3
   12e24:	30c00115 	stw	r3,4(r6)
   12e28:	003f9b06 	br	12c98 <_gp+0xffff2464>
   12e2c:	00c15504 	movi	r3,1364
   12e30:	18801a36 	bltu	r3,r2,12e9c <_malloc_r+0x768>
   12e34:	8804d4ba 	srli	r2,r17,18
   12e38:	12001f44 	addi	r8,r2,125
   12e3c:	11c01f04 	addi	r7,r2,124
   12e40:	4209883a 	add	r4,r8,r8
   12e44:	003e5906 	br	127ac <_gp+0xffff1f78>
   12e48:	ad400404 	addi	r21,r21,16
   12e4c:	003f1706 	br	12aac <_gp+0xffff2278>
   12e50:	00c01504 	movi	r3,84
   12e54:	18802336 	bltu	r3,r2,12ee4 <_malloc_r+0x7b0>
   12e58:	3804d33a 	srli	r2,r7,12
   12e5c:	11401bc4 	addi	r5,r2,111
   12e60:	10c01b84 	addi	r3,r2,110
   12e64:	294b883a 	add	r5,r5,r5
   12e68:	003f7b06 	br	12c58 <_gp+0xffff2424>
   12e6c:	9c000217 	ldw	r16,8(r19)
   12e70:	00bfff04 	movi	r2,-4
   12e74:	80c00117 	ldw	r3,4(r16)
   12e78:	1886703a 	and	r3,r3,r2
   12e7c:	003f5306 	br	12bcc <_gp+0xffff2398>
   12e80:	3083ffcc 	andi	r2,r6,4095
   12e84:	103f181e 	bne	r2,zero,12ae8 <_gp+0xffff22b4>
   12e88:	99000217 	ldw	r4,8(r19)
   12e8c:	b545883a 	add	r2,r22,r21
   12e90:	10800054 	ori	r2,r2,1
   12e94:	20800115 	stw	r2,4(r4)
   12e98:	003f3e06 	br	12b94 <_gp+0xffff2360>
   12e9c:	01003f84 	movi	r4,254
   12ea0:	02001fc4 	movi	r8,127
   12ea4:	01c01f84 	movi	r7,126
   12ea8:	003e4006 	br	127ac <_gp+0xffff1f78>
   12eac:	008000b4 	movhi	r2,2
   12eb0:	10a20f04 	addi	r2,r2,-30660
   12eb4:	15000015 	stw	r20,0(r2)
   12eb8:	003f1106 	br	12b00 <_gp+0xffff22cc>
   12ebc:	00800044 	movi	r2,1
   12ec0:	002b883a 	mov	r21,zero
   12ec4:	003f1f06 	br	12b44 <_gp+0xffff2310>
   12ec8:	81400204 	addi	r5,r16,8
   12ecc:	9009883a 	mov	r4,r18
   12ed0:	0011b0c0 	call	11b0c <_free_r>
   12ed4:	008000b4 	movhi	r2,2
   12ed8:	10a93704 	addi	r2,r2,-23332
   12edc:	10c00017 	ldw	r3,0(r2)
   12ee0:	003f2c06 	br	12b94 <_gp+0xffff2360>
   12ee4:	00c05504 	movi	r3,340
   12ee8:	18800536 	bltu	r3,r2,12f00 <_malloc_r+0x7cc>
   12eec:	3804d3fa 	srli	r2,r7,15
   12ef0:	11401e04 	addi	r5,r2,120
   12ef4:	10c01dc4 	addi	r3,r2,119
   12ef8:	294b883a 	add	r5,r5,r5
   12efc:	003f5606 	br	12c58 <_gp+0xffff2424>
   12f00:	00c15504 	movi	r3,1364
   12f04:	18800536 	bltu	r3,r2,12f1c <_malloc_r+0x7e8>
   12f08:	3804d4ba 	srli	r2,r7,18
   12f0c:	11401f44 	addi	r5,r2,125
   12f10:	10c01f04 	addi	r3,r2,124
   12f14:	294b883a 	add	r5,r5,r5
   12f18:	003f4f06 	br	12c58 <_gp+0xffff2424>
   12f1c:	01403f84 	movi	r5,254
   12f20:	00c01f84 	movi	r3,126
   12f24:	003f4c06 	br	12c58 <_gp+0xffff2424>
   12f28:	98800117 	ldw	r2,4(r19)
   12f2c:	003fa006 	br	12db0 <_gp+0xffff257c>
   12f30:	8808d0fa 	srli	r4,r17,3
   12f34:	20800044 	addi	r2,r4,1
   12f38:	1085883a 	add	r2,r2,r2
   12f3c:	003e9006 	br	12980 <_gp+0xffff214c>

00012f40 <memcpy>:
   12f40:	defffd04 	addi	sp,sp,-12
   12f44:	dfc00215 	stw	ra,8(sp)
   12f48:	dc400115 	stw	r17,4(sp)
   12f4c:	dc000015 	stw	r16,0(sp)
   12f50:	00c003c4 	movi	r3,15
   12f54:	2005883a 	mov	r2,r4
   12f58:	1980452e 	bgeu	r3,r6,13070 <memcpy+0x130>
   12f5c:	2906b03a 	or	r3,r5,r4
   12f60:	18c000cc 	andi	r3,r3,3
   12f64:	1800441e 	bne	r3,zero,13078 <memcpy+0x138>
   12f68:	347ffc04 	addi	r17,r6,-16
   12f6c:	8822d13a 	srli	r17,r17,4
   12f70:	28c00104 	addi	r3,r5,4
   12f74:	23400104 	addi	r13,r4,4
   12f78:	8820913a 	slli	r16,r17,4
   12f7c:	2b000204 	addi	r12,r5,8
   12f80:	22c00204 	addi	r11,r4,8
   12f84:	84000504 	addi	r16,r16,20
   12f88:	2a800304 	addi	r10,r5,12
   12f8c:	22400304 	addi	r9,r4,12
   12f90:	2c21883a 	add	r16,r5,r16
   12f94:	2811883a 	mov	r8,r5
   12f98:	200f883a 	mov	r7,r4
   12f9c:	41000017 	ldw	r4,0(r8)
   12fa0:	1fc00017 	ldw	ra,0(r3)
   12fa4:	63c00017 	ldw	r15,0(r12)
   12fa8:	39000015 	stw	r4,0(r7)
   12fac:	53800017 	ldw	r14,0(r10)
   12fb0:	6fc00015 	stw	ra,0(r13)
   12fb4:	5bc00015 	stw	r15,0(r11)
   12fb8:	4b800015 	stw	r14,0(r9)
   12fbc:	18c00404 	addi	r3,r3,16
   12fc0:	39c00404 	addi	r7,r7,16
   12fc4:	42000404 	addi	r8,r8,16
   12fc8:	6b400404 	addi	r13,r13,16
   12fcc:	63000404 	addi	r12,r12,16
   12fd0:	5ac00404 	addi	r11,r11,16
   12fd4:	52800404 	addi	r10,r10,16
   12fd8:	4a400404 	addi	r9,r9,16
   12fdc:	1c3fef1e 	bne	r3,r16,12f9c <_gp+0xffff2768>
   12fe0:	89c00044 	addi	r7,r17,1
   12fe4:	380e913a 	slli	r7,r7,4
   12fe8:	310003cc 	andi	r4,r6,15
   12fec:	02c000c4 	movi	r11,3
   12ff0:	11c7883a 	add	r3,r2,r7
   12ff4:	29cb883a 	add	r5,r5,r7
   12ff8:	5900212e 	bgeu	r11,r4,13080 <memcpy+0x140>
   12ffc:	1813883a 	mov	r9,r3
   13000:	2811883a 	mov	r8,r5
   13004:	200f883a 	mov	r7,r4
   13008:	42800017 	ldw	r10,0(r8)
   1300c:	4a400104 	addi	r9,r9,4
   13010:	39ffff04 	addi	r7,r7,-4
   13014:	4abfff15 	stw	r10,-4(r9)
   13018:	42000104 	addi	r8,r8,4
   1301c:	59fffa36 	bltu	r11,r7,13008 <_gp+0xffff27d4>
   13020:	213fff04 	addi	r4,r4,-4
   13024:	2008d0ba 	srli	r4,r4,2
   13028:	318000cc 	andi	r6,r6,3
   1302c:	21000044 	addi	r4,r4,1
   13030:	2109883a 	add	r4,r4,r4
   13034:	2109883a 	add	r4,r4,r4
   13038:	1907883a 	add	r3,r3,r4
   1303c:	290b883a 	add	r5,r5,r4
   13040:	30000626 	beq	r6,zero,1305c <memcpy+0x11c>
   13044:	198d883a 	add	r6,r3,r6
   13048:	29c00003 	ldbu	r7,0(r5)
   1304c:	18c00044 	addi	r3,r3,1
   13050:	29400044 	addi	r5,r5,1
   13054:	19ffffc5 	stb	r7,-1(r3)
   13058:	19bffb1e 	bne	r3,r6,13048 <_gp+0xffff2814>
   1305c:	dfc00217 	ldw	ra,8(sp)
   13060:	dc400117 	ldw	r17,4(sp)
   13064:	dc000017 	ldw	r16,0(sp)
   13068:	dec00304 	addi	sp,sp,12
   1306c:	f800283a 	ret
   13070:	2007883a 	mov	r3,r4
   13074:	003ff206 	br	13040 <_gp+0xffff280c>
   13078:	2007883a 	mov	r3,r4
   1307c:	003ff106 	br	13044 <_gp+0xffff2810>
   13080:	200d883a 	mov	r6,r4
   13084:	003fee06 	br	13040 <_gp+0xffff280c>

00013088 <memset>:
   13088:	20c000cc 	andi	r3,r4,3
   1308c:	2005883a 	mov	r2,r4
   13090:	18004426 	beq	r3,zero,131a4 <memset+0x11c>
   13094:	31ffffc4 	addi	r7,r6,-1
   13098:	30004026 	beq	r6,zero,1319c <memset+0x114>
   1309c:	2813883a 	mov	r9,r5
   130a0:	200d883a 	mov	r6,r4
   130a4:	2007883a 	mov	r3,r4
   130a8:	00000406 	br	130bc <memset+0x34>
   130ac:	3a3fffc4 	addi	r8,r7,-1
   130b0:	31800044 	addi	r6,r6,1
   130b4:	38003926 	beq	r7,zero,1319c <memset+0x114>
   130b8:	400f883a 	mov	r7,r8
   130bc:	18c00044 	addi	r3,r3,1
   130c0:	32400005 	stb	r9,0(r6)
   130c4:	1a0000cc 	andi	r8,r3,3
   130c8:	403ff81e 	bne	r8,zero,130ac <_gp+0xffff2878>
   130cc:	010000c4 	movi	r4,3
   130d0:	21c02d2e 	bgeu	r4,r7,13188 <memset+0x100>
   130d4:	29003fcc 	andi	r4,r5,255
   130d8:	200c923a 	slli	r6,r4,8
   130dc:	3108b03a 	or	r4,r6,r4
   130e0:	200c943a 	slli	r6,r4,16
   130e4:	218cb03a 	or	r6,r4,r6
   130e8:	010003c4 	movi	r4,15
   130ec:	21c0182e 	bgeu	r4,r7,13150 <memset+0xc8>
   130f0:	3b3ffc04 	addi	r12,r7,-16
   130f4:	6018d13a 	srli	r12,r12,4
   130f8:	1a000104 	addi	r8,r3,4
   130fc:	1ac00204 	addi	r11,r3,8
   13100:	6008913a 	slli	r4,r12,4
   13104:	1a800304 	addi	r10,r3,12
   13108:	1813883a 	mov	r9,r3
   1310c:	21000504 	addi	r4,r4,20
   13110:	1909883a 	add	r4,r3,r4
   13114:	49800015 	stw	r6,0(r9)
   13118:	41800015 	stw	r6,0(r8)
   1311c:	59800015 	stw	r6,0(r11)
   13120:	51800015 	stw	r6,0(r10)
   13124:	42000404 	addi	r8,r8,16
   13128:	4a400404 	addi	r9,r9,16
   1312c:	5ac00404 	addi	r11,r11,16
   13130:	52800404 	addi	r10,r10,16
   13134:	413ff71e 	bne	r8,r4,13114 <_gp+0xffff28e0>
   13138:	63000044 	addi	r12,r12,1
   1313c:	6018913a 	slli	r12,r12,4
   13140:	39c003cc 	andi	r7,r7,15
   13144:	010000c4 	movi	r4,3
   13148:	1b07883a 	add	r3,r3,r12
   1314c:	21c00e2e 	bgeu	r4,r7,13188 <memset+0x100>
   13150:	1813883a 	mov	r9,r3
   13154:	3811883a 	mov	r8,r7
   13158:	010000c4 	movi	r4,3
   1315c:	49800015 	stw	r6,0(r9)
   13160:	423fff04 	addi	r8,r8,-4
   13164:	4a400104 	addi	r9,r9,4
   13168:	223ffc36 	bltu	r4,r8,1315c <_gp+0xffff2928>
   1316c:	393fff04 	addi	r4,r7,-4
   13170:	2008d0ba 	srli	r4,r4,2
   13174:	39c000cc 	andi	r7,r7,3
   13178:	21000044 	addi	r4,r4,1
   1317c:	2109883a 	add	r4,r4,r4
   13180:	2109883a 	add	r4,r4,r4
   13184:	1907883a 	add	r3,r3,r4
   13188:	38000526 	beq	r7,zero,131a0 <memset+0x118>
   1318c:	19cf883a 	add	r7,r3,r7
   13190:	19400005 	stb	r5,0(r3)
   13194:	18c00044 	addi	r3,r3,1
   13198:	38fffd1e 	bne	r7,r3,13190 <_gp+0xffff295c>
   1319c:	f800283a 	ret
   131a0:	f800283a 	ret
   131a4:	2007883a 	mov	r3,r4
   131a8:	300f883a 	mov	r7,r6
   131ac:	003fc706 	br	130cc <_gp+0xffff2898>

000131b0 <_open_r>:
   131b0:	defffd04 	addi	sp,sp,-12
   131b4:	2805883a 	mov	r2,r5
   131b8:	dc000015 	stw	r16,0(sp)
   131bc:	040000b4 	movhi	r16,2
   131c0:	dc400115 	stw	r17,4(sp)
   131c4:	300b883a 	mov	r5,r6
   131c8:	8428df04 	addi	r16,r16,-23684
   131cc:	2023883a 	mov	r17,r4
   131d0:	380d883a 	mov	r6,r7
   131d4:	1009883a 	mov	r4,r2
   131d8:	dfc00215 	stw	ra,8(sp)
   131dc:	80000015 	stw	zero,0(r16)
   131e0:	00141b00 	call	141b0 <open>
   131e4:	00ffffc4 	movi	r3,-1
   131e8:	10c00526 	beq	r2,r3,13200 <_open_r+0x50>
   131ec:	dfc00217 	ldw	ra,8(sp)
   131f0:	dc400117 	ldw	r17,4(sp)
   131f4:	dc000017 	ldw	r16,0(sp)
   131f8:	dec00304 	addi	sp,sp,12
   131fc:	f800283a 	ret
   13200:	80c00017 	ldw	r3,0(r16)
   13204:	183ff926 	beq	r3,zero,131ec <_gp+0xffff29b8>
   13208:	88c00015 	stw	r3,0(r17)
   1320c:	003ff706 	br	131ec <_gp+0xffff29b8>

00013210 <lflush>:
   13210:	2080030b 	ldhu	r2,12(r4)
   13214:	00c00244 	movi	r3,9
   13218:	1080024c 	andi	r2,r2,9
   1321c:	10c00226 	beq	r2,r3,13228 <lflush+0x18>
   13220:	0005883a 	mov	r2,zero
   13224:	f800283a 	ret
   13228:	00114fc1 	jmpi	114fc <fflush>

0001322c <__srefill_r>:
   1322c:	defffc04 	addi	sp,sp,-16
   13230:	dc400115 	stw	r17,4(sp)
   13234:	dc000015 	stw	r16,0(sp)
   13238:	dfc00315 	stw	ra,12(sp)
   1323c:	dc800215 	stw	r18,8(sp)
   13240:	2023883a 	mov	r17,r4
   13244:	2821883a 	mov	r16,r5
   13248:	20000226 	beq	r4,zero,13254 <__srefill_r+0x28>
   1324c:	20800e17 	ldw	r2,56(r4)
   13250:	10003c26 	beq	r2,zero,13344 <__srefill_r+0x118>
   13254:	80c0030b 	ldhu	r3,12(r16)
   13258:	1908000c 	andi	r4,r3,8192
   1325c:	1805883a 	mov	r2,r3
   13260:	2000071e 	bne	r4,zero,13280 <__srefill_r+0x54>
   13264:	81001917 	ldw	r4,100(r16)
   13268:	18880014 	ori	r2,r3,8192
   1326c:	00f7ffc4 	movi	r3,-8193
   13270:	20c8703a 	and	r4,r4,r3
   13274:	8080030d 	sth	r2,12(r16)
   13278:	1007883a 	mov	r3,r2
   1327c:	81001915 	stw	r4,100(r16)
   13280:	80000115 	stw	zero,4(r16)
   13284:	1100080c 	andi	r4,r2,32
   13288:	2000571e 	bne	r4,zero,133e8 <__srefill_r+0x1bc>
   1328c:	1100010c 	andi	r4,r2,4
   13290:	20001f26 	beq	r4,zero,13310 <__srefill_r+0xe4>
   13294:	81400c17 	ldw	r5,48(r16)
   13298:	28000826 	beq	r5,zero,132bc <__srefill_r+0x90>
   1329c:	80801004 	addi	r2,r16,64
   132a0:	28800226 	beq	r5,r2,132ac <__srefill_r+0x80>
   132a4:	8809883a 	mov	r4,r17
   132a8:	0011b0c0 	call	11b0c <_free_r>
   132ac:	80800f17 	ldw	r2,60(r16)
   132b0:	80000c15 	stw	zero,48(r16)
   132b4:	80800115 	stw	r2,4(r16)
   132b8:	1000391e 	bne	r2,zero,133a0 <__srefill_r+0x174>
   132bc:	80800417 	ldw	r2,16(r16)
   132c0:	10004b26 	beq	r2,zero,133f0 <__srefill_r+0x1c4>
   132c4:	8480030b 	ldhu	r18,12(r16)
   132c8:	908000cc 	andi	r2,r18,3
   132cc:	10001f1e 	bne	r2,zero,1334c <__srefill_r+0x120>
   132d0:	81800417 	ldw	r6,16(r16)
   132d4:	80800817 	ldw	r2,32(r16)
   132d8:	81c00517 	ldw	r7,20(r16)
   132dc:	81400717 	ldw	r5,28(r16)
   132e0:	81800015 	stw	r6,0(r16)
   132e4:	8809883a 	mov	r4,r17
   132e8:	103ee83a 	callr	r2
   132ec:	80800115 	stw	r2,4(r16)
   132f0:	00800e0e 	bge	zero,r2,1332c <__srefill_r+0x100>
   132f4:	0005883a 	mov	r2,zero
   132f8:	dfc00317 	ldw	ra,12(sp)
   132fc:	dc800217 	ldw	r18,8(sp)
   13300:	dc400117 	ldw	r17,4(sp)
   13304:	dc000017 	ldw	r16,0(sp)
   13308:	dec00404 	addi	sp,sp,16
   1330c:	f800283a 	ret
   13310:	1100040c 	andi	r4,r2,16
   13314:	20003026 	beq	r4,zero,133d8 <__srefill_r+0x1ac>
   13318:	1080020c 	andi	r2,r2,8
   1331c:	1000241e 	bne	r2,zero,133b0 <__srefill_r+0x184>
   13320:	18c00114 	ori	r3,r3,4
   13324:	80c0030d 	sth	r3,12(r16)
   13328:	003fe406 	br	132bc <_gp+0xffff2a88>
   1332c:	80c0030b 	ldhu	r3,12(r16)
   13330:	1000161e 	bne	r2,zero,1338c <__srefill_r+0x160>
   13334:	18c00814 	ori	r3,r3,32
   13338:	00bfffc4 	movi	r2,-1
   1333c:	80c0030d 	sth	r3,12(r16)
   13340:	003fed06 	br	132f8 <_gp+0xffff2ac4>
   13344:	001188c0 	call	1188c <__sinit>
   13348:	003fc206 	br	13254 <_gp+0xffff2a20>
   1334c:	008000b4 	movhi	r2,2
   13350:	10a20d04 	addi	r2,r2,-30668
   13354:	11000017 	ldw	r4,0(r2)
   13358:	01400074 	movhi	r5,1
   1335c:	00800044 	movi	r2,1
   13360:	294c8404 	addi	r5,r5,12816
   13364:	8080030d 	sth	r2,12(r16)
   13368:	00122f80 	call	122f8 <_fwalk>
   1336c:	00800244 	movi	r2,9
   13370:	8480030d 	sth	r18,12(r16)
   13374:	9480024c 	andi	r18,r18,9
   13378:	90bfd51e 	bne	r18,r2,132d0 <_gp+0xffff2a9c>
   1337c:	800b883a 	mov	r5,r16
   13380:	8809883a 	mov	r4,r17
   13384:	00112840 	call	11284 <__sflush_r>
   13388:	003fd106 	br	132d0 <_gp+0xffff2a9c>
   1338c:	18c01014 	ori	r3,r3,64
   13390:	80000115 	stw	zero,4(r16)
   13394:	00bfffc4 	movi	r2,-1
   13398:	80c0030d 	sth	r3,12(r16)
   1339c:	003fd606 	br	132f8 <_gp+0xffff2ac4>
   133a0:	80c00e17 	ldw	r3,56(r16)
   133a4:	0005883a 	mov	r2,zero
   133a8:	80c00015 	stw	r3,0(r16)
   133ac:	003fd206 	br	132f8 <_gp+0xffff2ac4>
   133b0:	800b883a 	mov	r5,r16
   133b4:	8809883a 	mov	r4,r17
   133b8:	00114a00 	call	114a0 <_fflush_r>
   133bc:	10000a1e 	bne	r2,zero,133e8 <__srefill_r+0x1bc>
   133c0:	8080030b 	ldhu	r2,12(r16)
   133c4:	00fffdc4 	movi	r3,-9
   133c8:	80000215 	stw	zero,8(r16)
   133cc:	1886703a 	and	r3,r3,r2
   133d0:	80000615 	stw	zero,24(r16)
   133d4:	003fd206 	br	13320 <_gp+0xffff2aec>
   133d8:	00800244 	movi	r2,9
   133dc:	88800015 	stw	r2,0(r17)
   133e0:	18c01014 	ori	r3,r3,64
   133e4:	80c0030d 	sth	r3,12(r16)
   133e8:	00bfffc4 	movi	r2,-1
   133ec:	003fc206 	br	132f8 <_gp+0xffff2ac4>
   133f0:	800b883a 	mov	r5,r16
   133f4:	8809883a 	mov	r4,r17
   133f8:	00125780 	call	12578 <__smakebuf_r>
   133fc:	003fb106 	br	132c4 <_gp+0xffff2a90>

00013400 <__srget_r>:
   13400:	defffd04 	addi	sp,sp,-12
   13404:	dc400115 	stw	r17,4(sp)
   13408:	dc000015 	stw	r16,0(sp)
   1340c:	dfc00215 	stw	ra,8(sp)
   13410:	2023883a 	mov	r17,r4
   13414:	2821883a 	mov	r16,r5
   13418:	20000226 	beq	r4,zero,13424 <__srget_r+0x24>
   1341c:	20800e17 	ldw	r2,56(r4)
   13420:	10001026 	beq	r2,zero,13464 <__srget_r+0x64>
   13424:	800b883a 	mov	r5,r16
   13428:	8809883a 	mov	r4,r17
   1342c:	001322c0 	call	1322c <__srefill_r>
   13430:	10000e1e 	bne	r2,zero,1346c <__srget_r+0x6c>
   13434:	80c00017 	ldw	r3,0(r16)
   13438:	80800117 	ldw	r2,4(r16)
   1343c:	19000044 	addi	r4,r3,1
   13440:	10bfffc4 	addi	r2,r2,-1
   13444:	80800115 	stw	r2,4(r16)
   13448:	81000015 	stw	r4,0(r16)
   1344c:	18800003 	ldbu	r2,0(r3)
   13450:	dfc00217 	ldw	ra,8(sp)
   13454:	dc400117 	ldw	r17,4(sp)
   13458:	dc000017 	ldw	r16,0(sp)
   1345c:	dec00304 	addi	sp,sp,12
   13460:	f800283a 	ret
   13464:	001188c0 	call	1188c <__sinit>
   13468:	003fee06 	br	13424 <_gp+0xffff2bf0>
   1346c:	00bfffc4 	movi	r2,-1
   13470:	003ff706 	br	13450 <_gp+0xffff2c1c>

00013474 <__srget>:
   13474:	008000b4 	movhi	r2,2
   13478:	10a20e04 	addi	r2,r2,-30664
   1347c:	200b883a 	mov	r5,r4
   13480:	11000017 	ldw	r4,0(r2)
   13484:	00134001 	jmpi	13400 <__srget_r>

00013488 <_sbrk_r>:
   13488:	defffd04 	addi	sp,sp,-12
   1348c:	dc000015 	stw	r16,0(sp)
   13490:	040000b4 	movhi	r16,2
   13494:	dc400115 	stw	r17,4(sp)
   13498:	8428df04 	addi	r16,r16,-23684
   1349c:	2023883a 	mov	r17,r4
   134a0:	2809883a 	mov	r4,r5
   134a4:	dfc00215 	stw	ra,8(sp)
   134a8:	80000015 	stw	zero,0(r16)
   134ac:	00147380 	call	14738 <sbrk>
   134b0:	00ffffc4 	movi	r3,-1
   134b4:	10c00526 	beq	r2,r3,134cc <_sbrk_r+0x44>
   134b8:	dfc00217 	ldw	ra,8(sp)
   134bc:	dc400117 	ldw	r17,4(sp)
   134c0:	dc000017 	ldw	r16,0(sp)
   134c4:	dec00304 	addi	sp,sp,12
   134c8:	f800283a 	ret
   134cc:	80c00017 	ldw	r3,0(r16)
   134d0:	183ff926 	beq	r3,zero,134b8 <_gp+0xffff2c84>
   134d4:	88c00015 	stw	r3,0(r17)
   134d8:	003ff706 	br	134b8 <_gp+0xffff2c84>

000134dc <__sread>:
   134dc:	defffe04 	addi	sp,sp,-8
   134e0:	dc000015 	stw	r16,0(sp)
   134e4:	2821883a 	mov	r16,r5
   134e8:	2940038f 	ldh	r5,14(r5)
   134ec:	dfc00115 	stw	ra,4(sp)
   134f0:	00138c40 	call	138c4 <_read_r>
   134f4:	10000716 	blt	r2,zero,13514 <__sread+0x38>
   134f8:	80c01417 	ldw	r3,80(r16)
   134fc:	1887883a 	add	r3,r3,r2
   13500:	80c01415 	stw	r3,80(r16)
   13504:	dfc00117 	ldw	ra,4(sp)
   13508:	dc000017 	ldw	r16,0(sp)
   1350c:	dec00204 	addi	sp,sp,8
   13510:	f800283a 	ret
   13514:	80c0030b 	ldhu	r3,12(r16)
   13518:	18fbffcc 	andi	r3,r3,61439
   1351c:	80c0030d 	sth	r3,12(r16)
   13520:	dfc00117 	ldw	ra,4(sp)
   13524:	dc000017 	ldw	r16,0(sp)
   13528:	dec00204 	addi	sp,sp,8
   1352c:	f800283a 	ret

00013530 <__seofread>:
   13530:	0005883a 	mov	r2,zero
   13534:	f800283a 	ret

00013538 <__swrite>:
   13538:	2880030b 	ldhu	r2,12(r5)
   1353c:	defffb04 	addi	sp,sp,-20
   13540:	dcc00315 	stw	r19,12(sp)
   13544:	dc800215 	stw	r18,8(sp)
   13548:	dc400115 	stw	r17,4(sp)
   1354c:	dc000015 	stw	r16,0(sp)
   13550:	dfc00415 	stw	ra,16(sp)
   13554:	10c0400c 	andi	r3,r2,256
   13558:	2821883a 	mov	r16,r5
   1355c:	2023883a 	mov	r17,r4
   13560:	3025883a 	mov	r18,r6
   13564:	3827883a 	mov	r19,r7
   13568:	18000526 	beq	r3,zero,13580 <__swrite+0x48>
   1356c:	2940038f 	ldh	r5,14(r5)
   13570:	01c00084 	movi	r7,2
   13574:	000d883a 	mov	r6,zero
   13578:	00138640 	call	13864 <_lseek_r>
   1357c:	8080030b 	ldhu	r2,12(r16)
   13580:	8140038f 	ldh	r5,14(r16)
   13584:	10bbffcc 	andi	r2,r2,61439
   13588:	980f883a 	mov	r7,r19
   1358c:	900d883a 	mov	r6,r18
   13590:	8809883a 	mov	r4,r17
   13594:	8080030d 	sth	r2,12(r16)
   13598:	dfc00417 	ldw	ra,16(sp)
   1359c:	dcc00317 	ldw	r19,12(sp)
   135a0:	dc800217 	ldw	r18,8(sp)
   135a4:	dc400117 	ldw	r17,4(sp)
   135a8:	dc000017 	ldw	r16,0(sp)
   135ac:	dec00504 	addi	sp,sp,20
   135b0:	00136b01 	jmpi	136b0 <_write_r>

000135b4 <__sseek>:
   135b4:	defffe04 	addi	sp,sp,-8
   135b8:	dc000015 	stw	r16,0(sp)
   135bc:	2821883a 	mov	r16,r5
   135c0:	2940038f 	ldh	r5,14(r5)
   135c4:	dfc00115 	stw	ra,4(sp)
   135c8:	00138640 	call	13864 <_lseek_r>
   135cc:	00ffffc4 	movi	r3,-1
   135d0:	10c00826 	beq	r2,r3,135f4 <__sseek+0x40>
   135d4:	80c0030b 	ldhu	r3,12(r16)
   135d8:	80801415 	stw	r2,80(r16)
   135dc:	18c40014 	ori	r3,r3,4096
   135e0:	80c0030d 	sth	r3,12(r16)
   135e4:	dfc00117 	ldw	ra,4(sp)
   135e8:	dc000017 	ldw	r16,0(sp)
   135ec:	dec00204 	addi	sp,sp,8
   135f0:	f800283a 	ret
   135f4:	80c0030b 	ldhu	r3,12(r16)
   135f8:	18fbffcc 	andi	r3,r3,61439
   135fc:	80c0030d 	sth	r3,12(r16)
   13600:	dfc00117 	ldw	ra,4(sp)
   13604:	dc000017 	ldw	r16,0(sp)
   13608:	dec00204 	addi	sp,sp,8
   1360c:	f800283a 	ret

00013610 <__sclose>:
   13610:	2940038f 	ldh	r5,14(r5)
   13614:	00137101 	jmpi	13710 <_close_r>

00013618 <strlen>:
   13618:	208000cc 	andi	r2,r4,3
   1361c:	10002026 	beq	r2,zero,136a0 <strlen+0x88>
   13620:	20800007 	ldb	r2,0(r4)
   13624:	10002026 	beq	r2,zero,136a8 <strlen+0x90>
   13628:	2005883a 	mov	r2,r4
   1362c:	00000206 	br	13638 <strlen+0x20>
   13630:	10c00007 	ldb	r3,0(r2)
   13634:	18001826 	beq	r3,zero,13698 <strlen+0x80>
   13638:	10800044 	addi	r2,r2,1
   1363c:	10c000cc 	andi	r3,r2,3
   13640:	183ffb1e 	bne	r3,zero,13630 <_gp+0xffff2dfc>
   13644:	10c00017 	ldw	r3,0(r2)
   13648:	01ffbff4 	movhi	r7,65279
   1364c:	39ffbfc4 	addi	r7,r7,-257
   13650:	00ca303a 	nor	r5,zero,r3
   13654:	01a02074 	movhi	r6,32897
   13658:	19c7883a 	add	r3,r3,r7
   1365c:	31a02004 	addi	r6,r6,-32640
   13660:	1946703a 	and	r3,r3,r5
   13664:	1986703a 	and	r3,r3,r6
   13668:	1800091e 	bne	r3,zero,13690 <strlen+0x78>
   1366c:	10800104 	addi	r2,r2,4
   13670:	10c00017 	ldw	r3,0(r2)
   13674:	19cb883a 	add	r5,r3,r7
   13678:	00c6303a 	nor	r3,zero,r3
   1367c:	28c6703a 	and	r3,r5,r3
   13680:	1986703a 	and	r3,r3,r6
   13684:	183ff926 	beq	r3,zero,1366c <_gp+0xffff2e38>
   13688:	00000106 	br	13690 <strlen+0x78>
   1368c:	10800044 	addi	r2,r2,1
   13690:	10c00007 	ldb	r3,0(r2)
   13694:	183ffd1e 	bne	r3,zero,1368c <_gp+0xffff2e58>
   13698:	1105c83a 	sub	r2,r2,r4
   1369c:	f800283a 	ret
   136a0:	2005883a 	mov	r2,r4
   136a4:	003fe706 	br	13644 <_gp+0xffff2e10>
   136a8:	0005883a 	mov	r2,zero
   136ac:	f800283a 	ret

000136b0 <_write_r>:
   136b0:	defffd04 	addi	sp,sp,-12
   136b4:	2805883a 	mov	r2,r5
   136b8:	dc000015 	stw	r16,0(sp)
   136bc:	040000b4 	movhi	r16,2
   136c0:	dc400115 	stw	r17,4(sp)
   136c4:	300b883a 	mov	r5,r6
   136c8:	8428df04 	addi	r16,r16,-23684
   136cc:	2023883a 	mov	r17,r4
   136d0:	380d883a 	mov	r6,r7
   136d4:	1009883a 	mov	r4,r2
   136d8:	dfc00215 	stw	ra,8(sp)
   136dc:	80000015 	stw	zero,0(r16)
   136e0:	00148240 	call	14824 <write>
   136e4:	00ffffc4 	movi	r3,-1
   136e8:	10c00526 	beq	r2,r3,13700 <_write_r+0x50>
   136ec:	dfc00217 	ldw	ra,8(sp)
   136f0:	dc400117 	ldw	r17,4(sp)
   136f4:	dc000017 	ldw	r16,0(sp)
   136f8:	dec00304 	addi	sp,sp,12
   136fc:	f800283a 	ret
   13700:	80c00017 	ldw	r3,0(r16)
   13704:	183ff926 	beq	r3,zero,136ec <_gp+0xffff2eb8>
   13708:	88c00015 	stw	r3,0(r17)
   1370c:	003ff706 	br	136ec <_gp+0xffff2eb8>

00013710 <_close_r>:
   13710:	defffd04 	addi	sp,sp,-12
   13714:	dc000015 	stw	r16,0(sp)
   13718:	040000b4 	movhi	r16,2
   1371c:	dc400115 	stw	r17,4(sp)
   13720:	8428df04 	addi	r16,r16,-23684
   13724:	2023883a 	mov	r17,r4
   13728:	2809883a 	mov	r4,r5
   1372c:	dfc00215 	stw	ra,8(sp)
   13730:	80000015 	stw	zero,0(r16)
   13734:	00139600 	call	13960 <close>
   13738:	00ffffc4 	movi	r3,-1
   1373c:	10c00526 	beq	r2,r3,13754 <_close_r+0x44>
   13740:	dfc00217 	ldw	ra,8(sp)
   13744:	dc400117 	ldw	r17,4(sp)
   13748:	dc000017 	ldw	r16,0(sp)
   1374c:	dec00304 	addi	sp,sp,12
   13750:	f800283a 	ret
   13754:	80c00017 	ldw	r3,0(r16)
   13758:	183ff926 	beq	r3,zero,13740 <_gp+0xffff2f0c>
   1375c:	88c00015 	stw	r3,0(r17)
   13760:	003ff706 	br	13740 <_gp+0xffff2f0c>

00013764 <__sflags>:
   13764:	28800007 	ldb	r2,0(r5)
   13768:	00c01c84 	movi	r3,114
   1376c:	10c02426 	beq	r2,r3,13800 <__sflags+0x9c>
   13770:	00c01dc4 	movi	r3,119
   13774:	10c01e26 	beq	r2,r3,137f0 <__sflags+0x8c>
   13778:	00c01844 	movi	r3,97
   1377c:	10c00426 	beq	r2,r3,13790 <__sflags+0x2c>
   13780:	00800584 	movi	r2,22
   13784:	20800015 	stw	r2,0(r4)
   13788:	0005883a 	mov	r2,zero
   1378c:	f800283a 	ret
   13790:	02c08204 	movi	r11,520
   13794:	01000044 	movi	r4,1
   13798:	00804204 	movi	r2,264
   1379c:	01c00ac4 	movi	r7,43
   137a0:	02bff8c4 	movi	r10,-29
   137a4:	027fff04 	movi	r9,-4
   137a8:	02001e04 	movi	r8,120
   137ac:	29400044 	addi	r5,r5,1
   137b0:	28c00007 	ldb	r3,0(r5)
   137b4:	18000626 	beq	r3,zero,137d0 <__sflags+0x6c>
   137b8:	19c00826 	beq	r3,r7,137dc <__sflags+0x78>
   137bc:	1a3ffb1e 	bne	r3,r8,137ac <_gp+0xffff2f78>
   137c0:	29400044 	addi	r5,r5,1
   137c4:	28c00007 	ldb	r3,0(r5)
   137c8:	21020014 	ori	r4,r4,2048
   137cc:	183ffa1e 	bne	r3,zero,137b8 <_gp+0xffff2f84>
   137d0:	22c8b03a 	or	r4,r4,r11
   137d4:	31000015 	stw	r4,0(r6)
   137d8:	f800283a 	ret
   137dc:	1284703a 	and	r2,r2,r10
   137e0:	2248703a 	and	r4,r4,r9
   137e4:	10800414 	ori	r2,r2,16
   137e8:	21000094 	ori	r4,r4,2
   137ec:	003fef06 	br	137ac <_gp+0xffff2f78>
   137f0:	02c18004 	movi	r11,1536
   137f4:	01000044 	movi	r4,1
   137f8:	00800204 	movi	r2,8
   137fc:	003fe706 	br	1379c <_gp+0xffff2f68>
   13800:	0017883a 	mov	r11,zero
   13804:	0009883a 	mov	r4,zero
   13808:	00800104 	movi	r2,4
   1380c:	003fe306 	br	1379c <_gp+0xffff2f68>

00013810 <_isatty_r>:
   13810:	defffd04 	addi	sp,sp,-12
   13814:	dc000015 	stw	r16,0(sp)
   13818:	040000b4 	movhi	r16,2
   1381c:	dc400115 	stw	r17,4(sp)
   13820:	8428df04 	addi	r16,r16,-23684
   13824:	2023883a 	mov	r17,r4
   13828:	2809883a 	mov	r4,r5
   1382c:	dfc00215 	stw	ra,8(sp)
   13830:	80000015 	stw	zero,0(r16)
   13834:	0013d140 	call	13d14 <isatty>
   13838:	00ffffc4 	movi	r3,-1
   1383c:	10c00526 	beq	r2,r3,13854 <_isatty_r+0x44>
   13840:	dfc00217 	ldw	ra,8(sp)
   13844:	dc400117 	ldw	r17,4(sp)
   13848:	dc000017 	ldw	r16,0(sp)
   1384c:	dec00304 	addi	sp,sp,12
   13850:	f800283a 	ret
   13854:	80c00017 	ldw	r3,0(r16)
   13858:	183ff926 	beq	r3,zero,13840 <_gp+0xffff300c>
   1385c:	88c00015 	stw	r3,0(r17)
   13860:	003ff706 	br	13840 <_gp+0xffff300c>

00013864 <_lseek_r>:
   13864:	defffd04 	addi	sp,sp,-12
   13868:	2805883a 	mov	r2,r5
   1386c:	dc000015 	stw	r16,0(sp)
   13870:	040000b4 	movhi	r16,2
   13874:	dc400115 	stw	r17,4(sp)
   13878:	300b883a 	mov	r5,r6
   1387c:	8428df04 	addi	r16,r16,-23684
   13880:	2023883a 	mov	r17,r4
   13884:	380d883a 	mov	r6,r7
   13888:	1009883a 	mov	r4,r2
   1388c:	dfc00215 	stw	ra,8(sp)
   13890:	80000015 	stw	zero,0(r16)
   13894:	0013ee80 	call	13ee8 <lseek>
   13898:	00ffffc4 	movi	r3,-1
   1389c:	10c00526 	beq	r2,r3,138b4 <_lseek_r+0x50>
   138a0:	dfc00217 	ldw	ra,8(sp)
   138a4:	dc400117 	ldw	r17,4(sp)
   138a8:	dc000017 	ldw	r16,0(sp)
   138ac:	dec00304 	addi	sp,sp,12
   138b0:	f800283a 	ret
   138b4:	80c00017 	ldw	r3,0(r16)
   138b8:	183ff926 	beq	r3,zero,138a0 <_gp+0xffff306c>
   138bc:	88c00015 	stw	r3,0(r17)
   138c0:	003ff706 	br	138a0 <_gp+0xffff306c>

000138c4 <_read_r>:
   138c4:	defffd04 	addi	sp,sp,-12
   138c8:	2805883a 	mov	r2,r5
   138cc:	dc000015 	stw	r16,0(sp)
   138d0:	040000b4 	movhi	r16,2
   138d4:	dc400115 	stw	r17,4(sp)
   138d8:	300b883a 	mov	r5,r6
   138dc:	8428df04 	addi	r16,r16,-23684
   138e0:	2023883a 	mov	r17,r4
   138e4:	380d883a 	mov	r6,r7
   138e8:	1009883a 	mov	r4,r2
   138ec:	dfc00215 	stw	ra,8(sp)
   138f0:	80000015 	stw	zero,0(r16)
   138f4:	00145b00 	call	145b0 <read>
   138f8:	00ffffc4 	movi	r3,-1
   138fc:	10c00526 	beq	r2,r3,13914 <_read_r+0x50>
   13900:	dfc00217 	ldw	ra,8(sp)
   13904:	dc400117 	ldw	r17,4(sp)
   13908:	dc000017 	ldw	r16,0(sp)
   1390c:	dec00304 	addi	sp,sp,12
   13910:	f800283a 	ret
   13914:	80c00017 	ldw	r3,0(r16)
   13918:	183ff926 	beq	r3,zero,13900 <_gp+0xffff30cc>
   1391c:	88c00015 	stw	r3,0(r17)
   13920:	003ff706 	br	13900 <_gp+0xffff30cc>

00013924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13924:	defffe04 	addi	sp,sp,-8
   13928:	dfc00115 	stw	ra,4(sp)
   1392c:	df000015 	stw	fp,0(sp)
   13930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13934:	d0a00917 	ldw	r2,-32732(gp)
   13938:	10000326 	beq	r2,zero,13948 <alt_get_errno+0x24>
   1393c:	d0a00917 	ldw	r2,-32732(gp)
   13940:	103ee83a 	callr	r2
   13944:	00000106 	br	1394c <alt_get_errno+0x28>
   13948:	d0a6d204 	addi	r2,gp,-25784
}
   1394c:	e037883a 	mov	sp,fp
   13950:	dfc00117 	ldw	ra,4(sp)
   13954:	df000017 	ldw	fp,0(sp)
   13958:	dec00204 	addi	sp,sp,8
   1395c:	f800283a 	ret

00013960 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13960:	defffb04 	addi	sp,sp,-20
   13964:	dfc00415 	stw	ra,16(sp)
   13968:	df000315 	stw	fp,12(sp)
   1396c:	df000304 	addi	fp,sp,12
   13970:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13974:	e0bfff17 	ldw	r2,-4(fp)
   13978:	10000816 	blt	r2,zero,1399c <close+0x3c>
   1397c:	01400304 	movi	r5,12
   13980:	e13fff17 	ldw	r4,-4(fp)
   13984:	0010b900 	call	10b90 <__mulsi3>
   13988:	1007883a 	mov	r3,r2
   1398c:	00800074 	movhi	r2,1
   13990:	109d8a04 	addi	r2,r2,30248
   13994:	1885883a 	add	r2,r3,r2
   13998:	00000106 	br	139a0 <close+0x40>
   1399c:	0005883a 	mov	r2,zero
   139a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   139a4:	e0bffd17 	ldw	r2,-12(fp)
   139a8:	10001926 	beq	r2,zero,13a10 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   139ac:	e0bffd17 	ldw	r2,-12(fp)
   139b0:	10800017 	ldw	r2,0(r2)
   139b4:	10800417 	ldw	r2,16(r2)
   139b8:	10000626 	beq	r2,zero,139d4 <close+0x74>
   139bc:	e0bffd17 	ldw	r2,-12(fp)
   139c0:	10800017 	ldw	r2,0(r2)
   139c4:	10800417 	ldw	r2,16(r2)
   139c8:	e13ffd17 	ldw	r4,-12(fp)
   139cc:	103ee83a 	callr	r2
   139d0:	00000106 	br	139d8 <close+0x78>
   139d4:	0005883a 	mov	r2,zero
   139d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   139dc:	e13fff17 	ldw	r4,-4(fp)
   139e0:	00146b40 	call	146b4 <alt_release_fd>
    if (rval < 0)
   139e4:	e0bffe17 	ldw	r2,-8(fp)
   139e8:	1000070e 	bge	r2,zero,13a08 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   139ec:	00139240 	call	13924 <alt_get_errno>
   139f0:	1007883a 	mov	r3,r2
   139f4:	e0bffe17 	ldw	r2,-8(fp)
   139f8:	0085c83a 	sub	r2,zero,r2
   139fc:	18800015 	stw	r2,0(r3)
      return -1;
   13a00:	00bfffc4 	movi	r2,-1
   13a04:	00000706 	br	13a24 <close+0xc4>
    }
    return 0;
   13a08:	0005883a 	mov	r2,zero
   13a0c:	00000506 	br	13a24 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13a10:	00139240 	call	13924 <alt_get_errno>
   13a14:	1007883a 	mov	r3,r2
   13a18:	00801444 	movi	r2,81
   13a1c:	18800015 	stw	r2,0(r3)
    return -1;
   13a20:	00bfffc4 	movi	r2,-1
  }
}
   13a24:	e037883a 	mov	sp,fp
   13a28:	dfc00117 	ldw	ra,4(sp)
   13a2c:	df000017 	ldw	fp,0(sp)
   13a30:	dec00204 	addi	sp,sp,8
   13a34:	f800283a 	ret

00013a38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13a38:	defffc04 	addi	sp,sp,-16
   13a3c:	df000315 	stw	fp,12(sp)
   13a40:	df000304 	addi	fp,sp,12
   13a44:	e13ffd15 	stw	r4,-12(fp)
   13a48:	e17ffe15 	stw	r5,-8(fp)
   13a4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13a50:	e0bfff17 	ldw	r2,-4(fp)
}
   13a54:	e037883a 	mov	sp,fp
   13a58:	df000017 	ldw	fp,0(sp)
   13a5c:	dec00104 	addi	sp,sp,4
   13a60:	f800283a 	ret

00013a64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13a64:	defffe04 	addi	sp,sp,-8
   13a68:	dfc00115 	stw	ra,4(sp)
   13a6c:	df000015 	stw	fp,0(sp)
   13a70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13a74:	d0a00917 	ldw	r2,-32732(gp)
   13a78:	10000326 	beq	r2,zero,13a88 <alt_get_errno+0x24>
   13a7c:	d0a00917 	ldw	r2,-32732(gp)
   13a80:	103ee83a 	callr	r2
   13a84:	00000106 	br	13a8c <alt_get_errno+0x28>
   13a88:	d0a6d204 	addi	r2,gp,-25784
}
   13a8c:	e037883a 	mov	sp,fp
   13a90:	dfc00117 	ldw	ra,4(sp)
   13a94:	df000017 	ldw	fp,0(sp)
   13a98:	dec00204 	addi	sp,sp,8
   13a9c:	f800283a 	ret

00013aa0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13aa0:	defffb04 	addi	sp,sp,-20
   13aa4:	dfc00415 	stw	ra,16(sp)
   13aa8:	df000315 	stw	fp,12(sp)
   13aac:	df000304 	addi	fp,sp,12
   13ab0:	e13ffe15 	stw	r4,-8(fp)
   13ab4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13ab8:	e0bffe17 	ldw	r2,-8(fp)
   13abc:	10000816 	blt	r2,zero,13ae0 <fstat+0x40>
   13ac0:	01400304 	movi	r5,12
   13ac4:	e13ffe17 	ldw	r4,-8(fp)
   13ac8:	0010b900 	call	10b90 <__mulsi3>
   13acc:	1007883a 	mov	r3,r2
   13ad0:	00800074 	movhi	r2,1
   13ad4:	109d8a04 	addi	r2,r2,30248
   13ad8:	1885883a 	add	r2,r3,r2
   13adc:	00000106 	br	13ae4 <fstat+0x44>
   13ae0:	0005883a 	mov	r2,zero
   13ae4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13ae8:	e0bffd17 	ldw	r2,-12(fp)
   13aec:	10001026 	beq	r2,zero,13b30 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13af0:	e0bffd17 	ldw	r2,-12(fp)
   13af4:	10800017 	ldw	r2,0(r2)
   13af8:	10800817 	ldw	r2,32(r2)
   13afc:	10000726 	beq	r2,zero,13b1c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   13b00:	e0bffd17 	ldw	r2,-12(fp)
   13b04:	10800017 	ldw	r2,0(r2)
   13b08:	10800817 	ldw	r2,32(r2)
   13b0c:	e17fff17 	ldw	r5,-4(fp)
   13b10:	e13ffd17 	ldw	r4,-12(fp)
   13b14:	103ee83a 	callr	r2
   13b18:	00000a06 	br	13b44 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13b1c:	e0bfff17 	ldw	r2,-4(fp)
   13b20:	00c80004 	movi	r3,8192
   13b24:	10c00115 	stw	r3,4(r2)
      return 0;
   13b28:	0005883a 	mov	r2,zero
   13b2c:	00000506 	br	13b44 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13b30:	0013a640 	call	13a64 <alt_get_errno>
   13b34:	1007883a 	mov	r3,r2
   13b38:	00801444 	movi	r2,81
   13b3c:	18800015 	stw	r2,0(r3)
    return -1;
   13b40:	00bfffc4 	movi	r2,-1
  }
}
   13b44:	e037883a 	mov	sp,fp
   13b48:	dfc00117 	ldw	ra,4(sp)
   13b4c:	df000017 	ldw	fp,0(sp)
   13b50:	dec00204 	addi	sp,sp,8
   13b54:	f800283a 	ret

00013b58 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   13b58:	defff004 	addi	sp,sp,-64
   13b5c:	df000f15 	stw	fp,60(sp)
   13b60:	df000f04 	addi	fp,sp,60
   13b64:	e13ffd15 	stw	r4,-12(fp)
   13b68:	e17ffe15 	stw	r5,-8(fp)
   13b6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   13b70:	00bffa84 	movi	r2,-22
   13b74:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13b78:	e0bffd17 	ldw	r2,-12(fp)
   13b7c:	10800828 	cmpgeui	r2,r2,32
   13b80:	1000501e 	bne	r2,zero,13cc4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b84:	0005303a 	rdctl	r2,status
   13b88:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b8c:	e0fff617 	ldw	r3,-40(fp)
   13b90:	00bfff84 	movi	r2,-2
   13b94:	1884703a 	and	r2,r3,r2
   13b98:	1001703a 	wrctl	status,r2
  
  return context;
   13b9c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   13ba0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   13ba4:	008000b4 	movhi	r2,2
   13ba8:	10a96004 	addi	r2,r2,-23168
   13bac:	e0fffd17 	ldw	r3,-12(fp)
   13bb0:	180690fa 	slli	r3,r3,3
   13bb4:	10c5883a 	add	r2,r2,r3
   13bb8:	e0ffff17 	ldw	r3,-4(fp)
   13bbc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   13bc0:	008000b4 	movhi	r2,2
   13bc4:	10a96004 	addi	r2,r2,-23168
   13bc8:	e0fffd17 	ldw	r3,-12(fp)
   13bcc:	180690fa 	slli	r3,r3,3
   13bd0:	10c5883a 	add	r2,r2,r3
   13bd4:	10800104 	addi	r2,r2,4
   13bd8:	e0fffe17 	ldw	r3,-8(fp)
   13bdc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   13be0:	e0bfff17 	ldw	r2,-4(fp)
   13be4:	10001926 	beq	r2,zero,13c4c <alt_irq_register+0xf4>
   13be8:	e0bffd17 	ldw	r2,-12(fp)
   13bec:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bf0:	0005303a 	rdctl	r2,status
   13bf4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bf8:	e0fff717 	ldw	r3,-36(fp)
   13bfc:	00bfff84 	movi	r2,-2
   13c00:	1884703a 	and	r2,r3,r2
   13c04:	1001703a 	wrctl	status,r2
  
  return context;
   13c08:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13c0c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   13c10:	00c00044 	movi	r3,1
   13c14:	e0bff217 	ldw	r2,-56(fp)
   13c18:	1884983a 	sll	r2,r3,r2
   13c1c:	1007883a 	mov	r3,r2
   13c20:	d0a6d617 	ldw	r2,-25768(gp)
   13c24:	1884b03a 	or	r2,r3,r2
   13c28:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13c2c:	d0a6d617 	ldw	r2,-25768(gp)
   13c30:	100170fa 	wrctl	ienable,r2
   13c34:	e0bff817 	ldw	r2,-32(fp)
   13c38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c3c:	e0bff917 	ldw	r2,-28(fp)
   13c40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13c44:	0005883a 	mov	r2,zero
   13c48:	00001906 	br	13cb0 <alt_irq_register+0x158>
   13c4c:	e0bffd17 	ldw	r2,-12(fp)
   13c50:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c54:	0005303a 	rdctl	r2,status
   13c58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c5c:	e0fffa17 	ldw	r3,-24(fp)
   13c60:	00bfff84 	movi	r2,-2
   13c64:	1884703a 	and	r2,r3,r2
   13c68:	1001703a 	wrctl	status,r2
  
  return context;
   13c6c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13c70:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   13c74:	00c00044 	movi	r3,1
   13c78:	e0bff417 	ldw	r2,-48(fp)
   13c7c:	1884983a 	sll	r2,r3,r2
   13c80:	0084303a 	nor	r2,zero,r2
   13c84:	1007883a 	mov	r3,r2
   13c88:	d0a6d617 	ldw	r2,-25768(gp)
   13c8c:	1884703a 	and	r2,r3,r2
   13c90:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13c94:	d0a6d617 	ldw	r2,-25768(gp)
   13c98:	100170fa 	wrctl	ienable,r2
   13c9c:	e0bffb17 	ldw	r2,-20(fp)
   13ca0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ca4:	e0bffc17 	ldw	r2,-16(fp)
   13ca8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13cac:	0005883a 	mov	r2,zero
   13cb0:	e0bff115 	stw	r2,-60(fp)
   13cb4:	e0bff317 	ldw	r2,-52(fp)
   13cb8:	e0bff515 	stw	r2,-44(fp)
   13cbc:	e0bff517 	ldw	r2,-44(fp)
   13cc0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   13cc4:	e0bff117 	ldw	r2,-60(fp)
}
   13cc8:	e037883a 	mov	sp,fp
   13ccc:	df000017 	ldw	fp,0(sp)
   13cd0:	dec00104 	addi	sp,sp,4
   13cd4:	f800283a 	ret

00013cd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13cd8:	defffe04 	addi	sp,sp,-8
   13cdc:	dfc00115 	stw	ra,4(sp)
   13ce0:	df000015 	stw	fp,0(sp)
   13ce4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13ce8:	d0a00917 	ldw	r2,-32732(gp)
   13cec:	10000326 	beq	r2,zero,13cfc <alt_get_errno+0x24>
   13cf0:	d0a00917 	ldw	r2,-32732(gp)
   13cf4:	103ee83a 	callr	r2
   13cf8:	00000106 	br	13d00 <alt_get_errno+0x28>
   13cfc:	d0a6d204 	addi	r2,gp,-25784
}
   13d00:	e037883a 	mov	sp,fp
   13d04:	dfc00117 	ldw	ra,4(sp)
   13d08:	df000017 	ldw	fp,0(sp)
   13d0c:	dec00204 	addi	sp,sp,8
   13d10:	f800283a 	ret

00013d14 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13d14:	deffed04 	addi	sp,sp,-76
   13d18:	dfc01215 	stw	ra,72(sp)
   13d1c:	df001115 	stw	fp,68(sp)
   13d20:	df001104 	addi	fp,sp,68
   13d24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13d28:	e0bfff17 	ldw	r2,-4(fp)
   13d2c:	10000816 	blt	r2,zero,13d50 <isatty+0x3c>
   13d30:	01400304 	movi	r5,12
   13d34:	e13fff17 	ldw	r4,-4(fp)
   13d38:	0010b900 	call	10b90 <__mulsi3>
   13d3c:	1007883a 	mov	r3,r2
   13d40:	00800074 	movhi	r2,1
   13d44:	109d8a04 	addi	r2,r2,30248
   13d48:	1885883a 	add	r2,r3,r2
   13d4c:	00000106 	br	13d54 <isatty+0x40>
   13d50:	0005883a 	mov	r2,zero
   13d54:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13d58:	e0bfef17 	ldw	r2,-68(fp)
   13d5c:	10000e26 	beq	r2,zero,13d98 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13d60:	e0bfef17 	ldw	r2,-68(fp)
   13d64:	10800017 	ldw	r2,0(r2)
   13d68:	10800817 	ldw	r2,32(r2)
   13d6c:	1000021e 	bne	r2,zero,13d78 <isatty+0x64>
    {
      return 1;
   13d70:	00800044 	movi	r2,1
   13d74:	00000d06 	br	13dac <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13d78:	e0bff004 	addi	r2,fp,-64
   13d7c:	100b883a 	mov	r5,r2
   13d80:	e13fff17 	ldw	r4,-4(fp)
   13d84:	0013aa00 	call	13aa0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13d88:	e0bff117 	ldw	r2,-60(fp)
   13d8c:	10880020 	cmpeqi	r2,r2,8192
   13d90:	10803fcc 	andi	r2,r2,255
   13d94:	00000506 	br	13dac <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13d98:	0013cd80 	call	13cd8 <alt_get_errno>
   13d9c:	1007883a 	mov	r3,r2
   13da0:	00801444 	movi	r2,81
   13da4:	18800015 	stw	r2,0(r3)
    return 0;
   13da8:	0005883a 	mov	r2,zero
  }
}
   13dac:	e037883a 	mov	sp,fp
   13db0:	dfc00117 	ldw	ra,4(sp)
   13db4:	df000017 	ldw	fp,0(sp)
   13db8:	dec00204 	addi	sp,sp,8
   13dbc:	f800283a 	ret

00013dc0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13dc0:	defffc04 	addi	sp,sp,-16
   13dc4:	df000315 	stw	fp,12(sp)
   13dc8:	df000304 	addi	fp,sp,12
   13dcc:	e13ffd15 	stw	r4,-12(fp)
   13dd0:	e17ffe15 	stw	r5,-8(fp)
   13dd4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13dd8:	e0fffe17 	ldw	r3,-8(fp)
   13ddc:	e0bffd17 	ldw	r2,-12(fp)
   13de0:	18800c26 	beq	r3,r2,13e14 <alt_load_section+0x54>
  {
    while( to != end )
   13de4:	00000806 	br	13e08 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13de8:	e0bffe17 	ldw	r2,-8(fp)
   13dec:	10c00104 	addi	r3,r2,4
   13df0:	e0fffe15 	stw	r3,-8(fp)
   13df4:	e0fffd17 	ldw	r3,-12(fp)
   13df8:	19000104 	addi	r4,r3,4
   13dfc:	e13ffd15 	stw	r4,-12(fp)
   13e00:	18c00017 	ldw	r3,0(r3)
   13e04:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13e08:	e0fffe17 	ldw	r3,-8(fp)
   13e0c:	e0bfff17 	ldw	r2,-4(fp)
   13e10:	18bff51e 	bne	r3,r2,13de8 <_gp+0xffff35b4>
    {
      *to++ = *from++;
    }
  }
}
   13e14:	0001883a 	nop
   13e18:	e037883a 	mov	sp,fp
   13e1c:	df000017 	ldw	fp,0(sp)
   13e20:	dec00104 	addi	sp,sp,4
   13e24:	f800283a 	ret

00013e28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13e28:	defffe04 	addi	sp,sp,-8
   13e2c:	dfc00115 	stw	ra,4(sp)
   13e30:	df000015 	stw	fp,0(sp)
   13e34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13e38:	018000b4 	movhi	r6,2
   13e3c:	31a21b04 	addi	r6,r6,-30612
   13e40:	01400074 	movhi	r5,1
   13e44:	295b5c04 	addi	r5,r5,28016
   13e48:	010000b4 	movhi	r4,2
   13e4c:	21221b04 	addi	r4,r4,-30612
   13e50:	0013dc00 	call	13dc0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13e54:	01800074 	movhi	r6,1
   13e58:	31808d04 	addi	r6,r6,564
   13e5c:	01400074 	movhi	r5,1
   13e60:	29400804 	addi	r5,r5,32
   13e64:	01000074 	movhi	r4,1
   13e68:	21000804 	addi	r4,r4,32
   13e6c:	0013dc00 	call	13dc0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13e70:	01800074 	movhi	r6,1
   13e74:	319b5c04 	addi	r6,r6,28016
   13e78:	01400074 	movhi	r5,1
   13e7c:	295ac104 	addi	r5,r5,27396
   13e80:	01000074 	movhi	r4,1
   13e84:	211ac104 	addi	r4,r4,27396
   13e88:	0013dc00 	call	13dc0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13e8c:	0015b5c0 	call	15b5c <alt_dcache_flush_all>
  alt_icache_flush_all();
   13e90:	0015f780 	call	15f78 <alt_icache_flush_all>
}
   13e94:	0001883a 	nop
   13e98:	e037883a 	mov	sp,fp
   13e9c:	dfc00117 	ldw	ra,4(sp)
   13ea0:	df000017 	ldw	fp,0(sp)
   13ea4:	dec00204 	addi	sp,sp,8
   13ea8:	f800283a 	ret

00013eac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13eac:	defffe04 	addi	sp,sp,-8
   13eb0:	dfc00115 	stw	ra,4(sp)
   13eb4:	df000015 	stw	fp,0(sp)
   13eb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13ebc:	d0a00917 	ldw	r2,-32732(gp)
   13ec0:	10000326 	beq	r2,zero,13ed0 <alt_get_errno+0x24>
   13ec4:	d0a00917 	ldw	r2,-32732(gp)
   13ec8:	103ee83a 	callr	r2
   13ecc:	00000106 	br	13ed4 <alt_get_errno+0x28>
   13ed0:	d0a6d204 	addi	r2,gp,-25784
}
   13ed4:	e037883a 	mov	sp,fp
   13ed8:	dfc00117 	ldw	ra,4(sp)
   13edc:	df000017 	ldw	fp,0(sp)
   13ee0:	dec00204 	addi	sp,sp,8
   13ee4:	f800283a 	ret

00013ee8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13ee8:	defff904 	addi	sp,sp,-28
   13eec:	dfc00615 	stw	ra,24(sp)
   13ef0:	df000515 	stw	fp,20(sp)
   13ef4:	df000504 	addi	fp,sp,20
   13ef8:	e13ffd15 	stw	r4,-12(fp)
   13efc:	e17ffe15 	stw	r5,-8(fp)
   13f00:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13f04:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13f08:	e0bffd17 	ldw	r2,-12(fp)
   13f0c:	10000816 	blt	r2,zero,13f30 <lseek+0x48>
   13f10:	01400304 	movi	r5,12
   13f14:	e13ffd17 	ldw	r4,-12(fp)
   13f18:	0010b900 	call	10b90 <__mulsi3>
   13f1c:	1007883a 	mov	r3,r2
   13f20:	00800074 	movhi	r2,1
   13f24:	109d8a04 	addi	r2,r2,30248
   13f28:	1885883a 	add	r2,r3,r2
   13f2c:	00000106 	br	13f34 <lseek+0x4c>
   13f30:	0005883a 	mov	r2,zero
   13f34:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13f38:	e0bffc17 	ldw	r2,-16(fp)
   13f3c:	10001026 	beq	r2,zero,13f80 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13f40:	e0bffc17 	ldw	r2,-16(fp)
   13f44:	10800017 	ldw	r2,0(r2)
   13f48:	10800717 	ldw	r2,28(r2)
   13f4c:	10000926 	beq	r2,zero,13f74 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13f50:	e0bffc17 	ldw	r2,-16(fp)
   13f54:	10800017 	ldw	r2,0(r2)
   13f58:	10800717 	ldw	r2,28(r2)
   13f5c:	e1bfff17 	ldw	r6,-4(fp)
   13f60:	e17ffe17 	ldw	r5,-8(fp)
   13f64:	e13ffc17 	ldw	r4,-16(fp)
   13f68:	103ee83a 	callr	r2
   13f6c:	e0bffb15 	stw	r2,-20(fp)
   13f70:	00000506 	br	13f88 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13f74:	00bfde84 	movi	r2,-134
   13f78:	e0bffb15 	stw	r2,-20(fp)
   13f7c:	00000206 	br	13f88 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   13f80:	00bfebc4 	movi	r2,-81
   13f84:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13f88:	e0bffb17 	ldw	r2,-20(fp)
   13f8c:	1000070e 	bge	r2,zero,13fac <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   13f90:	0013eac0 	call	13eac <alt_get_errno>
   13f94:	1007883a 	mov	r3,r2
   13f98:	e0bffb17 	ldw	r2,-20(fp)
   13f9c:	0085c83a 	sub	r2,zero,r2
   13fa0:	18800015 	stw	r2,0(r3)
    rc = -1;
   13fa4:	00bfffc4 	movi	r2,-1
   13fa8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13fac:	e0bffb17 	ldw	r2,-20(fp)
}
   13fb0:	e037883a 	mov	sp,fp
   13fb4:	dfc00117 	ldw	ra,4(sp)
   13fb8:	df000017 	ldw	fp,0(sp)
   13fbc:	dec00204 	addi	sp,sp,8
   13fc0:	f800283a 	ret

00013fc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13fc4:	defffd04 	addi	sp,sp,-12
   13fc8:	dfc00215 	stw	ra,8(sp)
   13fcc:	df000115 	stw	fp,4(sp)
   13fd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13fd4:	0009883a 	mov	r4,zero
   13fd8:	00149580 	call	14958 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13fdc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13fe0:	00149900 	call	14990 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13fe4:	01800074 	movhi	r6,1
   13fe8:	319b4e04 	addi	r6,r6,27960
   13fec:	01400074 	movhi	r5,1
   13ff0:	295b4e04 	addi	r5,r5,27960
   13ff4:	01000074 	movhi	r4,1
   13ff8:	211b4e04 	addi	r4,r4,27960
   13ffc:	001607c0 	call	1607c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14000:	0015c5c0 	call	15c5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14004:	01000074 	movhi	r4,1
   14008:	21172f04 	addi	r4,r4,23740
   1400c:	001635c0 	call	1635c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14010:	d0a6d717 	ldw	r2,-25764(gp)
   14014:	d0e6d817 	ldw	r3,-25760(gp)
   14018:	d126d917 	ldw	r4,-25756(gp)
   1401c:	200d883a 	mov	r6,r4
   14020:	180b883a 	mov	r5,r3
   14024:	1009883a 	mov	r4,r2
   14028:	0010a2c0 	call	10a2c <main>
   1402c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14030:	01000044 	movi	r4,1
   14034:	00139600 	call	13960 <close>
  exit (result);
   14038:	e13fff17 	ldw	r4,-4(fp)
   1403c:	00163700 	call	16370 <exit>

00014040 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14040:	defffe04 	addi	sp,sp,-8
   14044:	df000115 	stw	fp,4(sp)
   14048:	df000104 	addi	fp,sp,4
   1404c:	e13fff15 	stw	r4,-4(fp)
}
   14050:	0001883a 	nop
   14054:	e037883a 	mov	sp,fp
   14058:	df000017 	ldw	fp,0(sp)
   1405c:	dec00104 	addi	sp,sp,4
   14060:	f800283a 	ret

00014064 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14064:	defffe04 	addi	sp,sp,-8
   14068:	df000115 	stw	fp,4(sp)
   1406c:	df000104 	addi	fp,sp,4
   14070:	e13fff15 	stw	r4,-4(fp)
}
   14074:	0001883a 	nop
   14078:	e037883a 	mov	sp,fp
   1407c:	df000017 	ldw	fp,0(sp)
   14080:	dec00104 	addi	sp,sp,4
   14084:	f800283a 	ret

00014088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14088:	defffe04 	addi	sp,sp,-8
   1408c:	dfc00115 	stw	ra,4(sp)
   14090:	df000015 	stw	fp,0(sp)
   14094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14098:	d0a00917 	ldw	r2,-32732(gp)
   1409c:	10000326 	beq	r2,zero,140ac <alt_get_errno+0x24>
   140a0:	d0a00917 	ldw	r2,-32732(gp)
   140a4:	103ee83a 	callr	r2
   140a8:	00000106 	br	140b0 <alt_get_errno+0x28>
   140ac:	d0a6d204 	addi	r2,gp,-25784
}
   140b0:	e037883a 	mov	sp,fp
   140b4:	dfc00117 	ldw	ra,4(sp)
   140b8:	df000017 	ldw	fp,0(sp)
   140bc:	dec00204 	addi	sp,sp,8
   140c0:	f800283a 	ret

000140c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   140c4:	defffb04 	addi	sp,sp,-20
   140c8:	dfc00415 	stw	ra,16(sp)
   140cc:	df000315 	stw	fp,12(sp)
   140d0:	dc000215 	stw	r16,8(sp)
   140d4:	df000304 	addi	fp,sp,12
   140d8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   140dc:	e0bffe17 	ldw	r2,-8(fp)
   140e0:	10800217 	ldw	r2,8(r2)
   140e4:	10d00034 	orhi	r3,r2,16384
   140e8:	e0bffe17 	ldw	r2,-8(fp)
   140ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   140f0:	e03ffd15 	stw	zero,-12(fp)
   140f4:	00002306 	br	14184 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   140f8:	04000074 	movhi	r16,1
   140fc:	841d8a04 	addi	r16,r16,30248
   14100:	e0bffd17 	ldw	r2,-12(fp)
   14104:	01400304 	movi	r5,12
   14108:	1009883a 	mov	r4,r2
   1410c:	0010b900 	call	10b90 <__mulsi3>
   14110:	8085883a 	add	r2,r16,r2
   14114:	10c00017 	ldw	r3,0(r2)
   14118:	e0bffe17 	ldw	r2,-8(fp)
   1411c:	10800017 	ldw	r2,0(r2)
   14120:	1880151e 	bne	r3,r2,14178 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14124:	04000074 	movhi	r16,1
   14128:	841d8a04 	addi	r16,r16,30248
   1412c:	e0bffd17 	ldw	r2,-12(fp)
   14130:	01400304 	movi	r5,12
   14134:	1009883a 	mov	r4,r2
   14138:	0010b900 	call	10b90 <__mulsi3>
   1413c:	8085883a 	add	r2,r16,r2
   14140:	10800204 	addi	r2,r2,8
   14144:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14148:	10000b0e 	bge	r2,zero,14178 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1414c:	01400304 	movi	r5,12
   14150:	e13ffd17 	ldw	r4,-12(fp)
   14154:	0010b900 	call	10b90 <__mulsi3>
   14158:	1007883a 	mov	r3,r2
   1415c:	00800074 	movhi	r2,1
   14160:	109d8a04 	addi	r2,r2,30248
   14164:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14168:	e0bffe17 	ldw	r2,-8(fp)
   1416c:	18800226 	beq	r3,r2,14178 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14170:	00bffcc4 	movi	r2,-13
   14174:	00000806 	br	14198 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14178:	e0bffd17 	ldw	r2,-12(fp)
   1417c:	10800044 	addi	r2,r2,1
   14180:	e0bffd15 	stw	r2,-12(fp)
   14184:	d0a00817 	ldw	r2,-32736(gp)
   14188:	1007883a 	mov	r3,r2
   1418c:	e0bffd17 	ldw	r2,-12(fp)
   14190:	18bfd92e 	bgeu	r3,r2,140f8 <_gp+0xffff38c4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14194:	0005883a 	mov	r2,zero
}
   14198:	e6ffff04 	addi	sp,fp,-4
   1419c:	dfc00217 	ldw	ra,8(sp)
   141a0:	df000117 	ldw	fp,4(sp)
   141a4:	dc000017 	ldw	r16,0(sp)
   141a8:	dec00304 	addi	sp,sp,12
   141ac:	f800283a 	ret

000141b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   141b0:	defff604 	addi	sp,sp,-40
   141b4:	dfc00915 	stw	ra,36(sp)
   141b8:	df000815 	stw	fp,32(sp)
   141bc:	df000804 	addi	fp,sp,32
   141c0:	e13ffd15 	stw	r4,-12(fp)
   141c4:	e17ffe15 	stw	r5,-8(fp)
   141c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   141cc:	00bfffc4 	movi	r2,-1
   141d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   141d4:	00bffb44 	movi	r2,-19
   141d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   141dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   141e0:	d1600604 	addi	r5,gp,-32744
   141e4:	e13ffd17 	ldw	r4,-12(fp)
   141e8:	0015d1c0 	call	15d1c <alt_find_dev>
   141ec:	e0bff815 	stw	r2,-32(fp)
   141f0:	e0bff817 	ldw	r2,-32(fp)
   141f4:	1000051e 	bne	r2,zero,1420c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   141f8:	e13ffd17 	ldw	r4,-12(fp)
   141fc:	0015dac0 	call	15dac <alt_find_file>
   14200:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14204:	00800044 	movi	r2,1
   14208:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1420c:	e0bff817 	ldw	r2,-32(fp)
   14210:	10002b26 	beq	r2,zero,142c0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14214:	e13ff817 	ldw	r4,-32(fp)
   14218:	0015eb40 	call	15eb4 <alt_get_fd>
   1421c:	e0bff915 	stw	r2,-28(fp)
   14220:	e0bff917 	ldw	r2,-28(fp)
   14224:	1000030e 	bge	r2,zero,14234 <open+0x84>
    {
      status = index;
   14228:	e0bff917 	ldw	r2,-28(fp)
   1422c:	e0bffa15 	stw	r2,-24(fp)
   14230:	00002506 	br	142c8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   14234:	01400304 	movi	r5,12
   14238:	e13ff917 	ldw	r4,-28(fp)
   1423c:	0010b900 	call	10b90 <__mulsi3>
   14240:	1007883a 	mov	r3,r2
   14244:	00800074 	movhi	r2,1
   14248:	109d8a04 	addi	r2,r2,30248
   1424c:	1885883a 	add	r2,r3,r2
   14250:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14254:	e0fffe17 	ldw	r3,-8(fp)
   14258:	00900034 	movhi	r2,16384
   1425c:	10bfffc4 	addi	r2,r2,-1
   14260:	1886703a 	and	r3,r3,r2
   14264:	e0bffc17 	ldw	r2,-16(fp)
   14268:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1426c:	e0bffb17 	ldw	r2,-20(fp)
   14270:	1000051e 	bne	r2,zero,14288 <open+0xd8>
   14274:	e13ffc17 	ldw	r4,-16(fp)
   14278:	00140c40 	call	140c4 <alt_file_locked>
   1427c:	e0bffa15 	stw	r2,-24(fp)
   14280:	e0bffa17 	ldw	r2,-24(fp)
   14284:	10001016 	blt	r2,zero,142c8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14288:	e0bff817 	ldw	r2,-32(fp)
   1428c:	10800317 	ldw	r2,12(r2)
   14290:	10000826 	beq	r2,zero,142b4 <open+0x104>
   14294:	e0bff817 	ldw	r2,-32(fp)
   14298:	10800317 	ldw	r2,12(r2)
   1429c:	e1ffff17 	ldw	r7,-4(fp)
   142a0:	e1bffe17 	ldw	r6,-8(fp)
   142a4:	e17ffd17 	ldw	r5,-12(fp)
   142a8:	e13ffc17 	ldw	r4,-16(fp)
   142ac:	103ee83a 	callr	r2
   142b0:	00000106 	br	142b8 <open+0x108>
   142b4:	0005883a 	mov	r2,zero
   142b8:	e0bffa15 	stw	r2,-24(fp)
   142bc:	00000206 	br	142c8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   142c0:	00bffb44 	movi	r2,-19
   142c4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   142c8:	e0bffa17 	ldw	r2,-24(fp)
   142cc:	1000090e 	bge	r2,zero,142f4 <open+0x144>
  {
    alt_release_fd (index);  
   142d0:	e13ff917 	ldw	r4,-28(fp)
   142d4:	00146b40 	call	146b4 <alt_release_fd>
    ALT_ERRNO = -status;
   142d8:	00140880 	call	14088 <alt_get_errno>
   142dc:	1007883a 	mov	r3,r2
   142e0:	e0bffa17 	ldw	r2,-24(fp)
   142e4:	0085c83a 	sub	r2,zero,r2
   142e8:	18800015 	stw	r2,0(r3)
    return -1;
   142ec:	00bfffc4 	movi	r2,-1
   142f0:	00000106 	br	142f8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   142f4:	e0bff917 	ldw	r2,-28(fp)
}
   142f8:	e037883a 	mov	sp,fp
   142fc:	dfc00117 	ldw	ra,4(sp)
   14300:	df000017 	ldw	fp,0(sp)
   14304:	dec00204 	addi	sp,sp,8
   14308:	f800283a 	ret

0001430c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1430c:	defff204 	addi	sp,sp,-56
   14310:	dfc00a15 	stw	ra,40(sp)
   14314:	df000915 	stw	fp,36(sp)
   14318:	df000904 	addi	fp,sp,36
   1431c:	e13fff15 	stw	r4,-4(fp)
   14320:	e1400215 	stw	r5,8(fp)
   14324:	e1800315 	stw	r6,12(fp)
   14328:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   1432c:	e0800204 	addi	r2,fp,8
   14330:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   14334:	e0bfff17 	ldw	r2,-4(fp)
   14338:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   1433c:	00006f06 	br	144fc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   14340:	e0bff807 	ldb	r2,-32(fp)
   14344:	10800960 	cmpeqi	r2,r2,37
   14348:	1000041e 	bne	r2,zero,1435c <alt_printf+0x50>
        {
            alt_putchar(c);
   1434c:	e0bff807 	ldb	r2,-32(fp)
   14350:	1009883a 	mov	r4,r2
   14354:	00145380 	call	14538 <alt_putchar>
   14358:	00006806 	br	144fc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   1435c:	e0bff717 	ldw	r2,-36(fp)
   14360:	10c00044 	addi	r3,r2,1
   14364:	e0fff715 	stw	r3,-36(fp)
   14368:	10800003 	ldbu	r2,0(r2)
   1436c:	e0bff805 	stb	r2,-32(fp)
   14370:	e0bff807 	ldb	r2,-32(fp)
   14374:	10006926 	beq	r2,zero,1451c <alt_printf+0x210>
            {
                if (c == '%')
   14378:	e0bff807 	ldb	r2,-32(fp)
   1437c:	10800958 	cmpnei	r2,r2,37
   14380:	1000041e 	bne	r2,zero,14394 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   14384:	e0bff807 	ldb	r2,-32(fp)
   14388:	1009883a 	mov	r4,r2
   1438c:	00145380 	call	14538 <alt_putchar>
   14390:	00005a06 	br	144fc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   14394:	e0bff807 	ldb	r2,-32(fp)
   14398:	108018d8 	cmpnei	r2,r2,99
   1439c:	1000081e 	bne	r2,zero,143c0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   143a0:	e0bffe17 	ldw	r2,-8(fp)
   143a4:	10c00104 	addi	r3,r2,4
   143a8:	e0fffe15 	stw	r3,-8(fp)
   143ac:	10800017 	ldw	r2,0(r2)
   143b0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   143b4:	e13ffd17 	ldw	r4,-12(fp)
   143b8:	00145380 	call	14538 <alt_putchar>
   143bc:	00004f06 	br	144fc <alt_printf+0x1f0>
                }
                else if (c == 'x')
   143c0:	e0bff807 	ldb	r2,-32(fp)
   143c4:	10801e18 	cmpnei	r2,r2,120
   143c8:	1000341e 	bne	r2,zero,1449c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   143cc:	e0bffe17 	ldw	r2,-8(fp)
   143d0:	10c00104 	addi	r3,r2,4
   143d4:	e0fffe15 	stw	r3,-8(fp)
   143d8:	10800017 	ldw	r2,0(r2)
   143dc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   143e0:	e0bffb17 	ldw	r2,-20(fp)
   143e4:	1000031e 	bne	r2,zero,143f4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   143e8:	01000c04 	movi	r4,48
   143ec:	00145380 	call	14538 <alt_putchar>
                        continue;
   143f0:	00004206 	br	144fc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   143f4:	00800704 	movi	r2,28
   143f8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   143fc:	00000306 	br	1440c <alt_printf+0x100>
                        digit_shift -= 4;
   14400:	e0bff917 	ldw	r2,-28(fp)
   14404:	10bfff04 	addi	r2,r2,-4
   14408:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1440c:	00c003c4 	movi	r3,15
   14410:	e0bff917 	ldw	r2,-28(fp)
   14414:	1884983a 	sll	r2,r3,r2
   14418:	1007883a 	mov	r3,r2
   1441c:	e0bffb17 	ldw	r2,-20(fp)
   14420:	1884703a 	and	r2,r3,r2
   14424:	103ff626 	beq	r2,zero,14400 <_gp+0xffff3bcc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   14428:	00001906 	br	14490 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1442c:	00c003c4 	movi	r3,15
   14430:	e0bff917 	ldw	r2,-28(fp)
   14434:	1884983a 	sll	r2,r3,r2
   14438:	1007883a 	mov	r3,r2
   1443c:	e0bffb17 	ldw	r2,-20(fp)
   14440:	1886703a 	and	r3,r3,r2
   14444:	e0bff917 	ldw	r2,-28(fp)
   14448:	1884d83a 	srl	r2,r3,r2
   1444c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   14450:	e0bffc17 	ldw	r2,-16(fp)
   14454:	108002a8 	cmpgeui	r2,r2,10
   14458:	1000041e 	bne	r2,zero,1446c <alt_printf+0x160>
                            c = '0' + digit;
   1445c:	e0bffc17 	ldw	r2,-16(fp)
   14460:	10800c04 	addi	r2,r2,48
   14464:	e0bff805 	stb	r2,-32(fp)
   14468:	00000306 	br	14478 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   1446c:	e0bffc17 	ldw	r2,-16(fp)
   14470:	108015c4 	addi	r2,r2,87
   14474:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   14478:	e0bff807 	ldb	r2,-32(fp)
   1447c:	1009883a 	mov	r4,r2
   14480:	00145380 	call	14538 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   14484:	e0bff917 	ldw	r2,-28(fp)
   14488:	10bfff04 	addi	r2,r2,-4
   1448c:	e0bff915 	stw	r2,-28(fp)
   14490:	e0bff917 	ldw	r2,-28(fp)
   14494:	103fe50e 	bge	r2,zero,1442c <_gp+0xffff3bf8>
   14498:	00001806 	br	144fc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   1449c:	e0bff807 	ldb	r2,-32(fp)
   144a0:	10801cd8 	cmpnei	r2,r2,115
   144a4:	1000151e 	bne	r2,zero,144fc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   144a8:	e0bffe17 	ldw	r2,-8(fp)
   144ac:	10c00104 	addi	r3,r2,4
   144b0:	e0fffe15 	stw	r3,-8(fp)
   144b4:	10800017 	ldw	r2,0(r2)
   144b8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   144bc:	00000906 	br	144e4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   144c0:	e0bffa17 	ldw	r2,-24(fp)
   144c4:	10c00044 	addi	r3,r2,1
   144c8:	e0fffa15 	stw	r3,-24(fp)
   144cc:	10800003 	ldbu	r2,0(r2)
   144d0:	10803fcc 	andi	r2,r2,255
   144d4:	1080201c 	xori	r2,r2,128
   144d8:	10bfe004 	addi	r2,r2,-128
   144dc:	1009883a 	mov	r4,r2
   144e0:	00145380 	call	14538 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   144e4:	e0bffa17 	ldw	r2,-24(fp)
   144e8:	10800003 	ldbu	r2,0(r2)
   144ec:	10803fcc 	andi	r2,r2,255
   144f0:	1080201c 	xori	r2,r2,128
   144f4:	10bfe004 	addi	r2,r2,-128
   144f8:	103ff11e 	bne	r2,zero,144c0 <_gp+0xffff3c8c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   144fc:	e0bff717 	ldw	r2,-36(fp)
   14500:	10c00044 	addi	r3,r2,1
   14504:	e0fff715 	stw	r3,-36(fp)
   14508:	10800003 	ldbu	r2,0(r2)
   1450c:	e0bff805 	stb	r2,-32(fp)
   14510:	e0bff807 	ldb	r2,-32(fp)
   14514:	103f8a1e 	bne	r2,zero,14340 <_gp+0xffff3b0c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   14518:	00000106 	br	14520 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   1451c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   14520:	0001883a 	nop
   14524:	e037883a 	mov	sp,fp
   14528:	dfc00117 	ldw	ra,4(sp)
   1452c:	df000017 	ldw	fp,0(sp)
   14530:	dec00504 	addi	sp,sp,20
   14534:	f800283a 	ret

00014538 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   14538:	defffd04 	addi	sp,sp,-12
   1453c:	dfc00215 	stw	ra,8(sp)
   14540:	df000115 	stw	fp,4(sp)
   14544:	df000104 	addi	fp,sp,4
   14548:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   1454c:	d0a00117 	ldw	r2,-32764(gp)
   14550:	10800217 	ldw	r2,8(r2)
   14554:	100b883a 	mov	r5,r2
   14558:	e13fff17 	ldw	r4,-4(fp)
   1455c:	00164c40 	call	164c4 <putc>
#endif
#endif
}
   14560:	e037883a 	mov	sp,fp
   14564:	dfc00117 	ldw	ra,4(sp)
   14568:	df000017 	ldw	fp,0(sp)
   1456c:	dec00204 	addi	sp,sp,8
   14570:	f800283a 	ret

00014574 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14574:	defffe04 	addi	sp,sp,-8
   14578:	dfc00115 	stw	ra,4(sp)
   1457c:	df000015 	stw	fp,0(sp)
   14580:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14584:	d0a00917 	ldw	r2,-32732(gp)
   14588:	10000326 	beq	r2,zero,14598 <alt_get_errno+0x24>
   1458c:	d0a00917 	ldw	r2,-32732(gp)
   14590:	103ee83a 	callr	r2
   14594:	00000106 	br	1459c <alt_get_errno+0x28>
   14598:	d0a6d204 	addi	r2,gp,-25784
}
   1459c:	e037883a 	mov	sp,fp
   145a0:	dfc00117 	ldw	ra,4(sp)
   145a4:	df000017 	ldw	fp,0(sp)
   145a8:	dec00204 	addi	sp,sp,8
   145ac:	f800283a 	ret

000145b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   145b0:	defff904 	addi	sp,sp,-28
   145b4:	dfc00615 	stw	ra,24(sp)
   145b8:	df000515 	stw	fp,20(sp)
   145bc:	df000504 	addi	fp,sp,20
   145c0:	e13ffd15 	stw	r4,-12(fp)
   145c4:	e17ffe15 	stw	r5,-8(fp)
   145c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   145cc:	e0bffd17 	ldw	r2,-12(fp)
   145d0:	10000816 	blt	r2,zero,145f4 <read+0x44>
   145d4:	01400304 	movi	r5,12
   145d8:	e13ffd17 	ldw	r4,-12(fp)
   145dc:	0010b900 	call	10b90 <__mulsi3>
   145e0:	1007883a 	mov	r3,r2
   145e4:	00800074 	movhi	r2,1
   145e8:	109d8a04 	addi	r2,r2,30248
   145ec:	1885883a 	add	r2,r3,r2
   145f0:	00000106 	br	145f8 <read+0x48>
   145f4:	0005883a 	mov	r2,zero
   145f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   145fc:	e0bffb17 	ldw	r2,-20(fp)
   14600:	10002226 	beq	r2,zero,1468c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14604:	e0bffb17 	ldw	r2,-20(fp)
   14608:	10800217 	ldw	r2,8(r2)
   1460c:	108000cc 	andi	r2,r2,3
   14610:	10800060 	cmpeqi	r2,r2,1
   14614:	1000181e 	bne	r2,zero,14678 <read+0xc8>
        (fd->dev->read))
   14618:	e0bffb17 	ldw	r2,-20(fp)
   1461c:	10800017 	ldw	r2,0(r2)
   14620:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14624:	10001426 	beq	r2,zero,14678 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14628:	e0bffb17 	ldw	r2,-20(fp)
   1462c:	10800017 	ldw	r2,0(r2)
   14630:	10800517 	ldw	r2,20(r2)
   14634:	e0ffff17 	ldw	r3,-4(fp)
   14638:	180d883a 	mov	r6,r3
   1463c:	e17ffe17 	ldw	r5,-8(fp)
   14640:	e13ffb17 	ldw	r4,-20(fp)
   14644:	103ee83a 	callr	r2
   14648:	e0bffc15 	stw	r2,-16(fp)
   1464c:	e0bffc17 	ldw	r2,-16(fp)
   14650:	1000070e 	bge	r2,zero,14670 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   14654:	00145740 	call	14574 <alt_get_errno>
   14658:	1007883a 	mov	r3,r2
   1465c:	e0bffc17 	ldw	r2,-16(fp)
   14660:	0085c83a 	sub	r2,zero,r2
   14664:	18800015 	stw	r2,0(r3)
          return -1;
   14668:	00bfffc4 	movi	r2,-1
   1466c:	00000c06 	br	146a0 <read+0xf0>
        }
        return rval;
   14670:	e0bffc17 	ldw	r2,-16(fp)
   14674:	00000a06 	br	146a0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14678:	00145740 	call	14574 <alt_get_errno>
   1467c:	1007883a 	mov	r3,r2
   14680:	00800344 	movi	r2,13
   14684:	18800015 	stw	r2,0(r3)
   14688:	00000406 	br	1469c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1468c:	00145740 	call	14574 <alt_get_errno>
   14690:	1007883a 	mov	r3,r2
   14694:	00801444 	movi	r2,81
   14698:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1469c:	00bfffc4 	movi	r2,-1
}
   146a0:	e037883a 	mov	sp,fp
   146a4:	dfc00117 	ldw	ra,4(sp)
   146a8:	df000017 	ldw	fp,0(sp)
   146ac:	dec00204 	addi	sp,sp,8
   146b0:	f800283a 	ret

000146b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   146b4:	defffc04 	addi	sp,sp,-16
   146b8:	dfc00315 	stw	ra,12(sp)
   146bc:	df000215 	stw	fp,8(sp)
   146c0:	dc000115 	stw	r16,4(sp)
   146c4:	df000204 	addi	fp,sp,8
   146c8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   146cc:	e0bffe17 	ldw	r2,-8(fp)
   146d0:	108000d0 	cmplti	r2,r2,3
   146d4:	1000111e 	bne	r2,zero,1471c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   146d8:	04000074 	movhi	r16,1
   146dc:	841d8a04 	addi	r16,r16,30248
   146e0:	e0bffe17 	ldw	r2,-8(fp)
   146e4:	01400304 	movi	r5,12
   146e8:	1009883a 	mov	r4,r2
   146ec:	0010b900 	call	10b90 <__mulsi3>
   146f0:	8085883a 	add	r2,r16,r2
   146f4:	10800204 	addi	r2,r2,8
   146f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   146fc:	04000074 	movhi	r16,1
   14700:	841d8a04 	addi	r16,r16,30248
   14704:	e0bffe17 	ldw	r2,-8(fp)
   14708:	01400304 	movi	r5,12
   1470c:	1009883a 	mov	r4,r2
   14710:	0010b900 	call	10b90 <__mulsi3>
   14714:	8085883a 	add	r2,r16,r2
   14718:	10000015 	stw	zero,0(r2)
  }
}
   1471c:	0001883a 	nop
   14720:	e6ffff04 	addi	sp,fp,-4
   14724:	dfc00217 	ldw	ra,8(sp)
   14728:	df000117 	ldw	fp,4(sp)
   1472c:	dc000017 	ldw	r16,0(sp)
   14730:	dec00304 	addi	sp,sp,12
   14734:	f800283a 	ret

00014738 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14738:	defff904 	addi	sp,sp,-28
   1473c:	df000615 	stw	fp,24(sp)
   14740:	df000604 	addi	fp,sp,24
   14744:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14748:	0005303a 	rdctl	r2,status
   1474c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14750:	e0fffe17 	ldw	r3,-8(fp)
   14754:	00bfff84 	movi	r2,-2
   14758:	1884703a 	and	r2,r3,r2
   1475c:	1001703a 	wrctl	status,r2
  
  return context;
   14760:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14764:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14768:	d0a00b17 	ldw	r2,-32724(gp)
   1476c:	10c000c4 	addi	r3,r2,3
   14770:	00bfff04 	movi	r2,-4
   14774:	1884703a 	and	r2,r3,r2
   14778:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1477c:	d0e00b17 	ldw	r3,-32724(gp)
   14780:	e0bfff17 	ldw	r2,-4(fp)
   14784:	1887883a 	add	r3,r3,r2
   14788:	008000b4 	movhi	r2,2
   1478c:	10800004 	addi	r2,r2,0
   14790:	10c0062e 	bgeu	r2,r3,147ac <sbrk+0x74>
   14794:	e0bffb17 	ldw	r2,-20(fp)
   14798:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1479c:	e0bffa17 	ldw	r2,-24(fp)
   147a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   147a4:	00bfffc4 	movi	r2,-1
   147a8:	00000b06 	br	147d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   147ac:	d0a00b17 	ldw	r2,-32724(gp)
   147b0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   147b4:	d0e00b17 	ldw	r3,-32724(gp)
   147b8:	e0bfff17 	ldw	r2,-4(fp)
   147bc:	1885883a 	add	r2,r3,r2
   147c0:	d0a00b15 	stw	r2,-32724(gp)
   147c4:	e0bffb17 	ldw	r2,-20(fp)
   147c8:	e0bffc15 	stw	r2,-16(fp)
   147cc:	e0bffc17 	ldw	r2,-16(fp)
   147d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   147d4:	e0bffd17 	ldw	r2,-12(fp)
} 
   147d8:	e037883a 	mov	sp,fp
   147dc:	df000017 	ldw	fp,0(sp)
   147e0:	dec00104 	addi	sp,sp,4
   147e4:	f800283a 	ret

000147e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   147e8:	defffe04 	addi	sp,sp,-8
   147ec:	dfc00115 	stw	ra,4(sp)
   147f0:	df000015 	stw	fp,0(sp)
   147f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   147f8:	d0a00917 	ldw	r2,-32732(gp)
   147fc:	10000326 	beq	r2,zero,1480c <alt_get_errno+0x24>
   14800:	d0a00917 	ldw	r2,-32732(gp)
   14804:	103ee83a 	callr	r2
   14808:	00000106 	br	14810 <alt_get_errno+0x28>
   1480c:	d0a6d204 	addi	r2,gp,-25784
}
   14810:	e037883a 	mov	sp,fp
   14814:	dfc00117 	ldw	ra,4(sp)
   14818:	df000017 	ldw	fp,0(sp)
   1481c:	dec00204 	addi	sp,sp,8
   14820:	f800283a 	ret

00014824 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14824:	defff904 	addi	sp,sp,-28
   14828:	dfc00615 	stw	ra,24(sp)
   1482c:	df000515 	stw	fp,20(sp)
   14830:	df000504 	addi	fp,sp,20
   14834:	e13ffd15 	stw	r4,-12(fp)
   14838:	e17ffe15 	stw	r5,-8(fp)
   1483c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14840:	e0bffd17 	ldw	r2,-12(fp)
   14844:	10000816 	blt	r2,zero,14868 <write+0x44>
   14848:	01400304 	movi	r5,12
   1484c:	e13ffd17 	ldw	r4,-12(fp)
   14850:	0010b900 	call	10b90 <__mulsi3>
   14854:	1007883a 	mov	r3,r2
   14858:	00800074 	movhi	r2,1
   1485c:	109d8a04 	addi	r2,r2,30248
   14860:	1885883a 	add	r2,r3,r2
   14864:	00000106 	br	1486c <write+0x48>
   14868:	0005883a 	mov	r2,zero
   1486c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14870:	e0bffb17 	ldw	r2,-20(fp)
   14874:	10002126 	beq	r2,zero,148fc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14878:	e0bffb17 	ldw	r2,-20(fp)
   1487c:	10800217 	ldw	r2,8(r2)
   14880:	108000cc 	andi	r2,r2,3
   14884:	10001826 	beq	r2,zero,148e8 <write+0xc4>
   14888:	e0bffb17 	ldw	r2,-20(fp)
   1488c:	10800017 	ldw	r2,0(r2)
   14890:	10800617 	ldw	r2,24(r2)
   14894:	10001426 	beq	r2,zero,148e8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14898:	e0bffb17 	ldw	r2,-20(fp)
   1489c:	10800017 	ldw	r2,0(r2)
   148a0:	10800617 	ldw	r2,24(r2)
   148a4:	e0ffff17 	ldw	r3,-4(fp)
   148a8:	180d883a 	mov	r6,r3
   148ac:	e17ffe17 	ldw	r5,-8(fp)
   148b0:	e13ffb17 	ldw	r4,-20(fp)
   148b4:	103ee83a 	callr	r2
   148b8:	e0bffc15 	stw	r2,-16(fp)
   148bc:	e0bffc17 	ldw	r2,-16(fp)
   148c0:	1000070e 	bge	r2,zero,148e0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   148c4:	00147e80 	call	147e8 <alt_get_errno>
   148c8:	1007883a 	mov	r3,r2
   148cc:	e0bffc17 	ldw	r2,-16(fp)
   148d0:	0085c83a 	sub	r2,zero,r2
   148d4:	18800015 	stw	r2,0(r3)
        return -1;
   148d8:	00bfffc4 	movi	r2,-1
   148dc:	00000c06 	br	14910 <write+0xec>
      }
      return rval;
   148e0:	e0bffc17 	ldw	r2,-16(fp)
   148e4:	00000a06 	br	14910 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   148e8:	00147e80 	call	147e8 <alt_get_errno>
   148ec:	1007883a 	mov	r3,r2
   148f0:	00800344 	movi	r2,13
   148f4:	18800015 	stw	r2,0(r3)
   148f8:	00000406 	br	1490c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   148fc:	00147e80 	call	147e8 <alt_get_errno>
   14900:	1007883a 	mov	r3,r2
   14904:	00801444 	movi	r2,81
   14908:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1490c:	00bfffc4 	movi	r2,-1
}
   14910:	e037883a 	mov	sp,fp
   14914:	dfc00117 	ldw	ra,4(sp)
   14918:	df000017 	ldw	fp,0(sp)
   1491c:	dec00204 	addi	sp,sp,8
   14920:	f800283a 	ret

00014924 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14924:	defffd04 	addi	sp,sp,-12
   14928:	dfc00215 	stw	ra,8(sp)
   1492c:	df000115 	stw	fp,4(sp)
   14930:	df000104 	addi	fp,sp,4
   14934:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14938:	d1600604 	addi	r5,gp,-32744
   1493c:	e13fff17 	ldw	r4,-4(fp)
   14940:	0015bb80 	call	15bb8 <alt_dev_llist_insert>
}
   14944:	e037883a 	mov	sp,fp
   14948:	dfc00117 	ldw	ra,4(sp)
   1494c:	df000017 	ldw	fp,0(sp)
   14950:	dec00204 	addi	sp,sp,8
   14954:	f800283a 	ret

00014958 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14958:	defffd04 	addi	sp,sp,-12
   1495c:	dfc00215 	stw	ra,8(sp)
   14960:	df000115 	stw	fp,4(sp)
   14964:	df000104 	addi	fp,sp,4
   14968:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   1496c:	001629c0 	call	1629c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14970:	00800044 	movi	r2,1
   14974:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14978:	0001883a 	nop
   1497c:	e037883a 	mov	sp,fp
   14980:	dfc00117 	ldw	ra,4(sp)
   14984:	df000017 	ldw	fp,0(sp)
   14988:	dec00204 	addi	sp,sp,8
   1498c:	f800283a 	ret

00014990 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14990:	defffe04 	addi	sp,sp,-8
   14994:	dfc00115 	stw	ra,4(sp)
   14998:	df000015 	stw	fp,0(sp)
   1499c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   149a0:	01d38804 	movi	r7,20000
   149a4:	01800084 	movi	r6,2
   149a8:	000b883a 	mov	r5,zero
   149ac:	010000b4 	movhi	r4,2
   149b0:	21040804 	addi	r4,r4,4128
   149b4:	00154f40 	call	154f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
   149b8:	008000b4 	movhi	r2,2
   149bc:	10840004 	addi	r2,r2,4096
   149c0:	d0a6da15 	stw	r2,-25752(gp)
   149c4:	0080bef4 	movhi	r2,763
   149c8:	10bc2004 	addi	r2,r2,-3968
   149cc:	d0a6db15 	stw	r2,-25748(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   149d0:	000d883a 	mov	r6,zero
   149d4:	000b883a 	mov	r5,zero
   149d8:	01000074 	movhi	r4,1
   149dc:	211df404 	addi	r4,r4,30672
   149e0:	0014b7c0 	call	14b7c <altera_avalon_jtag_uart_init>
   149e4:	01000074 	movhi	r4,1
   149e8:	211dea04 	addi	r4,r4,30632
   149ec:	00149240 	call	14924 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   149f0:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   149f4:	010000b4 	movhi	r4,2
   149f8:	21220204 	addi	r4,r4,-30712
   149fc:	00149240 	call	14924 <alt_dev_reg>
}
   14a00:	0001883a 	nop
   14a04:	e037883a 	mov	sp,fp
   14a08:	dfc00117 	ldw	ra,4(sp)
   14a0c:	df000017 	ldw	fp,0(sp)
   14a10:	dec00204 	addi	sp,sp,8
   14a14:	f800283a 	ret

00014a18 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14a18:	defffa04 	addi	sp,sp,-24
   14a1c:	dfc00515 	stw	ra,20(sp)
   14a20:	df000415 	stw	fp,16(sp)
   14a24:	df000404 	addi	fp,sp,16
   14a28:	e13ffd15 	stw	r4,-12(fp)
   14a2c:	e17ffe15 	stw	r5,-8(fp)
   14a30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14a34:	e0bffd17 	ldw	r2,-12(fp)
   14a38:	10800017 	ldw	r2,0(r2)
   14a3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14a40:	e0bffc17 	ldw	r2,-16(fp)
   14a44:	10c00a04 	addi	r3,r2,40
   14a48:	e0bffd17 	ldw	r2,-12(fp)
   14a4c:	10800217 	ldw	r2,8(r2)
   14a50:	100f883a 	mov	r7,r2
   14a54:	e1bfff17 	ldw	r6,-4(fp)
   14a58:	e17ffe17 	ldw	r5,-8(fp)
   14a5c:	1809883a 	mov	r4,r3
   14a60:	00150380 	call	15038 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14a64:	e037883a 	mov	sp,fp
   14a68:	dfc00117 	ldw	ra,4(sp)
   14a6c:	df000017 	ldw	fp,0(sp)
   14a70:	dec00204 	addi	sp,sp,8
   14a74:	f800283a 	ret

00014a78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14a78:	defffa04 	addi	sp,sp,-24
   14a7c:	dfc00515 	stw	ra,20(sp)
   14a80:	df000415 	stw	fp,16(sp)
   14a84:	df000404 	addi	fp,sp,16
   14a88:	e13ffd15 	stw	r4,-12(fp)
   14a8c:	e17ffe15 	stw	r5,-8(fp)
   14a90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14a94:	e0bffd17 	ldw	r2,-12(fp)
   14a98:	10800017 	ldw	r2,0(r2)
   14a9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14aa0:	e0bffc17 	ldw	r2,-16(fp)
   14aa4:	10c00a04 	addi	r3,r2,40
   14aa8:	e0bffd17 	ldw	r2,-12(fp)
   14aac:	10800217 	ldw	r2,8(r2)
   14ab0:	100f883a 	mov	r7,r2
   14ab4:	e1bfff17 	ldw	r6,-4(fp)
   14ab8:	e17ffe17 	ldw	r5,-8(fp)
   14abc:	1809883a 	mov	r4,r3
   14ac0:	00152540 	call	15254 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14ac4:	e037883a 	mov	sp,fp
   14ac8:	dfc00117 	ldw	ra,4(sp)
   14acc:	df000017 	ldw	fp,0(sp)
   14ad0:	dec00204 	addi	sp,sp,8
   14ad4:	f800283a 	ret

00014ad8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14ad8:	defffc04 	addi	sp,sp,-16
   14adc:	dfc00315 	stw	ra,12(sp)
   14ae0:	df000215 	stw	fp,8(sp)
   14ae4:	df000204 	addi	fp,sp,8
   14ae8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14aec:	e0bfff17 	ldw	r2,-4(fp)
   14af0:	10800017 	ldw	r2,0(r2)
   14af4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   14af8:	e0bffe17 	ldw	r2,-8(fp)
   14afc:	10c00a04 	addi	r3,r2,40
   14b00:	e0bfff17 	ldw	r2,-4(fp)
   14b04:	10800217 	ldw	r2,8(r2)
   14b08:	100b883a 	mov	r5,r2
   14b0c:	1809883a 	mov	r4,r3
   14b10:	0014ee00 	call	14ee0 <altera_avalon_jtag_uart_close>
}
   14b14:	e037883a 	mov	sp,fp
   14b18:	dfc00117 	ldw	ra,4(sp)
   14b1c:	df000017 	ldw	fp,0(sp)
   14b20:	dec00204 	addi	sp,sp,8
   14b24:	f800283a 	ret

00014b28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14b28:	defffa04 	addi	sp,sp,-24
   14b2c:	dfc00515 	stw	ra,20(sp)
   14b30:	df000415 	stw	fp,16(sp)
   14b34:	df000404 	addi	fp,sp,16
   14b38:	e13ffd15 	stw	r4,-12(fp)
   14b3c:	e17ffe15 	stw	r5,-8(fp)
   14b40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14b44:	e0bffd17 	ldw	r2,-12(fp)
   14b48:	10800017 	ldw	r2,0(r2)
   14b4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14b50:	e0bffc17 	ldw	r2,-16(fp)
   14b54:	10800a04 	addi	r2,r2,40
   14b58:	e1bfff17 	ldw	r6,-4(fp)
   14b5c:	e17ffe17 	ldw	r5,-8(fp)
   14b60:	1009883a 	mov	r4,r2
   14b64:	0014f480 	call	14f48 <altera_avalon_jtag_uart_ioctl>
}
   14b68:	e037883a 	mov	sp,fp
   14b6c:	dfc00117 	ldw	ra,4(sp)
   14b70:	df000017 	ldw	fp,0(sp)
   14b74:	dec00204 	addi	sp,sp,8
   14b78:	f800283a 	ret

00014b7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14b7c:	defffb04 	addi	sp,sp,-20
   14b80:	dfc00415 	stw	ra,16(sp)
   14b84:	df000315 	stw	fp,12(sp)
   14b88:	df000304 	addi	fp,sp,12
   14b8c:	e13ffd15 	stw	r4,-12(fp)
   14b90:	e17ffe15 	stw	r5,-8(fp)
   14b94:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14b98:	e0bffd17 	ldw	r2,-12(fp)
   14b9c:	00c00044 	movi	r3,1
   14ba0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14ba4:	e0bffd17 	ldw	r2,-12(fp)
   14ba8:	10800017 	ldw	r2,0(r2)
   14bac:	10800104 	addi	r2,r2,4
   14bb0:	1007883a 	mov	r3,r2
   14bb4:	e0bffd17 	ldw	r2,-12(fp)
   14bb8:	10800817 	ldw	r2,32(r2)
   14bbc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   14bc0:	e0bfff17 	ldw	r2,-4(fp)
   14bc4:	01800074 	movhi	r6,1
   14bc8:	31930c04 	addi	r6,r6,19504
   14bcc:	e17ffd17 	ldw	r5,-12(fp)
   14bd0:	1009883a 	mov	r4,r2
   14bd4:	0013b580 	call	13b58 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14bd8:	e0bffd17 	ldw	r2,-12(fp)
   14bdc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14be0:	e0bffd17 	ldw	r2,-12(fp)
   14be4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14be8:	d0e6dc17 	ldw	r3,-25744(gp)
   14bec:	e1fffd17 	ldw	r7,-12(fp)
   14bf0:	01800074 	movhi	r6,1
   14bf4:	31939004 	addi	r6,r6,20032
   14bf8:	180b883a 	mov	r5,r3
   14bfc:	1009883a 	mov	r4,r2
   14c00:	0015a300 	call	15a30 <alt_alarm_start>
   14c04:	1000040e 	bge	r2,zero,14c18 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14c08:	e0fffd17 	ldw	r3,-12(fp)
   14c0c:	00a00034 	movhi	r2,32768
   14c10:	10bfffc4 	addi	r2,r2,-1
   14c14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14c18:	0001883a 	nop
   14c1c:	e037883a 	mov	sp,fp
   14c20:	dfc00117 	ldw	ra,4(sp)
   14c24:	df000017 	ldw	fp,0(sp)
   14c28:	dec00204 	addi	sp,sp,8
   14c2c:	f800283a 	ret

00014c30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14c30:	defff704 	addi	sp,sp,-36
   14c34:	df000815 	stw	fp,32(sp)
   14c38:	df000804 	addi	fp,sp,32
   14c3c:	e13ffe15 	stw	r4,-8(fp)
   14c40:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14c44:	e0bffe17 	ldw	r2,-8(fp)
   14c48:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   14c4c:	e0bffa17 	ldw	r2,-24(fp)
   14c50:	10800017 	ldw	r2,0(r2)
   14c54:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14c58:	e0bffb17 	ldw	r2,-20(fp)
   14c5c:	10800104 	addi	r2,r2,4
   14c60:	10800037 	ldwio	r2,0(r2)
   14c64:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14c68:	e0bffc17 	ldw	r2,-16(fp)
   14c6c:	1080c00c 	andi	r2,r2,768
   14c70:	10006d26 	beq	r2,zero,14e28 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14c74:	e0bffc17 	ldw	r2,-16(fp)
   14c78:	1080400c 	andi	r2,r2,256
   14c7c:	10003526 	beq	r2,zero,14d54 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14c80:	00800074 	movhi	r2,1
   14c84:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14c88:	e0bffa17 	ldw	r2,-24(fp)
   14c8c:	10800a17 	ldw	r2,40(r2)
   14c90:	10800044 	addi	r2,r2,1
   14c94:	1081ffcc 	andi	r2,r2,2047
   14c98:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   14c9c:	e0bffa17 	ldw	r2,-24(fp)
   14ca0:	10c00b17 	ldw	r3,44(r2)
   14ca4:	e0bffd17 	ldw	r2,-12(fp)
   14ca8:	18801526 	beq	r3,r2,14d00 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14cac:	e0bffb17 	ldw	r2,-20(fp)
   14cb0:	10800037 	ldwio	r2,0(r2)
   14cb4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14cb8:	e0bff817 	ldw	r2,-32(fp)
   14cbc:	10a0000c 	andi	r2,r2,32768
   14cc0:	10001126 	beq	r2,zero,14d08 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14cc4:	e0bffa17 	ldw	r2,-24(fp)
   14cc8:	10800a17 	ldw	r2,40(r2)
   14ccc:	e0fff817 	ldw	r3,-32(fp)
   14cd0:	1809883a 	mov	r4,r3
   14cd4:	e0fffa17 	ldw	r3,-24(fp)
   14cd8:	1885883a 	add	r2,r3,r2
   14cdc:	10800e04 	addi	r2,r2,56
   14ce0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14ce4:	e0bffa17 	ldw	r2,-24(fp)
   14ce8:	10800a17 	ldw	r2,40(r2)
   14cec:	10800044 	addi	r2,r2,1
   14cf0:	10c1ffcc 	andi	r3,r2,2047
   14cf4:	e0bffa17 	ldw	r2,-24(fp)
   14cf8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14cfc:	003fe206 	br	14c88 <_gp+0xffff4454>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14d00:	0001883a 	nop
   14d04:	00000106 	br	14d0c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14d08:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14d0c:	e0bff817 	ldw	r2,-32(fp)
   14d10:	10bfffec 	andhi	r2,r2,65535
   14d14:	10000f26 	beq	r2,zero,14d54 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14d18:	e0bffa17 	ldw	r2,-24(fp)
   14d1c:	10c00817 	ldw	r3,32(r2)
   14d20:	00bfff84 	movi	r2,-2
   14d24:	1886703a 	and	r3,r3,r2
   14d28:	e0bffa17 	ldw	r2,-24(fp)
   14d2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14d30:	e0bffb17 	ldw	r2,-20(fp)
   14d34:	10800104 	addi	r2,r2,4
   14d38:	1007883a 	mov	r3,r2
   14d3c:	e0bffa17 	ldw	r2,-24(fp)
   14d40:	10800817 	ldw	r2,32(r2)
   14d44:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14d48:	e0bffb17 	ldw	r2,-20(fp)
   14d4c:	10800104 	addi	r2,r2,4
   14d50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14d54:	e0bffc17 	ldw	r2,-16(fp)
   14d58:	1080800c 	andi	r2,r2,512
   14d5c:	103fbe26 	beq	r2,zero,14c58 <_gp+0xffff4424>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14d60:	e0bffc17 	ldw	r2,-16(fp)
   14d64:	1004d43a 	srli	r2,r2,16
   14d68:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14d6c:	00001406 	br	14dc0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14d70:	e0bffb17 	ldw	r2,-20(fp)
   14d74:	e0fffa17 	ldw	r3,-24(fp)
   14d78:	18c00d17 	ldw	r3,52(r3)
   14d7c:	e13ffa17 	ldw	r4,-24(fp)
   14d80:	20c7883a 	add	r3,r4,r3
   14d84:	18c20e04 	addi	r3,r3,2104
   14d88:	18c00003 	ldbu	r3,0(r3)
   14d8c:	18c03fcc 	andi	r3,r3,255
   14d90:	18c0201c 	xori	r3,r3,128
   14d94:	18ffe004 	addi	r3,r3,-128
   14d98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14d9c:	e0bffa17 	ldw	r2,-24(fp)
   14da0:	10800d17 	ldw	r2,52(r2)
   14da4:	10800044 	addi	r2,r2,1
   14da8:	10c1ffcc 	andi	r3,r2,2047
   14dac:	e0bffa17 	ldw	r2,-24(fp)
   14db0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14db4:	e0bff917 	ldw	r2,-28(fp)
   14db8:	10bfffc4 	addi	r2,r2,-1
   14dbc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14dc0:	e0bff917 	ldw	r2,-28(fp)
   14dc4:	10000526 	beq	r2,zero,14ddc <altera_avalon_jtag_uart_irq+0x1ac>
   14dc8:	e0bffa17 	ldw	r2,-24(fp)
   14dcc:	10c00d17 	ldw	r3,52(r2)
   14dd0:	e0bffa17 	ldw	r2,-24(fp)
   14dd4:	10800c17 	ldw	r2,48(r2)
   14dd8:	18bfe51e 	bne	r3,r2,14d70 <_gp+0xffff453c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14ddc:	e0bff917 	ldw	r2,-28(fp)
   14de0:	103f9d26 	beq	r2,zero,14c58 <_gp+0xffff4424>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14de4:	e0bffa17 	ldw	r2,-24(fp)
   14de8:	10c00817 	ldw	r3,32(r2)
   14dec:	00bfff44 	movi	r2,-3
   14df0:	1886703a 	and	r3,r3,r2
   14df4:	e0bffa17 	ldw	r2,-24(fp)
   14df8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14dfc:	e0bffa17 	ldw	r2,-24(fp)
   14e00:	10800017 	ldw	r2,0(r2)
   14e04:	10800104 	addi	r2,r2,4
   14e08:	1007883a 	mov	r3,r2
   14e0c:	e0bffa17 	ldw	r2,-24(fp)
   14e10:	10800817 	ldw	r2,32(r2)
   14e14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14e18:	e0bffb17 	ldw	r2,-20(fp)
   14e1c:	10800104 	addi	r2,r2,4
   14e20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14e24:	003f8c06 	br	14c58 <_gp+0xffff4424>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14e28:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14e2c:	0001883a 	nop
   14e30:	e037883a 	mov	sp,fp
   14e34:	df000017 	ldw	fp,0(sp)
   14e38:	dec00104 	addi	sp,sp,4
   14e3c:	f800283a 	ret

00014e40 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14e40:	defff804 	addi	sp,sp,-32
   14e44:	df000715 	stw	fp,28(sp)
   14e48:	df000704 	addi	fp,sp,28
   14e4c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14e50:	e0bffb17 	ldw	r2,-20(fp)
   14e54:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14e58:	e0bff917 	ldw	r2,-28(fp)
   14e5c:	10800017 	ldw	r2,0(r2)
   14e60:	10800104 	addi	r2,r2,4
   14e64:	10800037 	ldwio	r2,0(r2)
   14e68:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14e6c:	e0bffa17 	ldw	r2,-24(fp)
   14e70:	1081000c 	andi	r2,r2,1024
   14e74:	10000b26 	beq	r2,zero,14ea4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14e78:	e0bff917 	ldw	r2,-28(fp)
   14e7c:	10800017 	ldw	r2,0(r2)
   14e80:	10800104 	addi	r2,r2,4
   14e84:	1007883a 	mov	r3,r2
   14e88:	e0bff917 	ldw	r2,-28(fp)
   14e8c:	10800817 	ldw	r2,32(r2)
   14e90:	10810014 	ori	r2,r2,1024
   14e94:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   14e98:	e0bff917 	ldw	r2,-28(fp)
   14e9c:	10000915 	stw	zero,36(r2)
   14ea0:	00000a06 	br	14ecc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14ea4:	e0bff917 	ldw	r2,-28(fp)
   14ea8:	10c00917 	ldw	r3,36(r2)
   14eac:	00a00034 	movhi	r2,32768
   14eb0:	10bfff04 	addi	r2,r2,-4
   14eb4:	10c00536 	bltu	r2,r3,14ecc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14eb8:	e0bff917 	ldw	r2,-28(fp)
   14ebc:	10800917 	ldw	r2,36(r2)
   14ec0:	10c00044 	addi	r3,r2,1
   14ec4:	e0bff917 	ldw	r2,-28(fp)
   14ec8:	10c00915 	stw	r3,36(r2)
   14ecc:	d0a6dc17 	ldw	r2,-25744(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14ed0:	e037883a 	mov	sp,fp
   14ed4:	df000017 	ldw	fp,0(sp)
   14ed8:	dec00104 	addi	sp,sp,4
   14edc:	f800283a 	ret

00014ee0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14ee0:	defffd04 	addi	sp,sp,-12
   14ee4:	df000215 	stw	fp,8(sp)
   14ee8:	df000204 	addi	fp,sp,8
   14eec:	e13ffe15 	stw	r4,-8(fp)
   14ef0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14ef4:	00000506 	br	14f0c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14ef8:	e0bfff17 	ldw	r2,-4(fp)
   14efc:	1090000c 	andi	r2,r2,16384
   14f00:	10000226 	beq	r2,zero,14f0c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14f04:	00bffd44 	movi	r2,-11
   14f08:	00000b06 	br	14f38 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14f0c:	e0bffe17 	ldw	r2,-8(fp)
   14f10:	10c00d17 	ldw	r3,52(r2)
   14f14:	e0bffe17 	ldw	r2,-8(fp)
   14f18:	10800c17 	ldw	r2,48(r2)
   14f1c:	18800526 	beq	r3,r2,14f34 <altera_avalon_jtag_uart_close+0x54>
   14f20:	e0bffe17 	ldw	r2,-8(fp)
   14f24:	10c00917 	ldw	r3,36(r2)
   14f28:	e0bffe17 	ldw	r2,-8(fp)
   14f2c:	10800117 	ldw	r2,4(r2)
   14f30:	18bff136 	bltu	r3,r2,14ef8 <_gp+0xffff46c4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14f34:	0005883a 	mov	r2,zero
}
   14f38:	e037883a 	mov	sp,fp
   14f3c:	df000017 	ldw	fp,0(sp)
   14f40:	dec00104 	addi	sp,sp,4
   14f44:	f800283a 	ret

00014f48 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14f48:	defffa04 	addi	sp,sp,-24
   14f4c:	df000515 	stw	fp,20(sp)
   14f50:	df000504 	addi	fp,sp,20
   14f54:	e13ffd15 	stw	r4,-12(fp)
   14f58:	e17ffe15 	stw	r5,-8(fp)
   14f5c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14f60:	00bff9c4 	movi	r2,-25
   14f64:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14f68:	e0bffe17 	ldw	r2,-8(fp)
   14f6c:	10da8060 	cmpeqi	r3,r2,27137
   14f70:	1800031e 	bne	r3,zero,14f80 <altera_avalon_jtag_uart_ioctl+0x38>
   14f74:	109a80a0 	cmpeqi	r2,r2,27138
   14f78:	1000181e 	bne	r2,zero,14fdc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14f7c:	00002906 	br	15024 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14f80:	e0bffd17 	ldw	r2,-12(fp)
   14f84:	10c00117 	ldw	r3,4(r2)
   14f88:	00a00034 	movhi	r2,32768
   14f8c:	10bfffc4 	addi	r2,r2,-1
   14f90:	18802126 	beq	r3,r2,15018 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14f94:	e0bfff17 	ldw	r2,-4(fp)
   14f98:	10800017 	ldw	r2,0(r2)
   14f9c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14fa0:	e0bffc17 	ldw	r2,-16(fp)
   14fa4:	10800090 	cmplti	r2,r2,2
   14fa8:	1000061e 	bne	r2,zero,14fc4 <altera_avalon_jtag_uart_ioctl+0x7c>
   14fac:	e0fffc17 	ldw	r3,-16(fp)
   14fb0:	00a00034 	movhi	r2,32768
   14fb4:	10bfffc4 	addi	r2,r2,-1
   14fb8:	18800226 	beq	r3,r2,14fc4 <altera_avalon_jtag_uart_ioctl+0x7c>
   14fbc:	e0bffc17 	ldw	r2,-16(fp)
   14fc0:	00000206 	br	14fcc <altera_avalon_jtag_uart_ioctl+0x84>
   14fc4:	00a00034 	movhi	r2,32768
   14fc8:	10bfff84 	addi	r2,r2,-2
   14fcc:	e0fffd17 	ldw	r3,-12(fp)
   14fd0:	18800115 	stw	r2,4(r3)
      rc = 0;
   14fd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14fd8:	00000f06 	br	15018 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14fdc:	e0bffd17 	ldw	r2,-12(fp)
   14fe0:	10c00117 	ldw	r3,4(r2)
   14fe4:	00a00034 	movhi	r2,32768
   14fe8:	10bfffc4 	addi	r2,r2,-1
   14fec:	18800c26 	beq	r3,r2,15020 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14ff0:	e0bffd17 	ldw	r2,-12(fp)
   14ff4:	10c00917 	ldw	r3,36(r2)
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
   14ffc:	10800117 	ldw	r2,4(r2)
   15000:	1885803a 	cmpltu	r2,r3,r2
   15004:	10c03fcc 	andi	r3,r2,255
   15008:	e0bfff17 	ldw	r2,-4(fp)
   1500c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15010:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15014:	00000206 	br	15020 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   15018:	0001883a 	nop
   1501c:	00000106 	br	15024 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   15020:	0001883a 	nop

  default:
    break;
  }

  return rc;
   15024:	e0bffb17 	ldw	r2,-20(fp)
}
   15028:	e037883a 	mov	sp,fp
   1502c:	df000017 	ldw	fp,0(sp)
   15030:	dec00104 	addi	sp,sp,4
   15034:	f800283a 	ret

00015038 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15038:	defff304 	addi	sp,sp,-52
   1503c:	dfc00c15 	stw	ra,48(sp)
   15040:	df000b15 	stw	fp,44(sp)
   15044:	df000b04 	addi	fp,sp,44
   15048:	e13ffc15 	stw	r4,-16(fp)
   1504c:	e17ffd15 	stw	r5,-12(fp)
   15050:	e1bffe15 	stw	r6,-8(fp)
   15054:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   15058:	e0bffd17 	ldw	r2,-12(fp)
   1505c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15060:	00004706 	br	15180 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15064:	e0bffc17 	ldw	r2,-16(fp)
   15068:	10800a17 	ldw	r2,40(r2)
   1506c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   15070:	e0bffc17 	ldw	r2,-16(fp)
   15074:	10800b17 	ldw	r2,44(r2)
   15078:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1507c:	e0fff717 	ldw	r3,-36(fp)
   15080:	e0bff817 	ldw	r2,-32(fp)
   15084:	18800536 	bltu	r3,r2,1509c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   15088:	e0fff717 	ldw	r3,-36(fp)
   1508c:	e0bff817 	ldw	r2,-32(fp)
   15090:	1885c83a 	sub	r2,r3,r2
   15094:	e0bff615 	stw	r2,-40(fp)
   15098:	00000406 	br	150ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1509c:	00c20004 	movi	r3,2048
   150a0:	e0bff817 	ldw	r2,-32(fp)
   150a4:	1885c83a 	sub	r2,r3,r2
   150a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   150ac:	e0bff617 	ldw	r2,-40(fp)
   150b0:	10001e26 	beq	r2,zero,1512c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   150b4:	e0fffe17 	ldw	r3,-8(fp)
   150b8:	e0bff617 	ldw	r2,-40(fp)
   150bc:	1880022e 	bgeu	r3,r2,150c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   150c0:	e0bffe17 	ldw	r2,-8(fp)
   150c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   150c8:	e0bffc17 	ldw	r2,-16(fp)
   150cc:	10c00e04 	addi	r3,r2,56
   150d0:	e0bff817 	ldw	r2,-32(fp)
   150d4:	1885883a 	add	r2,r3,r2
   150d8:	e1bff617 	ldw	r6,-40(fp)
   150dc:	100b883a 	mov	r5,r2
   150e0:	e13ff517 	ldw	r4,-44(fp)
   150e4:	0012f400 	call	12f40 <memcpy>
      ptr   += n;
   150e8:	e0fff517 	ldw	r3,-44(fp)
   150ec:	e0bff617 	ldw	r2,-40(fp)
   150f0:	1885883a 	add	r2,r3,r2
   150f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   150f8:	e0fffe17 	ldw	r3,-8(fp)
   150fc:	e0bff617 	ldw	r2,-40(fp)
   15100:	1885c83a 	sub	r2,r3,r2
   15104:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15108:	e0fff817 	ldw	r3,-32(fp)
   1510c:	e0bff617 	ldw	r2,-40(fp)
   15110:	1885883a 	add	r2,r3,r2
   15114:	10c1ffcc 	andi	r3,r2,2047
   15118:	e0bffc17 	ldw	r2,-16(fp)
   1511c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   15120:	e0bffe17 	ldw	r2,-8(fp)
   15124:	00bfcf16 	blt	zero,r2,15064 <_gp+0xffff4830>
   15128:	00000106 	br	15130 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1512c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   15130:	e0fff517 	ldw	r3,-44(fp)
   15134:	e0bffd17 	ldw	r2,-12(fp)
   15138:	1880141e 	bne	r3,r2,1518c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1513c:	e0bfff17 	ldw	r2,-4(fp)
   15140:	1090000c 	andi	r2,r2,16384
   15144:	1000131e 	bne	r2,zero,15194 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15148:	0001883a 	nop
   1514c:	e0bffc17 	ldw	r2,-16(fp)
   15150:	10c00a17 	ldw	r3,40(r2)
   15154:	e0bff717 	ldw	r2,-36(fp)
   15158:	1880051e 	bne	r3,r2,15170 <altera_avalon_jtag_uart_read+0x138>
   1515c:	e0bffc17 	ldw	r2,-16(fp)
   15160:	10c00917 	ldw	r3,36(r2)
   15164:	e0bffc17 	ldw	r2,-16(fp)
   15168:	10800117 	ldw	r2,4(r2)
   1516c:	18bff736 	bltu	r3,r2,1514c <_gp+0xffff4918>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15170:	e0bffc17 	ldw	r2,-16(fp)
   15174:	10c00a17 	ldw	r3,40(r2)
   15178:	e0bff717 	ldw	r2,-36(fp)
   1517c:	18800726 	beq	r3,r2,1519c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15180:	e0bffe17 	ldw	r2,-8(fp)
   15184:	00bfb716 	blt	zero,r2,15064 <_gp+0xffff4830>
   15188:	00000506 	br	151a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1518c:	0001883a 	nop
   15190:	00000306 	br	151a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   15194:	0001883a 	nop
   15198:	00000106 	br	151a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1519c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   151a0:	e0fff517 	ldw	r3,-44(fp)
   151a4:	e0bffd17 	ldw	r2,-12(fp)
   151a8:	18801826 	beq	r3,r2,1520c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151ac:	0005303a 	rdctl	r2,status
   151b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151b4:	e0fffb17 	ldw	r3,-20(fp)
   151b8:	00bfff84 	movi	r2,-2
   151bc:	1884703a 	and	r2,r3,r2
   151c0:	1001703a 	wrctl	status,r2
  
  return context;
   151c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   151c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   151cc:	e0bffc17 	ldw	r2,-16(fp)
   151d0:	10800817 	ldw	r2,32(r2)
   151d4:	10c00054 	ori	r3,r2,1
   151d8:	e0bffc17 	ldw	r2,-16(fp)
   151dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   151e0:	e0bffc17 	ldw	r2,-16(fp)
   151e4:	10800017 	ldw	r2,0(r2)
   151e8:	10800104 	addi	r2,r2,4
   151ec:	1007883a 	mov	r3,r2
   151f0:	e0bffc17 	ldw	r2,-16(fp)
   151f4:	10800817 	ldw	r2,32(r2)
   151f8:	18800035 	stwio	r2,0(r3)
   151fc:	e0bffa17 	ldw	r2,-24(fp)
   15200:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15204:	e0bff917 	ldw	r2,-28(fp)
   15208:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1520c:	e0fff517 	ldw	r3,-44(fp)
   15210:	e0bffd17 	ldw	r2,-12(fp)
   15214:	18800426 	beq	r3,r2,15228 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   15218:	e0fff517 	ldw	r3,-44(fp)
   1521c:	e0bffd17 	ldw	r2,-12(fp)
   15220:	1885c83a 	sub	r2,r3,r2
   15224:	00000606 	br	15240 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   15228:	e0bfff17 	ldw	r2,-4(fp)
   1522c:	1090000c 	andi	r2,r2,16384
   15230:	10000226 	beq	r2,zero,1523c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   15234:	00bffd44 	movi	r2,-11
   15238:	00000106 	br	15240 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1523c:	00bffec4 	movi	r2,-5
}
   15240:	e037883a 	mov	sp,fp
   15244:	dfc00117 	ldw	ra,4(sp)
   15248:	df000017 	ldw	fp,0(sp)
   1524c:	dec00204 	addi	sp,sp,8
   15250:	f800283a 	ret

00015254 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15254:	defff304 	addi	sp,sp,-52
   15258:	dfc00c15 	stw	ra,48(sp)
   1525c:	df000b15 	stw	fp,44(sp)
   15260:	df000b04 	addi	fp,sp,44
   15264:	e13ffc15 	stw	r4,-16(fp)
   15268:	e17ffd15 	stw	r5,-12(fp)
   1526c:	e1bffe15 	stw	r6,-8(fp)
   15270:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15274:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15278:	e0bffd17 	ldw	r2,-12(fp)
   1527c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15280:	00003706 	br	15360 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15284:	e0bffc17 	ldw	r2,-16(fp)
   15288:	10800c17 	ldw	r2,48(r2)
   1528c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   15290:	e0bffc17 	ldw	r2,-16(fp)
   15294:	10800d17 	ldw	r2,52(r2)
   15298:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1529c:	e0fff917 	ldw	r3,-28(fp)
   152a0:	e0bff517 	ldw	r2,-44(fp)
   152a4:	1880062e 	bgeu	r3,r2,152c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   152a8:	e0fff517 	ldw	r3,-44(fp)
   152ac:	e0bff917 	ldw	r2,-28(fp)
   152b0:	1885c83a 	sub	r2,r3,r2
   152b4:	10bfffc4 	addi	r2,r2,-1
   152b8:	e0bff615 	stw	r2,-40(fp)
   152bc:	00000b06 	br	152ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   152c0:	e0bff517 	ldw	r2,-44(fp)
   152c4:	10000526 	beq	r2,zero,152dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   152c8:	00c20004 	movi	r3,2048
   152cc:	e0bff917 	ldw	r2,-28(fp)
   152d0:	1885c83a 	sub	r2,r3,r2
   152d4:	e0bff615 	stw	r2,-40(fp)
   152d8:	00000406 	br	152ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   152dc:	00c1ffc4 	movi	r3,2047
   152e0:	e0bff917 	ldw	r2,-28(fp)
   152e4:	1885c83a 	sub	r2,r3,r2
   152e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   152ec:	e0bff617 	ldw	r2,-40(fp)
   152f0:	10001e26 	beq	r2,zero,1536c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   152f4:	e0fffe17 	ldw	r3,-8(fp)
   152f8:	e0bff617 	ldw	r2,-40(fp)
   152fc:	1880022e 	bgeu	r3,r2,15308 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15300:	e0bffe17 	ldw	r2,-8(fp)
   15304:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15308:	e0bffc17 	ldw	r2,-16(fp)
   1530c:	10c20e04 	addi	r3,r2,2104
   15310:	e0bff917 	ldw	r2,-28(fp)
   15314:	1885883a 	add	r2,r3,r2
   15318:	e1bff617 	ldw	r6,-40(fp)
   1531c:	e17ffd17 	ldw	r5,-12(fp)
   15320:	1009883a 	mov	r4,r2
   15324:	0012f400 	call	12f40 <memcpy>
      ptr   += n;
   15328:	e0fffd17 	ldw	r3,-12(fp)
   1532c:	e0bff617 	ldw	r2,-40(fp)
   15330:	1885883a 	add	r2,r3,r2
   15334:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   15338:	e0fffe17 	ldw	r3,-8(fp)
   1533c:	e0bff617 	ldw	r2,-40(fp)
   15340:	1885c83a 	sub	r2,r3,r2
   15344:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15348:	e0fff917 	ldw	r3,-28(fp)
   1534c:	e0bff617 	ldw	r2,-40(fp)
   15350:	1885883a 	add	r2,r3,r2
   15354:	10c1ffcc 	andi	r3,r2,2047
   15358:	e0bffc17 	ldw	r2,-16(fp)
   1535c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15360:	e0bffe17 	ldw	r2,-8(fp)
   15364:	00bfc716 	blt	zero,r2,15284 <_gp+0xffff4a50>
   15368:	00000106 	br	15370 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1536c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15370:	0005303a 	rdctl	r2,status
   15374:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15378:	e0fffb17 	ldw	r3,-20(fp)
   1537c:	00bfff84 	movi	r2,-2
   15380:	1884703a 	and	r2,r3,r2
   15384:	1001703a 	wrctl	status,r2
  
  return context;
   15388:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1538c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15390:	e0bffc17 	ldw	r2,-16(fp)
   15394:	10800817 	ldw	r2,32(r2)
   15398:	10c00094 	ori	r3,r2,2
   1539c:	e0bffc17 	ldw	r2,-16(fp)
   153a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   153a4:	e0bffc17 	ldw	r2,-16(fp)
   153a8:	10800017 	ldw	r2,0(r2)
   153ac:	10800104 	addi	r2,r2,4
   153b0:	1007883a 	mov	r3,r2
   153b4:	e0bffc17 	ldw	r2,-16(fp)
   153b8:	10800817 	ldw	r2,32(r2)
   153bc:	18800035 	stwio	r2,0(r3)
   153c0:	e0bffa17 	ldw	r2,-24(fp)
   153c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153c8:	e0bff817 	ldw	r2,-32(fp)
   153cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   153d0:	e0bffe17 	ldw	r2,-8(fp)
   153d4:	0080100e 	bge	zero,r2,15418 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   153d8:	e0bfff17 	ldw	r2,-4(fp)
   153dc:	1090000c 	andi	r2,r2,16384
   153e0:	1000101e 	bne	r2,zero,15424 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   153e4:	0001883a 	nop
   153e8:	e0bffc17 	ldw	r2,-16(fp)
   153ec:	10c00d17 	ldw	r3,52(r2)
   153f0:	e0bff517 	ldw	r2,-44(fp)
   153f4:	1880051e 	bne	r3,r2,1540c <altera_avalon_jtag_uart_write+0x1b8>
   153f8:	e0bffc17 	ldw	r2,-16(fp)
   153fc:	10c00917 	ldw	r3,36(r2)
   15400:	e0bffc17 	ldw	r2,-16(fp)
   15404:	10800117 	ldw	r2,4(r2)
   15408:	18bff736 	bltu	r3,r2,153e8 <_gp+0xffff4bb4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1540c:	e0bffc17 	ldw	r2,-16(fp)
   15410:	10800917 	ldw	r2,36(r2)
   15414:	1000051e 	bne	r2,zero,1542c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15418:	e0bffe17 	ldw	r2,-8(fp)
   1541c:	00bfd016 	blt	zero,r2,15360 <_gp+0xffff4b2c>
   15420:	00000306 	br	15430 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   15424:	0001883a 	nop
   15428:	00000106 	br	15430 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1542c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   15430:	e0fffd17 	ldw	r3,-12(fp)
   15434:	e0bff717 	ldw	r2,-36(fp)
   15438:	18800426 	beq	r3,r2,1544c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1543c:	e0fffd17 	ldw	r3,-12(fp)
   15440:	e0bff717 	ldw	r2,-36(fp)
   15444:	1885c83a 	sub	r2,r3,r2
   15448:	00000606 	br	15464 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1544c:	e0bfff17 	ldw	r2,-4(fp)
   15450:	1090000c 	andi	r2,r2,16384
   15454:	10000226 	beq	r2,zero,15460 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   15458:	00bffd44 	movi	r2,-11
   1545c:	00000106 	br	15464 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   15460:	00bffec4 	movi	r2,-5
}
   15464:	e037883a 	mov	sp,fp
   15468:	dfc00117 	ldw	ra,4(sp)
   1546c:	df000017 	ldw	fp,0(sp)
   15470:	dec00204 	addi	sp,sp,8
   15474:	f800283a 	ret

00015478 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15478:	defff904 	addi	sp,sp,-28
   1547c:	dfc00615 	stw	ra,24(sp)
   15480:	df000515 	stw	fp,20(sp)
   15484:	df000504 	addi	fp,sp,20
   15488:	e13ffe15 	stw	r4,-8(fp)
   1548c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15490:	0007883a 	mov	r3,zero
   15494:	e0bffe17 	ldw	r2,-8(fp)
   15498:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1549c:	e0bffe17 	ldw	r2,-8(fp)
   154a0:	10800104 	addi	r2,r2,4
   154a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154a8:	0005303a 	rdctl	r2,status
   154ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   154b0:	e0fffc17 	ldw	r3,-16(fp)
   154b4:	00bfff84 	movi	r2,-2
   154b8:	1884703a 	and	r2,r3,r2
   154bc:	1001703a 	wrctl	status,r2
  
  return context;
   154c0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   154c4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   154c8:	00161940 	call	16194 <alt_tick>
   154cc:	e0bffb17 	ldw	r2,-20(fp)
   154d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154d4:	e0bffd17 	ldw	r2,-12(fp)
   154d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   154dc:	0001883a 	nop
   154e0:	e037883a 	mov	sp,fp
   154e4:	dfc00117 	ldw	ra,4(sp)
   154e8:	df000017 	ldw	fp,0(sp)
   154ec:	dec00204 	addi	sp,sp,8
   154f0:	f800283a 	ret

000154f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   154f4:	defff904 	addi	sp,sp,-28
   154f8:	dfc00615 	stw	ra,24(sp)
   154fc:	df000515 	stw	fp,20(sp)
   15500:	df000504 	addi	fp,sp,20
   15504:	e13ffc15 	stw	r4,-16(fp)
   15508:	e17ffd15 	stw	r5,-12(fp)
   1550c:	e1bffe15 	stw	r6,-8(fp)
   15510:	e1ffff15 	stw	r7,-4(fp)
   15514:	e0bfff17 	ldw	r2,-4(fp)
   15518:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1551c:	d0a6dc17 	ldw	r2,-25744(gp)
   15520:	1000021e 	bne	r2,zero,1552c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   15524:	e0bffb17 	ldw	r2,-20(fp)
   15528:	d0a6dc15 	stw	r2,-25744(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1552c:	e0bffc17 	ldw	r2,-16(fp)
   15530:	10800104 	addi	r2,r2,4
   15534:	00c001c4 	movi	r3,7
   15538:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1553c:	01800074 	movhi	r6,1
   15540:	31951e04 	addi	r6,r6,21624
   15544:	e17ffc17 	ldw	r5,-16(fp)
   15548:	e13ffe17 	ldw	r4,-8(fp)
   1554c:	0013b580 	call	13b58 <alt_irq_register>
#endif  
}
   15550:	0001883a 	nop
   15554:	e037883a 	mov	sp,fp
   15558:	dfc00117 	ldw	ra,4(sp)
   1555c:	df000017 	ldw	fp,0(sp)
   15560:	dec00204 	addi	sp,sp,8
   15564:	f800283a 	ret

00015568 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   15568:	defffe04 	addi	sp,sp,-8
   1556c:	df000115 	stw	fp,4(sp)
   15570:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   15574:	d0a6da17 	ldw	r2,-25752(gp)
   15578:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   1557c:	d0a6db17 	ldw	r2,-25748(gp)
   15580:	1000021e 	bne	r2,zero,1558c <alt_timestamp_start+0x24>
  {
    return -1;
   15584:	00bfffc4 	movi	r2,-1
   15588:	00001106 	br	155d0 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1558c:	e0bfff17 	ldw	r2,-4(fp)
   15590:	10800104 	addi	r2,r2,4
   15594:	00c00204 	movi	r3,8
   15598:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1559c:	e0bfff17 	ldw	r2,-4(fp)
   155a0:	10800204 	addi	r2,r2,8
   155a4:	00ffffd4 	movui	r3,65535
   155a8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   155ac:	e0bfff17 	ldw	r2,-4(fp)
   155b0:	10800304 	addi	r2,r2,12
   155b4:	00ffffd4 	movui	r3,65535
   155b8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   155bc:	e0bfff17 	ldw	r2,-4(fp)
   155c0:	10800104 	addi	r2,r2,4
   155c4:	00c00104 	movi	r3,4
   155c8:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   155cc:	0005883a 	mov	r2,zero
}
   155d0:	e037883a 	mov	sp,fp
   155d4:	df000017 	ldw	fp,0(sp)
   155d8:	dec00104 	addi	sp,sp,4
   155dc:	f800283a 	ret

000155e0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   155e0:	defffc04 	addi	sp,sp,-16
   155e4:	df000315 	stw	fp,12(sp)
   155e8:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   155ec:	d0a6da17 	ldw	r2,-25752(gp)
   155f0:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   155f4:	d0a6db17 	ldw	r2,-25748(gp)
   155f8:	1000021e 	bne	r2,zero,15604 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   155fc:	00bfffc4 	movi	r2,-1
   15600:	00001306 	br	15650 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   15604:	e0bffd17 	ldw	r2,-12(fp)
   15608:	10800404 	addi	r2,r2,16
   1560c:	0007883a 	mov	r3,zero
   15610:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   15614:	e0bffd17 	ldw	r2,-12(fp)
   15618:	10800404 	addi	r2,r2,16
   1561c:	10800037 	ldwio	r2,0(r2)
   15620:	10bfffcc 	andi	r2,r2,65535
   15624:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   15628:	e0bffd17 	ldw	r2,-12(fp)
   1562c:	10800504 	addi	r2,r2,20
   15630:	10800037 	ldwio	r2,0(r2)
   15634:	10bfffcc 	andi	r2,r2,65535
   15638:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1563c:	e0bfff17 	ldw	r2,-4(fp)
   15640:	1006943a 	slli	r3,r2,16
   15644:	e0bffe17 	ldw	r2,-8(fp)
   15648:	1884b03a 	or	r2,r3,r2
   1564c:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   15650:	e037883a 	mov	sp,fp
   15654:	df000017 	ldw	fp,0(sp)
   15658:	dec00104 	addi	sp,sp,4
   1565c:	f800283a 	ret

00015660 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   15660:	deffff04 	addi	sp,sp,-4
   15664:	df000015 	stw	fp,0(sp)
   15668:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1566c:	d0a6db17 	ldw	r2,-25748(gp)
}
   15670:	e037883a 	mov	sp,fp
   15674:	df000017 	ldw	fp,0(sp)
   15678:	dec00104 	addi	sp,sp,4
   1567c:	f800283a 	ret

00015680 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   15680:	defffc04 	addi	sp,sp,-16
   15684:	dfc00315 	stw	ra,12(sp)
   15688:	df000215 	stw	fp,8(sp)
   1568c:	df000204 	addi	fp,sp,8
   15690:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   15694:	d1600604 	addi	r5,gp,-32744
   15698:	e13fff17 	ldw	r4,-4(fp)
   1569c:	0015d1c0 	call	15d1c <alt_find_dev>
   156a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   156a4:	e0bffe17 	ldw	r2,-8(fp)
}
   156a8:	e037883a 	mov	sp,fp
   156ac:	dfc00117 	ldw	ra,4(sp)
   156b0:	df000017 	ldw	fp,0(sp)
   156b4:	dec00204 	addi	sp,sp,8
   156b8:	f800283a 	ret

000156bc <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   156bc:	defffd04 	addi	sp,sp,-12
   156c0:	df000215 	stw	fp,8(sp)
   156c4:	df000204 	addi	fp,sp,8
   156c8:	e13ffe15 	stw	r4,-8(fp)
   156cc:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   156d0:	e0bffe17 	ldw	r2,-8(fp)
   156d4:	10800a17 	ldw	r2,40(r2)
   156d8:	10800023 	ldbuio	r2,0(r2)
   156dc:	10803fcc 	andi	r2,r2,255
   156e0:	1007883a 	mov	r3,r2
   156e4:	e0bfff17 	ldw	r2,-4(fp)
   156e8:	10c00005 	stb	r3,0(r2)

	return 0;
   156ec:	0005883a 	mov	r2,zero
}
   156f0:	e037883a 	mov	sp,fp
   156f4:	df000017 	ldw	fp,0(sp)
   156f8:	dec00104 	addi	sp,sp,4
   156fc:	f800283a 	ret

00015700 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   15700:	defffc04 	addi	sp,sp,-16
   15704:	df000315 	stw	fp,12(sp)
   15708:	df000304 	addi	fp,sp,12
   1570c:	e13ffd15 	stw	r4,-12(fp)
   15710:	2805883a 	mov	r2,r5
   15714:	e1bfff15 	stw	r6,-4(fp)
   15718:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1571c:	e0bffd17 	ldw	r2,-12(fp)
   15720:	10800a17 	ldw	r2,40(r2)
   15724:	1007883a 	mov	r3,r2
   15728:	e0bffe03 	ldbu	r2,-8(fp)
   1572c:	10800fcc 	andi	r2,r2,63
   15730:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15734:	e0bffd17 	ldw	r2,-12(fp)
   15738:	10800a17 	ldw	r2,40(r2)
   1573c:	10800044 	addi	r2,r2,1
   15740:	10800023 	ldbuio	r2,0(r2)
   15744:	10803fcc 	andi	r2,r2,255
   15748:	1007883a 	mov	r3,r2
   1574c:	e0bfff17 	ldw	r2,-4(fp)
   15750:	10c00005 	stb	r3,0(r2)

	return 0;
   15754:	0005883a 	mov	r2,zero
}
   15758:	e037883a 	mov	sp,fp
   1575c:	df000017 	ldw	fp,0(sp)
   15760:	dec00104 	addi	sp,sp,4
   15764:	f800283a 	ret

00015768 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   15768:	defffc04 	addi	sp,sp,-16
   1576c:	df000315 	stw	fp,12(sp)
   15770:	df000304 	addi	fp,sp,12
   15774:	e13ffd15 	stw	r4,-12(fp)
   15778:	2807883a 	mov	r3,r5
   1577c:	3005883a 	mov	r2,r6
   15780:	e0fffe05 	stb	r3,-8(fp)
   15784:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15788:	e0bffd17 	ldw	r2,-12(fp)
   1578c:	10800a17 	ldw	r2,40(r2)
   15790:	1007883a 	mov	r3,r2
   15794:	e0bffe03 	ldbu	r2,-8(fp)
   15798:	10800fcc 	andi	r2,r2,63
   1579c:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   157a0:	e0bffd17 	ldw	r2,-12(fp)
   157a4:	10800a17 	ldw	r2,40(r2)
   157a8:	10800044 	addi	r2,r2,1
   157ac:	1007883a 	mov	r3,r2
   157b0:	e0bfff03 	ldbu	r2,-4(fp)
   157b4:	18800025 	stbio	r2,0(r3)

	return 0;
   157b8:	0005883a 	mov	r2,zero
}
   157bc:	e037883a 	mov	sp,fp
   157c0:	df000017 	ldw	fp,0(sp)
   157c4:	dec00104 	addi	sp,sp,4
   157c8:	f800283a 	ret

000157cc <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   157cc:	defffd04 	addi	sp,sp,-12
   157d0:	df000215 	stw	fp,8(sp)
   157d4:	df000204 	addi	fp,sp,8
   157d8:	e13ffe15 	stw	r4,-8(fp)
   157dc:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   157e0:	e0bffe17 	ldw	r2,-8(fp)
   157e4:	10800a17 	ldw	r2,40(r2)
   157e8:	1007883a 	mov	r3,r2
   157ec:	00800c84 	movi	r2,50
   157f0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   157f4:	e0bffe17 	ldw	r2,-8(fp)
   157f8:	10800a17 	ldw	r2,40(r2)
   157fc:	10800044 	addi	r2,r2,1
   15800:	10800023 	ldbuio	r2,0(r2)
   15804:	10803fcc 	andi	r2,r2,255
   15808:	10ffffcc 	andi	r3,r2,65535
   1580c:	e0bfff17 	ldw	r2,-4(fp)
   15810:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15814:	e0bffe17 	ldw	r2,-8(fp)
   15818:	10800a17 	ldw	r2,40(r2)
   1581c:	1007883a 	mov	r3,r2
   15820:	00800cc4 	movi	r2,51
   15824:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15828:	e0bffe17 	ldw	r2,-8(fp)
   1582c:	10800a17 	ldw	r2,40(r2)
   15830:	10800044 	addi	r2,r2,1
   15834:	10800023 	ldbuio	r2,0(r2)
   15838:	10803fcc 	andi	r2,r2,255
   1583c:	10bfffcc 	andi	r2,r2,65535
   15840:	1004923a 	slli	r2,r2,8
   15844:	e0ffff17 	ldw	r3,-4(fp)
   15848:	18c00017 	ldw	r3,0(r3)
   1584c:	1885883a 	add	r2,r3,r2
   15850:	1007883a 	mov	r3,r2
   15854:	e0bfff17 	ldw	r2,-4(fp)
   15858:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   1585c:	e0bfff17 	ldw	r2,-4(fp)
   15860:	10800017 	ldw	r2,0(r2)
   15864:	10a0000c 	andi	r2,r2,32768
   15868:	10000626 	beq	r2,zero,15884 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
   1586c:	e0bfff17 	ldw	r2,-4(fp)
   15870:	10800017 	ldw	r2,0(r2)
   15874:	10bffff4 	orhi	r2,r2,65535
   15878:	1007883a 	mov	r3,r2
   1587c:	e0bfff17 	ldw	r2,-4(fp)
   15880:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   15884:	0005883a 	mov	r2,zero
}
   15888:	e037883a 	mov	sp,fp
   1588c:	df000017 	ldw	fp,0(sp)
   15890:	dec00104 	addi	sp,sp,4
   15894:	f800283a 	ret

00015898 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   15898:	defffd04 	addi	sp,sp,-12
   1589c:	df000215 	stw	fp,8(sp)
   158a0:	df000204 	addi	fp,sp,8
   158a4:	e13ffe15 	stw	r4,-8(fp)
   158a8:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   158ac:	e0bffe17 	ldw	r2,-8(fp)
   158b0:	10800a17 	ldw	r2,40(r2)
   158b4:	1007883a 	mov	r3,r2
   158b8:	00800d04 	movi	r2,52
   158bc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   158c0:	e0bffe17 	ldw	r2,-8(fp)
   158c4:	10800a17 	ldw	r2,40(r2)
   158c8:	10800044 	addi	r2,r2,1
   158cc:	10800023 	ldbuio	r2,0(r2)
   158d0:	10803fcc 	andi	r2,r2,255
   158d4:	10ffffcc 	andi	r3,r2,65535
   158d8:	e0bfff17 	ldw	r2,-4(fp)
   158dc:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   158e0:	e0bffe17 	ldw	r2,-8(fp)
   158e4:	10800a17 	ldw	r2,40(r2)
   158e8:	1007883a 	mov	r3,r2
   158ec:	00800d44 	movi	r2,53
   158f0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   158f4:	e0bffe17 	ldw	r2,-8(fp)
   158f8:	10800a17 	ldw	r2,40(r2)
   158fc:	10800044 	addi	r2,r2,1
   15900:	10800023 	ldbuio	r2,0(r2)
   15904:	10803fcc 	andi	r2,r2,255
   15908:	10bfffcc 	andi	r2,r2,65535
   1590c:	1004923a 	slli	r2,r2,8
   15910:	e0ffff17 	ldw	r3,-4(fp)
   15914:	18c00017 	ldw	r3,0(r3)
   15918:	1885883a 	add	r2,r3,r2
   1591c:	1007883a 	mov	r3,r2
   15920:	e0bfff17 	ldw	r2,-4(fp)
   15924:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   15928:	e0bfff17 	ldw	r2,-4(fp)
   1592c:	10800017 	ldw	r2,0(r2)
   15930:	10a0000c 	andi	r2,r2,32768
   15934:	10000626 	beq	r2,zero,15950 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
   15938:	e0bfff17 	ldw	r2,-4(fp)
   1593c:	10800017 	ldw	r2,0(r2)
   15940:	10bffff4 	orhi	r2,r2,65535
   15944:	1007883a 	mov	r3,r2
   15948:	e0bfff17 	ldw	r2,-4(fp)
   1594c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   15950:	0005883a 	mov	r2,zero
}
   15954:	e037883a 	mov	sp,fp
   15958:	df000017 	ldw	fp,0(sp)
   1595c:	dec00104 	addi	sp,sp,4
   15960:	f800283a 	ret

00015964 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   15964:	defffd04 	addi	sp,sp,-12
   15968:	df000215 	stw	fp,8(sp)
   1596c:	df000204 	addi	fp,sp,8
   15970:	e13ffe15 	stw	r4,-8(fp)
   15974:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15978:	e0bffe17 	ldw	r2,-8(fp)
   1597c:	10800a17 	ldw	r2,40(r2)
   15980:	1007883a 	mov	r3,r2
   15984:	00800d84 	movi	r2,54
   15988:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1598c:	e0bffe17 	ldw	r2,-8(fp)
   15990:	10800a17 	ldw	r2,40(r2)
   15994:	10800044 	addi	r2,r2,1
   15998:	10800023 	ldbuio	r2,0(r2)
   1599c:	10803fcc 	andi	r2,r2,255
   159a0:	10ffffcc 	andi	r3,r2,65535
   159a4:	e0bfff17 	ldw	r2,-4(fp)
   159a8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   159ac:	e0bffe17 	ldw	r2,-8(fp)
   159b0:	10800a17 	ldw	r2,40(r2)
   159b4:	1007883a 	mov	r3,r2
   159b8:	00800dc4 	movi	r2,55
   159bc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   159c0:	e0bffe17 	ldw	r2,-8(fp)
   159c4:	10800a17 	ldw	r2,40(r2)
   159c8:	10800044 	addi	r2,r2,1
   159cc:	10800023 	ldbuio	r2,0(r2)
   159d0:	10803fcc 	andi	r2,r2,255
   159d4:	10bfffcc 	andi	r2,r2,65535
   159d8:	1004923a 	slli	r2,r2,8
   159dc:	e0ffff17 	ldw	r3,-4(fp)
   159e0:	18c00017 	ldw	r3,0(r3)
   159e4:	1885883a 	add	r2,r3,r2
   159e8:	1007883a 	mov	r3,r2
   159ec:	e0bfff17 	ldw	r2,-4(fp)
   159f0:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   159f4:	e0bfff17 	ldw	r2,-4(fp)
   159f8:	10800017 	ldw	r2,0(r2)
   159fc:	10a0000c 	andi	r2,r2,32768
   15a00:	10000626 	beq	r2,zero,15a1c <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
   15a04:	e0bfff17 	ldw	r2,-4(fp)
   15a08:	10800017 	ldw	r2,0(r2)
   15a0c:	10bffff4 	orhi	r2,r2,65535
   15a10:	1007883a 	mov	r3,r2
   15a14:	e0bfff17 	ldw	r2,-4(fp)
   15a18:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   15a1c:	0005883a 	mov	r2,zero
}
   15a20:	e037883a 	mov	sp,fp
   15a24:	df000017 	ldw	fp,0(sp)
   15a28:	dec00104 	addi	sp,sp,4
   15a2c:	f800283a 	ret

00015a30 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   15a30:	defff504 	addi	sp,sp,-44
   15a34:	df000a15 	stw	fp,40(sp)
   15a38:	df000a04 	addi	fp,sp,40
   15a3c:	e13ffc15 	stw	r4,-16(fp)
   15a40:	e17ffd15 	stw	r5,-12(fp)
   15a44:	e1bffe15 	stw	r6,-8(fp)
   15a48:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   15a4c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15a50:	d0a6dc17 	ldw	r2,-25744(gp)
  
  if (alt_ticks_per_second ())
   15a54:	10003c26 	beq	r2,zero,15b48 <alt_alarm_start+0x118>
  {
    if (alarm)
   15a58:	e0bffc17 	ldw	r2,-16(fp)
   15a5c:	10003826 	beq	r2,zero,15b40 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   15a60:	e0bffc17 	ldw	r2,-16(fp)
   15a64:	e0fffe17 	ldw	r3,-8(fp)
   15a68:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   15a6c:	e0bffc17 	ldw	r2,-16(fp)
   15a70:	e0ffff17 	ldw	r3,-4(fp)
   15a74:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a78:	0005303a 	rdctl	r2,status
   15a7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a80:	e0fff917 	ldw	r3,-28(fp)
   15a84:	00bfff84 	movi	r2,-2
   15a88:	1884703a 	and	r2,r3,r2
   15a8c:	1001703a 	wrctl	status,r2
  
  return context;
   15a90:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   15a94:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15a98:	d0a6dd17 	ldw	r2,-25740(gp)
      
      current_nticks = alt_nticks();
   15a9c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   15aa0:	e0fffd17 	ldw	r3,-12(fp)
   15aa4:	e0bff617 	ldw	r2,-40(fp)
   15aa8:	1885883a 	add	r2,r3,r2
   15aac:	10c00044 	addi	r3,r2,1
   15ab0:	e0bffc17 	ldw	r2,-16(fp)
   15ab4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15ab8:	e0bffc17 	ldw	r2,-16(fp)
   15abc:	10c00217 	ldw	r3,8(r2)
   15ac0:	e0bff617 	ldw	r2,-40(fp)
   15ac4:	1880042e 	bgeu	r3,r2,15ad8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   15ac8:	e0bffc17 	ldw	r2,-16(fp)
   15acc:	00c00044 	movi	r3,1
   15ad0:	10c00405 	stb	r3,16(r2)
   15ad4:	00000206 	br	15ae0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   15ad8:	e0bffc17 	ldw	r2,-16(fp)
   15adc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15ae0:	e0bffc17 	ldw	r2,-16(fp)
   15ae4:	d0e00c04 	addi	r3,gp,-32720
   15ae8:	e0fffa15 	stw	r3,-24(fp)
   15aec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15af0:	e0bffb17 	ldw	r2,-20(fp)
   15af4:	e0fffa17 	ldw	r3,-24(fp)
   15af8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15afc:	e0bffa17 	ldw	r2,-24(fp)
   15b00:	10c00017 	ldw	r3,0(r2)
   15b04:	e0bffb17 	ldw	r2,-20(fp)
   15b08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15b0c:	e0bffa17 	ldw	r2,-24(fp)
   15b10:	10800017 	ldw	r2,0(r2)
   15b14:	e0fffb17 	ldw	r3,-20(fp)
   15b18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15b1c:	e0bffa17 	ldw	r2,-24(fp)
   15b20:	e0fffb17 	ldw	r3,-20(fp)
   15b24:	10c00015 	stw	r3,0(r2)
   15b28:	e0bff817 	ldw	r2,-32(fp)
   15b2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b30:	e0bff717 	ldw	r2,-36(fp)
   15b34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   15b38:	0005883a 	mov	r2,zero
   15b3c:	00000306 	br	15b4c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   15b40:	00bffa84 	movi	r2,-22
   15b44:	00000106 	br	15b4c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   15b48:	00bfde84 	movi	r2,-134
  }
}
   15b4c:	e037883a 	mov	sp,fp
   15b50:	df000017 	ldw	fp,0(sp)
   15b54:	dec00104 	addi	sp,sp,4
   15b58:	f800283a 	ret

00015b5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15b5c:	deffff04 	addi	sp,sp,-4
   15b60:	df000015 	stw	fp,0(sp)
   15b64:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15b68:	0001883a 	nop
   15b6c:	e037883a 	mov	sp,fp
   15b70:	df000017 	ldw	fp,0(sp)
   15b74:	dec00104 	addi	sp,sp,4
   15b78:	f800283a 	ret

00015b7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15b7c:	defffe04 	addi	sp,sp,-8
   15b80:	dfc00115 	stw	ra,4(sp)
   15b84:	df000015 	stw	fp,0(sp)
   15b88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15b8c:	d0a00917 	ldw	r2,-32732(gp)
   15b90:	10000326 	beq	r2,zero,15ba0 <alt_get_errno+0x24>
   15b94:	d0a00917 	ldw	r2,-32732(gp)
   15b98:	103ee83a 	callr	r2
   15b9c:	00000106 	br	15ba4 <alt_get_errno+0x28>
   15ba0:	d0a6d204 	addi	r2,gp,-25784
}
   15ba4:	e037883a 	mov	sp,fp
   15ba8:	dfc00117 	ldw	ra,4(sp)
   15bac:	df000017 	ldw	fp,0(sp)
   15bb0:	dec00204 	addi	sp,sp,8
   15bb4:	f800283a 	ret

00015bb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15bb8:	defffa04 	addi	sp,sp,-24
   15bbc:	dfc00515 	stw	ra,20(sp)
   15bc0:	df000415 	stw	fp,16(sp)
   15bc4:	df000404 	addi	fp,sp,16
   15bc8:	e13ffe15 	stw	r4,-8(fp)
   15bcc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15bd0:	e0bffe17 	ldw	r2,-8(fp)
   15bd4:	10000326 	beq	r2,zero,15be4 <alt_dev_llist_insert+0x2c>
   15bd8:	e0bffe17 	ldw	r2,-8(fp)
   15bdc:	10800217 	ldw	r2,8(r2)
   15be0:	1000061e 	bne	r2,zero,15bfc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   15be4:	0015b7c0 	call	15b7c <alt_get_errno>
   15be8:	1007883a 	mov	r3,r2
   15bec:	00800584 	movi	r2,22
   15bf0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   15bf4:	00bffa84 	movi	r2,-22
   15bf8:	00001306 	br	15c48 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   15bfc:	e0bffe17 	ldw	r2,-8(fp)
   15c00:	e0ffff17 	ldw	r3,-4(fp)
   15c04:	e0fffc15 	stw	r3,-16(fp)
   15c08:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15c0c:	e0bffd17 	ldw	r2,-12(fp)
   15c10:	e0fffc17 	ldw	r3,-16(fp)
   15c14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15c18:	e0bffc17 	ldw	r2,-16(fp)
   15c1c:	10c00017 	ldw	r3,0(r2)
   15c20:	e0bffd17 	ldw	r2,-12(fp)
   15c24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15c28:	e0bffc17 	ldw	r2,-16(fp)
   15c2c:	10800017 	ldw	r2,0(r2)
   15c30:	e0fffd17 	ldw	r3,-12(fp)
   15c34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15c38:	e0bffc17 	ldw	r2,-16(fp)
   15c3c:	e0fffd17 	ldw	r3,-12(fp)
   15c40:	10c00015 	stw	r3,0(r2)

  return 0;  
   15c44:	0005883a 	mov	r2,zero
}
   15c48:	e037883a 	mov	sp,fp
   15c4c:	dfc00117 	ldw	ra,4(sp)
   15c50:	df000017 	ldw	fp,0(sp)
   15c54:	dec00204 	addi	sp,sp,8
   15c58:	f800283a 	ret

00015c5c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15c5c:	defffd04 	addi	sp,sp,-12
   15c60:	dfc00215 	stw	ra,8(sp)
   15c64:	df000115 	stw	fp,4(sp)
   15c68:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15c6c:	00800074 	movhi	r2,1
   15c70:	109ac004 	addi	r2,r2,27392
   15c74:	e0bfff15 	stw	r2,-4(fp)
   15c78:	00000606 	br	15c94 <_do_ctors+0x38>
        (*ctor) (); 
   15c7c:	e0bfff17 	ldw	r2,-4(fp)
   15c80:	10800017 	ldw	r2,0(r2)
   15c84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15c88:	e0bfff17 	ldw	r2,-4(fp)
   15c8c:	10bfff04 	addi	r2,r2,-4
   15c90:	e0bfff15 	stw	r2,-4(fp)
   15c94:	e0ffff17 	ldw	r3,-4(fp)
   15c98:	00800074 	movhi	r2,1
   15c9c:	109ac104 	addi	r2,r2,27396
   15ca0:	18bff62e 	bgeu	r3,r2,15c7c <_gp+0xffff5448>
        (*ctor) (); 
}
   15ca4:	0001883a 	nop
   15ca8:	e037883a 	mov	sp,fp
   15cac:	dfc00117 	ldw	ra,4(sp)
   15cb0:	df000017 	ldw	fp,0(sp)
   15cb4:	dec00204 	addi	sp,sp,8
   15cb8:	f800283a 	ret

00015cbc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15cbc:	defffd04 	addi	sp,sp,-12
   15cc0:	dfc00215 	stw	ra,8(sp)
   15cc4:	df000115 	stw	fp,4(sp)
   15cc8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15ccc:	00800074 	movhi	r2,1
   15cd0:	109ac004 	addi	r2,r2,27392
   15cd4:	e0bfff15 	stw	r2,-4(fp)
   15cd8:	00000606 	br	15cf4 <_do_dtors+0x38>
        (*dtor) (); 
   15cdc:	e0bfff17 	ldw	r2,-4(fp)
   15ce0:	10800017 	ldw	r2,0(r2)
   15ce4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15ce8:	e0bfff17 	ldw	r2,-4(fp)
   15cec:	10bfff04 	addi	r2,r2,-4
   15cf0:	e0bfff15 	stw	r2,-4(fp)
   15cf4:	e0ffff17 	ldw	r3,-4(fp)
   15cf8:	00800074 	movhi	r2,1
   15cfc:	109ac104 	addi	r2,r2,27396
   15d00:	18bff62e 	bgeu	r3,r2,15cdc <_gp+0xffff54a8>
        (*dtor) (); 
}
   15d04:	0001883a 	nop
   15d08:	e037883a 	mov	sp,fp
   15d0c:	dfc00117 	ldw	ra,4(sp)
   15d10:	df000017 	ldw	fp,0(sp)
   15d14:	dec00204 	addi	sp,sp,8
   15d18:	f800283a 	ret

00015d1c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15d1c:	defffa04 	addi	sp,sp,-24
   15d20:	dfc00515 	stw	ra,20(sp)
   15d24:	df000415 	stw	fp,16(sp)
   15d28:	df000404 	addi	fp,sp,16
   15d2c:	e13ffe15 	stw	r4,-8(fp)
   15d30:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15d34:	e0bfff17 	ldw	r2,-4(fp)
   15d38:	10800017 	ldw	r2,0(r2)
   15d3c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15d40:	e13ffe17 	ldw	r4,-8(fp)
   15d44:	00136180 	call	13618 <strlen>
   15d48:	10800044 	addi	r2,r2,1
   15d4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15d50:	00000d06 	br	15d88 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15d54:	e0bffc17 	ldw	r2,-16(fp)
   15d58:	10800217 	ldw	r2,8(r2)
   15d5c:	e0fffd17 	ldw	r3,-12(fp)
   15d60:	180d883a 	mov	r6,r3
   15d64:	e17ffe17 	ldw	r5,-8(fp)
   15d68:	1009883a 	mov	r4,r2
   15d6c:	00163a80 	call	163a8 <memcmp>
   15d70:	1000021e 	bne	r2,zero,15d7c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15d74:	e0bffc17 	ldw	r2,-16(fp)
   15d78:	00000706 	br	15d98 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15d7c:	e0bffc17 	ldw	r2,-16(fp)
   15d80:	10800017 	ldw	r2,0(r2)
   15d84:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15d88:	e0fffc17 	ldw	r3,-16(fp)
   15d8c:	e0bfff17 	ldw	r2,-4(fp)
   15d90:	18bff01e 	bne	r3,r2,15d54 <_gp+0xffff5520>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15d94:	0005883a 	mov	r2,zero
}
   15d98:	e037883a 	mov	sp,fp
   15d9c:	dfc00117 	ldw	ra,4(sp)
   15da0:	df000017 	ldw	fp,0(sp)
   15da4:	dec00204 	addi	sp,sp,8
   15da8:	f800283a 	ret

00015dac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15dac:	defffb04 	addi	sp,sp,-20
   15db0:	dfc00415 	stw	ra,16(sp)
   15db4:	df000315 	stw	fp,12(sp)
   15db8:	df000304 	addi	fp,sp,12
   15dbc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15dc0:	d0a00417 	ldw	r2,-32752(gp)
   15dc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15dc8:	00003106 	br	15e90 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15dcc:	e0bffd17 	ldw	r2,-12(fp)
   15dd0:	10800217 	ldw	r2,8(r2)
   15dd4:	1009883a 	mov	r4,r2
   15dd8:	00136180 	call	13618 <strlen>
   15ddc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15de0:	e0bffd17 	ldw	r2,-12(fp)
   15de4:	10c00217 	ldw	r3,8(r2)
   15de8:	e0bffe17 	ldw	r2,-8(fp)
   15dec:	10bfffc4 	addi	r2,r2,-1
   15df0:	1885883a 	add	r2,r3,r2
   15df4:	10800003 	ldbu	r2,0(r2)
   15df8:	10803fcc 	andi	r2,r2,255
   15dfc:	1080201c 	xori	r2,r2,128
   15e00:	10bfe004 	addi	r2,r2,-128
   15e04:	10800bd8 	cmpnei	r2,r2,47
   15e08:	1000031e 	bne	r2,zero,15e18 <alt_find_file+0x6c>
    {
      len -= 1;
   15e0c:	e0bffe17 	ldw	r2,-8(fp)
   15e10:	10bfffc4 	addi	r2,r2,-1
   15e14:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15e18:	e0bffe17 	ldw	r2,-8(fp)
   15e1c:	e0ffff17 	ldw	r3,-4(fp)
   15e20:	1885883a 	add	r2,r3,r2
   15e24:	10800003 	ldbu	r2,0(r2)
   15e28:	10803fcc 	andi	r2,r2,255
   15e2c:	1080201c 	xori	r2,r2,128
   15e30:	10bfe004 	addi	r2,r2,-128
   15e34:	10800be0 	cmpeqi	r2,r2,47
   15e38:	1000081e 	bne	r2,zero,15e5c <alt_find_file+0xb0>
   15e3c:	e0bffe17 	ldw	r2,-8(fp)
   15e40:	e0ffff17 	ldw	r3,-4(fp)
   15e44:	1885883a 	add	r2,r3,r2
   15e48:	10800003 	ldbu	r2,0(r2)
   15e4c:	10803fcc 	andi	r2,r2,255
   15e50:	1080201c 	xori	r2,r2,128
   15e54:	10bfe004 	addi	r2,r2,-128
   15e58:	10000a1e 	bne	r2,zero,15e84 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15e5c:	e0bffd17 	ldw	r2,-12(fp)
   15e60:	10800217 	ldw	r2,8(r2)
   15e64:	e0fffe17 	ldw	r3,-8(fp)
   15e68:	180d883a 	mov	r6,r3
   15e6c:	e17fff17 	ldw	r5,-4(fp)
   15e70:	1009883a 	mov	r4,r2
   15e74:	00163a80 	call	163a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15e78:	1000021e 	bne	r2,zero,15e84 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15e7c:	e0bffd17 	ldw	r2,-12(fp)
   15e80:	00000706 	br	15ea0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15e84:	e0bffd17 	ldw	r2,-12(fp)
   15e88:	10800017 	ldw	r2,0(r2)
   15e8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15e90:	e0fffd17 	ldw	r3,-12(fp)
   15e94:	d0a00404 	addi	r2,gp,-32752
   15e98:	18bfcc1e 	bne	r3,r2,15dcc <_gp+0xffff5598>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15e9c:	0005883a 	mov	r2,zero
}
   15ea0:	e037883a 	mov	sp,fp
   15ea4:	dfc00117 	ldw	ra,4(sp)
   15ea8:	df000017 	ldw	fp,0(sp)
   15eac:	dec00204 	addi	sp,sp,8
   15eb0:	f800283a 	ret

00015eb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15eb4:	defffa04 	addi	sp,sp,-24
   15eb8:	dfc00515 	stw	ra,20(sp)
   15ebc:	df000415 	stw	fp,16(sp)
   15ec0:	dc000315 	stw	r16,12(sp)
   15ec4:	df000404 	addi	fp,sp,16
   15ec8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   15ecc:	00bffa04 	movi	r2,-24
   15ed0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15ed4:	e03ffc15 	stw	zero,-16(fp)
   15ed8:	00001d06 	br	15f50 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   15edc:	04000074 	movhi	r16,1
   15ee0:	841d8a04 	addi	r16,r16,30248
   15ee4:	e0bffc17 	ldw	r2,-16(fp)
   15ee8:	01400304 	movi	r5,12
   15eec:	1009883a 	mov	r4,r2
   15ef0:	0010b900 	call	10b90 <__mulsi3>
   15ef4:	8085883a 	add	r2,r16,r2
   15ef8:	10800017 	ldw	r2,0(r2)
   15efc:	1000111e 	bne	r2,zero,15f44 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   15f00:	04000074 	movhi	r16,1
   15f04:	841d8a04 	addi	r16,r16,30248
   15f08:	e0bffc17 	ldw	r2,-16(fp)
   15f0c:	01400304 	movi	r5,12
   15f10:	1009883a 	mov	r4,r2
   15f14:	0010b900 	call	10b90 <__mulsi3>
   15f18:	8085883a 	add	r2,r16,r2
   15f1c:	e0fffe17 	ldw	r3,-8(fp)
   15f20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15f24:	d0e00817 	ldw	r3,-32736(gp)
   15f28:	e0bffc17 	ldw	r2,-16(fp)
   15f2c:	1880020e 	bge	r3,r2,15f38 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   15f30:	e0bffc17 	ldw	r2,-16(fp)
   15f34:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   15f38:	e0bffc17 	ldw	r2,-16(fp)
   15f3c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15f40:	00000606 	br	15f5c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15f44:	e0bffc17 	ldw	r2,-16(fp)
   15f48:	10800044 	addi	r2,r2,1
   15f4c:	e0bffc15 	stw	r2,-16(fp)
   15f50:	e0bffc17 	ldw	r2,-16(fp)
   15f54:	10800810 	cmplti	r2,r2,32
   15f58:	103fe01e 	bne	r2,zero,15edc <_gp+0xffff56a8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15f5c:	e0bffd17 	ldw	r2,-12(fp)
}
   15f60:	e6ffff04 	addi	sp,fp,-4
   15f64:	dfc00217 	ldw	ra,8(sp)
   15f68:	df000117 	ldw	fp,4(sp)
   15f6c:	dc000017 	ldw	r16,0(sp)
   15f70:	dec00304 	addi	sp,sp,12
   15f74:	f800283a 	ret

00015f78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15f78:	deffff04 	addi	sp,sp,-4
   15f7c:	df000015 	stw	fp,0(sp)
   15f80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15f84:	0001883a 	nop
   15f88:	e037883a 	mov	sp,fp
   15f8c:	df000017 	ldw	fp,0(sp)
   15f90:	dec00104 	addi	sp,sp,4
   15f94:	f800283a 	ret

00015f98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15f98:	defff804 	addi	sp,sp,-32
   15f9c:	dfc00715 	stw	ra,28(sp)
   15fa0:	df000615 	stw	fp,24(sp)
   15fa4:	dc000515 	stw	r16,20(sp)
   15fa8:	df000604 	addi	fp,sp,24
   15fac:	e13ffb15 	stw	r4,-20(fp)
   15fb0:	e17ffc15 	stw	r5,-16(fp)
   15fb4:	e1bffd15 	stw	r6,-12(fp)
   15fb8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   15fbc:	e1bffe17 	ldw	r6,-8(fp)
   15fc0:	e17ffd17 	ldw	r5,-12(fp)
   15fc4:	e13ffc17 	ldw	r4,-16(fp)
   15fc8:	00141b00 	call	141b0 <open>
   15fcc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   15fd0:	e0bffa17 	ldw	r2,-24(fp)
   15fd4:	10002216 	blt	r2,zero,16060 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15fd8:	04000074 	movhi	r16,1
   15fdc:	841d8a04 	addi	r16,r16,30248
   15fe0:	e0bffa17 	ldw	r2,-24(fp)
   15fe4:	01400304 	movi	r5,12
   15fe8:	1009883a 	mov	r4,r2
   15fec:	0010b900 	call	10b90 <__mulsi3>
   15ff0:	8085883a 	add	r2,r16,r2
   15ff4:	10c00017 	ldw	r3,0(r2)
   15ff8:	e0bffb17 	ldw	r2,-20(fp)
   15ffc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16000:	04000074 	movhi	r16,1
   16004:	841d8a04 	addi	r16,r16,30248
   16008:	e0bffa17 	ldw	r2,-24(fp)
   1600c:	01400304 	movi	r5,12
   16010:	1009883a 	mov	r4,r2
   16014:	0010b900 	call	10b90 <__mulsi3>
   16018:	8085883a 	add	r2,r16,r2
   1601c:	10800104 	addi	r2,r2,4
   16020:	10c00017 	ldw	r3,0(r2)
   16024:	e0bffb17 	ldw	r2,-20(fp)
   16028:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1602c:	04000074 	movhi	r16,1
   16030:	841d8a04 	addi	r16,r16,30248
   16034:	e0bffa17 	ldw	r2,-24(fp)
   16038:	01400304 	movi	r5,12
   1603c:	1009883a 	mov	r4,r2
   16040:	0010b900 	call	10b90 <__mulsi3>
   16044:	8085883a 	add	r2,r16,r2
   16048:	10800204 	addi	r2,r2,8
   1604c:	10c00017 	ldw	r3,0(r2)
   16050:	e0bffb17 	ldw	r2,-20(fp)
   16054:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16058:	e13ffa17 	ldw	r4,-24(fp)
   1605c:	00146b40 	call	146b4 <alt_release_fd>
  }
} 
   16060:	0001883a 	nop
   16064:	e6ffff04 	addi	sp,fp,-4
   16068:	dfc00217 	ldw	ra,8(sp)
   1606c:	df000117 	ldw	fp,4(sp)
   16070:	dc000017 	ldw	r16,0(sp)
   16074:	dec00304 	addi	sp,sp,12
   16078:	f800283a 	ret

0001607c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1607c:	defffb04 	addi	sp,sp,-20
   16080:	dfc00415 	stw	ra,16(sp)
   16084:	df000315 	stw	fp,12(sp)
   16088:	df000304 	addi	fp,sp,12
   1608c:	e13ffd15 	stw	r4,-12(fp)
   16090:	e17ffe15 	stw	r5,-8(fp)
   16094:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16098:	01c07fc4 	movi	r7,511
   1609c:	01800044 	movi	r6,1
   160a0:	e17ffd17 	ldw	r5,-12(fp)
   160a4:	01000074 	movhi	r4,1
   160a8:	211d8d04 	addi	r4,r4,30260
   160ac:	0015f980 	call	15f98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   160b0:	01c07fc4 	movi	r7,511
   160b4:	000d883a 	mov	r6,zero
   160b8:	e17ffe17 	ldw	r5,-8(fp)
   160bc:	01000074 	movhi	r4,1
   160c0:	211d8a04 	addi	r4,r4,30248
   160c4:	0015f980 	call	15f98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   160c8:	01c07fc4 	movi	r7,511
   160cc:	01800044 	movi	r6,1
   160d0:	e17fff17 	ldw	r5,-4(fp)
   160d4:	01000074 	movhi	r4,1
   160d8:	211d9004 	addi	r4,r4,30272
   160dc:	0015f980 	call	15f98 <alt_open_fd>
}  
   160e0:	0001883a 	nop
   160e4:	e037883a 	mov	sp,fp
   160e8:	dfc00117 	ldw	ra,4(sp)
   160ec:	df000017 	ldw	fp,0(sp)
   160f0:	dec00204 	addi	sp,sp,8
   160f4:	f800283a 	ret

000160f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   160f8:	defffa04 	addi	sp,sp,-24
   160fc:	df000515 	stw	fp,20(sp)
   16100:	df000504 	addi	fp,sp,20
   16104:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16108:	0005303a 	rdctl	r2,status
   1610c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16110:	e0fffc17 	ldw	r3,-16(fp)
   16114:	00bfff84 	movi	r2,-2
   16118:	1884703a 	and	r2,r3,r2
   1611c:	1001703a 	wrctl	status,r2
  
  return context;
   16120:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16124:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   16128:	e0bfff17 	ldw	r2,-4(fp)
   1612c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16130:	e0bffd17 	ldw	r2,-12(fp)
   16134:	10800017 	ldw	r2,0(r2)
   16138:	e0fffd17 	ldw	r3,-12(fp)
   1613c:	18c00117 	ldw	r3,4(r3)
   16140:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16144:	e0bffd17 	ldw	r2,-12(fp)
   16148:	10800117 	ldw	r2,4(r2)
   1614c:	e0fffd17 	ldw	r3,-12(fp)
   16150:	18c00017 	ldw	r3,0(r3)
   16154:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16158:	e0bffd17 	ldw	r2,-12(fp)
   1615c:	e0fffd17 	ldw	r3,-12(fp)
   16160:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16164:	e0bffd17 	ldw	r2,-12(fp)
   16168:	e0fffd17 	ldw	r3,-12(fp)
   1616c:	10c00015 	stw	r3,0(r2)
   16170:	e0bffb17 	ldw	r2,-20(fp)
   16174:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16178:	e0bffe17 	ldw	r2,-8(fp)
   1617c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   16180:	0001883a 	nop
   16184:	e037883a 	mov	sp,fp
   16188:	df000017 	ldw	fp,0(sp)
   1618c:	dec00104 	addi	sp,sp,4
   16190:	f800283a 	ret

00016194 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16194:	defffb04 	addi	sp,sp,-20
   16198:	dfc00415 	stw	ra,16(sp)
   1619c:	df000315 	stw	fp,12(sp)
   161a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   161a4:	d0a00c17 	ldw	r2,-32720(gp)
   161a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   161ac:	d0a6dd17 	ldw	r2,-25740(gp)
   161b0:	10800044 	addi	r2,r2,1
   161b4:	d0a6dd15 	stw	r2,-25740(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   161b8:	00002e06 	br	16274 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   161bc:	e0bffd17 	ldw	r2,-12(fp)
   161c0:	10800017 	ldw	r2,0(r2)
   161c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   161c8:	e0bffd17 	ldw	r2,-12(fp)
   161cc:	10800403 	ldbu	r2,16(r2)
   161d0:	10803fcc 	andi	r2,r2,255
   161d4:	10000426 	beq	r2,zero,161e8 <alt_tick+0x54>
   161d8:	d0a6dd17 	ldw	r2,-25740(gp)
   161dc:	1000021e 	bne	r2,zero,161e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   161e0:	e0bffd17 	ldw	r2,-12(fp)
   161e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   161e8:	e0bffd17 	ldw	r2,-12(fp)
   161ec:	10800217 	ldw	r2,8(r2)
   161f0:	d0e6dd17 	ldw	r3,-25740(gp)
   161f4:	18801d36 	bltu	r3,r2,1626c <alt_tick+0xd8>
   161f8:	e0bffd17 	ldw	r2,-12(fp)
   161fc:	10800403 	ldbu	r2,16(r2)
   16200:	10803fcc 	andi	r2,r2,255
   16204:	1000191e 	bne	r2,zero,1626c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   16208:	e0bffd17 	ldw	r2,-12(fp)
   1620c:	10800317 	ldw	r2,12(r2)
   16210:	e0fffd17 	ldw	r3,-12(fp)
   16214:	18c00517 	ldw	r3,20(r3)
   16218:	1809883a 	mov	r4,r3
   1621c:	103ee83a 	callr	r2
   16220:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16224:	e0bfff17 	ldw	r2,-4(fp)
   16228:	1000031e 	bne	r2,zero,16238 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1622c:	e13ffd17 	ldw	r4,-12(fp)
   16230:	00160f80 	call	160f8 <alt_alarm_stop>
   16234:	00000d06 	br	1626c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16238:	e0bffd17 	ldw	r2,-12(fp)
   1623c:	10c00217 	ldw	r3,8(r2)
   16240:	e0bfff17 	ldw	r2,-4(fp)
   16244:	1887883a 	add	r3,r3,r2
   16248:	e0bffd17 	ldw	r2,-12(fp)
   1624c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16250:	e0bffd17 	ldw	r2,-12(fp)
   16254:	10c00217 	ldw	r3,8(r2)
   16258:	d0a6dd17 	ldw	r2,-25740(gp)
   1625c:	1880032e 	bgeu	r3,r2,1626c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16260:	e0bffd17 	ldw	r2,-12(fp)
   16264:	00c00044 	movi	r3,1
   16268:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1626c:	e0bffe17 	ldw	r2,-8(fp)
   16270:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16274:	e0fffd17 	ldw	r3,-12(fp)
   16278:	d0a00c04 	addi	r2,gp,-32720
   1627c:	18bfcf1e 	bne	r3,r2,161bc <_gp+0xffff5988>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16280:	0001883a 	nop
}
   16284:	0001883a 	nop
   16288:	e037883a 	mov	sp,fp
   1628c:	dfc00117 	ldw	ra,4(sp)
   16290:	df000017 	ldw	fp,0(sp)
   16294:	dec00204 	addi	sp,sp,8
   16298:	f800283a 	ret

0001629c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1629c:	deffff04 	addi	sp,sp,-4
   162a0:	df000015 	stw	fp,0(sp)
   162a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   162a8:	000170fa 	wrctl	ienable,zero
}
   162ac:	0001883a 	nop
   162b0:	e037883a 	mov	sp,fp
   162b4:	df000017 	ldw	fp,0(sp)
   162b8:	dec00104 	addi	sp,sp,4
   162bc:	f800283a 	ret

000162c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   162c0:	defffe04 	addi	sp,sp,-8
   162c4:	df000115 	stw	fp,4(sp)
   162c8:	df000104 	addi	fp,sp,4
   162cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   162d0:	e0bfff17 	ldw	r2,-4(fp)
   162d4:	10bffe84 	addi	r2,r2,-6
   162d8:	10c00428 	cmpgeui	r3,r2,16
   162dc:	18001a1e 	bne	r3,zero,16348 <alt_exception_cause_generated_bad_addr+0x88>
   162e0:	100690ba 	slli	r3,r2,2
   162e4:	00800074 	movhi	r2,1
   162e8:	1098be04 	addi	r2,r2,25336
   162ec:	1885883a 	add	r2,r3,r2
   162f0:	10800017 	ldw	r2,0(r2)
   162f4:	1000683a 	jmp	r2
   162f8:	00016338 	rdprs	zero,zero,1420
   162fc:	00016338 	rdprs	zero,zero,1420
   16300:	00016348 	cmpgei	zero,zero,1421
   16304:	00016348 	cmpgei	zero,zero,1421
   16308:	00016348 	cmpgei	zero,zero,1421
   1630c:	00016338 	rdprs	zero,zero,1420
   16310:	00016340 	call	1634 <__alt_mem_onchip_memory-0xe9cc>
   16314:	00016348 	cmpgei	zero,zero,1421
   16318:	00016338 	rdprs	zero,zero,1420
   1631c:	00016338 	rdprs	zero,zero,1420
   16320:	00016348 	cmpgei	zero,zero,1421
   16324:	00016338 	rdprs	zero,zero,1420
   16328:	00016340 	call	1634 <__alt_mem_onchip_memory-0xe9cc>
   1632c:	00016348 	cmpgei	zero,zero,1421
   16330:	00016348 	cmpgei	zero,zero,1421
   16334:	00016338 	rdprs	zero,zero,1420
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   16338:	00800044 	movi	r2,1
   1633c:	00000306 	br	1634c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   16340:	0005883a 	mov	r2,zero
   16344:	00000106 	br	1634c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   16348:	0005883a 	mov	r2,zero
  }
}
   1634c:	e037883a 	mov	sp,fp
   16350:	df000017 	ldw	fp,0(sp)
   16354:	dec00104 	addi	sp,sp,4
   16358:	f800283a 	ret

0001635c <atexit>:
   1635c:	200b883a 	mov	r5,r4
   16360:	000f883a 	mov	r7,zero
   16364:	000d883a 	mov	r6,zero
   16368:	0009883a 	mov	r4,zero
   1636c:	00168381 	jmpi	16838 <__register_exitproc>

00016370 <exit>:
   16370:	defffe04 	addi	sp,sp,-8
   16374:	000b883a 	mov	r5,zero
   16378:	dc000015 	stw	r16,0(sp)
   1637c:	dfc00115 	stw	ra,4(sp)
   16380:	2021883a 	mov	r16,r4
   16384:	00169500 	call	16950 <__call_exitprocs>
   16388:	008000b4 	movhi	r2,2
   1638c:	10a20d04 	addi	r2,r2,-30668
   16390:	11000017 	ldw	r4,0(r2)
   16394:	20800f17 	ldw	r2,60(r4)
   16398:	10000126 	beq	r2,zero,163a0 <exit+0x30>
   1639c:	103ee83a 	callr	r2
   163a0:	8009883a 	mov	r4,r16
   163a4:	0016ad00 	call	16ad0 <_exit>

000163a8 <memcmp>:
   163a8:	01c000c4 	movi	r7,3
   163ac:	3980192e 	bgeu	r7,r6,16414 <memcmp+0x6c>
   163b0:	2144b03a 	or	r2,r4,r5
   163b4:	11c4703a 	and	r2,r2,r7
   163b8:	10000f26 	beq	r2,zero,163f8 <memcmp+0x50>
   163bc:	20800003 	ldbu	r2,0(r4)
   163c0:	28c00003 	ldbu	r3,0(r5)
   163c4:	10c0151e 	bne	r2,r3,1641c <memcmp+0x74>
   163c8:	31bfff84 	addi	r6,r6,-2
   163cc:	01ffffc4 	movi	r7,-1
   163d0:	00000406 	br	163e4 <memcmp+0x3c>
   163d4:	20800003 	ldbu	r2,0(r4)
   163d8:	28c00003 	ldbu	r3,0(r5)
   163dc:	31bfffc4 	addi	r6,r6,-1
   163e0:	10c00e1e 	bne	r2,r3,1641c <memcmp+0x74>
   163e4:	21000044 	addi	r4,r4,1
   163e8:	29400044 	addi	r5,r5,1
   163ec:	31fff91e 	bne	r6,r7,163d4 <_gp+0xffff5ba0>
   163f0:	0005883a 	mov	r2,zero
   163f4:	f800283a 	ret
   163f8:	20c00017 	ldw	r3,0(r4)
   163fc:	28800017 	ldw	r2,0(r5)
   16400:	18bfee1e 	bne	r3,r2,163bc <_gp+0xffff5b88>
   16404:	31bfff04 	addi	r6,r6,-4
   16408:	21000104 	addi	r4,r4,4
   1640c:	29400104 	addi	r5,r5,4
   16410:	39bff936 	bltu	r7,r6,163f8 <_gp+0xffff5bc4>
   16414:	303fe91e 	bne	r6,zero,163bc <_gp+0xffff5b88>
   16418:	003ff506 	br	163f0 <_gp+0xffff5bbc>
   1641c:	10c5c83a 	sub	r2,r2,r3
   16420:	f800283a 	ret

00016424 <_putc_r>:
   16424:	defffc04 	addi	sp,sp,-16
   16428:	dc000215 	stw	r16,8(sp)
   1642c:	dfc00315 	stw	ra,12(sp)
   16430:	2021883a 	mov	r16,r4
   16434:	20000226 	beq	r4,zero,16440 <_putc_r+0x1c>
   16438:	20800e17 	ldw	r2,56(r4)
   1643c:	10001b26 	beq	r2,zero,164ac <_putc_r+0x88>
   16440:	30800217 	ldw	r2,8(r6)
   16444:	10bfffc4 	addi	r2,r2,-1
   16448:	30800215 	stw	r2,8(r6)
   1644c:	10000a16 	blt	r2,zero,16478 <_putc_r+0x54>
   16450:	30800017 	ldw	r2,0(r6)
   16454:	11400005 	stb	r5,0(r2)
   16458:	30800017 	ldw	r2,0(r6)
   1645c:	10c00044 	addi	r3,r2,1
   16460:	30c00015 	stw	r3,0(r6)
   16464:	10800003 	ldbu	r2,0(r2)
   16468:	dfc00317 	ldw	ra,12(sp)
   1646c:	dc000217 	ldw	r16,8(sp)
   16470:	dec00404 	addi	sp,sp,16
   16474:	f800283a 	ret
   16478:	30c00617 	ldw	r3,24(r6)
   1647c:	10c00616 	blt	r2,r3,16498 <_putc_r+0x74>
   16480:	30800017 	ldw	r2,0(r6)
   16484:	00c00284 	movi	r3,10
   16488:	11400005 	stb	r5,0(r2)
   1648c:	30800017 	ldw	r2,0(r6)
   16490:	11400003 	ldbu	r5,0(r2)
   16494:	28fff11e 	bne	r5,r3,1645c <_gp+0xffff5c28>
   16498:	8009883a 	mov	r4,r16
   1649c:	dfc00317 	ldw	ra,12(sp)
   164a0:	dc000217 	ldw	r16,8(sp)
   164a4:	dec00404 	addi	sp,sp,16
   164a8:	001658c1 	jmpi	1658c <__swbuf_r>
   164ac:	d9400015 	stw	r5,0(sp)
   164b0:	d9800115 	stw	r6,4(sp)
   164b4:	001188c0 	call	1188c <__sinit>
   164b8:	d9800117 	ldw	r6,4(sp)
   164bc:	d9400017 	ldw	r5,0(sp)
   164c0:	003fdf06 	br	16440 <_gp+0xffff5c0c>

000164c4 <putc>:
   164c4:	008000b4 	movhi	r2,2
   164c8:	defffc04 	addi	sp,sp,-16
   164cc:	10a20e04 	addi	r2,r2,-30664
   164d0:	dc000115 	stw	r16,4(sp)
   164d4:	14000017 	ldw	r16,0(r2)
   164d8:	dc400215 	stw	r17,8(sp)
   164dc:	dfc00315 	stw	ra,12(sp)
   164e0:	2023883a 	mov	r17,r4
   164e4:	80000226 	beq	r16,zero,164f0 <putc+0x2c>
   164e8:	80800e17 	ldw	r2,56(r16)
   164ec:	10001a26 	beq	r2,zero,16558 <putc+0x94>
   164f0:	28800217 	ldw	r2,8(r5)
   164f4:	10bfffc4 	addi	r2,r2,-1
   164f8:	28800215 	stw	r2,8(r5)
   164fc:	10000b16 	blt	r2,zero,1652c <putc+0x68>
   16500:	28800017 	ldw	r2,0(r5)
   16504:	14400005 	stb	r17,0(r2)
   16508:	28800017 	ldw	r2,0(r5)
   1650c:	10c00044 	addi	r3,r2,1
   16510:	28c00015 	stw	r3,0(r5)
   16514:	10800003 	ldbu	r2,0(r2)
   16518:	dfc00317 	ldw	ra,12(sp)
   1651c:	dc400217 	ldw	r17,8(sp)
   16520:	dc000117 	ldw	r16,4(sp)
   16524:	dec00404 	addi	sp,sp,16
   16528:	f800283a 	ret
   1652c:	28c00617 	ldw	r3,24(r5)
   16530:	10c00e16 	blt	r2,r3,1656c <putc+0xa8>
   16534:	28800017 	ldw	r2,0(r5)
   16538:	01000284 	movi	r4,10
   1653c:	14400005 	stb	r17,0(r2)
   16540:	28800017 	ldw	r2,0(r5)
   16544:	10c00003 	ldbu	r3,0(r2)
   16548:	193ff01e 	bne	r3,r4,1650c <_gp+0xffff5cd8>
   1654c:	280d883a 	mov	r6,r5
   16550:	180b883a 	mov	r5,r3
   16554:	00000706 	br	16574 <putc+0xb0>
   16558:	8009883a 	mov	r4,r16
   1655c:	d9400015 	stw	r5,0(sp)
   16560:	001188c0 	call	1188c <__sinit>
   16564:	d9400017 	ldw	r5,0(sp)
   16568:	003fe106 	br	164f0 <_gp+0xffff5cbc>
   1656c:	280d883a 	mov	r6,r5
   16570:	880b883a 	mov	r5,r17
   16574:	8009883a 	mov	r4,r16
   16578:	dfc00317 	ldw	ra,12(sp)
   1657c:	dc400217 	ldw	r17,8(sp)
   16580:	dc000117 	ldw	r16,4(sp)
   16584:	dec00404 	addi	sp,sp,16
   16588:	001658c1 	jmpi	1658c <__swbuf_r>

0001658c <__swbuf_r>:
   1658c:	defffb04 	addi	sp,sp,-20
   16590:	dcc00315 	stw	r19,12(sp)
   16594:	dc800215 	stw	r18,8(sp)
   16598:	dc000015 	stw	r16,0(sp)
   1659c:	dfc00415 	stw	ra,16(sp)
   165a0:	dc400115 	stw	r17,4(sp)
   165a4:	2025883a 	mov	r18,r4
   165a8:	2827883a 	mov	r19,r5
   165ac:	3021883a 	mov	r16,r6
   165b0:	20000226 	beq	r4,zero,165bc <__swbuf_r+0x30>
   165b4:	20800e17 	ldw	r2,56(r4)
   165b8:	10004226 	beq	r2,zero,166c4 <__swbuf_r+0x138>
   165bc:	80800617 	ldw	r2,24(r16)
   165c0:	8100030b 	ldhu	r4,12(r16)
   165c4:	80800215 	stw	r2,8(r16)
   165c8:	2080020c 	andi	r2,r4,8
   165cc:	10003626 	beq	r2,zero,166a8 <__swbuf_r+0x11c>
   165d0:	80c00417 	ldw	r3,16(r16)
   165d4:	18003426 	beq	r3,zero,166a8 <__swbuf_r+0x11c>
   165d8:	2088000c 	andi	r2,r4,8192
   165dc:	9c403fcc 	andi	r17,r19,255
   165e0:	10001a26 	beq	r2,zero,1664c <__swbuf_r+0xc0>
   165e4:	80800017 	ldw	r2,0(r16)
   165e8:	81000517 	ldw	r4,20(r16)
   165ec:	10c7c83a 	sub	r3,r2,r3
   165f0:	1900200e 	bge	r3,r4,16674 <__swbuf_r+0xe8>
   165f4:	18c00044 	addi	r3,r3,1
   165f8:	81000217 	ldw	r4,8(r16)
   165fc:	11400044 	addi	r5,r2,1
   16600:	81400015 	stw	r5,0(r16)
   16604:	213fffc4 	addi	r4,r4,-1
   16608:	81000215 	stw	r4,8(r16)
   1660c:	14c00005 	stb	r19,0(r2)
   16610:	80800517 	ldw	r2,20(r16)
   16614:	10c01e26 	beq	r2,r3,16690 <__swbuf_r+0x104>
   16618:	8080030b 	ldhu	r2,12(r16)
   1661c:	1080004c 	andi	r2,r2,1
   16620:	10000226 	beq	r2,zero,1662c <__swbuf_r+0xa0>
   16624:	00800284 	movi	r2,10
   16628:	88801926 	beq	r17,r2,16690 <__swbuf_r+0x104>
   1662c:	8805883a 	mov	r2,r17
   16630:	dfc00417 	ldw	ra,16(sp)
   16634:	dcc00317 	ldw	r19,12(sp)
   16638:	dc800217 	ldw	r18,8(sp)
   1663c:	dc400117 	ldw	r17,4(sp)
   16640:	dc000017 	ldw	r16,0(sp)
   16644:	dec00504 	addi	sp,sp,20
   16648:	f800283a 	ret
   1664c:	81401917 	ldw	r5,100(r16)
   16650:	00b7ffc4 	movi	r2,-8193
   16654:	21080014 	ori	r4,r4,8192
   16658:	2884703a 	and	r2,r5,r2
   1665c:	80801915 	stw	r2,100(r16)
   16660:	80800017 	ldw	r2,0(r16)
   16664:	8100030d 	sth	r4,12(r16)
   16668:	81000517 	ldw	r4,20(r16)
   1666c:	10c7c83a 	sub	r3,r2,r3
   16670:	193fe016 	blt	r3,r4,165f4 <_gp+0xffff5dc0>
   16674:	800b883a 	mov	r5,r16
   16678:	9009883a 	mov	r4,r18
   1667c:	00114a00 	call	114a0 <_fflush_r>
   16680:	1000071e 	bne	r2,zero,166a0 <__swbuf_r+0x114>
   16684:	80800017 	ldw	r2,0(r16)
   16688:	00c00044 	movi	r3,1
   1668c:	003fda06 	br	165f8 <_gp+0xffff5dc4>
   16690:	800b883a 	mov	r5,r16
   16694:	9009883a 	mov	r4,r18
   16698:	00114a00 	call	114a0 <_fflush_r>
   1669c:	103fe326 	beq	r2,zero,1662c <_gp+0xffff5df8>
   166a0:	00bfffc4 	movi	r2,-1
   166a4:	003fe206 	br	16630 <_gp+0xffff5dfc>
   166a8:	800b883a 	mov	r5,r16
   166ac:	9009883a 	mov	r4,r18
   166b0:	00166e40 	call	166e4 <__swsetup_r>
   166b4:	103ffa1e 	bne	r2,zero,166a0 <_gp+0xffff5e6c>
   166b8:	8100030b 	ldhu	r4,12(r16)
   166bc:	80c00417 	ldw	r3,16(r16)
   166c0:	003fc506 	br	165d8 <_gp+0xffff5da4>
   166c4:	001188c0 	call	1188c <__sinit>
   166c8:	003fbc06 	br	165bc <_gp+0xffff5d88>

000166cc <__swbuf>:
   166cc:	008000b4 	movhi	r2,2
   166d0:	10a20e04 	addi	r2,r2,-30664
   166d4:	280d883a 	mov	r6,r5
   166d8:	200b883a 	mov	r5,r4
   166dc:	11000017 	ldw	r4,0(r2)
   166e0:	001658c1 	jmpi	1658c <__swbuf_r>

000166e4 <__swsetup_r>:
   166e4:	008000b4 	movhi	r2,2
   166e8:	defffd04 	addi	sp,sp,-12
   166ec:	10a20e04 	addi	r2,r2,-30664
   166f0:	dc400115 	stw	r17,4(sp)
   166f4:	2023883a 	mov	r17,r4
   166f8:	11000017 	ldw	r4,0(r2)
   166fc:	dc000015 	stw	r16,0(sp)
   16700:	dfc00215 	stw	ra,8(sp)
   16704:	2821883a 	mov	r16,r5
   16708:	20000226 	beq	r4,zero,16714 <__swsetup_r+0x30>
   1670c:	20800e17 	ldw	r2,56(r4)
   16710:	10003126 	beq	r2,zero,167d8 <__swsetup_r+0xf4>
   16714:	8080030b 	ldhu	r2,12(r16)
   16718:	10c0020c 	andi	r3,r2,8
   1671c:	1009883a 	mov	r4,r2
   16720:	18000f26 	beq	r3,zero,16760 <__swsetup_r+0x7c>
   16724:	80c00417 	ldw	r3,16(r16)
   16728:	18001526 	beq	r3,zero,16780 <__swsetup_r+0x9c>
   1672c:	1100004c 	andi	r4,r2,1
   16730:	20001c1e 	bne	r4,zero,167a4 <__swsetup_r+0xc0>
   16734:	1080008c 	andi	r2,r2,2
   16738:	1000291e 	bne	r2,zero,167e0 <__swsetup_r+0xfc>
   1673c:	80800517 	ldw	r2,20(r16)
   16740:	80800215 	stw	r2,8(r16)
   16744:	18001c26 	beq	r3,zero,167b8 <__swsetup_r+0xd4>
   16748:	0005883a 	mov	r2,zero
   1674c:	dfc00217 	ldw	ra,8(sp)
   16750:	dc400117 	ldw	r17,4(sp)
   16754:	dc000017 	ldw	r16,0(sp)
   16758:	dec00304 	addi	sp,sp,12
   1675c:	f800283a 	ret
   16760:	2080040c 	andi	r2,r4,16
   16764:	10002e26 	beq	r2,zero,16820 <__swsetup_r+0x13c>
   16768:	2080010c 	andi	r2,r4,4
   1676c:	10001e1e 	bne	r2,zero,167e8 <__swsetup_r+0x104>
   16770:	80c00417 	ldw	r3,16(r16)
   16774:	20800214 	ori	r2,r4,8
   16778:	8080030d 	sth	r2,12(r16)
   1677c:	183feb1e 	bne	r3,zero,1672c <_gp+0xffff5ef8>
   16780:	1100a00c 	andi	r4,r2,640
   16784:	01408004 	movi	r5,512
   16788:	217fe826 	beq	r4,r5,1672c <_gp+0xffff5ef8>
   1678c:	800b883a 	mov	r5,r16
   16790:	8809883a 	mov	r4,r17
   16794:	00125780 	call	12578 <__smakebuf_r>
   16798:	8080030b 	ldhu	r2,12(r16)
   1679c:	80c00417 	ldw	r3,16(r16)
   167a0:	003fe206 	br	1672c <_gp+0xffff5ef8>
   167a4:	80800517 	ldw	r2,20(r16)
   167a8:	80000215 	stw	zero,8(r16)
   167ac:	0085c83a 	sub	r2,zero,r2
   167b0:	80800615 	stw	r2,24(r16)
   167b4:	183fe41e 	bne	r3,zero,16748 <_gp+0xffff5f14>
   167b8:	80c0030b 	ldhu	r3,12(r16)
   167bc:	0005883a 	mov	r2,zero
   167c0:	1900200c 	andi	r4,r3,128
   167c4:	203fe126 	beq	r4,zero,1674c <_gp+0xffff5f18>
   167c8:	18c01014 	ori	r3,r3,64
   167cc:	80c0030d 	sth	r3,12(r16)
   167d0:	00bfffc4 	movi	r2,-1
   167d4:	003fdd06 	br	1674c <_gp+0xffff5f18>
   167d8:	001188c0 	call	1188c <__sinit>
   167dc:	003fcd06 	br	16714 <_gp+0xffff5ee0>
   167e0:	0005883a 	mov	r2,zero
   167e4:	003fd606 	br	16740 <_gp+0xffff5f0c>
   167e8:	81400c17 	ldw	r5,48(r16)
   167ec:	28000626 	beq	r5,zero,16808 <__swsetup_r+0x124>
   167f0:	80801004 	addi	r2,r16,64
   167f4:	28800326 	beq	r5,r2,16804 <__swsetup_r+0x120>
   167f8:	8809883a 	mov	r4,r17
   167fc:	0011b0c0 	call	11b0c <_free_r>
   16800:	8100030b 	ldhu	r4,12(r16)
   16804:	80000c15 	stw	zero,48(r16)
   16808:	80c00417 	ldw	r3,16(r16)
   1680c:	00bff6c4 	movi	r2,-37
   16810:	1108703a 	and	r4,r2,r4
   16814:	80000115 	stw	zero,4(r16)
   16818:	80c00015 	stw	r3,0(r16)
   1681c:	003fd506 	br	16774 <_gp+0xffff5f40>
   16820:	00800244 	movi	r2,9
   16824:	88800015 	stw	r2,0(r17)
   16828:	20801014 	ori	r2,r4,64
   1682c:	8080030d 	sth	r2,12(r16)
   16830:	00bfffc4 	movi	r2,-1
   16834:	003fc506 	br	1674c <_gp+0xffff5f18>

00016838 <__register_exitproc>:
   16838:	defffa04 	addi	sp,sp,-24
   1683c:	dc000315 	stw	r16,12(sp)
   16840:	040000b4 	movhi	r16,2
   16844:	84220d04 	addi	r16,r16,-30668
   16848:	80c00017 	ldw	r3,0(r16)
   1684c:	dc400415 	stw	r17,16(sp)
   16850:	dfc00515 	stw	ra,20(sp)
   16854:	18805217 	ldw	r2,328(r3)
   16858:	2023883a 	mov	r17,r4
   1685c:	10003726 	beq	r2,zero,1693c <__register_exitproc+0x104>
   16860:	10c00117 	ldw	r3,4(r2)
   16864:	010007c4 	movi	r4,31
   16868:	20c00e16 	blt	r4,r3,168a4 <__register_exitproc+0x6c>
   1686c:	1a000044 	addi	r8,r3,1
   16870:	8800221e 	bne	r17,zero,168fc <__register_exitproc+0xc4>
   16874:	18c00084 	addi	r3,r3,2
   16878:	18c7883a 	add	r3,r3,r3
   1687c:	18c7883a 	add	r3,r3,r3
   16880:	12000115 	stw	r8,4(r2)
   16884:	10c7883a 	add	r3,r2,r3
   16888:	19400015 	stw	r5,0(r3)
   1688c:	0005883a 	mov	r2,zero
   16890:	dfc00517 	ldw	ra,20(sp)
   16894:	dc400417 	ldw	r17,16(sp)
   16898:	dc000317 	ldw	r16,12(sp)
   1689c:	dec00604 	addi	sp,sp,24
   168a0:	f800283a 	ret
   168a4:	00800034 	movhi	r2,0
   168a8:	10800004 	addi	r2,r2,0
   168ac:	10002626 	beq	r2,zero,16948 <__register_exitproc+0x110>
   168b0:	01006404 	movi	r4,400
   168b4:	d9400015 	stw	r5,0(sp)
   168b8:	d9800115 	stw	r6,4(sp)
   168bc:	d9c00215 	stw	r7,8(sp)
   168c0:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   168c4:	d9400017 	ldw	r5,0(sp)
   168c8:	d9800117 	ldw	r6,4(sp)
   168cc:	d9c00217 	ldw	r7,8(sp)
   168d0:	10001d26 	beq	r2,zero,16948 <__register_exitproc+0x110>
   168d4:	81000017 	ldw	r4,0(r16)
   168d8:	10000115 	stw	zero,4(r2)
   168dc:	02000044 	movi	r8,1
   168e0:	22405217 	ldw	r9,328(r4)
   168e4:	0007883a 	mov	r3,zero
   168e8:	12400015 	stw	r9,0(r2)
   168ec:	20805215 	stw	r2,328(r4)
   168f0:	10006215 	stw	zero,392(r2)
   168f4:	10006315 	stw	zero,396(r2)
   168f8:	883fde26 	beq	r17,zero,16874 <_gp+0xffff6040>
   168fc:	18c9883a 	add	r4,r3,r3
   16900:	2109883a 	add	r4,r4,r4
   16904:	1109883a 	add	r4,r2,r4
   16908:	21802215 	stw	r6,136(r4)
   1690c:	01800044 	movi	r6,1
   16910:	12406217 	ldw	r9,392(r2)
   16914:	30cc983a 	sll	r6,r6,r3
   16918:	4992b03a 	or	r9,r9,r6
   1691c:	12406215 	stw	r9,392(r2)
   16920:	21c04215 	stw	r7,264(r4)
   16924:	01000084 	movi	r4,2
   16928:	893fd21e 	bne	r17,r4,16874 <_gp+0xffff6040>
   1692c:	11006317 	ldw	r4,396(r2)
   16930:	218cb03a 	or	r6,r4,r6
   16934:	11806315 	stw	r6,396(r2)
   16938:	003fce06 	br	16874 <_gp+0xffff6040>
   1693c:	18805304 	addi	r2,r3,332
   16940:	18805215 	stw	r2,328(r3)
   16944:	003fc606 	br	16860 <_gp+0xffff602c>
   16948:	00bfffc4 	movi	r2,-1
   1694c:	003fd006 	br	16890 <_gp+0xffff605c>

00016950 <__call_exitprocs>:
   16950:	defff504 	addi	sp,sp,-44
   16954:	df000915 	stw	fp,36(sp)
   16958:	dd400615 	stw	r21,24(sp)
   1695c:	dc800315 	stw	r18,12(sp)
   16960:	dfc00a15 	stw	ra,40(sp)
   16964:	ddc00815 	stw	r23,32(sp)
   16968:	dd800715 	stw	r22,28(sp)
   1696c:	dd000515 	stw	r20,20(sp)
   16970:	dcc00415 	stw	r19,16(sp)
   16974:	dc400215 	stw	r17,8(sp)
   16978:	dc000115 	stw	r16,4(sp)
   1697c:	d9000015 	stw	r4,0(sp)
   16980:	2839883a 	mov	fp,r5
   16984:	04800044 	movi	r18,1
   16988:	057fffc4 	movi	r21,-1
   1698c:	008000b4 	movhi	r2,2
   16990:	10a20d04 	addi	r2,r2,-30668
   16994:	12000017 	ldw	r8,0(r2)
   16998:	45005217 	ldw	r20,328(r8)
   1699c:	44c05204 	addi	r19,r8,328
   169a0:	a0001c26 	beq	r20,zero,16a14 <__call_exitprocs+0xc4>
   169a4:	a0800117 	ldw	r2,4(r20)
   169a8:	15ffffc4 	addi	r23,r2,-1
   169ac:	b8000d16 	blt	r23,zero,169e4 <__call_exitprocs+0x94>
   169b0:	14000044 	addi	r16,r2,1
   169b4:	8421883a 	add	r16,r16,r16
   169b8:	8421883a 	add	r16,r16,r16
   169bc:	84402004 	addi	r17,r16,128
   169c0:	a463883a 	add	r17,r20,r17
   169c4:	a421883a 	add	r16,r20,r16
   169c8:	e0001e26 	beq	fp,zero,16a44 <__call_exitprocs+0xf4>
   169cc:	80804017 	ldw	r2,256(r16)
   169d0:	e0801c26 	beq	fp,r2,16a44 <__call_exitprocs+0xf4>
   169d4:	bdffffc4 	addi	r23,r23,-1
   169d8:	843fff04 	addi	r16,r16,-4
   169dc:	8c7fff04 	addi	r17,r17,-4
   169e0:	bd7ff91e 	bne	r23,r21,169c8 <_gp+0xffff6194>
   169e4:	00800034 	movhi	r2,0
   169e8:	10800004 	addi	r2,r2,0
   169ec:	10000926 	beq	r2,zero,16a14 <__call_exitprocs+0xc4>
   169f0:	a0800117 	ldw	r2,4(r20)
   169f4:	1000301e 	bne	r2,zero,16ab8 <__call_exitprocs+0x168>
   169f8:	a0800017 	ldw	r2,0(r20)
   169fc:	10003226 	beq	r2,zero,16ac8 <__call_exitprocs+0x178>
   16a00:	a009883a 	mov	r4,r20
   16a04:	98800015 	stw	r2,0(r19)
   16a08:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   16a0c:	9d000017 	ldw	r20,0(r19)
   16a10:	a03fe41e 	bne	r20,zero,169a4 <_gp+0xffff6170>
   16a14:	dfc00a17 	ldw	ra,40(sp)
   16a18:	df000917 	ldw	fp,36(sp)
   16a1c:	ddc00817 	ldw	r23,32(sp)
   16a20:	dd800717 	ldw	r22,28(sp)
   16a24:	dd400617 	ldw	r21,24(sp)
   16a28:	dd000517 	ldw	r20,20(sp)
   16a2c:	dcc00417 	ldw	r19,16(sp)
   16a30:	dc800317 	ldw	r18,12(sp)
   16a34:	dc400217 	ldw	r17,8(sp)
   16a38:	dc000117 	ldw	r16,4(sp)
   16a3c:	dec00b04 	addi	sp,sp,44
   16a40:	f800283a 	ret
   16a44:	a0800117 	ldw	r2,4(r20)
   16a48:	80c00017 	ldw	r3,0(r16)
   16a4c:	10bfffc4 	addi	r2,r2,-1
   16a50:	15c01426 	beq	r2,r23,16aa4 <__call_exitprocs+0x154>
   16a54:	80000015 	stw	zero,0(r16)
   16a58:	183fde26 	beq	r3,zero,169d4 <_gp+0xffff61a0>
   16a5c:	95c8983a 	sll	r4,r18,r23
   16a60:	a0806217 	ldw	r2,392(r20)
   16a64:	a5800117 	ldw	r22,4(r20)
   16a68:	2084703a 	and	r2,r4,r2
   16a6c:	10000b26 	beq	r2,zero,16a9c <__call_exitprocs+0x14c>
   16a70:	a0806317 	ldw	r2,396(r20)
   16a74:	2088703a 	and	r4,r4,r2
   16a78:	20000c1e 	bne	r4,zero,16aac <__call_exitprocs+0x15c>
   16a7c:	89400017 	ldw	r5,0(r17)
   16a80:	d9000017 	ldw	r4,0(sp)
   16a84:	183ee83a 	callr	r3
   16a88:	a0800117 	ldw	r2,4(r20)
   16a8c:	15bfbf1e 	bne	r2,r22,1698c <_gp+0xffff6158>
   16a90:	98800017 	ldw	r2,0(r19)
   16a94:	153fcf26 	beq	r2,r20,169d4 <_gp+0xffff61a0>
   16a98:	003fbc06 	br	1698c <_gp+0xffff6158>
   16a9c:	183ee83a 	callr	r3
   16aa0:	003ff906 	br	16a88 <_gp+0xffff6254>
   16aa4:	a5c00115 	stw	r23,4(r20)
   16aa8:	003feb06 	br	16a58 <_gp+0xffff6224>
   16aac:	89000017 	ldw	r4,0(r17)
   16ab0:	183ee83a 	callr	r3
   16ab4:	003ff406 	br	16a88 <_gp+0xffff6254>
   16ab8:	a0800017 	ldw	r2,0(r20)
   16abc:	a027883a 	mov	r19,r20
   16ac0:	1029883a 	mov	r20,r2
   16ac4:	003fb606 	br	169a0 <_gp+0xffff616c>
   16ac8:	0005883a 	mov	r2,zero
   16acc:	003ffb06 	br	16abc <_gp+0xffff6288>

00016ad0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16ad0:	defffd04 	addi	sp,sp,-12
   16ad4:	df000215 	stw	fp,8(sp)
   16ad8:	df000204 	addi	fp,sp,8
   16adc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   16ae0:	0001883a 	nop
   16ae4:	e0bfff17 	ldw	r2,-4(fp)
   16ae8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   16aec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16af0:	10000226 	beq	r2,zero,16afc <_exit+0x2c>
    ALT_SIM_FAIL();
   16af4:	002af070 	cmpltui	zero,zero,43969
   16af8:	00000106 	br	16b00 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   16afc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   16b00:	003fff06 	br	16b00 <_gp+0xffff62cc>
