
firmware.elf:     file format elf32-littlenios2
firmware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002ee8 memsz 0x00002ee8 flags r-x
    LOAD off    0x00003f08 vaddr 0x00012f08 paddr 0x0001458c align 2**12
         filesz 0x00001684 memsz 0x00001684 flags rw-
    LOAD off    0x00005c10 vaddr 0x00015c10 paddr 0x00015c10 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002bdc  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f8  00012e10  00012e10  00003e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001684  00012f08  0001458c  00003f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00015c10  00015c10  00005c10  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00015d30  00015d30  0000558c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000558c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005f8  00000000  00000000  000055b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000080df  00000000  00000000  00005ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c88  00000000  00000000  0000dc87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002f87  00000000  00000000  0001090f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ce8  00000000  00000000  00013898  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001df1  00000000  00000000  00014580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009a9  00000000  00000000  00016371  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00016d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  00016d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00018c4a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00018c4d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00018c50  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00018c51  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00018c52  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00018c56  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00018c5a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00018c5e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00018c67  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00018c70  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00018c79  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00018c84  2**0
                  CONTENTS, READONLY
 29 .jdi          0000491a  00000000  00000000  00018ca5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000718af  00000000  00000000  0001d5bf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
00012e10 l    d  .rodata	00000000 .rodata
00012f08 l    d  .rwdata	00000000 .rwdata
00015c10 l    d  .bss	00000000 .bss
00015d30 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../firmware_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_load.c
00010a1c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010b84 l     F .text	00000034 alt_dev_reg
00012f08 l     O .rwdata	00001060 jtag_uart
00013f68 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010e78 l     F .text	00000210 altera_avalon_jtag_uart_irq
00011088 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000116c0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00011c8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011dc0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011dec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001203c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001231c l     F .text	0000003c alt_get_errno
00012358 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0001413c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015c28 g     O .bss	00000004 alt_instruction_exception_handler
00010b08 g     F .text	0000007c alt_main
000103bc g     F .text	00000064 read_accerometer
00015c30 g     O .bss	00000100 alt_irq
0001458c g       *ABS*	00000000 __flash_rwdata_start
0001036c g     F .text	00000028 read_switches
000104e0 g     F .text	0000008c shiftBuffer
000127c8 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
000118fc g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00015c2c g     O .bss	00000004 errno
00015c14 g     O .bss	00000004 alt_argv
0001c560 g       *ABS*	00000000 _gp
00013fbc g     O .rwdata	00000180 alt_fd_list
00011f8c g     F .text	00000090 alt_find_dev
00010714 g     F .text	00000148 memcpy
00012e10 g     O .rodata	0000004b seven_seg_digits_decode_abcdefg
00012120 g     F .text	0000007c alt_io_redirect
00012e10 g       *ABS*	00000000 __DTOR_END__
000129b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00011280 g     F .text	0000021c altera_avalon_jtag_uart_read
00014570 g     O .rwdata	00000004 alt_max_fd
0001219c g     F .text	00000180 alt_irq_register
00010420 g     F .text	00000068 decode_7seg
00014584 g     O .rwdata	00000004 _global_impure_ptr
00015d30 g       *ABS*	00000000 __bss_end
000126c0 g     F .text	00000108 alt_tick
00012624 g     F .text	0000009c alt_alarm_stop
00015c1c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d8 alt_irq_handler
00013f94 g     O .rwdata	00000028 alt_dev_null
00011da0 g     F .text	00000020 alt_dcache_flush_all
0001458c g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00014568 g     O .rwdata	00000008 alt_dev_list
00012f08 g       *ABS*	00000000 __ram_rodata_end
00010394 g     F .text	00000028 read_buttons
00010270 g     F .text	00000034 write_leds
00015d30 g       *ABS*	00000000 end
000102a4 g     F .text	000000c8 write_hex
00010dc4 g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
00012e10 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0001173c g     F .text	00000074 alt_avalon_timer_sc_init
0001149c g     F .text	00000224 altera_avalon_jtag_uart_write
00012c34 g     F .text	00000180 __call_exitprocs
00010234 g     F .text	0000003c _start
00015c20 g     O .bss	00000004 _alt_tick_rate
00015c24 g     O .bss	00000004 _alt_nticks
00010bf0 g     F .text	00000070 alt_sys_init
000117ec g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
00012b1c g     F .text	00000118 __register_exitproc
0001056c g     F .text	00000040 getWindow
00011128 g     F .text	00000068 altera_avalon_jtag_uart_close
00012db4 g     F .text	00000028 .hidden __mulsi3
00012f08 g       *ABS*	00000000 __ram_rwdata_start
00012e10 g       *ABS*	00000000 __ram_rodata_start
00010c60 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000128f4 g     F .text	000000c4 alt_get_fd
000119c8 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
00012aa0 g     F .text	0000007c memcmp
00010d20 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d30 g       *ABS*	00000000 __alt_stack_base
00010d70 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000127ec g     F .text	00000108 alt_find_file
00011e28 g     F .text	000000a4 alt_dev_llist_insert
00015c10 g       *ABS*	00000000 __bss_start
0001085c g     F .text	00000128 memset
000105ac g     F .text	00000168 main
00015c18 g     O .bss	00000004 alt_envp
00010cc0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014574 g     O .rwdata	00000004 alt_errno
00012e10 g       *ABS*	00000000 __CTOR_END__
00012e10 g       *ABS*	00000000 __flash_rodata_start
00012e10 g       *ABS*	00000000 __DTOR_LIST__
00010488 g     F .text	00000058 setBuffer
00010bb8 g     F .text	00000038 alt_irq_init
000125a0 g     F .text	00000084 alt_release_fd
00012e5b g     O .rodata	0000004b seven_seg_digits_decode_gfedcba
00012a54 g     F .text	00000014 atexit
00014588 g     O .rwdata	00000004 _impure_ptr
00015c10 g     O .bss	00000004 alt_argc
00011f2c g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00014560 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000117b0 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
0001458c g       *ABS*	00000000 _edata
00015d30 g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
00011190 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00012a68 g     F .text	00000038 exit
00011a94 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012ddc g     F .text	00000034 _exit
00011b60 g     F .text	0000012c alt_alarm_start
00011830 g     F .text	00000068 alt_up_accelerometer_spi_read
00011898 g     F .text	00000064 alt_up_accelerometer_spi_write
00010984 g     F .text	00000098 strlen
00012444 g     F .text	0000015c open
0001201c g     F .text	00000020 alt_icache_flush_all
00014578 g     O .rwdata	00000004 alt_priority_mask
0001457c g     O .rwdata	00000008 alt_alarm_list
00011ecc g     F .text	00000060 _do_ctors
00011cc8 g     F .text	000000d8 close
00010a84 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	00800074 	movhi	r2,1
   10140:	10970c04 	addi	r2,r2,23600
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	10970c04 	addi	r2,r2,23600
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a5b217 	ldw	r2,-26936(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a5b217 	ldw	r2,-26936(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1023c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10240:	d6b15814 	ori	gp,gp,50528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10970414 	ori	r2,r2,23568

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18d74c14 	ori	r3,r3,23856

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <__alt_data_end+0xffff0258>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	0010a840 	call	10a84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	0010b080 	call	10b08 <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <__alt_data_end+0xffff026c>

00010270 <write_leds>:
#include "altera_avalon_pio_regs.h"

#ifndef UTILS_H_
#define UTILS_H_

void write_leds(int leds){
   10270:	defffe04 	addi	sp,sp,-8
   10274:	df000115 	stw	fp,4(sp)
   10278:	df000104 	addi	fp,sp,4
   1027c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, leds);
   10280:	008000b4 	movhi	r2,2
   10284:	10842804 	addi	r2,r2,4256
   10288:	e0ffff17 	ldw	r3,-4(fp)
   1028c:	10c00035 	stwio	r3,0(r2)
}
   10290:	0001883a 	nop
   10294:	e037883a 	mov	sp,fp
   10298:	df000017 	ldw	fp,0(sp)
   1029c:	dec00104 	addi	sp,sp,4
   102a0:	f800283a 	ret

000102a4 <write_hex>:

void write_hex(unsigned char hex[6]) {
   102a4:	defffe04 	addi	sp,sp,-8
   102a8:	df000115 	stw	fp,4(sp)
   102ac:	df000104 	addi	fp,sp,4
   102b0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, hex[5]);
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	10800144 	addi	r2,r2,5
   102bc:	10800003 	ldbu	r2,0(r2)
   102c0:	10c03fcc 	andi	r3,r2,255
   102c4:	008000b4 	movhi	r2,2
   102c8:	10842004 	addi	r2,r2,4224
   102cc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, hex[4]);
   102d0:	e0bfff17 	ldw	r2,-4(fp)
   102d4:	10800104 	addi	r2,r2,4
   102d8:	10800003 	ldbu	r2,0(r2)
   102dc:	10c03fcc 	andi	r3,r2,255
   102e0:	008000b4 	movhi	r2,2
   102e4:	10841c04 	addi	r2,r2,4208
   102e8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, hex[3]);
   102ec:	e0bfff17 	ldw	r2,-4(fp)
   102f0:	108000c4 	addi	r2,r2,3
   102f4:	10800003 	ldbu	r2,0(r2)
   102f8:	10c03fcc 	andi	r3,r2,255
   102fc:	008000b4 	movhi	r2,2
   10300:	10841804 	addi	r2,r2,4192
   10304:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, hex[2]);
   10308:	e0bfff17 	ldw	r2,-4(fp)
   1030c:	10800084 	addi	r2,r2,2
   10310:	10800003 	ldbu	r2,0(r2)
   10314:	10c03fcc 	andi	r3,r2,255
   10318:	008000b4 	movhi	r2,2
   1031c:	10841404 	addi	r2,r2,4176
   10320:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, hex[1]);
   10324:	e0bfff17 	ldw	r2,-4(fp)
   10328:	10800044 	addi	r2,r2,1
   1032c:	10800003 	ldbu	r2,0(r2)
   10330:	10c03fcc 	andi	r3,r2,255
   10334:	008000b4 	movhi	r2,2
   10338:	10841004 	addi	r2,r2,4160
   1033c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, hex[0]);
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	10800003 	ldbu	r2,0(r2)
   10348:	10c03fcc 	andi	r3,r2,255
   1034c:	008000b4 	movhi	r2,2
   10350:	10840c04 	addi	r2,r2,4144
   10354:	10c00035 	stwio	r3,0(r2)
}
   10358:	0001883a 	nop
   1035c:	e037883a 	mov	sp,fp
   10360:	df000017 	ldw	fp,0(sp)
   10364:	dec00104 	addi	sp,sp,4
   10368:	f800283a 	ret

0001036c <read_switches>:

int read_switches() {
   1036c:	deffff04 	addi	sp,sp,-4
   10370:	df000015 	stw	fp,0(sp)
   10374:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10378:	008000b4 	movhi	r2,2
   1037c:	10842404 	addi	r2,r2,4240
   10380:	10800037 	ldwio	r2,0(r2)
}
   10384:	e037883a 	mov	sp,fp
   10388:	df000017 	ldw	fp,0(sp)
   1038c:	dec00104 	addi	sp,sp,4
   10390:	f800283a 	ret

00010394 <read_buttons>:

int read_buttons() {
   10394:	deffff04 	addi	sp,sp,-4
   10398:	df000015 	stw	fp,0(sp)
   1039c:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   103a0:	008000b4 	movhi	r2,2
   103a4:	10840804 	addi	r2,r2,4128
   103a8:	10800037 	ldwio	r2,0(r2)
}
   103ac:	e037883a 	mov	sp,fp
   103b0:	df000017 	ldw	fp,0(sp)
   103b4:	dec00104 	addi	sp,sp,4
   103b8:	f800283a 	ret

000103bc <read_accerometer>:

void read_accerometer(alt_up_accelerometer_spi_dev *acc_dev, alt_32 coords[3]) {
   103bc:	defffc04 	addi	sp,sp,-16
   103c0:	dfc00315 	stw	ra,12(sp)
   103c4:	df000215 	stw	fp,8(sp)
   103c8:	df000204 	addi	fp,sp,8
   103cc:	e13ffe15 	stw	r4,-8(fp)
   103d0:	e17fff15 	stw	r5,-4(fp)
	alt_up_accelerometer_spi_read_x_axis(acc_dev, &coords[0]);
   103d4:	e17fff17 	ldw	r5,-4(fp)
   103d8:	e13ffe17 	ldw	r4,-8(fp)
   103dc:	00118fc0 	call	118fc <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, &coords[1]);
   103e0:	e0bfff17 	ldw	r2,-4(fp)
   103e4:	10800104 	addi	r2,r2,4
   103e8:	100b883a 	mov	r5,r2
   103ec:	e13ffe17 	ldw	r4,-8(fp)
   103f0:	00119c80 	call	119c8 <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, &coords[2]);
   103f4:	e0bfff17 	ldw	r2,-4(fp)
   103f8:	10800204 	addi	r2,r2,8
   103fc:	100b883a 	mov	r5,r2
   10400:	e13ffe17 	ldw	r4,-8(fp)
   10404:	0011a940 	call	11a94 <alt_up_accelerometer_spi_read_z_axis>
}
   10408:	0001883a 	nop
   1040c:	e037883a 	mov	sp,fp
   10410:	dfc00117 	ldw	ra,4(sp)
   10414:	df000017 	ldw	fp,0(sp)
   10418:	dec00204 	addi	sp,sp,8
   1041c:	f800283a 	ret

00010420 <decode_7seg>:
/*  x     y     z     */
    0x64, 0x6E, 0x5B
};

unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
   10420:	defffe04 	addi	sp,sp,-8
   10424:	df000115 	stw	fp,4(sp)
   10428:	df000104 	addi	fp,sp,4
   1042c:	2005883a 	mov	r2,r4
   10430:	e0bfff05 	stb	r2,-4(fp)
	if (chr == ' ') return 0xFF;
   10434:	e0bfff03 	ldbu	r2,-4(fp)
   10438:	10800818 	cmpnei	r2,r2,32
   1043c:	1000021e 	bne	r2,zero,10448 <decode_7seg+0x28>
   10440:	00bfffc4 	movi	r2,-1
   10444:	00000c06 	br	10478 <decode_7seg+0x58>
    if (chr > (unsigned char)'z')
   10448:	e0bfff03 	ldbu	r2,-4(fp)
   1044c:	10801ef0 	cmpltui	r2,r2,123
   10450:	1000021e 	bne	r2,zero,1045c <decode_7seg+0x3c>
        return 0xFF;
   10454:	00bfffc4 	movi	r2,-1
   10458:	00000706 	br	10478 <decode_7seg+0x58>
//    return ~seven_seg_digits_decode_abcdefg[chr - '0'];
	return ~seven_seg_digits_decode_gfedcba[chr - '0'];
   1045c:	e0bfff03 	ldbu	r2,-4(fp)
   10460:	10fff404 	addi	r3,r2,-48
   10464:	00800074 	movhi	r2,1
   10468:	108b96c4 	addi	r2,r2,11867
   1046c:	10c5883a 	add	r2,r2,r3
   10470:	10800003 	ldbu	r2,0(r2)
   10474:	0084303a 	nor	r2,zero,r2
}
   10478:	e037883a 	mov	sp,fp
   1047c:	df000017 	ldw	fp,0(sp)
   10480:	dec00104 	addi	sp,sp,4
   10484:	f800283a 	ret

00010488 <setBuffer>:
//    alt_irq_register(TIMER_IRQ, 0, isr);
//    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
//
//}

void setBuffer(unsigned char* word, unsigned char buffer[40]){
   10488:	defffc04 	addi	sp,sp,-16
   1048c:	dfc00315 	stw	ra,12(sp)
   10490:	df000215 	stw	fp,8(sp)
   10494:	df000204 	addi	fp,sp,8
   10498:	e13ffe15 	stw	r4,-8(fp)
   1049c:	e17fff15 	stw	r5,-4(fp)
	memset(buffer, 255, 40);
   104a0:	01800a04 	movi	r6,40
   104a4:	01403fc4 	movi	r5,255
   104a8:	e13fff17 	ldw	r4,-4(fp)
   104ac:	001085c0 	call	1085c <memset>
	memcpy(buffer, word, strlen(word));
   104b0:	e13ffe17 	ldw	r4,-8(fp)
   104b4:	00109840 	call	10984 <strlen>
   104b8:	100d883a 	mov	r6,r2
   104bc:	e17ffe17 	ldw	r5,-8(fp)
   104c0:	e13fff17 	ldw	r4,-4(fp)
   104c4:	00107140 	call	10714 <memcpy>
}
   104c8:	0001883a 	nop
   104cc:	e037883a 	mov	sp,fp
   104d0:	dfc00117 	ldw	ra,4(sp)
   104d4:	df000017 	ldw	fp,0(sp)
   104d8:	dec00204 	addi	sp,sp,8
   104dc:	f800283a 	ret

000104e0 <shiftBuffer>:

void shiftBuffer(unsigned char buffer[40]){
   104e0:	defffc04 	addi	sp,sp,-16
   104e4:	df000315 	stw	fp,12(sp)
   104e8:	df000304 	addi	fp,sp,12
   104ec:	e13fff15 	stw	r4,-4(fp)
	int tmp = buffer[0];
   104f0:	e0bfff17 	ldw	r2,-4(fp)
   104f4:	10800003 	ldbu	r2,0(r2)
   104f8:	10803fcc 	andi	r2,r2,255
   104fc:	e0bffe15 	stw	r2,-8(fp)
	for(int i = 1; i < 40; i++){
   10500:	00800044 	movi	r2,1
   10504:	e0bffd15 	stw	r2,-12(fp)
   10508:	00000c06 	br	1053c <shiftBuffer+0x5c>
		buffer[i-1] = buffer[i];
   1050c:	e0bffd17 	ldw	r2,-12(fp)
   10510:	10bfffc4 	addi	r2,r2,-1
   10514:	e0ffff17 	ldw	r3,-4(fp)
   10518:	1885883a 	add	r2,r3,r2
   1051c:	e0fffd17 	ldw	r3,-12(fp)
   10520:	e13fff17 	ldw	r4,-4(fp)
   10524:	20c7883a 	add	r3,r4,r3
   10528:	18c00003 	ldbu	r3,0(r3)
   1052c:	10c00005 	stb	r3,0(r2)
	memcpy(buffer, word, strlen(word));
}

void shiftBuffer(unsigned char buffer[40]){
	int tmp = buffer[0];
	for(int i = 1; i < 40; i++){
   10530:	e0bffd17 	ldw	r2,-12(fp)
   10534:	10800044 	addi	r2,r2,1
   10538:	e0bffd15 	stw	r2,-12(fp)
   1053c:	e0bffd17 	ldw	r2,-12(fp)
   10540:	10800a10 	cmplti	r2,r2,40
   10544:	103ff11e 	bne	r2,zero,1050c <__alt_data_end+0xffff050c>
		buffer[i-1] = buffer[i];
	}
	buffer[39] = tmp;
   10548:	e0bfff17 	ldw	r2,-4(fp)
   1054c:	108009c4 	addi	r2,r2,39
   10550:	e0fffe17 	ldw	r3,-8(fp)
   10554:	10c00005 	stb	r3,0(r2)
}
   10558:	0001883a 	nop
   1055c:	e037883a 	mov	sp,fp
   10560:	df000017 	ldw	fp,0(sp)
   10564:	dec00104 	addi	sp,sp,4
   10568:	f800283a 	ret

0001056c <getWindow>:

void getWindow(unsigned char window[6], unsigned char buffer[40]){
   1056c:	defffc04 	addi	sp,sp,-16
   10570:	dfc00315 	stw	ra,12(sp)
   10574:	df000215 	stw	fp,8(sp)
   10578:	df000204 	addi	fp,sp,8
   1057c:	e13ffe15 	stw	r4,-8(fp)
   10580:	e17fff15 	stw	r5,-4(fp)
	memcpy(window, buffer, 6);
   10584:	01800184 	movi	r6,6
   10588:	e17fff17 	ldw	r5,-4(fp)
   1058c:	e13ffe17 	ldw	r4,-8(fp)
   10590:	00107140 	call	10714 <memcpy>
}
   10594:	0001883a 	nop
   10598:	e037883a 	mov	sp,fp
   1059c:	dfc00117 	ldw	ra,4(sp)
   105a0:	df000017 	ldw	fp,0(sp)
   105a4:	dec00204 	addi	sp,sp,8
   105a8:	f800283a 	ret

000105ac <main>:


int main() {
   105ac:	deffe204 	addi	sp,sp,-120
   105b0:	dfc01d15 	stw	ra,116(sp)
   105b4:	df001c15 	stw	fp,112(sp)
   105b8:	df001c04 	addi	fp,sp,112
//	int hex[6];
	char letter;
    alt_32 coords[3]; // contains x, y, z data

	alt_up_accelerometer_spi_dev *acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   105bc:	01000074 	movhi	r4,1
   105c0:	210baa04 	addi	r4,r4,11944
   105c4:	00117b00 	call	117b0 <alt_up_accelerometer_spi_open_dev>
   105c8:	e0bfe615 	stw	r2,-104(fp)

//	FILE* file = fopen("/dev/stdin", "r");



    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   105cc:	e0bfe617 	ldw	r2,-104(fp)
   105d0:	1000021e 	bne	r2,zero,105dc <main+0x30>
        return 1;
   105d4:	00800044 	movi	r2,1
   105d8:	00004906 	br	10700 <main+0x154>
    }

    // k, m, v, w, x, z - are not in the table
    unsigned char word[40] = "hello you lost 123456789ABCDEF";
   105dc:	009b1b34 	movhi	r2,27756
   105e0:	10995a04 	addi	r2,r2,25960
   105e4:	e0bfea15 	stw	r2,-88(fp)
   105e8:	009bde74 	movhi	r2,28537
   105ec:	10881bc4 	addi	r2,r2,8303
   105f0:	e0bfeb15 	stw	r2,-84(fp)
   105f4:	009bdb34 	movhi	r2,28524
   105f8:	10881d44 	addi	r2,r2,8309
   105fc:	e0bfec15 	stw	r2,-80(fp)
   10600:	008c4834 	movhi	r2,12576
   10604:	109d1cc4 	addi	r2,r2,29811
   10608:	e0bfed15 	stw	r2,-76(fp)
   1060c:	008d4d34 	movhi	r2,13620
   10610:	108ccc84 	addi	r2,r2,13106
   10614:	e0bfee15 	stw	r2,-72(fp)
   10618:	008e4e34 	movhi	r2,14648
   1061c:	108dcd84 	addi	r2,r2,14134
   10620:	e0bfef15 	stw	r2,-68(fp)
   10624:	009110f4 	movhi	r2,17475
   10628:	10909044 	addi	r2,r2,16961
   1062c:	e0bff015 	stw	r2,-64(fp)
   10630:	00919144 	movi	r2,17989
   10634:	e0bff115 	stw	r2,-60(fp)
   10638:	e03ff215 	stw	zero,-56(fp)
   1063c:	e03ff315 	stw	zero,-52(fp)

    unsigned char display_buff[40];
    unsigned char window[6];

    setBuffer(word, display_buff);
   10640:	e0fff404 	addi	r3,fp,-48
   10644:	e0bfea04 	addi	r2,fp,-88
   10648:	180b883a 	mov	r5,r3
   1064c:	1009883a 	mov	r4,r2
   10650:	00104880 	call	10488 <setBuffer>
    int i = 100000;
   10654:	008000b4 	movhi	r2,2
   10658:	10a1a804 	addi	r2,r2,-31072
   1065c:	e0bfe415 	stw	r2,-112(fp)
    while(1){
    	if(i == 0){
   10660:	e0bfe417 	ldw	r2,-112(fp)
   10664:	1000221e 	bne	r2,zero,106f0 <main+0x144>
			getWindow(window, display_buff);
   10668:	e0fff404 	addi	r3,fp,-48
   1066c:	e0bffe04 	addi	r2,fp,-8
   10670:	180b883a 	mov	r5,r3
   10674:	1009883a 	mov	r4,r2
   10678:	001056c0 	call	1056c <getWindow>
			for(int i = 0; i < 6; i++){
   1067c:	e03fe515 	stw	zero,-108(fp)
   10680:	00000f06 	br	106c0 <main+0x114>
				window[i] = decode_7seg(window[i]);
   10684:	e0fffe04 	addi	r3,fp,-8
   10688:	e0bfe517 	ldw	r2,-108(fp)
   1068c:	1885883a 	add	r2,r3,r2
   10690:	10800003 	ldbu	r2,0(r2)
   10694:	10803fcc 	andi	r2,r2,255
   10698:	1009883a 	mov	r4,r2
   1069c:	00104200 	call	10420 <decode_7seg>
   106a0:	1009883a 	mov	r4,r2
   106a4:	e0fffe04 	addi	r3,fp,-8
   106a8:	e0bfe517 	ldw	r2,-108(fp)
   106ac:	1885883a 	add	r2,r3,r2
   106b0:	11000005 	stb	r4,0(r2)
    setBuffer(word, display_buff);
    int i = 100000;
    while(1){
    	if(i == 0){
			getWindow(window, display_buff);
			for(int i = 0; i < 6; i++){
   106b4:	e0bfe517 	ldw	r2,-108(fp)
   106b8:	10800044 	addi	r2,r2,1
   106bc:	e0bfe515 	stw	r2,-108(fp)
   106c0:	e0bfe517 	ldw	r2,-108(fp)
   106c4:	10800190 	cmplti	r2,r2,6
   106c8:	103fee1e 	bne	r2,zero,10684 <__alt_data_end+0xffff0684>
				window[i] = decode_7seg(window[i]);
			}
			write_hex(window);
   106cc:	e0bffe04 	addi	r2,fp,-8
   106d0:	1009883a 	mov	r4,r2
   106d4:	00102a40 	call	102a4 <write_hex>
			shiftBuffer(display_buff);
   106d8:	e0bff404 	addi	r2,fp,-48
   106dc:	1009883a 	mov	r4,r2
   106e0:	00104e00 	call	104e0 <shiftBuffer>
			i = 100000;
   106e4:	008000b4 	movhi	r2,2
   106e8:	10a1a804 	addi	r2,r2,-31072
   106ec:	e0bfe415 	stw	r2,-112(fp)
    	}
    	i--;
   106f0:	e0bfe417 	ldw	r2,-112(fp)
   106f4:	10bfffc4 	addi	r2,r2,-1
   106f8:	e0bfe415 	stw	r2,-112(fp)
    }
   106fc:	003fd806 	br	10660 <__alt_data_end+0xffff0660>

    	// write_leds(leds);
    }

    return 0;
}
   10700:	e037883a 	mov	sp,fp
   10704:	dfc00117 	ldw	ra,4(sp)
   10708:	df000017 	ldw	fp,0(sp)
   1070c:	dec00204 	addi	sp,sp,8
   10710:	f800283a 	ret

00010714 <memcpy>:
   10714:	defffd04 	addi	sp,sp,-12
   10718:	dfc00215 	stw	ra,8(sp)
   1071c:	dc400115 	stw	r17,4(sp)
   10720:	dc000015 	stw	r16,0(sp)
   10724:	00c003c4 	movi	r3,15
   10728:	2005883a 	mov	r2,r4
   1072c:	1980452e 	bgeu	r3,r6,10844 <memcpy+0x130>
   10730:	2906b03a 	or	r3,r5,r4
   10734:	18c000cc 	andi	r3,r3,3
   10738:	1800441e 	bne	r3,zero,1084c <memcpy+0x138>
   1073c:	347ffc04 	addi	r17,r6,-16
   10740:	8822d13a 	srli	r17,r17,4
   10744:	28c00104 	addi	r3,r5,4
   10748:	23400104 	addi	r13,r4,4
   1074c:	8820913a 	slli	r16,r17,4
   10750:	2b000204 	addi	r12,r5,8
   10754:	22c00204 	addi	r11,r4,8
   10758:	84000504 	addi	r16,r16,20
   1075c:	2a800304 	addi	r10,r5,12
   10760:	22400304 	addi	r9,r4,12
   10764:	2c21883a 	add	r16,r5,r16
   10768:	2811883a 	mov	r8,r5
   1076c:	200f883a 	mov	r7,r4
   10770:	41000017 	ldw	r4,0(r8)
   10774:	1fc00017 	ldw	ra,0(r3)
   10778:	63c00017 	ldw	r15,0(r12)
   1077c:	39000015 	stw	r4,0(r7)
   10780:	53800017 	ldw	r14,0(r10)
   10784:	6fc00015 	stw	ra,0(r13)
   10788:	5bc00015 	stw	r15,0(r11)
   1078c:	4b800015 	stw	r14,0(r9)
   10790:	18c00404 	addi	r3,r3,16
   10794:	39c00404 	addi	r7,r7,16
   10798:	42000404 	addi	r8,r8,16
   1079c:	6b400404 	addi	r13,r13,16
   107a0:	63000404 	addi	r12,r12,16
   107a4:	5ac00404 	addi	r11,r11,16
   107a8:	52800404 	addi	r10,r10,16
   107ac:	4a400404 	addi	r9,r9,16
   107b0:	1c3fef1e 	bne	r3,r16,10770 <__alt_data_end+0xffff0770>
   107b4:	89c00044 	addi	r7,r17,1
   107b8:	380e913a 	slli	r7,r7,4
   107bc:	310003cc 	andi	r4,r6,15
   107c0:	02c000c4 	movi	r11,3
   107c4:	11c7883a 	add	r3,r2,r7
   107c8:	29cb883a 	add	r5,r5,r7
   107cc:	5900212e 	bgeu	r11,r4,10854 <memcpy+0x140>
   107d0:	1813883a 	mov	r9,r3
   107d4:	2811883a 	mov	r8,r5
   107d8:	200f883a 	mov	r7,r4
   107dc:	42800017 	ldw	r10,0(r8)
   107e0:	4a400104 	addi	r9,r9,4
   107e4:	39ffff04 	addi	r7,r7,-4
   107e8:	4abfff15 	stw	r10,-4(r9)
   107ec:	42000104 	addi	r8,r8,4
   107f0:	59fffa36 	bltu	r11,r7,107dc <__alt_data_end+0xffff07dc>
   107f4:	213fff04 	addi	r4,r4,-4
   107f8:	2008d0ba 	srli	r4,r4,2
   107fc:	318000cc 	andi	r6,r6,3
   10800:	21000044 	addi	r4,r4,1
   10804:	2109883a 	add	r4,r4,r4
   10808:	2109883a 	add	r4,r4,r4
   1080c:	1907883a 	add	r3,r3,r4
   10810:	290b883a 	add	r5,r5,r4
   10814:	30000626 	beq	r6,zero,10830 <memcpy+0x11c>
   10818:	198d883a 	add	r6,r3,r6
   1081c:	29c00003 	ldbu	r7,0(r5)
   10820:	18c00044 	addi	r3,r3,1
   10824:	29400044 	addi	r5,r5,1
   10828:	19ffffc5 	stb	r7,-1(r3)
   1082c:	19bffb1e 	bne	r3,r6,1081c <__alt_data_end+0xffff081c>
   10830:	dfc00217 	ldw	ra,8(sp)
   10834:	dc400117 	ldw	r17,4(sp)
   10838:	dc000017 	ldw	r16,0(sp)
   1083c:	dec00304 	addi	sp,sp,12
   10840:	f800283a 	ret
   10844:	2007883a 	mov	r3,r4
   10848:	003ff206 	br	10814 <__alt_data_end+0xffff0814>
   1084c:	2007883a 	mov	r3,r4
   10850:	003ff106 	br	10818 <__alt_data_end+0xffff0818>
   10854:	200d883a 	mov	r6,r4
   10858:	003fee06 	br	10814 <__alt_data_end+0xffff0814>

0001085c <memset>:
   1085c:	20c000cc 	andi	r3,r4,3
   10860:	2005883a 	mov	r2,r4
   10864:	18004426 	beq	r3,zero,10978 <memset+0x11c>
   10868:	31ffffc4 	addi	r7,r6,-1
   1086c:	30004026 	beq	r6,zero,10970 <memset+0x114>
   10870:	2813883a 	mov	r9,r5
   10874:	200d883a 	mov	r6,r4
   10878:	2007883a 	mov	r3,r4
   1087c:	00000406 	br	10890 <memset+0x34>
   10880:	3a3fffc4 	addi	r8,r7,-1
   10884:	31800044 	addi	r6,r6,1
   10888:	38003926 	beq	r7,zero,10970 <memset+0x114>
   1088c:	400f883a 	mov	r7,r8
   10890:	18c00044 	addi	r3,r3,1
   10894:	32400005 	stb	r9,0(r6)
   10898:	1a0000cc 	andi	r8,r3,3
   1089c:	403ff81e 	bne	r8,zero,10880 <__alt_data_end+0xffff0880>
   108a0:	010000c4 	movi	r4,3
   108a4:	21c02d2e 	bgeu	r4,r7,1095c <memset+0x100>
   108a8:	29003fcc 	andi	r4,r5,255
   108ac:	200c923a 	slli	r6,r4,8
   108b0:	3108b03a 	or	r4,r6,r4
   108b4:	200c943a 	slli	r6,r4,16
   108b8:	218cb03a 	or	r6,r4,r6
   108bc:	010003c4 	movi	r4,15
   108c0:	21c0182e 	bgeu	r4,r7,10924 <memset+0xc8>
   108c4:	3b3ffc04 	addi	r12,r7,-16
   108c8:	6018d13a 	srli	r12,r12,4
   108cc:	1a000104 	addi	r8,r3,4
   108d0:	1ac00204 	addi	r11,r3,8
   108d4:	6008913a 	slli	r4,r12,4
   108d8:	1a800304 	addi	r10,r3,12
   108dc:	1813883a 	mov	r9,r3
   108e0:	21000504 	addi	r4,r4,20
   108e4:	1909883a 	add	r4,r3,r4
   108e8:	49800015 	stw	r6,0(r9)
   108ec:	41800015 	stw	r6,0(r8)
   108f0:	59800015 	stw	r6,0(r11)
   108f4:	51800015 	stw	r6,0(r10)
   108f8:	42000404 	addi	r8,r8,16
   108fc:	4a400404 	addi	r9,r9,16
   10900:	5ac00404 	addi	r11,r11,16
   10904:	52800404 	addi	r10,r10,16
   10908:	413ff71e 	bne	r8,r4,108e8 <__alt_data_end+0xffff08e8>
   1090c:	63000044 	addi	r12,r12,1
   10910:	6018913a 	slli	r12,r12,4
   10914:	39c003cc 	andi	r7,r7,15
   10918:	010000c4 	movi	r4,3
   1091c:	1b07883a 	add	r3,r3,r12
   10920:	21c00e2e 	bgeu	r4,r7,1095c <memset+0x100>
   10924:	1813883a 	mov	r9,r3
   10928:	3811883a 	mov	r8,r7
   1092c:	010000c4 	movi	r4,3
   10930:	49800015 	stw	r6,0(r9)
   10934:	423fff04 	addi	r8,r8,-4
   10938:	4a400104 	addi	r9,r9,4
   1093c:	223ffc36 	bltu	r4,r8,10930 <__alt_data_end+0xffff0930>
   10940:	393fff04 	addi	r4,r7,-4
   10944:	2008d0ba 	srli	r4,r4,2
   10948:	39c000cc 	andi	r7,r7,3
   1094c:	21000044 	addi	r4,r4,1
   10950:	2109883a 	add	r4,r4,r4
   10954:	2109883a 	add	r4,r4,r4
   10958:	1907883a 	add	r3,r3,r4
   1095c:	38000526 	beq	r7,zero,10974 <memset+0x118>
   10960:	19cf883a 	add	r7,r3,r7
   10964:	19400005 	stb	r5,0(r3)
   10968:	18c00044 	addi	r3,r3,1
   1096c:	38fffd1e 	bne	r7,r3,10964 <__alt_data_end+0xffff0964>
   10970:	f800283a 	ret
   10974:	f800283a 	ret
   10978:	2007883a 	mov	r3,r4
   1097c:	300f883a 	mov	r7,r6
   10980:	003fc706 	br	108a0 <__alt_data_end+0xffff08a0>

00010984 <strlen>:
   10984:	208000cc 	andi	r2,r4,3
   10988:	10002026 	beq	r2,zero,10a0c <strlen+0x88>
   1098c:	20800007 	ldb	r2,0(r4)
   10990:	10002026 	beq	r2,zero,10a14 <strlen+0x90>
   10994:	2005883a 	mov	r2,r4
   10998:	00000206 	br	109a4 <strlen+0x20>
   1099c:	10c00007 	ldb	r3,0(r2)
   109a0:	18001826 	beq	r3,zero,10a04 <strlen+0x80>
   109a4:	10800044 	addi	r2,r2,1
   109a8:	10c000cc 	andi	r3,r2,3
   109ac:	183ffb1e 	bne	r3,zero,1099c <__alt_data_end+0xffff099c>
   109b0:	10c00017 	ldw	r3,0(r2)
   109b4:	01ffbff4 	movhi	r7,65279
   109b8:	39ffbfc4 	addi	r7,r7,-257
   109bc:	00ca303a 	nor	r5,zero,r3
   109c0:	01a02074 	movhi	r6,32897
   109c4:	19c7883a 	add	r3,r3,r7
   109c8:	31a02004 	addi	r6,r6,-32640
   109cc:	1946703a 	and	r3,r3,r5
   109d0:	1986703a 	and	r3,r3,r6
   109d4:	1800091e 	bne	r3,zero,109fc <strlen+0x78>
   109d8:	10800104 	addi	r2,r2,4
   109dc:	10c00017 	ldw	r3,0(r2)
   109e0:	19cb883a 	add	r5,r3,r7
   109e4:	00c6303a 	nor	r3,zero,r3
   109e8:	28c6703a 	and	r3,r5,r3
   109ec:	1986703a 	and	r3,r3,r6
   109f0:	183ff926 	beq	r3,zero,109d8 <__alt_data_end+0xffff09d8>
   109f4:	00000106 	br	109fc <strlen+0x78>
   109f8:	10800044 	addi	r2,r2,1
   109fc:	10c00007 	ldb	r3,0(r2)
   10a00:	183ffd1e 	bne	r3,zero,109f8 <__alt_data_end+0xffff09f8>
   10a04:	1105c83a 	sub	r2,r2,r4
   10a08:	f800283a 	ret
   10a0c:	2005883a 	mov	r2,r4
   10a10:	003fe706 	br	109b0 <__alt_data_end+0xffff09b0>
   10a14:	0005883a 	mov	r2,zero
   10a18:	f800283a 	ret

00010a1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10a1c:	defffc04 	addi	sp,sp,-16
   10a20:	df000315 	stw	fp,12(sp)
   10a24:	df000304 	addi	fp,sp,12
   10a28:	e13ffd15 	stw	r4,-12(fp)
   10a2c:	e17ffe15 	stw	r5,-8(fp)
   10a30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10a34:	e0fffe17 	ldw	r3,-8(fp)
   10a38:	e0bffd17 	ldw	r2,-12(fp)
   10a3c:	18800c26 	beq	r3,r2,10a70 <alt_load_section+0x54>
  {
    while( to != end )
   10a40:	00000806 	br	10a64 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10a44:	e0bffe17 	ldw	r2,-8(fp)
   10a48:	10c00104 	addi	r3,r2,4
   10a4c:	e0fffe15 	stw	r3,-8(fp)
   10a50:	e0fffd17 	ldw	r3,-12(fp)
   10a54:	19000104 	addi	r4,r3,4
   10a58:	e13ffd15 	stw	r4,-12(fp)
   10a5c:	18c00017 	ldw	r3,0(r3)
   10a60:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10a64:	e0fffe17 	ldw	r3,-8(fp)
   10a68:	e0bfff17 	ldw	r2,-4(fp)
   10a6c:	18bff51e 	bne	r3,r2,10a44 <__alt_data_end+0xffff0a44>
    {
      *to++ = *from++;
    }
  }
}
   10a70:	0001883a 	nop
   10a74:	e037883a 	mov	sp,fp
   10a78:	df000017 	ldw	fp,0(sp)
   10a7c:	dec00104 	addi	sp,sp,4
   10a80:	f800283a 	ret

00010a84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10a84:	defffe04 	addi	sp,sp,-8
   10a88:	dfc00115 	stw	ra,4(sp)
   10a8c:	df000015 	stw	fp,0(sp)
   10a90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10a94:	01800074 	movhi	r6,1
   10a98:	31916304 	addi	r6,r6,17804
   10a9c:	01400074 	movhi	r5,1
   10aa0:	294bc204 	addi	r5,r5,12040
   10aa4:	01000074 	movhi	r4,1
   10aa8:	21116304 	addi	r4,r4,17804
   10aac:	0010a1c0 	call	10a1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10ab0:	01800074 	movhi	r6,1
   10ab4:	31808d04 	addi	r6,r6,564
   10ab8:	01400074 	movhi	r5,1
   10abc:	29400804 	addi	r5,r5,32
   10ac0:	01000074 	movhi	r4,1
   10ac4:	21000804 	addi	r4,r4,32
   10ac8:	0010a1c0 	call	10a1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10acc:	01800074 	movhi	r6,1
   10ad0:	318bc204 	addi	r6,r6,12040
   10ad4:	01400074 	movhi	r5,1
   10ad8:	294b8404 	addi	r5,r5,11792
   10adc:	01000074 	movhi	r4,1
   10ae0:	210b8404 	addi	r4,r4,11792
   10ae4:	0010a1c0 	call	10a1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10ae8:	0011da00 	call	11da0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10aec:	001201c0 	call	1201c <alt_icache_flush_all>
}
   10af0:	0001883a 	nop
   10af4:	e037883a 	mov	sp,fp
   10af8:	dfc00117 	ldw	ra,4(sp)
   10afc:	df000017 	ldw	fp,0(sp)
   10b00:	dec00204 	addi	sp,sp,8
   10b04:	f800283a 	ret

00010b08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10b08:	defffd04 	addi	sp,sp,-12
   10b0c:	dfc00215 	stw	ra,8(sp)
   10b10:	df000115 	stw	fp,4(sp)
   10b14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10b18:	0009883a 	mov	r4,zero
   10b1c:	0010bb80 	call	10bb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10b20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10b24:	0010bf00 	call	10bf0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10b28:	01800074 	movhi	r6,1
   10b2c:	318bb004 	addi	r6,r6,11968
   10b30:	01400074 	movhi	r5,1
   10b34:	294bb004 	addi	r5,r5,11968
   10b38:	01000074 	movhi	r4,1
   10b3c:	210bb004 	addi	r4,r4,11968
   10b40:	00121200 	call	12120 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10b44:	0011ecc0 	call	11ecc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10b48:	01000074 	movhi	r4,1
   10b4c:	2107cb04 	addi	r4,r4,7980
   10b50:	0012a540 	call	12a54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10b54:	d0a5ac17 	ldw	r2,-26960(gp)
   10b58:	d0e5ad17 	ldw	r3,-26956(gp)
   10b5c:	d125ae17 	ldw	r4,-26952(gp)
   10b60:	200d883a 	mov	r6,r4
   10b64:	180b883a 	mov	r5,r3
   10b68:	1009883a 	mov	r4,r2
   10b6c:	00105ac0 	call	105ac <main>
   10b70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10b74:	01000044 	movi	r4,1
   10b78:	0011cc80 	call	11cc8 <close>
  exit (result);
   10b7c:	e13fff17 	ldw	r4,-4(fp)
   10b80:	0012a680 	call	12a68 <exit>

00010b84 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10b84:	defffd04 	addi	sp,sp,-12
   10b88:	dfc00215 	stw	ra,8(sp)
   10b8c:	df000115 	stw	fp,4(sp)
   10b90:	df000104 	addi	fp,sp,4
   10b94:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10b98:	d1600204 	addi	r5,gp,-32760
   10b9c:	e13fff17 	ldw	r4,-4(fp)
   10ba0:	0011e280 	call	11e28 <alt_dev_llist_insert>
}
   10ba4:	e037883a 	mov	sp,fp
   10ba8:	dfc00117 	ldw	ra,4(sp)
   10bac:	df000017 	ldw	fp,0(sp)
   10bb0:	dec00204 	addi	sp,sp,8
   10bb4:	f800283a 	ret

00010bb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10bb8:	defffd04 	addi	sp,sp,-12
   10bbc:	dfc00215 	stw	ra,8(sp)
   10bc0:	df000115 	stw	fp,4(sp)
   10bc4:	df000104 	addi	fp,sp,4
   10bc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10bcc:	00127c80 	call	127c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10bd0:	00800044 	movi	r2,1
   10bd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10bd8:	0001883a 	nop
   10bdc:	e037883a 	mov	sp,fp
   10be0:	dfc00117 	ldw	ra,4(sp)
   10be4:	df000017 	ldw	fp,0(sp)
   10be8:	dec00204 	addi	sp,sp,8
   10bec:	f800283a 	ret

00010bf0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10bf0:	defffe04 	addi	sp,sp,-8
   10bf4:	dfc00115 	stw	ra,4(sp)
   10bf8:	df000015 	stw	fp,0(sp)
   10bfc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   10c00:	01c0fa04 	movi	r7,1000
   10c04:	01800084 	movi	r6,2
   10c08:	000b883a 	mov	r5,zero
   10c0c:	010000b4 	movhi	r4,2
   10c10:	21040004 	addi	r4,r4,4096
   10c14:	001173c0 	call	1173c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   10c18:	000d883a 	mov	r6,zero
   10c1c:	000b883a 	mov	r5,zero
   10c20:	01000074 	movhi	r4,1
   10c24:	210bcc04 	addi	r4,r4,12080
   10c28:	0010dc40 	call	10dc4 <altera_avalon_jtag_uart_init>
   10c2c:	01000074 	movhi	r4,1
   10c30:	210bc204 	addi	r4,r4,12040
   10c34:	0010b840 	call	10b84 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10c38:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   10c3c:	01000074 	movhi	r4,1
   10c40:	210fda04 	addi	r4,r4,16232
   10c44:	0010b840 	call	10b84 <alt_dev_reg>
}
   10c48:	0001883a 	nop
   10c4c:	e037883a 	mov	sp,fp
   10c50:	dfc00117 	ldw	ra,4(sp)
   10c54:	df000017 	ldw	fp,0(sp)
   10c58:	dec00204 	addi	sp,sp,8
   10c5c:	f800283a 	ret

00010c60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10c60:	defffa04 	addi	sp,sp,-24
   10c64:	dfc00515 	stw	ra,20(sp)
   10c68:	df000415 	stw	fp,16(sp)
   10c6c:	df000404 	addi	fp,sp,16
   10c70:	e13ffd15 	stw	r4,-12(fp)
   10c74:	e17ffe15 	stw	r5,-8(fp)
   10c78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10c7c:	e0bffd17 	ldw	r2,-12(fp)
   10c80:	10800017 	ldw	r2,0(r2)
   10c84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10c88:	e0bffc17 	ldw	r2,-16(fp)
   10c8c:	10c00a04 	addi	r3,r2,40
   10c90:	e0bffd17 	ldw	r2,-12(fp)
   10c94:	10800217 	ldw	r2,8(r2)
   10c98:	100f883a 	mov	r7,r2
   10c9c:	e1bfff17 	ldw	r6,-4(fp)
   10ca0:	e17ffe17 	ldw	r5,-8(fp)
   10ca4:	1809883a 	mov	r4,r3
   10ca8:	00112800 	call	11280 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10cac:	e037883a 	mov	sp,fp
   10cb0:	dfc00117 	ldw	ra,4(sp)
   10cb4:	df000017 	ldw	fp,0(sp)
   10cb8:	dec00204 	addi	sp,sp,8
   10cbc:	f800283a 	ret

00010cc0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10cc0:	defffa04 	addi	sp,sp,-24
   10cc4:	dfc00515 	stw	ra,20(sp)
   10cc8:	df000415 	stw	fp,16(sp)
   10ccc:	df000404 	addi	fp,sp,16
   10cd0:	e13ffd15 	stw	r4,-12(fp)
   10cd4:	e17ffe15 	stw	r5,-8(fp)
   10cd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10cdc:	e0bffd17 	ldw	r2,-12(fp)
   10ce0:	10800017 	ldw	r2,0(r2)
   10ce4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10ce8:	e0bffc17 	ldw	r2,-16(fp)
   10cec:	10c00a04 	addi	r3,r2,40
   10cf0:	e0bffd17 	ldw	r2,-12(fp)
   10cf4:	10800217 	ldw	r2,8(r2)
   10cf8:	100f883a 	mov	r7,r2
   10cfc:	e1bfff17 	ldw	r6,-4(fp)
   10d00:	e17ffe17 	ldw	r5,-8(fp)
   10d04:	1809883a 	mov	r4,r3
   10d08:	001149c0 	call	1149c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10d0c:	e037883a 	mov	sp,fp
   10d10:	dfc00117 	ldw	ra,4(sp)
   10d14:	df000017 	ldw	fp,0(sp)
   10d18:	dec00204 	addi	sp,sp,8
   10d1c:	f800283a 	ret

00010d20 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10d20:	defffc04 	addi	sp,sp,-16
   10d24:	dfc00315 	stw	ra,12(sp)
   10d28:	df000215 	stw	fp,8(sp)
   10d2c:	df000204 	addi	fp,sp,8
   10d30:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10d34:	e0bfff17 	ldw	r2,-4(fp)
   10d38:	10800017 	ldw	r2,0(r2)
   10d3c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10d40:	e0bffe17 	ldw	r2,-8(fp)
   10d44:	10c00a04 	addi	r3,r2,40
   10d48:	e0bfff17 	ldw	r2,-4(fp)
   10d4c:	10800217 	ldw	r2,8(r2)
   10d50:	100b883a 	mov	r5,r2
   10d54:	1809883a 	mov	r4,r3
   10d58:	00111280 	call	11128 <altera_avalon_jtag_uart_close>
}
   10d5c:	e037883a 	mov	sp,fp
   10d60:	dfc00117 	ldw	ra,4(sp)
   10d64:	df000017 	ldw	fp,0(sp)
   10d68:	dec00204 	addi	sp,sp,8
   10d6c:	f800283a 	ret

00010d70 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10d70:	defffa04 	addi	sp,sp,-24
   10d74:	dfc00515 	stw	ra,20(sp)
   10d78:	df000415 	stw	fp,16(sp)
   10d7c:	df000404 	addi	fp,sp,16
   10d80:	e13ffd15 	stw	r4,-12(fp)
   10d84:	e17ffe15 	stw	r5,-8(fp)
   10d88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10d8c:	e0bffd17 	ldw	r2,-12(fp)
   10d90:	10800017 	ldw	r2,0(r2)
   10d94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10d98:	e0bffc17 	ldw	r2,-16(fp)
   10d9c:	10800a04 	addi	r2,r2,40
   10da0:	e1bfff17 	ldw	r6,-4(fp)
   10da4:	e17ffe17 	ldw	r5,-8(fp)
   10da8:	1009883a 	mov	r4,r2
   10dac:	00111900 	call	11190 <altera_avalon_jtag_uart_ioctl>
}
   10db0:	e037883a 	mov	sp,fp
   10db4:	dfc00117 	ldw	ra,4(sp)
   10db8:	df000017 	ldw	fp,0(sp)
   10dbc:	dec00204 	addi	sp,sp,8
   10dc0:	f800283a 	ret

00010dc4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10dc4:	defffb04 	addi	sp,sp,-20
   10dc8:	dfc00415 	stw	ra,16(sp)
   10dcc:	df000315 	stw	fp,12(sp)
   10dd0:	df000304 	addi	fp,sp,12
   10dd4:	e13ffd15 	stw	r4,-12(fp)
   10dd8:	e17ffe15 	stw	r5,-8(fp)
   10ddc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10de0:	e0bffd17 	ldw	r2,-12(fp)
   10de4:	00c00044 	movi	r3,1
   10de8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10dec:	e0bffd17 	ldw	r2,-12(fp)
   10df0:	10800017 	ldw	r2,0(r2)
   10df4:	10800104 	addi	r2,r2,4
   10df8:	1007883a 	mov	r3,r2
   10dfc:	e0bffd17 	ldw	r2,-12(fp)
   10e00:	10800817 	ldw	r2,32(r2)
   10e04:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   10e08:	e0bfff17 	ldw	r2,-4(fp)
   10e0c:	01800074 	movhi	r6,1
   10e10:	31839e04 	addi	r6,r6,3704
   10e14:	e17ffd17 	ldw	r5,-12(fp)
   10e18:	1009883a 	mov	r4,r2
   10e1c:	001219c0 	call	1219c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10e20:	e0bffd17 	ldw	r2,-12(fp)
   10e24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10e28:	e0bffd17 	ldw	r2,-12(fp)
   10e2c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10e30:	d0e5b017 	ldw	r3,-26944(gp)
   10e34:	e1fffd17 	ldw	r7,-12(fp)
   10e38:	01800074 	movhi	r6,1
   10e3c:	31842204 	addi	r6,r6,4232
   10e40:	180b883a 	mov	r5,r3
   10e44:	1009883a 	mov	r4,r2
   10e48:	0011b600 	call	11b60 <alt_alarm_start>
   10e4c:	1000040e 	bge	r2,zero,10e60 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10e50:	e0fffd17 	ldw	r3,-12(fp)
   10e54:	00a00034 	movhi	r2,32768
   10e58:	10bfffc4 	addi	r2,r2,-1
   10e5c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10e60:	0001883a 	nop
   10e64:	e037883a 	mov	sp,fp
   10e68:	dfc00117 	ldw	ra,4(sp)
   10e6c:	df000017 	ldw	fp,0(sp)
   10e70:	dec00204 	addi	sp,sp,8
   10e74:	f800283a 	ret

00010e78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10e78:	defff704 	addi	sp,sp,-36
   10e7c:	df000815 	stw	fp,32(sp)
   10e80:	df000804 	addi	fp,sp,32
   10e84:	e13ffe15 	stw	r4,-8(fp)
   10e88:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10e8c:	e0bffe17 	ldw	r2,-8(fp)
   10e90:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   10e94:	e0bffa17 	ldw	r2,-24(fp)
   10e98:	10800017 	ldw	r2,0(r2)
   10e9c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10ea0:	e0bffb17 	ldw	r2,-20(fp)
   10ea4:	10800104 	addi	r2,r2,4
   10ea8:	10800037 	ldwio	r2,0(r2)
   10eac:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10eb0:	e0bffc17 	ldw	r2,-16(fp)
   10eb4:	1080c00c 	andi	r2,r2,768
   10eb8:	10006d26 	beq	r2,zero,11070 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10ebc:	e0bffc17 	ldw	r2,-16(fp)
   10ec0:	1080400c 	andi	r2,r2,256
   10ec4:	10003526 	beq	r2,zero,10f9c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10ec8:	00800074 	movhi	r2,1
   10ecc:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ed0:	e0bffa17 	ldw	r2,-24(fp)
   10ed4:	10800a17 	ldw	r2,40(r2)
   10ed8:	10800044 	addi	r2,r2,1
   10edc:	1081ffcc 	andi	r2,r2,2047
   10ee0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   10ee4:	e0bffa17 	ldw	r2,-24(fp)
   10ee8:	10c00b17 	ldw	r3,44(r2)
   10eec:	e0bffd17 	ldw	r2,-12(fp)
   10ef0:	18801526 	beq	r3,r2,10f48 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10ef4:	e0bffb17 	ldw	r2,-20(fp)
   10ef8:	10800037 	ldwio	r2,0(r2)
   10efc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10f00:	e0bff817 	ldw	r2,-32(fp)
   10f04:	10a0000c 	andi	r2,r2,32768
   10f08:	10001126 	beq	r2,zero,10f50 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10f0c:	e0bffa17 	ldw	r2,-24(fp)
   10f10:	10800a17 	ldw	r2,40(r2)
   10f14:	e0fff817 	ldw	r3,-32(fp)
   10f18:	1809883a 	mov	r4,r3
   10f1c:	e0fffa17 	ldw	r3,-24(fp)
   10f20:	1885883a 	add	r2,r3,r2
   10f24:	10800e04 	addi	r2,r2,56
   10f28:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10f2c:	e0bffa17 	ldw	r2,-24(fp)
   10f30:	10800a17 	ldw	r2,40(r2)
   10f34:	10800044 	addi	r2,r2,1
   10f38:	10c1ffcc 	andi	r3,r2,2047
   10f3c:	e0bffa17 	ldw	r2,-24(fp)
   10f40:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10f44:	003fe206 	br	10ed0 <__alt_data_end+0xffff0ed0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10f48:	0001883a 	nop
   10f4c:	00000106 	br	10f54 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10f50:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10f54:	e0bff817 	ldw	r2,-32(fp)
   10f58:	10bfffec 	andhi	r2,r2,65535
   10f5c:	10000f26 	beq	r2,zero,10f9c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10f60:	e0bffa17 	ldw	r2,-24(fp)
   10f64:	10c00817 	ldw	r3,32(r2)
   10f68:	00bfff84 	movi	r2,-2
   10f6c:	1886703a 	and	r3,r3,r2
   10f70:	e0bffa17 	ldw	r2,-24(fp)
   10f74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10f78:	e0bffb17 	ldw	r2,-20(fp)
   10f7c:	10800104 	addi	r2,r2,4
   10f80:	1007883a 	mov	r3,r2
   10f84:	e0bffa17 	ldw	r2,-24(fp)
   10f88:	10800817 	ldw	r2,32(r2)
   10f8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10f90:	e0bffb17 	ldw	r2,-20(fp)
   10f94:	10800104 	addi	r2,r2,4
   10f98:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10f9c:	e0bffc17 	ldw	r2,-16(fp)
   10fa0:	1080800c 	andi	r2,r2,512
   10fa4:	103fbe26 	beq	r2,zero,10ea0 <__alt_data_end+0xffff0ea0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10fa8:	e0bffc17 	ldw	r2,-16(fp)
   10fac:	1004d43a 	srli	r2,r2,16
   10fb0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10fb4:	00001406 	br	11008 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10fb8:	e0bffb17 	ldw	r2,-20(fp)
   10fbc:	e0fffa17 	ldw	r3,-24(fp)
   10fc0:	18c00d17 	ldw	r3,52(r3)
   10fc4:	e13ffa17 	ldw	r4,-24(fp)
   10fc8:	20c7883a 	add	r3,r4,r3
   10fcc:	18c20e04 	addi	r3,r3,2104
   10fd0:	18c00003 	ldbu	r3,0(r3)
   10fd4:	18c03fcc 	andi	r3,r3,255
   10fd8:	18c0201c 	xori	r3,r3,128
   10fdc:	18ffe004 	addi	r3,r3,-128
   10fe0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10fe4:	e0bffa17 	ldw	r2,-24(fp)
   10fe8:	10800d17 	ldw	r2,52(r2)
   10fec:	10800044 	addi	r2,r2,1
   10ff0:	10c1ffcc 	andi	r3,r2,2047
   10ff4:	e0bffa17 	ldw	r2,-24(fp)
   10ff8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10ffc:	e0bff917 	ldw	r2,-28(fp)
   11000:	10bfffc4 	addi	r2,r2,-1
   11004:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11008:	e0bff917 	ldw	r2,-28(fp)
   1100c:	10000526 	beq	r2,zero,11024 <altera_avalon_jtag_uart_irq+0x1ac>
   11010:	e0bffa17 	ldw	r2,-24(fp)
   11014:	10c00d17 	ldw	r3,52(r2)
   11018:	e0bffa17 	ldw	r2,-24(fp)
   1101c:	10800c17 	ldw	r2,48(r2)
   11020:	18bfe51e 	bne	r3,r2,10fb8 <__alt_data_end+0xffff0fb8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11024:	e0bff917 	ldw	r2,-28(fp)
   11028:	103f9d26 	beq	r2,zero,10ea0 <__alt_data_end+0xffff0ea0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1102c:	e0bffa17 	ldw	r2,-24(fp)
   11030:	10c00817 	ldw	r3,32(r2)
   11034:	00bfff44 	movi	r2,-3
   11038:	1886703a 	and	r3,r3,r2
   1103c:	e0bffa17 	ldw	r2,-24(fp)
   11040:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11044:	e0bffa17 	ldw	r2,-24(fp)
   11048:	10800017 	ldw	r2,0(r2)
   1104c:	10800104 	addi	r2,r2,4
   11050:	1007883a 	mov	r3,r2
   11054:	e0bffa17 	ldw	r2,-24(fp)
   11058:	10800817 	ldw	r2,32(r2)
   1105c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11060:	e0bffb17 	ldw	r2,-20(fp)
   11064:	10800104 	addi	r2,r2,4
   11068:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1106c:	003f8c06 	br	10ea0 <__alt_data_end+0xffff0ea0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   11070:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   11074:	0001883a 	nop
   11078:	e037883a 	mov	sp,fp
   1107c:	df000017 	ldw	fp,0(sp)
   11080:	dec00104 	addi	sp,sp,4
   11084:	f800283a 	ret

00011088 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11088:	defff804 	addi	sp,sp,-32
   1108c:	df000715 	stw	fp,28(sp)
   11090:	df000704 	addi	fp,sp,28
   11094:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11098:	e0bffb17 	ldw	r2,-20(fp)
   1109c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   110a0:	e0bff917 	ldw	r2,-28(fp)
   110a4:	10800017 	ldw	r2,0(r2)
   110a8:	10800104 	addi	r2,r2,4
   110ac:	10800037 	ldwio	r2,0(r2)
   110b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   110b4:	e0bffa17 	ldw	r2,-24(fp)
   110b8:	1081000c 	andi	r2,r2,1024
   110bc:	10000b26 	beq	r2,zero,110ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   110c0:	e0bff917 	ldw	r2,-28(fp)
   110c4:	10800017 	ldw	r2,0(r2)
   110c8:	10800104 	addi	r2,r2,4
   110cc:	1007883a 	mov	r3,r2
   110d0:	e0bff917 	ldw	r2,-28(fp)
   110d4:	10800817 	ldw	r2,32(r2)
   110d8:	10810014 	ori	r2,r2,1024
   110dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   110e0:	e0bff917 	ldw	r2,-28(fp)
   110e4:	10000915 	stw	zero,36(r2)
   110e8:	00000a06 	br	11114 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   110ec:	e0bff917 	ldw	r2,-28(fp)
   110f0:	10c00917 	ldw	r3,36(r2)
   110f4:	00a00034 	movhi	r2,32768
   110f8:	10bfff04 	addi	r2,r2,-4
   110fc:	10c00536 	bltu	r2,r3,11114 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   11100:	e0bff917 	ldw	r2,-28(fp)
   11104:	10800917 	ldw	r2,36(r2)
   11108:	10c00044 	addi	r3,r2,1
   1110c:	e0bff917 	ldw	r2,-28(fp)
   11110:	10c00915 	stw	r3,36(r2)
   11114:	d0a5b017 	ldw	r2,-26944(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11118:	e037883a 	mov	sp,fp
   1111c:	df000017 	ldw	fp,0(sp)
   11120:	dec00104 	addi	sp,sp,4
   11124:	f800283a 	ret

00011128 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11128:	defffd04 	addi	sp,sp,-12
   1112c:	df000215 	stw	fp,8(sp)
   11130:	df000204 	addi	fp,sp,8
   11134:	e13ffe15 	stw	r4,-8(fp)
   11138:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1113c:	00000506 	br	11154 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11140:	e0bfff17 	ldw	r2,-4(fp)
   11144:	1090000c 	andi	r2,r2,16384
   11148:	10000226 	beq	r2,zero,11154 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1114c:	00bffd44 	movi	r2,-11
   11150:	00000b06 	br	11180 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11154:	e0bffe17 	ldw	r2,-8(fp)
   11158:	10c00d17 	ldw	r3,52(r2)
   1115c:	e0bffe17 	ldw	r2,-8(fp)
   11160:	10800c17 	ldw	r2,48(r2)
   11164:	18800526 	beq	r3,r2,1117c <altera_avalon_jtag_uart_close+0x54>
   11168:	e0bffe17 	ldw	r2,-8(fp)
   1116c:	10c00917 	ldw	r3,36(r2)
   11170:	e0bffe17 	ldw	r2,-8(fp)
   11174:	10800117 	ldw	r2,4(r2)
   11178:	18bff136 	bltu	r3,r2,11140 <__alt_data_end+0xffff1140>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1117c:	0005883a 	mov	r2,zero
}
   11180:	e037883a 	mov	sp,fp
   11184:	df000017 	ldw	fp,0(sp)
   11188:	dec00104 	addi	sp,sp,4
   1118c:	f800283a 	ret

00011190 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11190:	defffa04 	addi	sp,sp,-24
   11194:	df000515 	stw	fp,20(sp)
   11198:	df000504 	addi	fp,sp,20
   1119c:	e13ffd15 	stw	r4,-12(fp)
   111a0:	e17ffe15 	stw	r5,-8(fp)
   111a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   111a8:	00bff9c4 	movi	r2,-25
   111ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   111b0:	e0bffe17 	ldw	r2,-8(fp)
   111b4:	10da8060 	cmpeqi	r3,r2,27137
   111b8:	1800031e 	bne	r3,zero,111c8 <altera_avalon_jtag_uart_ioctl+0x38>
   111bc:	109a80a0 	cmpeqi	r2,r2,27138
   111c0:	1000181e 	bne	r2,zero,11224 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   111c4:	00002906 	br	1126c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   111c8:	e0bffd17 	ldw	r2,-12(fp)
   111cc:	10c00117 	ldw	r3,4(r2)
   111d0:	00a00034 	movhi	r2,32768
   111d4:	10bfffc4 	addi	r2,r2,-1
   111d8:	18802126 	beq	r3,r2,11260 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   111dc:	e0bfff17 	ldw	r2,-4(fp)
   111e0:	10800017 	ldw	r2,0(r2)
   111e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   111e8:	e0bffc17 	ldw	r2,-16(fp)
   111ec:	10800090 	cmplti	r2,r2,2
   111f0:	1000061e 	bne	r2,zero,1120c <altera_avalon_jtag_uart_ioctl+0x7c>
   111f4:	e0fffc17 	ldw	r3,-16(fp)
   111f8:	00a00034 	movhi	r2,32768
   111fc:	10bfffc4 	addi	r2,r2,-1
   11200:	18800226 	beq	r3,r2,1120c <altera_avalon_jtag_uart_ioctl+0x7c>
   11204:	e0bffc17 	ldw	r2,-16(fp)
   11208:	00000206 	br	11214 <altera_avalon_jtag_uart_ioctl+0x84>
   1120c:	00a00034 	movhi	r2,32768
   11210:	10bfff84 	addi	r2,r2,-2
   11214:	e0fffd17 	ldw	r3,-12(fp)
   11218:	18800115 	stw	r2,4(r3)
      rc = 0;
   1121c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11220:	00000f06 	br	11260 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11224:	e0bffd17 	ldw	r2,-12(fp)
   11228:	10c00117 	ldw	r3,4(r2)
   1122c:	00a00034 	movhi	r2,32768
   11230:	10bfffc4 	addi	r2,r2,-1
   11234:	18800c26 	beq	r3,r2,11268 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11238:	e0bffd17 	ldw	r2,-12(fp)
   1123c:	10c00917 	ldw	r3,36(r2)
   11240:	e0bffd17 	ldw	r2,-12(fp)
   11244:	10800117 	ldw	r2,4(r2)
   11248:	1885803a 	cmpltu	r2,r3,r2
   1124c:	10c03fcc 	andi	r3,r2,255
   11250:	e0bfff17 	ldw	r2,-4(fp)
   11254:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11258:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1125c:	00000206 	br	11268 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   11260:	0001883a 	nop
   11264:	00000106 	br	1126c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   11268:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1126c:	e0bffb17 	ldw	r2,-20(fp)
}
   11270:	e037883a 	mov	sp,fp
   11274:	df000017 	ldw	fp,0(sp)
   11278:	dec00104 	addi	sp,sp,4
   1127c:	f800283a 	ret

00011280 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11280:	defff304 	addi	sp,sp,-52
   11284:	dfc00c15 	stw	ra,48(sp)
   11288:	df000b15 	stw	fp,44(sp)
   1128c:	df000b04 	addi	fp,sp,44
   11290:	e13ffc15 	stw	r4,-16(fp)
   11294:	e17ffd15 	stw	r5,-12(fp)
   11298:	e1bffe15 	stw	r6,-8(fp)
   1129c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   112a0:	e0bffd17 	ldw	r2,-12(fp)
   112a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   112a8:	00004706 	br	113c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   112ac:	e0bffc17 	ldw	r2,-16(fp)
   112b0:	10800a17 	ldw	r2,40(r2)
   112b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   112b8:	e0bffc17 	ldw	r2,-16(fp)
   112bc:	10800b17 	ldw	r2,44(r2)
   112c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   112c4:	e0fff717 	ldw	r3,-36(fp)
   112c8:	e0bff817 	ldw	r2,-32(fp)
   112cc:	18800536 	bltu	r3,r2,112e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   112d0:	e0fff717 	ldw	r3,-36(fp)
   112d4:	e0bff817 	ldw	r2,-32(fp)
   112d8:	1885c83a 	sub	r2,r3,r2
   112dc:	e0bff615 	stw	r2,-40(fp)
   112e0:	00000406 	br	112f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   112e4:	00c20004 	movi	r3,2048
   112e8:	e0bff817 	ldw	r2,-32(fp)
   112ec:	1885c83a 	sub	r2,r3,r2
   112f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   112f4:	e0bff617 	ldw	r2,-40(fp)
   112f8:	10001e26 	beq	r2,zero,11374 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   112fc:	e0fffe17 	ldw	r3,-8(fp)
   11300:	e0bff617 	ldw	r2,-40(fp)
   11304:	1880022e 	bgeu	r3,r2,11310 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   11308:	e0bffe17 	ldw	r2,-8(fp)
   1130c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11310:	e0bffc17 	ldw	r2,-16(fp)
   11314:	10c00e04 	addi	r3,r2,56
   11318:	e0bff817 	ldw	r2,-32(fp)
   1131c:	1885883a 	add	r2,r3,r2
   11320:	e1bff617 	ldw	r6,-40(fp)
   11324:	100b883a 	mov	r5,r2
   11328:	e13ff517 	ldw	r4,-44(fp)
   1132c:	00107140 	call	10714 <memcpy>
      ptr   += n;
   11330:	e0fff517 	ldw	r3,-44(fp)
   11334:	e0bff617 	ldw	r2,-40(fp)
   11338:	1885883a 	add	r2,r3,r2
   1133c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11340:	e0fffe17 	ldw	r3,-8(fp)
   11344:	e0bff617 	ldw	r2,-40(fp)
   11348:	1885c83a 	sub	r2,r3,r2
   1134c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11350:	e0fff817 	ldw	r3,-32(fp)
   11354:	e0bff617 	ldw	r2,-40(fp)
   11358:	1885883a 	add	r2,r3,r2
   1135c:	10c1ffcc 	andi	r3,r2,2047
   11360:	e0bffc17 	ldw	r2,-16(fp)
   11364:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11368:	e0bffe17 	ldw	r2,-8(fp)
   1136c:	00bfcf16 	blt	zero,r2,112ac <__alt_data_end+0xffff12ac>
   11370:	00000106 	br	11378 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   11374:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   11378:	e0fff517 	ldw	r3,-44(fp)
   1137c:	e0bffd17 	ldw	r2,-12(fp)
   11380:	1880141e 	bne	r3,r2,113d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11384:	e0bfff17 	ldw	r2,-4(fp)
   11388:	1090000c 	andi	r2,r2,16384
   1138c:	1000131e 	bne	r2,zero,113dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11390:	0001883a 	nop
   11394:	e0bffc17 	ldw	r2,-16(fp)
   11398:	10c00a17 	ldw	r3,40(r2)
   1139c:	e0bff717 	ldw	r2,-36(fp)
   113a0:	1880051e 	bne	r3,r2,113b8 <altera_avalon_jtag_uart_read+0x138>
   113a4:	e0bffc17 	ldw	r2,-16(fp)
   113a8:	10c00917 	ldw	r3,36(r2)
   113ac:	e0bffc17 	ldw	r2,-16(fp)
   113b0:	10800117 	ldw	r2,4(r2)
   113b4:	18bff736 	bltu	r3,r2,11394 <__alt_data_end+0xffff1394>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   113b8:	e0bffc17 	ldw	r2,-16(fp)
   113bc:	10c00a17 	ldw	r3,40(r2)
   113c0:	e0bff717 	ldw	r2,-36(fp)
   113c4:	18800726 	beq	r3,r2,113e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   113c8:	e0bffe17 	ldw	r2,-8(fp)
   113cc:	00bfb716 	blt	zero,r2,112ac <__alt_data_end+0xffff12ac>
   113d0:	00000506 	br	113e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   113d4:	0001883a 	nop
   113d8:	00000306 	br	113e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   113dc:	0001883a 	nop
   113e0:	00000106 	br	113e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   113e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   113e8:	e0fff517 	ldw	r3,-44(fp)
   113ec:	e0bffd17 	ldw	r2,-12(fp)
   113f0:	18801826 	beq	r3,r2,11454 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113f4:	0005303a 	rdctl	r2,status
   113f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   113fc:	e0fffb17 	ldw	r3,-20(fp)
   11400:	00bfff84 	movi	r2,-2
   11404:	1884703a 	and	r2,r3,r2
   11408:	1001703a 	wrctl	status,r2
  
  return context;
   1140c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11410:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11414:	e0bffc17 	ldw	r2,-16(fp)
   11418:	10800817 	ldw	r2,32(r2)
   1141c:	10c00054 	ori	r3,r2,1
   11420:	e0bffc17 	ldw	r2,-16(fp)
   11424:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11428:	e0bffc17 	ldw	r2,-16(fp)
   1142c:	10800017 	ldw	r2,0(r2)
   11430:	10800104 	addi	r2,r2,4
   11434:	1007883a 	mov	r3,r2
   11438:	e0bffc17 	ldw	r2,-16(fp)
   1143c:	10800817 	ldw	r2,32(r2)
   11440:	18800035 	stwio	r2,0(r3)
   11444:	e0bffa17 	ldw	r2,-24(fp)
   11448:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1144c:	e0bff917 	ldw	r2,-28(fp)
   11450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11454:	e0fff517 	ldw	r3,-44(fp)
   11458:	e0bffd17 	ldw	r2,-12(fp)
   1145c:	18800426 	beq	r3,r2,11470 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11460:	e0fff517 	ldw	r3,-44(fp)
   11464:	e0bffd17 	ldw	r2,-12(fp)
   11468:	1885c83a 	sub	r2,r3,r2
   1146c:	00000606 	br	11488 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	1090000c 	andi	r2,r2,16384
   11478:	10000226 	beq	r2,zero,11484 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1147c:	00bffd44 	movi	r2,-11
   11480:	00000106 	br	11488 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   11484:	00bffec4 	movi	r2,-5
}
   11488:	e037883a 	mov	sp,fp
   1148c:	dfc00117 	ldw	ra,4(sp)
   11490:	df000017 	ldw	fp,0(sp)
   11494:	dec00204 	addi	sp,sp,8
   11498:	f800283a 	ret

0001149c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1149c:	defff304 	addi	sp,sp,-52
   114a0:	dfc00c15 	stw	ra,48(sp)
   114a4:	df000b15 	stw	fp,44(sp)
   114a8:	df000b04 	addi	fp,sp,44
   114ac:	e13ffc15 	stw	r4,-16(fp)
   114b0:	e17ffd15 	stw	r5,-12(fp)
   114b4:	e1bffe15 	stw	r6,-8(fp)
   114b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   114bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   114c0:	e0bffd17 	ldw	r2,-12(fp)
   114c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   114c8:	00003706 	br	115a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   114cc:	e0bffc17 	ldw	r2,-16(fp)
   114d0:	10800c17 	ldw	r2,48(r2)
   114d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   114d8:	e0bffc17 	ldw	r2,-16(fp)
   114dc:	10800d17 	ldw	r2,52(r2)
   114e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   114e4:	e0fff917 	ldw	r3,-28(fp)
   114e8:	e0bff517 	ldw	r2,-44(fp)
   114ec:	1880062e 	bgeu	r3,r2,11508 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   114f0:	e0fff517 	ldw	r3,-44(fp)
   114f4:	e0bff917 	ldw	r2,-28(fp)
   114f8:	1885c83a 	sub	r2,r3,r2
   114fc:	10bfffc4 	addi	r2,r2,-1
   11500:	e0bff615 	stw	r2,-40(fp)
   11504:	00000b06 	br	11534 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11508:	e0bff517 	ldw	r2,-44(fp)
   1150c:	10000526 	beq	r2,zero,11524 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11510:	00c20004 	movi	r3,2048
   11514:	e0bff917 	ldw	r2,-28(fp)
   11518:	1885c83a 	sub	r2,r3,r2
   1151c:	e0bff615 	stw	r2,-40(fp)
   11520:	00000406 	br	11534 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11524:	00c1ffc4 	movi	r3,2047
   11528:	e0bff917 	ldw	r2,-28(fp)
   1152c:	1885c83a 	sub	r2,r3,r2
   11530:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11534:	e0bff617 	ldw	r2,-40(fp)
   11538:	10001e26 	beq	r2,zero,115b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1153c:	e0fffe17 	ldw	r3,-8(fp)
   11540:	e0bff617 	ldw	r2,-40(fp)
   11544:	1880022e 	bgeu	r3,r2,11550 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   11548:	e0bffe17 	ldw	r2,-8(fp)
   1154c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11550:	e0bffc17 	ldw	r2,-16(fp)
   11554:	10c20e04 	addi	r3,r2,2104
   11558:	e0bff917 	ldw	r2,-28(fp)
   1155c:	1885883a 	add	r2,r3,r2
   11560:	e1bff617 	ldw	r6,-40(fp)
   11564:	e17ffd17 	ldw	r5,-12(fp)
   11568:	1009883a 	mov	r4,r2
   1156c:	00107140 	call	10714 <memcpy>
      ptr   += n;
   11570:	e0fffd17 	ldw	r3,-12(fp)
   11574:	e0bff617 	ldw	r2,-40(fp)
   11578:	1885883a 	add	r2,r3,r2
   1157c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11580:	e0fffe17 	ldw	r3,-8(fp)
   11584:	e0bff617 	ldw	r2,-40(fp)
   11588:	1885c83a 	sub	r2,r3,r2
   1158c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11590:	e0fff917 	ldw	r3,-28(fp)
   11594:	e0bff617 	ldw	r2,-40(fp)
   11598:	1885883a 	add	r2,r3,r2
   1159c:	10c1ffcc 	andi	r3,r2,2047
   115a0:	e0bffc17 	ldw	r2,-16(fp)
   115a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   115a8:	e0bffe17 	ldw	r2,-8(fp)
   115ac:	00bfc716 	blt	zero,r2,114cc <__alt_data_end+0xffff14cc>
   115b0:	00000106 	br	115b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   115b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115b8:	0005303a 	rdctl	r2,status
   115bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115c0:	e0fffb17 	ldw	r3,-20(fp)
   115c4:	00bfff84 	movi	r2,-2
   115c8:	1884703a 	and	r2,r3,r2
   115cc:	1001703a 	wrctl	status,r2
  
  return context;
   115d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   115d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   115d8:	e0bffc17 	ldw	r2,-16(fp)
   115dc:	10800817 	ldw	r2,32(r2)
   115e0:	10c00094 	ori	r3,r2,2
   115e4:	e0bffc17 	ldw	r2,-16(fp)
   115e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   115ec:	e0bffc17 	ldw	r2,-16(fp)
   115f0:	10800017 	ldw	r2,0(r2)
   115f4:	10800104 	addi	r2,r2,4
   115f8:	1007883a 	mov	r3,r2
   115fc:	e0bffc17 	ldw	r2,-16(fp)
   11600:	10800817 	ldw	r2,32(r2)
   11604:	18800035 	stwio	r2,0(r3)
   11608:	e0bffa17 	ldw	r2,-24(fp)
   1160c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11610:	e0bff817 	ldw	r2,-32(fp)
   11614:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11618:	e0bffe17 	ldw	r2,-8(fp)
   1161c:	0080100e 	bge	zero,r2,11660 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11620:	e0bfff17 	ldw	r2,-4(fp)
   11624:	1090000c 	andi	r2,r2,16384
   11628:	1000101e 	bne	r2,zero,1166c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1162c:	0001883a 	nop
   11630:	e0bffc17 	ldw	r2,-16(fp)
   11634:	10c00d17 	ldw	r3,52(r2)
   11638:	e0bff517 	ldw	r2,-44(fp)
   1163c:	1880051e 	bne	r3,r2,11654 <altera_avalon_jtag_uart_write+0x1b8>
   11640:	e0bffc17 	ldw	r2,-16(fp)
   11644:	10c00917 	ldw	r3,36(r2)
   11648:	e0bffc17 	ldw	r2,-16(fp)
   1164c:	10800117 	ldw	r2,4(r2)
   11650:	18bff736 	bltu	r3,r2,11630 <__alt_data_end+0xffff1630>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11654:	e0bffc17 	ldw	r2,-16(fp)
   11658:	10800917 	ldw	r2,36(r2)
   1165c:	1000051e 	bne	r2,zero,11674 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11660:	e0bffe17 	ldw	r2,-8(fp)
   11664:	00bfd016 	blt	zero,r2,115a8 <__alt_data_end+0xffff15a8>
   11668:	00000306 	br	11678 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1166c:	0001883a 	nop
   11670:	00000106 	br	11678 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11674:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11678:	e0fffd17 	ldw	r3,-12(fp)
   1167c:	e0bff717 	ldw	r2,-36(fp)
   11680:	18800426 	beq	r3,r2,11694 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11684:	e0fffd17 	ldw	r3,-12(fp)
   11688:	e0bff717 	ldw	r2,-36(fp)
   1168c:	1885c83a 	sub	r2,r3,r2
   11690:	00000606 	br	116ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11694:	e0bfff17 	ldw	r2,-4(fp)
   11698:	1090000c 	andi	r2,r2,16384
   1169c:	10000226 	beq	r2,zero,116a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   116a0:	00bffd44 	movi	r2,-11
   116a4:	00000106 	br	116ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   116a8:	00bffec4 	movi	r2,-5
}
   116ac:	e037883a 	mov	sp,fp
   116b0:	dfc00117 	ldw	ra,4(sp)
   116b4:	df000017 	ldw	fp,0(sp)
   116b8:	dec00204 	addi	sp,sp,8
   116bc:	f800283a 	ret

000116c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   116c0:	defff904 	addi	sp,sp,-28
   116c4:	dfc00615 	stw	ra,24(sp)
   116c8:	df000515 	stw	fp,20(sp)
   116cc:	df000504 	addi	fp,sp,20
   116d0:	e13ffe15 	stw	r4,-8(fp)
   116d4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   116d8:	0007883a 	mov	r3,zero
   116dc:	e0bffe17 	ldw	r2,-8(fp)
   116e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   116e4:	e0bffe17 	ldw	r2,-8(fp)
   116e8:	10800104 	addi	r2,r2,4
   116ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116f0:	0005303a 	rdctl	r2,status
   116f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116f8:	e0fffc17 	ldw	r3,-16(fp)
   116fc:	00bfff84 	movi	r2,-2
   11700:	1884703a 	and	r2,r3,r2
   11704:	1001703a 	wrctl	status,r2
  
  return context;
   11708:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1170c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   11710:	00126c00 	call	126c0 <alt_tick>
   11714:	e0bffb17 	ldw	r2,-20(fp)
   11718:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1171c:	e0bffd17 	ldw	r2,-12(fp)
   11720:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11724:	0001883a 	nop
   11728:	e037883a 	mov	sp,fp
   1172c:	dfc00117 	ldw	ra,4(sp)
   11730:	df000017 	ldw	fp,0(sp)
   11734:	dec00204 	addi	sp,sp,8
   11738:	f800283a 	ret

0001173c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1173c:	defff904 	addi	sp,sp,-28
   11740:	dfc00615 	stw	ra,24(sp)
   11744:	df000515 	stw	fp,20(sp)
   11748:	df000504 	addi	fp,sp,20
   1174c:	e13ffc15 	stw	r4,-16(fp)
   11750:	e17ffd15 	stw	r5,-12(fp)
   11754:	e1bffe15 	stw	r6,-8(fp)
   11758:	e1ffff15 	stw	r7,-4(fp)
   1175c:	e0bfff17 	ldw	r2,-4(fp)
   11760:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11764:	d0a5b017 	ldw	r2,-26944(gp)
   11768:	1000021e 	bne	r2,zero,11774 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1176c:	e0bffb17 	ldw	r2,-20(fp)
   11770:	d0a5b015 	stw	r2,-26944(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11774:	e0bffc17 	ldw	r2,-16(fp)
   11778:	10800104 	addi	r2,r2,4
   1177c:	00c001c4 	movi	r3,7
   11780:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   11784:	01800074 	movhi	r6,1
   11788:	3185b004 	addi	r6,r6,5824
   1178c:	e17ffc17 	ldw	r5,-16(fp)
   11790:	e13ffe17 	ldw	r4,-8(fp)
   11794:	001219c0 	call	1219c <alt_irq_register>
#endif  
}
   11798:	0001883a 	nop
   1179c:	e037883a 	mov	sp,fp
   117a0:	dfc00117 	ldw	ra,4(sp)
   117a4:	df000017 	ldw	fp,0(sp)
   117a8:	dec00204 	addi	sp,sp,8
   117ac:	f800283a 	ret

000117b0 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   117b0:	defffc04 	addi	sp,sp,-16
   117b4:	dfc00315 	stw	ra,12(sp)
   117b8:	df000215 	stw	fp,8(sp)
   117bc:	df000204 	addi	fp,sp,8
   117c0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   117c4:	d1600204 	addi	r5,gp,-32760
   117c8:	e13fff17 	ldw	r4,-4(fp)
   117cc:	0011f8c0 	call	11f8c <alt_find_dev>
   117d0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   117d4:	e0bffe17 	ldw	r2,-8(fp)
}
   117d8:	e037883a 	mov	sp,fp
   117dc:	dfc00117 	ldw	ra,4(sp)
   117e0:	df000017 	ldw	fp,0(sp)
   117e4:	dec00204 	addi	sp,sp,8
   117e8:	f800283a 	ret

000117ec <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   117ec:	defffd04 	addi	sp,sp,-12
   117f0:	df000215 	stw	fp,8(sp)
   117f4:	df000204 	addi	fp,sp,8
   117f8:	e13ffe15 	stw	r4,-8(fp)
   117fc:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11800:	e0bffe17 	ldw	r2,-8(fp)
   11804:	10800a17 	ldw	r2,40(r2)
   11808:	10800023 	ldbuio	r2,0(r2)
   1180c:	10803fcc 	andi	r2,r2,255
   11810:	1007883a 	mov	r3,r2
   11814:	e0bfff17 	ldw	r2,-4(fp)
   11818:	10c00005 	stb	r3,0(r2)

	return 0;
   1181c:	0005883a 	mov	r2,zero
}
   11820:	e037883a 	mov	sp,fp
   11824:	df000017 	ldw	fp,0(sp)
   11828:	dec00104 	addi	sp,sp,4
   1182c:	f800283a 	ret

00011830 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   11830:	defffc04 	addi	sp,sp,-16
   11834:	df000315 	stw	fp,12(sp)
   11838:	df000304 	addi	fp,sp,12
   1183c:	e13ffd15 	stw	r4,-12(fp)
   11840:	2805883a 	mov	r2,r5
   11844:	e1bfff15 	stw	r6,-4(fp)
   11848:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1184c:	e0bffd17 	ldw	r2,-12(fp)
   11850:	10800a17 	ldw	r2,40(r2)
   11854:	1007883a 	mov	r3,r2
   11858:	e0bffe03 	ldbu	r2,-8(fp)
   1185c:	10800fcc 	andi	r2,r2,63
   11860:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11864:	e0bffd17 	ldw	r2,-12(fp)
   11868:	10800a17 	ldw	r2,40(r2)
   1186c:	10800044 	addi	r2,r2,1
   11870:	10800023 	ldbuio	r2,0(r2)
   11874:	10803fcc 	andi	r2,r2,255
   11878:	1007883a 	mov	r3,r2
   1187c:	e0bfff17 	ldw	r2,-4(fp)
   11880:	10c00005 	stb	r3,0(r2)

	return 0;
   11884:	0005883a 	mov	r2,zero
}
   11888:	e037883a 	mov	sp,fp
   1188c:	df000017 	ldw	fp,0(sp)
   11890:	dec00104 	addi	sp,sp,4
   11894:	f800283a 	ret

00011898 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   11898:	defffc04 	addi	sp,sp,-16
   1189c:	df000315 	stw	fp,12(sp)
   118a0:	df000304 	addi	fp,sp,12
   118a4:	e13ffd15 	stw	r4,-12(fp)
   118a8:	2807883a 	mov	r3,r5
   118ac:	3005883a 	mov	r2,r6
   118b0:	e0fffe05 	stb	r3,-8(fp)
   118b4:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	10800a17 	ldw	r2,40(r2)
   118c0:	1007883a 	mov	r3,r2
   118c4:	e0bffe03 	ldbu	r2,-8(fp)
   118c8:	10800fcc 	andi	r2,r2,63
   118cc:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   118d0:	e0bffd17 	ldw	r2,-12(fp)
   118d4:	10800a17 	ldw	r2,40(r2)
   118d8:	10800044 	addi	r2,r2,1
   118dc:	1007883a 	mov	r3,r2
   118e0:	e0bfff03 	ldbu	r2,-4(fp)
   118e4:	18800025 	stbio	r2,0(r3)

	return 0;
   118e8:	0005883a 	mov	r2,zero
}
   118ec:	e037883a 	mov	sp,fp
   118f0:	df000017 	ldw	fp,0(sp)
   118f4:	dec00104 	addi	sp,sp,4
   118f8:	f800283a 	ret

000118fc <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   118fc:	defffd04 	addi	sp,sp,-12
   11900:	df000215 	stw	fp,8(sp)
   11904:	df000204 	addi	fp,sp,8
   11908:	e13ffe15 	stw	r4,-8(fp)
   1190c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11910:	e0bffe17 	ldw	r2,-8(fp)
   11914:	10800a17 	ldw	r2,40(r2)
   11918:	1007883a 	mov	r3,r2
   1191c:	00800c84 	movi	r2,50
   11920:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11924:	e0bffe17 	ldw	r2,-8(fp)
   11928:	10800a17 	ldw	r2,40(r2)
   1192c:	10800044 	addi	r2,r2,1
   11930:	10800023 	ldbuio	r2,0(r2)
   11934:	10803fcc 	andi	r2,r2,255
   11938:	10ffffcc 	andi	r3,r2,65535
   1193c:	e0bfff17 	ldw	r2,-4(fp)
   11940:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11944:	e0bffe17 	ldw	r2,-8(fp)
   11948:	10800a17 	ldw	r2,40(r2)
   1194c:	1007883a 	mov	r3,r2
   11950:	00800cc4 	movi	r2,51
   11954:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11958:	e0bffe17 	ldw	r2,-8(fp)
   1195c:	10800a17 	ldw	r2,40(r2)
   11960:	10800044 	addi	r2,r2,1
   11964:	10800023 	ldbuio	r2,0(r2)
   11968:	10803fcc 	andi	r2,r2,255
   1196c:	10bfffcc 	andi	r2,r2,65535
   11970:	1004923a 	slli	r2,r2,8
   11974:	e0ffff17 	ldw	r3,-4(fp)
   11978:	18c00017 	ldw	r3,0(r3)
   1197c:	1885883a 	add	r2,r3,r2
   11980:	1007883a 	mov	r3,r2
   11984:	e0bfff17 	ldw	r2,-4(fp)
   11988:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   1198c:	e0bfff17 	ldw	r2,-4(fp)
   11990:	10800017 	ldw	r2,0(r2)
   11994:	10a0000c 	andi	r2,r2,32768
   11998:	10000626 	beq	r2,zero,119b4 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
   1199c:	e0bfff17 	ldw	r2,-4(fp)
   119a0:	10800017 	ldw	r2,0(r2)
   119a4:	10bffff4 	orhi	r2,r2,65535
   119a8:	1007883a 	mov	r3,r2
   119ac:	e0bfff17 	ldw	r2,-4(fp)
   119b0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   119b4:	0005883a 	mov	r2,zero
}
   119b8:	e037883a 	mov	sp,fp
   119bc:	df000017 	ldw	fp,0(sp)
   119c0:	dec00104 	addi	sp,sp,4
   119c4:	f800283a 	ret

000119c8 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   119c8:	defffd04 	addi	sp,sp,-12
   119cc:	df000215 	stw	fp,8(sp)
   119d0:	df000204 	addi	fp,sp,8
   119d4:	e13ffe15 	stw	r4,-8(fp)
   119d8:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   119dc:	e0bffe17 	ldw	r2,-8(fp)
   119e0:	10800a17 	ldw	r2,40(r2)
   119e4:	1007883a 	mov	r3,r2
   119e8:	00800d04 	movi	r2,52
   119ec:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   119f0:	e0bffe17 	ldw	r2,-8(fp)
   119f4:	10800a17 	ldw	r2,40(r2)
   119f8:	10800044 	addi	r2,r2,1
   119fc:	10800023 	ldbuio	r2,0(r2)
   11a00:	10803fcc 	andi	r2,r2,255
   11a04:	10ffffcc 	andi	r3,r2,65535
   11a08:	e0bfff17 	ldw	r2,-4(fp)
   11a0c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11a10:	e0bffe17 	ldw	r2,-8(fp)
   11a14:	10800a17 	ldw	r2,40(r2)
   11a18:	1007883a 	mov	r3,r2
   11a1c:	00800d44 	movi	r2,53
   11a20:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11a24:	e0bffe17 	ldw	r2,-8(fp)
   11a28:	10800a17 	ldw	r2,40(r2)
   11a2c:	10800044 	addi	r2,r2,1
   11a30:	10800023 	ldbuio	r2,0(r2)
   11a34:	10803fcc 	andi	r2,r2,255
   11a38:	10bfffcc 	andi	r2,r2,65535
   11a3c:	1004923a 	slli	r2,r2,8
   11a40:	e0ffff17 	ldw	r3,-4(fp)
   11a44:	18c00017 	ldw	r3,0(r3)
   11a48:	1885883a 	add	r2,r3,r2
   11a4c:	1007883a 	mov	r3,r2
   11a50:	e0bfff17 	ldw	r2,-4(fp)
   11a54:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   11a58:	e0bfff17 	ldw	r2,-4(fp)
   11a5c:	10800017 	ldw	r2,0(r2)
   11a60:	10a0000c 	andi	r2,r2,32768
   11a64:	10000626 	beq	r2,zero,11a80 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
   11a68:	e0bfff17 	ldw	r2,-4(fp)
   11a6c:	10800017 	ldw	r2,0(r2)
   11a70:	10bffff4 	orhi	r2,r2,65535
   11a74:	1007883a 	mov	r3,r2
   11a78:	e0bfff17 	ldw	r2,-4(fp)
   11a7c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   11a80:	0005883a 	mov	r2,zero
}
   11a84:	e037883a 	mov	sp,fp
   11a88:	df000017 	ldw	fp,0(sp)
   11a8c:	dec00104 	addi	sp,sp,4
   11a90:	f800283a 	ret

00011a94 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   11a94:	defffd04 	addi	sp,sp,-12
   11a98:	df000215 	stw	fp,8(sp)
   11a9c:	df000204 	addi	fp,sp,8
   11aa0:	e13ffe15 	stw	r4,-8(fp)
   11aa4:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11aa8:	e0bffe17 	ldw	r2,-8(fp)
   11aac:	10800a17 	ldw	r2,40(r2)
   11ab0:	1007883a 	mov	r3,r2
   11ab4:	00800d84 	movi	r2,54
   11ab8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11abc:	e0bffe17 	ldw	r2,-8(fp)
   11ac0:	10800a17 	ldw	r2,40(r2)
   11ac4:	10800044 	addi	r2,r2,1
   11ac8:	10800023 	ldbuio	r2,0(r2)
   11acc:	10803fcc 	andi	r2,r2,255
   11ad0:	10ffffcc 	andi	r3,r2,65535
   11ad4:	e0bfff17 	ldw	r2,-4(fp)
   11ad8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11adc:	e0bffe17 	ldw	r2,-8(fp)
   11ae0:	10800a17 	ldw	r2,40(r2)
   11ae4:	1007883a 	mov	r3,r2
   11ae8:	00800dc4 	movi	r2,55
   11aec:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11af0:	e0bffe17 	ldw	r2,-8(fp)
   11af4:	10800a17 	ldw	r2,40(r2)
   11af8:	10800044 	addi	r2,r2,1
   11afc:	10800023 	ldbuio	r2,0(r2)
   11b00:	10803fcc 	andi	r2,r2,255
   11b04:	10bfffcc 	andi	r2,r2,65535
   11b08:	1004923a 	slli	r2,r2,8
   11b0c:	e0ffff17 	ldw	r3,-4(fp)
   11b10:	18c00017 	ldw	r3,0(r3)
   11b14:	1885883a 	add	r2,r3,r2
   11b18:	1007883a 	mov	r3,r2
   11b1c:	e0bfff17 	ldw	r2,-4(fp)
   11b20:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   11b24:	e0bfff17 	ldw	r2,-4(fp)
   11b28:	10800017 	ldw	r2,0(r2)
   11b2c:	10a0000c 	andi	r2,r2,32768
   11b30:	10000626 	beq	r2,zero,11b4c <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
   11b34:	e0bfff17 	ldw	r2,-4(fp)
   11b38:	10800017 	ldw	r2,0(r2)
   11b3c:	10bffff4 	orhi	r2,r2,65535
   11b40:	1007883a 	mov	r3,r2
   11b44:	e0bfff17 	ldw	r2,-4(fp)
   11b48:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   11b4c:	0005883a 	mov	r2,zero
}
   11b50:	e037883a 	mov	sp,fp
   11b54:	df000017 	ldw	fp,0(sp)
   11b58:	dec00104 	addi	sp,sp,4
   11b5c:	f800283a 	ret

00011b60 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11b60:	defff504 	addi	sp,sp,-44
   11b64:	df000a15 	stw	fp,40(sp)
   11b68:	df000a04 	addi	fp,sp,40
   11b6c:	e13ffc15 	stw	r4,-16(fp)
   11b70:	e17ffd15 	stw	r5,-12(fp)
   11b74:	e1bffe15 	stw	r6,-8(fp)
   11b78:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11b7c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11b80:	d0a5b017 	ldw	r2,-26944(gp)
  
  if (alt_ticks_per_second ())
   11b84:	10003c26 	beq	r2,zero,11c78 <alt_alarm_start+0x118>
  {
    if (alarm)
   11b88:	e0bffc17 	ldw	r2,-16(fp)
   11b8c:	10003826 	beq	r2,zero,11c70 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11b90:	e0bffc17 	ldw	r2,-16(fp)
   11b94:	e0fffe17 	ldw	r3,-8(fp)
   11b98:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11b9c:	e0bffc17 	ldw	r2,-16(fp)
   11ba0:	e0ffff17 	ldw	r3,-4(fp)
   11ba4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ba8:	0005303a 	rdctl	r2,status
   11bac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11bb0:	e0fff917 	ldw	r3,-28(fp)
   11bb4:	00bfff84 	movi	r2,-2
   11bb8:	1884703a 	and	r2,r3,r2
   11bbc:	1001703a 	wrctl	status,r2
  
  return context;
   11bc0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11bc4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11bc8:	d0a5b117 	ldw	r2,-26940(gp)
      
      current_nticks = alt_nticks();
   11bcc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11bd0:	e0fffd17 	ldw	r3,-12(fp)
   11bd4:	e0bff617 	ldw	r2,-40(fp)
   11bd8:	1885883a 	add	r2,r3,r2
   11bdc:	10c00044 	addi	r3,r2,1
   11be0:	e0bffc17 	ldw	r2,-16(fp)
   11be4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11be8:	e0bffc17 	ldw	r2,-16(fp)
   11bec:	10c00217 	ldw	r3,8(r2)
   11bf0:	e0bff617 	ldw	r2,-40(fp)
   11bf4:	1880042e 	bgeu	r3,r2,11c08 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   11bf8:	e0bffc17 	ldw	r2,-16(fp)
   11bfc:	00c00044 	movi	r3,1
   11c00:	10c00405 	stb	r3,16(r2)
   11c04:	00000206 	br	11c10 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   11c08:	e0bffc17 	ldw	r2,-16(fp)
   11c0c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11c10:	e0bffc17 	ldw	r2,-16(fp)
   11c14:	d0e00704 	addi	r3,gp,-32740
   11c18:	e0fffa15 	stw	r3,-24(fp)
   11c1c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11c20:	e0bffb17 	ldw	r2,-20(fp)
   11c24:	e0fffa17 	ldw	r3,-24(fp)
   11c28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11c2c:	e0bffa17 	ldw	r2,-24(fp)
   11c30:	10c00017 	ldw	r3,0(r2)
   11c34:	e0bffb17 	ldw	r2,-20(fp)
   11c38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11c3c:	e0bffa17 	ldw	r2,-24(fp)
   11c40:	10800017 	ldw	r2,0(r2)
   11c44:	e0fffb17 	ldw	r3,-20(fp)
   11c48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11c4c:	e0bffa17 	ldw	r2,-24(fp)
   11c50:	e0fffb17 	ldw	r3,-20(fp)
   11c54:	10c00015 	stw	r3,0(r2)
   11c58:	e0bff817 	ldw	r2,-32(fp)
   11c5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c60:	e0bff717 	ldw	r2,-36(fp)
   11c64:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11c68:	0005883a 	mov	r2,zero
   11c6c:	00000306 	br	11c7c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11c70:	00bffa84 	movi	r2,-22
   11c74:	00000106 	br	11c7c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   11c78:	00bfde84 	movi	r2,-134
  }
}
   11c7c:	e037883a 	mov	sp,fp
   11c80:	df000017 	ldw	fp,0(sp)
   11c84:	dec00104 	addi	sp,sp,4
   11c88:	f800283a 	ret

00011c8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11c8c:	defffe04 	addi	sp,sp,-8
   11c90:	dfc00115 	stw	ra,4(sp)
   11c94:	df000015 	stw	fp,0(sp)
   11c98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11c9c:	d0a00517 	ldw	r2,-32748(gp)
   11ca0:	10000326 	beq	r2,zero,11cb0 <alt_get_errno+0x24>
   11ca4:	d0a00517 	ldw	r2,-32748(gp)
   11ca8:	103ee83a 	callr	r2
   11cac:	00000106 	br	11cb4 <alt_get_errno+0x28>
   11cb0:	d0a5b304 	addi	r2,gp,-26932
}
   11cb4:	e037883a 	mov	sp,fp
   11cb8:	dfc00117 	ldw	ra,4(sp)
   11cbc:	df000017 	ldw	fp,0(sp)
   11cc0:	dec00204 	addi	sp,sp,8
   11cc4:	f800283a 	ret

00011cc8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11cc8:	defffb04 	addi	sp,sp,-20
   11ccc:	dfc00415 	stw	ra,16(sp)
   11cd0:	df000315 	stw	fp,12(sp)
   11cd4:	df000304 	addi	fp,sp,12
   11cd8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11cdc:	e0bfff17 	ldw	r2,-4(fp)
   11ce0:	10000816 	blt	r2,zero,11d04 <close+0x3c>
   11ce4:	01400304 	movi	r5,12
   11ce8:	e13fff17 	ldw	r4,-4(fp)
   11cec:	0012db40 	call	12db4 <__mulsi3>
   11cf0:	1007883a 	mov	r3,r2
   11cf4:	00800074 	movhi	r2,1
   11cf8:	108fef04 	addi	r2,r2,16316
   11cfc:	1885883a 	add	r2,r3,r2
   11d00:	00000106 	br	11d08 <close+0x40>
   11d04:	0005883a 	mov	r2,zero
   11d08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11d0c:	e0bffd17 	ldw	r2,-12(fp)
   11d10:	10001926 	beq	r2,zero,11d78 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11d14:	e0bffd17 	ldw	r2,-12(fp)
   11d18:	10800017 	ldw	r2,0(r2)
   11d1c:	10800417 	ldw	r2,16(r2)
   11d20:	10000626 	beq	r2,zero,11d3c <close+0x74>
   11d24:	e0bffd17 	ldw	r2,-12(fp)
   11d28:	10800017 	ldw	r2,0(r2)
   11d2c:	10800417 	ldw	r2,16(r2)
   11d30:	e13ffd17 	ldw	r4,-12(fp)
   11d34:	103ee83a 	callr	r2
   11d38:	00000106 	br	11d40 <close+0x78>
   11d3c:	0005883a 	mov	r2,zero
   11d40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11d44:	e13fff17 	ldw	r4,-4(fp)
   11d48:	00125a00 	call	125a0 <alt_release_fd>
    if (rval < 0)
   11d4c:	e0bffe17 	ldw	r2,-8(fp)
   11d50:	1000070e 	bge	r2,zero,11d70 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11d54:	0011c8c0 	call	11c8c <alt_get_errno>
   11d58:	1007883a 	mov	r3,r2
   11d5c:	e0bffe17 	ldw	r2,-8(fp)
   11d60:	0085c83a 	sub	r2,zero,r2
   11d64:	18800015 	stw	r2,0(r3)
      return -1;
   11d68:	00bfffc4 	movi	r2,-1
   11d6c:	00000706 	br	11d8c <close+0xc4>
    }
    return 0;
   11d70:	0005883a 	mov	r2,zero
   11d74:	00000506 	br	11d8c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11d78:	0011c8c0 	call	11c8c <alt_get_errno>
   11d7c:	1007883a 	mov	r3,r2
   11d80:	00801444 	movi	r2,81
   11d84:	18800015 	stw	r2,0(r3)
    return -1;
   11d88:	00bfffc4 	movi	r2,-1
  }
}
   11d8c:	e037883a 	mov	sp,fp
   11d90:	dfc00117 	ldw	ra,4(sp)
   11d94:	df000017 	ldw	fp,0(sp)
   11d98:	dec00204 	addi	sp,sp,8
   11d9c:	f800283a 	ret

00011da0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11da0:	deffff04 	addi	sp,sp,-4
   11da4:	df000015 	stw	fp,0(sp)
   11da8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11dac:	0001883a 	nop
   11db0:	e037883a 	mov	sp,fp
   11db4:	df000017 	ldw	fp,0(sp)
   11db8:	dec00104 	addi	sp,sp,4
   11dbc:	f800283a 	ret

00011dc0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11dc0:	defffc04 	addi	sp,sp,-16
   11dc4:	df000315 	stw	fp,12(sp)
   11dc8:	df000304 	addi	fp,sp,12
   11dcc:	e13ffd15 	stw	r4,-12(fp)
   11dd0:	e17ffe15 	stw	r5,-8(fp)
   11dd4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11dd8:	e0bfff17 	ldw	r2,-4(fp)
}
   11ddc:	e037883a 	mov	sp,fp
   11de0:	df000017 	ldw	fp,0(sp)
   11de4:	dec00104 	addi	sp,sp,4
   11de8:	f800283a 	ret

00011dec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11dec:	defffe04 	addi	sp,sp,-8
   11df0:	dfc00115 	stw	ra,4(sp)
   11df4:	df000015 	stw	fp,0(sp)
   11df8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11dfc:	d0a00517 	ldw	r2,-32748(gp)
   11e00:	10000326 	beq	r2,zero,11e10 <alt_get_errno+0x24>
   11e04:	d0a00517 	ldw	r2,-32748(gp)
   11e08:	103ee83a 	callr	r2
   11e0c:	00000106 	br	11e14 <alt_get_errno+0x28>
   11e10:	d0a5b304 	addi	r2,gp,-26932
}
   11e14:	e037883a 	mov	sp,fp
   11e18:	dfc00117 	ldw	ra,4(sp)
   11e1c:	df000017 	ldw	fp,0(sp)
   11e20:	dec00204 	addi	sp,sp,8
   11e24:	f800283a 	ret

00011e28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11e28:	defffa04 	addi	sp,sp,-24
   11e2c:	dfc00515 	stw	ra,20(sp)
   11e30:	df000415 	stw	fp,16(sp)
   11e34:	df000404 	addi	fp,sp,16
   11e38:	e13ffe15 	stw	r4,-8(fp)
   11e3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11e40:	e0bffe17 	ldw	r2,-8(fp)
   11e44:	10000326 	beq	r2,zero,11e54 <alt_dev_llist_insert+0x2c>
   11e48:	e0bffe17 	ldw	r2,-8(fp)
   11e4c:	10800217 	ldw	r2,8(r2)
   11e50:	1000061e 	bne	r2,zero,11e6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11e54:	0011dec0 	call	11dec <alt_get_errno>
   11e58:	1007883a 	mov	r3,r2
   11e5c:	00800584 	movi	r2,22
   11e60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11e64:	00bffa84 	movi	r2,-22
   11e68:	00001306 	br	11eb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11e6c:	e0bffe17 	ldw	r2,-8(fp)
   11e70:	e0ffff17 	ldw	r3,-4(fp)
   11e74:	e0fffc15 	stw	r3,-16(fp)
   11e78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11e7c:	e0bffd17 	ldw	r2,-12(fp)
   11e80:	e0fffc17 	ldw	r3,-16(fp)
   11e84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11e88:	e0bffc17 	ldw	r2,-16(fp)
   11e8c:	10c00017 	ldw	r3,0(r2)
   11e90:	e0bffd17 	ldw	r2,-12(fp)
   11e94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11e98:	e0bffc17 	ldw	r2,-16(fp)
   11e9c:	10800017 	ldw	r2,0(r2)
   11ea0:	e0fffd17 	ldw	r3,-12(fp)
   11ea4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11ea8:	e0bffc17 	ldw	r2,-16(fp)
   11eac:	e0fffd17 	ldw	r3,-12(fp)
   11eb0:	10c00015 	stw	r3,0(r2)

  return 0;  
   11eb4:	0005883a 	mov	r2,zero
}
   11eb8:	e037883a 	mov	sp,fp
   11ebc:	dfc00117 	ldw	ra,4(sp)
   11ec0:	df000017 	ldw	fp,0(sp)
   11ec4:	dec00204 	addi	sp,sp,8
   11ec8:	f800283a 	ret

00011ecc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11ecc:	defffd04 	addi	sp,sp,-12
   11ed0:	dfc00215 	stw	ra,8(sp)
   11ed4:	df000115 	stw	fp,4(sp)
   11ed8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11edc:	00800074 	movhi	r2,1
   11ee0:	108b8304 	addi	r2,r2,11788
   11ee4:	e0bfff15 	stw	r2,-4(fp)
   11ee8:	00000606 	br	11f04 <_do_ctors+0x38>
        (*ctor) (); 
   11eec:	e0bfff17 	ldw	r2,-4(fp)
   11ef0:	10800017 	ldw	r2,0(r2)
   11ef4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11ef8:	e0bfff17 	ldw	r2,-4(fp)
   11efc:	10bfff04 	addi	r2,r2,-4
   11f00:	e0bfff15 	stw	r2,-4(fp)
   11f04:	e0ffff17 	ldw	r3,-4(fp)
   11f08:	00800074 	movhi	r2,1
   11f0c:	108b8404 	addi	r2,r2,11792
   11f10:	18bff62e 	bgeu	r3,r2,11eec <__alt_data_end+0xffff1eec>
        (*ctor) (); 
}
   11f14:	0001883a 	nop
   11f18:	e037883a 	mov	sp,fp
   11f1c:	dfc00117 	ldw	ra,4(sp)
   11f20:	df000017 	ldw	fp,0(sp)
   11f24:	dec00204 	addi	sp,sp,8
   11f28:	f800283a 	ret

00011f2c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11f2c:	defffd04 	addi	sp,sp,-12
   11f30:	dfc00215 	stw	ra,8(sp)
   11f34:	df000115 	stw	fp,4(sp)
   11f38:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11f3c:	00800074 	movhi	r2,1
   11f40:	108b8304 	addi	r2,r2,11788
   11f44:	e0bfff15 	stw	r2,-4(fp)
   11f48:	00000606 	br	11f64 <_do_dtors+0x38>
        (*dtor) (); 
   11f4c:	e0bfff17 	ldw	r2,-4(fp)
   11f50:	10800017 	ldw	r2,0(r2)
   11f54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11f58:	e0bfff17 	ldw	r2,-4(fp)
   11f5c:	10bfff04 	addi	r2,r2,-4
   11f60:	e0bfff15 	stw	r2,-4(fp)
   11f64:	e0ffff17 	ldw	r3,-4(fp)
   11f68:	00800074 	movhi	r2,1
   11f6c:	108b8404 	addi	r2,r2,11792
   11f70:	18bff62e 	bgeu	r3,r2,11f4c <__alt_data_end+0xffff1f4c>
        (*dtor) (); 
}
   11f74:	0001883a 	nop
   11f78:	e037883a 	mov	sp,fp
   11f7c:	dfc00117 	ldw	ra,4(sp)
   11f80:	df000017 	ldw	fp,0(sp)
   11f84:	dec00204 	addi	sp,sp,8
   11f88:	f800283a 	ret

00011f8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11f8c:	defffa04 	addi	sp,sp,-24
   11f90:	dfc00515 	stw	ra,20(sp)
   11f94:	df000415 	stw	fp,16(sp)
   11f98:	df000404 	addi	fp,sp,16
   11f9c:	e13ffe15 	stw	r4,-8(fp)
   11fa0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11fa4:	e0bfff17 	ldw	r2,-4(fp)
   11fa8:	10800017 	ldw	r2,0(r2)
   11fac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11fb0:	e13ffe17 	ldw	r4,-8(fp)
   11fb4:	00109840 	call	10984 <strlen>
   11fb8:	10800044 	addi	r2,r2,1
   11fbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11fc0:	00000d06 	br	11ff8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11fc4:	e0bffc17 	ldw	r2,-16(fp)
   11fc8:	10800217 	ldw	r2,8(r2)
   11fcc:	e0fffd17 	ldw	r3,-12(fp)
   11fd0:	180d883a 	mov	r6,r3
   11fd4:	e17ffe17 	ldw	r5,-8(fp)
   11fd8:	1009883a 	mov	r4,r2
   11fdc:	0012aa00 	call	12aa0 <memcmp>
   11fe0:	1000021e 	bne	r2,zero,11fec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11fe4:	e0bffc17 	ldw	r2,-16(fp)
   11fe8:	00000706 	br	12008 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11fec:	e0bffc17 	ldw	r2,-16(fp)
   11ff0:	10800017 	ldw	r2,0(r2)
   11ff4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ff8:	e0fffc17 	ldw	r3,-16(fp)
   11ffc:	e0bfff17 	ldw	r2,-4(fp)
   12000:	18bff01e 	bne	r3,r2,11fc4 <__alt_data_end+0xffff1fc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12004:	0005883a 	mov	r2,zero
}
   12008:	e037883a 	mov	sp,fp
   1200c:	dfc00117 	ldw	ra,4(sp)
   12010:	df000017 	ldw	fp,0(sp)
   12014:	dec00204 	addi	sp,sp,8
   12018:	f800283a 	ret

0001201c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1201c:	deffff04 	addi	sp,sp,-4
   12020:	df000015 	stw	fp,0(sp)
   12024:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   12028:	0001883a 	nop
   1202c:	e037883a 	mov	sp,fp
   12030:	df000017 	ldw	fp,0(sp)
   12034:	dec00104 	addi	sp,sp,4
   12038:	f800283a 	ret

0001203c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1203c:	defff804 	addi	sp,sp,-32
   12040:	dfc00715 	stw	ra,28(sp)
   12044:	df000615 	stw	fp,24(sp)
   12048:	dc000515 	stw	r16,20(sp)
   1204c:	df000604 	addi	fp,sp,24
   12050:	e13ffb15 	stw	r4,-20(fp)
   12054:	e17ffc15 	stw	r5,-16(fp)
   12058:	e1bffd15 	stw	r6,-12(fp)
   1205c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   12060:	e1bffe17 	ldw	r6,-8(fp)
   12064:	e17ffd17 	ldw	r5,-12(fp)
   12068:	e13ffc17 	ldw	r4,-16(fp)
   1206c:	00124440 	call	12444 <open>
   12070:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   12074:	e0bffa17 	ldw	r2,-24(fp)
   12078:	10002216 	blt	r2,zero,12104 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1207c:	04000074 	movhi	r16,1
   12080:	840fef04 	addi	r16,r16,16316
   12084:	e0bffa17 	ldw	r2,-24(fp)
   12088:	01400304 	movi	r5,12
   1208c:	1009883a 	mov	r4,r2
   12090:	0012db40 	call	12db4 <__mulsi3>
   12094:	8085883a 	add	r2,r16,r2
   12098:	10c00017 	ldw	r3,0(r2)
   1209c:	e0bffb17 	ldw	r2,-20(fp)
   120a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   120a4:	04000074 	movhi	r16,1
   120a8:	840fef04 	addi	r16,r16,16316
   120ac:	e0bffa17 	ldw	r2,-24(fp)
   120b0:	01400304 	movi	r5,12
   120b4:	1009883a 	mov	r4,r2
   120b8:	0012db40 	call	12db4 <__mulsi3>
   120bc:	8085883a 	add	r2,r16,r2
   120c0:	10800104 	addi	r2,r2,4
   120c4:	10c00017 	ldw	r3,0(r2)
   120c8:	e0bffb17 	ldw	r2,-20(fp)
   120cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   120d0:	04000074 	movhi	r16,1
   120d4:	840fef04 	addi	r16,r16,16316
   120d8:	e0bffa17 	ldw	r2,-24(fp)
   120dc:	01400304 	movi	r5,12
   120e0:	1009883a 	mov	r4,r2
   120e4:	0012db40 	call	12db4 <__mulsi3>
   120e8:	8085883a 	add	r2,r16,r2
   120ec:	10800204 	addi	r2,r2,8
   120f0:	10c00017 	ldw	r3,0(r2)
   120f4:	e0bffb17 	ldw	r2,-20(fp)
   120f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   120fc:	e13ffa17 	ldw	r4,-24(fp)
   12100:	00125a00 	call	125a0 <alt_release_fd>
  }
} 
   12104:	0001883a 	nop
   12108:	e6ffff04 	addi	sp,fp,-4
   1210c:	dfc00217 	ldw	ra,8(sp)
   12110:	df000117 	ldw	fp,4(sp)
   12114:	dc000017 	ldw	r16,0(sp)
   12118:	dec00304 	addi	sp,sp,12
   1211c:	f800283a 	ret

00012120 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12120:	defffb04 	addi	sp,sp,-20
   12124:	dfc00415 	stw	ra,16(sp)
   12128:	df000315 	stw	fp,12(sp)
   1212c:	df000304 	addi	fp,sp,12
   12130:	e13ffd15 	stw	r4,-12(fp)
   12134:	e17ffe15 	stw	r5,-8(fp)
   12138:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1213c:	01c07fc4 	movi	r7,511
   12140:	01800044 	movi	r6,1
   12144:	e17ffd17 	ldw	r5,-12(fp)
   12148:	01000074 	movhi	r4,1
   1214c:	210ff204 	addi	r4,r4,16328
   12150:	001203c0 	call	1203c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12154:	01c07fc4 	movi	r7,511
   12158:	000d883a 	mov	r6,zero
   1215c:	e17ffe17 	ldw	r5,-8(fp)
   12160:	01000074 	movhi	r4,1
   12164:	210fef04 	addi	r4,r4,16316
   12168:	001203c0 	call	1203c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1216c:	01c07fc4 	movi	r7,511
   12170:	01800044 	movi	r6,1
   12174:	e17fff17 	ldw	r5,-4(fp)
   12178:	01000074 	movhi	r4,1
   1217c:	210ff504 	addi	r4,r4,16340
   12180:	001203c0 	call	1203c <alt_open_fd>
}  
   12184:	0001883a 	nop
   12188:	e037883a 	mov	sp,fp
   1218c:	dfc00117 	ldw	ra,4(sp)
   12190:	df000017 	ldw	fp,0(sp)
   12194:	dec00204 	addi	sp,sp,8
   12198:	f800283a 	ret

0001219c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1219c:	defff004 	addi	sp,sp,-64
   121a0:	df000f15 	stw	fp,60(sp)
   121a4:	df000f04 	addi	fp,sp,60
   121a8:	e13ffd15 	stw	r4,-12(fp)
   121ac:	e17ffe15 	stw	r5,-8(fp)
   121b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   121b4:	00bffa84 	movi	r2,-22
   121b8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   121bc:	e0bffd17 	ldw	r2,-12(fp)
   121c0:	10800828 	cmpgeui	r2,r2,32
   121c4:	1000501e 	bne	r2,zero,12308 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121c8:	0005303a 	rdctl	r2,status
   121cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121d0:	e0fff617 	ldw	r3,-40(fp)
   121d4:	00bfff84 	movi	r2,-2
   121d8:	1884703a 	and	r2,r3,r2
   121dc:	1001703a 	wrctl	status,r2
  
  return context;
   121e0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   121e4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   121e8:	00800074 	movhi	r2,1
   121ec:	10970c04 	addi	r2,r2,23600
   121f0:	e0fffd17 	ldw	r3,-12(fp)
   121f4:	180690fa 	slli	r3,r3,3
   121f8:	10c5883a 	add	r2,r2,r3
   121fc:	e0ffff17 	ldw	r3,-4(fp)
   12200:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   12204:	00800074 	movhi	r2,1
   12208:	10970c04 	addi	r2,r2,23600
   1220c:	e0fffd17 	ldw	r3,-12(fp)
   12210:	180690fa 	slli	r3,r3,3
   12214:	10c5883a 	add	r2,r2,r3
   12218:	10800104 	addi	r2,r2,4
   1221c:	e0fffe17 	ldw	r3,-8(fp)
   12220:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   12224:	e0bfff17 	ldw	r2,-4(fp)
   12228:	10001926 	beq	r2,zero,12290 <alt_irq_register+0xf4>
   1222c:	e0bffd17 	ldw	r2,-12(fp)
   12230:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12234:	0005303a 	rdctl	r2,status
   12238:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1223c:	e0fff717 	ldw	r3,-36(fp)
   12240:	00bfff84 	movi	r2,-2
   12244:	1884703a 	and	r2,r3,r2
   12248:	1001703a 	wrctl	status,r2
  
  return context;
   1224c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12250:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   12254:	00c00044 	movi	r3,1
   12258:	e0bff217 	ldw	r2,-56(fp)
   1225c:	1884983a 	sll	r2,r3,r2
   12260:	1007883a 	mov	r3,r2
   12264:	d0a5af17 	ldw	r2,-26948(gp)
   12268:	1884b03a 	or	r2,r3,r2
   1226c:	d0a5af15 	stw	r2,-26948(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12270:	d0a5af17 	ldw	r2,-26948(gp)
   12274:	100170fa 	wrctl	ienable,r2
   12278:	e0bff817 	ldw	r2,-32(fp)
   1227c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12280:	e0bff917 	ldw	r2,-28(fp)
   12284:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12288:	0005883a 	mov	r2,zero
   1228c:	00001906 	br	122f4 <alt_irq_register+0x158>
   12290:	e0bffd17 	ldw	r2,-12(fp)
   12294:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12298:	0005303a 	rdctl	r2,status
   1229c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122a0:	e0fffa17 	ldw	r3,-24(fp)
   122a4:	00bfff84 	movi	r2,-2
   122a8:	1884703a 	and	r2,r3,r2
   122ac:	1001703a 	wrctl	status,r2
  
  return context;
   122b0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   122b4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   122b8:	00c00044 	movi	r3,1
   122bc:	e0bff417 	ldw	r2,-48(fp)
   122c0:	1884983a 	sll	r2,r3,r2
   122c4:	0084303a 	nor	r2,zero,r2
   122c8:	1007883a 	mov	r3,r2
   122cc:	d0a5af17 	ldw	r2,-26948(gp)
   122d0:	1884703a 	and	r2,r3,r2
   122d4:	d0a5af15 	stw	r2,-26948(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   122d8:	d0a5af17 	ldw	r2,-26948(gp)
   122dc:	100170fa 	wrctl	ienable,r2
   122e0:	e0bffb17 	ldw	r2,-20(fp)
   122e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122e8:	e0bffc17 	ldw	r2,-16(fp)
   122ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   122f0:	0005883a 	mov	r2,zero
   122f4:	e0bff115 	stw	r2,-60(fp)
   122f8:	e0bff317 	ldw	r2,-52(fp)
   122fc:	e0bff515 	stw	r2,-44(fp)
   12300:	e0bff517 	ldw	r2,-44(fp)
   12304:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   12308:	e0bff117 	ldw	r2,-60(fp)
}
   1230c:	e037883a 	mov	sp,fp
   12310:	df000017 	ldw	fp,0(sp)
   12314:	dec00104 	addi	sp,sp,4
   12318:	f800283a 	ret

0001231c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1231c:	defffe04 	addi	sp,sp,-8
   12320:	dfc00115 	stw	ra,4(sp)
   12324:	df000015 	stw	fp,0(sp)
   12328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1232c:	d0a00517 	ldw	r2,-32748(gp)
   12330:	10000326 	beq	r2,zero,12340 <alt_get_errno+0x24>
   12334:	d0a00517 	ldw	r2,-32748(gp)
   12338:	103ee83a 	callr	r2
   1233c:	00000106 	br	12344 <alt_get_errno+0x28>
   12340:	d0a5b304 	addi	r2,gp,-26932
}
   12344:	e037883a 	mov	sp,fp
   12348:	dfc00117 	ldw	ra,4(sp)
   1234c:	df000017 	ldw	fp,0(sp)
   12350:	dec00204 	addi	sp,sp,8
   12354:	f800283a 	ret

00012358 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12358:	defffb04 	addi	sp,sp,-20
   1235c:	dfc00415 	stw	ra,16(sp)
   12360:	df000315 	stw	fp,12(sp)
   12364:	dc000215 	stw	r16,8(sp)
   12368:	df000304 	addi	fp,sp,12
   1236c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12370:	e0bffe17 	ldw	r2,-8(fp)
   12374:	10800217 	ldw	r2,8(r2)
   12378:	10d00034 	orhi	r3,r2,16384
   1237c:	e0bffe17 	ldw	r2,-8(fp)
   12380:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12384:	e03ffd15 	stw	zero,-12(fp)
   12388:	00002306 	br	12418 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1238c:	04000074 	movhi	r16,1
   12390:	840fef04 	addi	r16,r16,16316
   12394:	e0bffd17 	ldw	r2,-12(fp)
   12398:	01400304 	movi	r5,12
   1239c:	1009883a 	mov	r4,r2
   123a0:	0012db40 	call	12db4 <__mulsi3>
   123a4:	8085883a 	add	r2,r16,r2
   123a8:	10c00017 	ldw	r3,0(r2)
   123ac:	e0bffe17 	ldw	r2,-8(fp)
   123b0:	10800017 	ldw	r2,0(r2)
   123b4:	1880151e 	bne	r3,r2,1240c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   123b8:	04000074 	movhi	r16,1
   123bc:	840fef04 	addi	r16,r16,16316
   123c0:	e0bffd17 	ldw	r2,-12(fp)
   123c4:	01400304 	movi	r5,12
   123c8:	1009883a 	mov	r4,r2
   123cc:	0012db40 	call	12db4 <__mulsi3>
   123d0:	8085883a 	add	r2,r16,r2
   123d4:	10800204 	addi	r2,r2,8
   123d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   123dc:	10000b0e 	bge	r2,zero,1240c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   123e0:	01400304 	movi	r5,12
   123e4:	e13ffd17 	ldw	r4,-12(fp)
   123e8:	0012db40 	call	12db4 <__mulsi3>
   123ec:	1007883a 	mov	r3,r2
   123f0:	00800074 	movhi	r2,1
   123f4:	108fef04 	addi	r2,r2,16316
   123f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   123fc:	e0bffe17 	ldw	r2,-8(fp)
   12400:	18800226 	beq	r3,r2,1240c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   12404:	00bffcc4 	movi	r2,-13
   12408:	00000806 	br	1242c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1240c:	e0bffd17 	ldw	r2,-12(fp)
   12410:	10800044 	addi	r2,r2,1
   12414:	e0bffd15 	stw	r2,-12(fp)
   12418:	d0a00417 	ldw	r2,-32752(gp)
   1241c:	1007883a 	mov	r3,r2
   12420:	e0bffd17 	ldw	r2,-12(fp)
   12424:	18bfd92e 	bgeu	r3,r2,1238c <__alt_data_end+0xffff238c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12428:	0005883a 	mov	r2,zero
}
   1242c:	e6ffff04 	addi	sp,fp,-4
   12430:	dfc00217 	ldw	ra,8(sp)
   12434:	df000117 	ldw	fp,4(sp)
   12438:	dc000017 	ldw	r16,0(sp)
   1243c:	dec00304 	addi	sp,sp,12
   12440:	f800283a 	ret

00012444 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12444:	defff604 	addi	sp,sp,-40
   12448:	dfc00915 	stw	ra,36(sp)
   1244c:	df000815 	stw	fp,32(sp)
   12450:	df000804 	addi	fp,sp,32
   12454:	e13ffd15 	stw	r4,-12(fp)
   12458:	e17ffe15 	stw	r5,-8(fp)
   1245c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12460:	00bfffc4 	movi	r2,-1
   12464:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12468:	00bffb44 	movi	r2,-19
   1246c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12470:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12474:	d1600204 	addi	r5,gp,-32760
   12478:	e13ffd17 	ldw	r4,-12(fp)
   1247c:	0011f8c0 	call	11f8c <alt_find_dev>
   12480:	e0bff815 	stw	r2,-32(fp)
   12484:	e0bff817 	ldw	r2,-32(fp)
   12488:	1000051e 	bne	r2,zero,124a0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1248c:	e13ffd17 	ldw	r4,-12(fp)
   12490:	00127ec0 	call	127ec <alt_find_file>
   12494:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12498:	00800044 	movi	r2,1
   1249c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   124a0:	e0bff817 	ldw	r2,-32(fp)
   124a4:	10002b26 	beq	r2,zero,12554 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   124a8:	e13ff817 	ldw	r4,-32(fp)
   124ac:	00128f40 	call	128f4 <alt_get_fd>
   124b0:	e0bff915 	stw	r2,-28(fp)
   124b4:	e0bff917 	ldw	r2,-28(fp)
   124b8:	1000030e 	bge	r2,zero,124c8 <open+0x84>
    {
      status = index;
   124bc:	e0bff917 	ldw	r2,-28(fp)
   124c0:	e0bffa15 	stw	r2,-24(fp)
   124c4:	00002506 	br	1255c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   124c8:	01400304 	movi	r5,12
   124cc:	e13ff917 	ldw	r4,-28(fp)
   124d0:	0012db40 	call	12db4 <__mulsi3>
   124d4:	1007883a 	mov	r3,r2
   124d8:	00800074 	movhi	r2,1
   124dc:	108fef04 	addi	r2,r2,16316
   124e0:	1885883a 	add	r2,r3,r2
   124e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   124e8:	e0fffe17 	ldw	r3,-8(fp)
   124ec:	00900034 	movhi	r2,16384
   124f0:	10bfffc4 	addi	r2,r2,-1
   124f4:	1886703a 	and	r3,r3,r2
   124f8:	e0bffc17 	ldw	r2,-16(fp)
   124fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12500:	e0bffb17 	ldw	r2,-20(fp)
   12504:	1000051e 	bne	r2,zero,1251c <open+0xd8>
   12508:	e13ffc17 	ldw	r4,-16(fp)
   1250c:	00123580 	call	12358 <alt_file_locked>
   12510:	e0bffa15 	stw	r2,-24(fp)
   12514:	e0bffa17 	ldw	r2,-24(fp)
   12518:	10001016 	blt	r2,zero,1255c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1251c:	e0bff817 	ldw	r2,-32(fp)
   12520:	10800317 	ldw	r2,12(r2)
   12524:	10000826 	beq	r2,zero,12548 <open+0x104>
   12528:	e0bff817 	ldw	r2,-32(fp)
   1252c:	10800317 	ldw	r2,12(r2)
   12530:	e1ffff17 	ldw	r7,-4(fp)
   12534:	e1bffe17 	ldw	r6,-8(fp)
   12538:	e17ffd17 	ldw	r5,-12(fp)
   1253c:	e13ffc17 	ldw	r4,-16(fp)
   12540:	103ee83a 	callr	r2
   12544:	00000106 	br	1254c <open+0x108>
   12548:	0005883a 	mov	r2,zero
   1254c:	e0bffa15 	stw	r2,-24(fp)
   12550:	00000206 	br	1255c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12554:	00bffb44 	movi	r2,-19
   12558:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1255c:	e0bffa17 	ldw	r2,-24(fp)
   12560:	1000090e 	bge	r2,zero,12588 <open+0x144>
  {
    alt_release_fd (index);  
   12564:	e13ff917 	ldw	r4,-28(fp)
   12568:	00125a00 	call	125a0 <alt_release_fd>
    ALT_ERRNO = -status;
   1256c:	001231c0 	call	1231c <alt_get_errno>
   12570:	1007883a 	mov	r3,r2
   12574:	e0bffa17 	ldw	r2,-24(fp)
   12578:	0085c83a 	sub	r2,zero,r2
   1257c:	18800015 	stw	r2,0(r3)
    return -1;
   12580:	00bfffc4 	movi	r2,-1
   12584:	00000106 	br	1258c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   12588:	e0bff917 	ldw	r2,-28(fp)
}
   1258c:	e037883a 	mov	sp,fp
   12590:	dfc00117 	ldw	ra,4(sp)
   12594:	df000017 	ldw	fp,0(sp)
   12598:	dec00204 	addi	sp,sp,8
   1259c:	f800283a 	ret

000125a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   125a0:	defffc04 	addi	sp,sp,-16
   125a4:	dfc00315 	stw	ra,12(sp)
   125a8:	df000215 	stw	fp,8(sp)
   125ac:	dc000115 	stw	r16,4(sp)
   125b0:	df000204 	addi	fp,sp,8
   125b4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   125b8:	e0bffe17 	ldw	r2,-8(fp)
   125bc:	108000d0 	cmplti	r2,r2,3
   125c0:	1000111e 	bne	r2,zero,12608 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   125c4:	04000074 	movhi	r16,1
   125c8:	840fef04 	addi	r16,r16,16316
   125cc:	e0bffe17 	ldw	r2,-8(fp)
   125d0:	01400304 	movi	r5,12
   125d4:	1009883a 	mov	r4,r2
   125d8:	0012db40 	call	12db4 <__mulsi3>
   125dc:	8085883a 	add	r2,r16,r2
   125e0:	10800204 	addi	r2,r2,8
   125e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   125e8:	04000074 	movhi	r16,1
   125ec:	840fef04 	addi	r16,r16,16316
   125f0:	e0bffe17 	ldw	r2,-8(fp)
   125f4:	01400304 	movi	r5,12
   125f8:	1009883a 	mov	r4,r2
   125fc:	0012db40 	call	12db4 <__mulsi3>
   12600:	8085883a 	add	r2,r16,r2
   12604:	10000015 	stw	zero,0(r2)
  }
}
   12608:	0001883a 	nop
   1260c:	e6ffff04 	addi	sp,fp,-4
   12610:	dfc00217 	ldw	ra,8(sp)
   12614:	df000117 	ldw	fp,4(sp)
   12618:	dc000017 	ldw	r16,0(sp)
   1261c:	dec00304 	addi	sp,sp,12
   12620:	f800283a 	ret

00012624 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12624:	defffa04 	addi	sp,sp,-24
   12628:	df000515 	stw	fp,20(sp)
   1262c:	df000504 	addi	fp,sp,20
   12630:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12634:	0005303a 	rdctl	r2,status
   12638:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1263c:	e0fffc17 	ldw	r3,-16(fp)
   12640:	00bfff84 	movi	r2,-2
   12644:	1884703a 	and	r2,r3,r2
   12648:	1001703a 	wrctl	status,r2
  
  return context;
   1264c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12650:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   12654:	e0bfff17 	ldw	r2,-4(fp)
   12658:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1265c:	e0bffd17 	ldw	r2,-12(fp)
   12660:	10800017 	ldw	r2,0(r2)
   12664:	e0fffd17 	ldw	r3,-12(fp)
   12668:	18c00117 	ldw	r3,4(r3)
   1266c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12670:	e0bffd17 	ldw	r2,-12(fp)
   12674:	10800117 	ldw	r2,4(r2)
   12678:	e0fffd17 	ldw	r3,-12(fp)
   1267c:	18c00017 	ldw	r3,0(r3)
   12680:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12684:	e0bffd17 	ldw	r2,-12(fp)
   12688:	e0fffd17 	ldw	r3,-12(fp)
   1268c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12690:	e0bffd17 	ldw	r2,-12(fp)
   12694:	e0fffd17 	ldw	r3,-12(fp)
   12698:	10c00015 	stw	r3,0(r2)
   1269c:	e0bffb17 	ldw	r2,-20(fp)
   126a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126a4:	e0bffe17 	ldw	r2,-8(fp)
   126a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   126ac:	0001883a 	nop
   126b0:	e037883a 	mov	sp,fp
   126b4:	df000017 	ldw	fp,0(sp)
   126b8:	dec00104 	addi	sp,sp,4
   126bc:	f800283a 	ret

000126c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   126c0:	defffb04 	addi	sp,sp,-20
   126c4:	dfc00415 	stw	ra,16(sp)
   126c8:	df000315 	stw	fp,12(sp)
   126cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   126d0:	d0a00717 	ldw	r2,-32740(gp)
   126d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   126d8:	d0a5b117 	ldw	r2,-26940(gp)
   126dc:	10800044 	addi	r2,r2,1
   126e0:	d0a5b115 	stw	r2,-26940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   126e4:	00002e06 	br	127a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   126e8:	e0bffd17 	ldw	r2,-12(fp)
   126ec:	10800017 	ldw	r2,0(r2)
   126f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   126f4:	e0bffd17 	ldw	r2,-12(fp)
   126f8:	10800403 	ldbu	r2,16(r2)
   126fc:	10803fcc 	andi	r2,r2,255
   12700:	10000426 	beq	r2,zero,12714 <alt_tick+0x54>
   12704:	d0a5b117 	ldw	r2,-26940(gp)
   12708:	1000021e 	bne	r2,zero,12714 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1270c:	e0bffd17 	ldw	r2,-12(fp)
   12710:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12714:	e0bffd17 	ldw	r2,-12(fp)
   12718:	10800217 	ldw	r2,8(r2)
   1271c:	d0e5b117 	ldw	r3,-26940(gp)
   12720:	18801d36 	bltu	r3,r2,12798 <alt_tick+0xd8>
   12724:	e0bffd17 	ldw	r2,-12(fp)
   12728:	10800403 	ldbu	r2,16(r2)
   1272c:	10803fcc 	andi	r2,r2,255
   12730:	1000191e 	bne	r2,zero,12798 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12734:	e0bffd17 	ldw	r2,-12(fp)
   12738:	10800317 	ldw	r2,12(r2)
   1273c:	e0fffd17 	ldw	r3,-12(fp)
   12740:	18c00517 	ldw	r3,20(r3)
   12744:	1809883a 	mov	r4,r3
   12748:	103ee83a 	callr	r2
   1274c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12750:	e0bfff17 	ldw	r2,-4(fp)
   12754:	1000031e 	bne	r2,zero,12764 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   12758:	e13ffd17 	ldw	r4,-12(fp)
   1275c:	00126240 	call	12624 <alt_alarm_stop>
   12760:	00000d06 	br	12798 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   12764:	e0bffd17 	ldw	r2,-12(fp)
   12768:	10c00217 	ldw	r3,8(r2)
   1276c:	e0bfff17 	ldw	r2,-4(fp)
   12770:	1887883a 	add	r3,r3,r2
   12774:	e0bffd17 	ldw	r2,-12(fp)
   12778:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1277c:	e0bffd17 	ldw	r2,-12(fp)
   12780:	10c00217 	ldw	r3,8(r2)
   12784:	d0a5b117 	ldw	r2,-26940(gp)
   12788:	1880032e 	bgeu	r3,r2,12798 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1278c:	e0bffd17 	ldw	r2,-12(fp)
   12790:	00c00044 	movi	r3,1
   12794:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12798:	e0bffe17 	ldw	r2,-8(fp)
   1279c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   127a0:	e0fffd17 	ldw	r3,-12(fp)
   127a4:	d0a00704 	addi	r2,gp,-32740
   127a8:	18bfcf1e 	bne	r3,r2,126e8 <__alt_data_end+0xffff26e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   127ac:	0001883a 	nop
}
   127b0:	0001883a 	nop
   127b4:	e037883a 	mov	sp,fp
   127b8:	dfc00117 	ldw	ra,4(sp)
   127bc:	df000017 	ldw	fp,0(sp)
   127c0:	dec00204 	addi	sp,sp,8
   127c4:	f800283a 	ret

000127c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   127c8:	deffff04 	addi	sp,sp,-4
   127cc:	df000015 	stw	fp,0(sp)
   127d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   127d4:	000170fa 	wrctl	ienable,zero
}
   127d8:	0001883a 	nop
   127dc:	e037883a 	mov	sp,fp
   127e0:	df000017 	ldw	fp,0(sp)
   127e4:	dec00104 	addi	sp,sp,4
   127e8:	f800283a 	ret

000127ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   127ec:	defffb04 	addi	sp,sp,-20
   127f0:	dfc00415 	stw	ra,16(sp)
   127f4:	df000315 	stw	fp,12(sp)
   127f8:	df000304 	addi	fp,sp,12
   127fc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12800:	d0a00017 	ldw	r2,-32768(gp)
   12804:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12808:	00003106 	br	128d0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1280c:	e0bffd17 	ldw	r2,-12(fp)
   12810:	10800217 	ldw	r2,8(r2)
   12814:	1009883a 	mov	r4,r2
   12818:	00109840 	call	10984 <strlen>
   1281c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12820:	e0bffd17 	ldw	r2,-12(fp)
   12824:	10c00217 	ldw	r3,8(r2)
   12828:	e0bffe17 	ldw	r2,-8(fp)
   1282c:	10bfffc4 	addi	r2,r2,-1
   12830:	1885883a 	add	r2,r3,r2
   12834:	10800003 	ldbu	r2,0(r2)
   12838:	10803fcc 	andi	r2,r2,255
   1283c:	1080201c 	xori	r2,r2,128
   12840:	10bfe004 	addi	r2,r2,-128
   12844:	10800bd8 	cmpnei	r2,r2,47
   12848:	1000031e 	bne	r2,zero,12858 <alt_find_file+0x6c>
    {
      len -= 1;
   1284c:	e0bffe17 	ldw	r2,-8(fp)
   12850:	10bfffc4 	addi	r2,r2,-1
   12854:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12858:	e0bffe17 	ldw	r2,-8(fp)
   1285c:	e0ffff17 	ldw	r3,-4(fp)
   12860:	1885883a 	add	r2,r3,r2
   12864:	10800003 	ldbu	r2,0(r2)
   12868:	10803fcc 	andi	r2,r2,255
   1286c:	1080201c 	xori	r2,r2,128
   12870:	10bfe004 	addi	r2,r2,-128
   12874:	10800be0 	cmpeqi	r2,r2,47
   12878:	1000081e 	bne	r2,zero,1289c <alt_find_file+0xb0>
   1287c:	e0bffe17 	ldw	r2,-8(fp)
   12880:	e0ffff17 	ldw	r3,-4(fp)
   12884:	1885883a 	add	r2,r3,r2
   12888:	10800003 	ldbu	r2,0(r2)
   1288c:	10803fcc 	andi	r2,r2,255
   12890:	1080201c 	xori	r2,r2,128
   12894:	10bfe004 	addi	r2,r2,-128
   12898:	10000a1e 	bne	r2,zero,128c4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1289c:	e0bffd17 	ldw	r2,-12(fp)
   128a0:	10800217 	ldw	r2,8(r2)
   128a4:	e0fffe17 	ldw	r3,-8(fp)
   128a8:	180d883a 	mov	r6,r3
   128ac:	e17fff17 	ldw	r5,-4(fp)
   128b0:	1009883a 	mov	r4,r2
   128b4:	0012aa00 	call	12aa0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   128b8:	1000021e 	bne	r2,zero,128c4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   128bc:	e0bffd17 	ldw	r2,-12(fp)
   128c0:	00000706 	br	128e0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   128c4:	e0bffd17 	ldw	r2,-12(fp)
   128c8:	10800017 	ldw	r2,0(r2)
   128cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   128d0:	e0fffd17 	ldw	r3,-12(fp)
   128d4:	d0a00004 	addi	r2,gp,-32768
   128d8:	18bfcc1e 	bne	r3,r2,1280c <__alt_data_end+0xffff280c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   128dc:	0005883a 	mov	r2,zero
}
   128e0:	e037883a 	mov	sp,fp
   128e4:	dfc00117 	ldw	ra,4(sp)
   128e8:	df000017 	ldw	fp,0(sp)
   128ec:	dec00204 	addi	sp,sp,8
   128f0:	f800283a 	ret

000128f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   128f4:	defffa04 	addi	sp,sp,-24
   128f8:	dfc00515 	stw	ra,20(sp)
   128fc:	df000415 	stw	fp,16(sp)
   12900:	dc000315 	stw	r16,12(sp)
   12904:	df000404 	addi	fp,sp,16
   12908:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1290c:	00bffa04 	movi	r2,-24
   12910:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12914:	e03ffc15 	stw	zero,-16(fp)
   12918:	00001d06 	br	12990 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1291c:	04000074 	movhi	r16,1
   12920:	840fef04 	addi	r16,r16,16316
   12924:	e0bffc17 	ldw	r2,-16(fp)
   12928:	01400304 	movi	r5,12
   1292c:	1009883a 	mov	r4,r2
   12930:	0012db40 	call	12db4 <__mulsi3>
   12934:	8085883a 	add	r2,r16,r2
   12938:	10800017 	ldw	r2,0(r2)
   1293c:	1000111e 	bne	r2,zero,12984 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   12940:	04000074 	movhi	r16,1
   12944:	840fef04 	addi	r16,r16,16316
   12948:	e0bffc17 	ldw	r2,-16(fp)
   1294c:	01400304 	movi	r5,12
   12950:	1009883a 	mov	r4,r2
   12954:	0012db40 	call	12db4 <__mulsi3>
   12958:	8085883a 	add	r2,r16,r2
   1295c:	e0fffe17 	ldw	r3,-8(fp)
   12960:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12964:	d0e00417 	ldw	r3,-32752(gp)
   12968:	e0bffc17 	ldw	r2,-16(fp)
   1296c:	1880020e 	bge	r3,r2,12978 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   12970:	e0bffc17 	ldw	r2,-16(fp)
   12974:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   12978:	e0bffc17 	ldw	r2,-16(fp)
   1297c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12980:	00000606 	br	1299c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12984:	e0bffc17 	ldw	r2,-16(fp)
   12988:	10800044 	addi	r2,r2,1
   1298c:	e0bffc15 	stw	r2,-16(fp)
   12990:	e0bffc17 	ldw	r2,-16(fp)
   12994:	10800810 	cmplti	r2,r2,32
   12998:	103fe01e 	bne	r2,zero,1291c <__alt_data_end+0xffff291c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1299c:	e0bffd17 	ldw	r2,-12(fp)
}
   129a0:	e6ffff04 	addi	sp,fp,-4
   129a4:	dfc00217 	ldw	ra,8(sp)
   129a8:	df000117 	ldw	fp,4(sp)
   129ac:	dc000017 	ldw	r16,0(sp)
   129b0:	dec00304 	addi	sp,sp,12
   129b4:	f800283a 	ret

000129b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   129b8:	defffe04 	addi	sp,sp,-8
   129bc:	df000115 	stw	fp,4(sp)
   129c0:	df000104 	addi	fp,sp,4
   129c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   129c8:	e0bfff17 	ldw	r2,-4(fp)
   129cc:	10bffe84 	addi	r2,r2,-6
   129d0:	10c00428 	cmpgeui	r3,r2,16
   129d4:	18001a1e 	bne	r3,zero,12a40 <alt_exception_cause_generated_bad_addr+0x88>
   129d8:	100690ba 	slli	r3,r2,2
   129dc:	00800074 	movhi	r2,1
   129e0:	108a7c04 	addi	r2,r2,10736
   129e4:	1885883a 	add	r2,r3,r2
   129e8:	10800017 	ldw	r2,0(r2)
   129ec:	1000683a 	jmp	r2
   129f0:	00012a30 	cmpltui	zero,zero,1192
   129f4:	00012a30 	cmpltui	zero,zero,1192
   129f8:	00012a40 	call	12a4 <__alt_mem_onchip_memory-0xed5c>
   129fc:	00012a40 	call	12a4 <__alt_mem_onchip_memory-0xed5c>
   12a00:	00012a40 	call	12a4 <__alt_mem_onchip_memory-0xed5c>
   12a04:	00012a30 	cmpltui	zero,zero,1192
   12a08:	00012a38 	rdprs	zero,zero,1192
   12a0c:	00012a40 	call	12a4 <__alt_mem_onchip_memory-0xed5c>
   12a10:	00012a30 	cmpltui	zero,zero,1192
   12a14:	00012a30 	cmpltui	zero,zero,1192
   12a18:	00012a40 	call	12a4 <__alt_mem_onchip_memory-0xed5c>
   12a1c:	00012a30 	cmpltui	zero,zero,1192
   12a20:	00012a38 	rdprs	zero,zero,1192
   12a24:	00012a40 	call	12a4 <__alt_mem_onchip_memory-0xed5c>
   12a28:	00012a40 	call	12a4 <__alt_mem_onchip_memory-0xed5c>
   12a2c:	00012a30 	cmpltui	zero,zero,1192
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12a30:	00800044 	movi	r2,1
   12a34:	00000306 	br	12a44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12a38:	0005883a 	mov	r2,zero
   12a3c:	00000106 	br	12a44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12a40:	0005883a 	mov	r2,zero
  }
}
   12a44:	e037883a 	mov	sp,fp
   12a48:	df000017 	ldw	fp,0(sp)
   12a4c:	dec00104 	addi	sp,sp,4
   12a50:	f800283a 	ret

00012a54 <atexit>:
   12a54:	200b883a 	mov	r5,r4
   12a58:	000f883a 	mov	r7,zero
   12a5c:	000d883a 	mov	r6,zero
   12a60:	0009883a 	mov	r4,zero
   12a64:	0012b1c1 	jmpi	12b1c <__register_exitproc>

00012a68 <exit>:
   12a68:	defffe04 	addi	sp,sp,-8
   12a6c:	000b883a 	mov	r5,zero
   12a70:	dc000015 	stw	r16,0(sp)
   12a74:	dfc00115 	stw	ra,4(sp)
   12a78:	2021883a 	mov	r16,r4
   12a7c:	0012c340 	call	12c34 <__call_exitprocs>
   12a80:	00800074 	movhi	r2,1
   12a84:	10916104 	addi	r2,r2,17796
   12a88:	11000017 	ldw	r4,0(r2)
   12a8c:	20800f17 	ldw	r2,60(r4)
   12a90:	10000126 	beq	r2,zero,12a98 <exit+0x30>
   12a94:	103ee83a 	callr	r2
   12a98:	8009883a 	mov	r4,r16
   12a9c:	0012ddc0 	call	12ddc <_exit>

00012aa0 <memcmp>:
   12aa0:	01c000c4 	movi	r7,3
   12aa4:	3980192e 	bgeu	r7,r6,12b0c <memcmp+0x6c>
   12aa8:	2144b03a 	or	r2,r4,r5
   12aac:	11c4703a 	and	r2,r2,r7
   12ab0:	10000f26 	beq	r2,zero,12af0 <memcmp+0x50>
   12ab4:	20800003 	ldbu	r2,0(r4)
   12ab8:	28c00003 	ldbu	r3,0(r5)
   12abc:	10c0151e 	bne	r2,r3,12b14 <memcmp+0x74>
   12ac0:	31bfff84 	addi	r6,r6,-2
   12ac4:	01ffffc4 	movi	r7,-1
   12ac8:	00000406 	br	12adc <memcmp+0x3c>
   12acc:	20800003 	ldbu	r2,0(r4)
   12ad0:	28c00003 	ldbu	r3,0(r5)
   12ad4:	31bfffc4 	addi	r6,r6,-1
   12ad8:	10c00e1e 	bne	r2,r3,12b14 <memcmp+0x74>
   12adc:	21000044 	addi	r4,r4,1
   12ae0:	29400044 	addi	r5,r5,1
   12ae4:	31fff91e 	bne	r6,r7,12acc <__alt_data_end+0xffff2acc>
   12ae8:	0005883a 	mov	r2,zero
   12aec:	f800283a 	ret
   12af0:	20c00017 	ldw	r3,0(r4)
   12af4:	28800017 	ldw	r2,0(r5)
   12af8:	18bfee1e 	bne	r3,r2,12ab4 <__alt_data_end+0xffff2ab4>
   12afc:	31bfff04 	addi	r6,r6,-4
   12b00:	21000104 	addi	r4,r4,4
   12b04:	29400104 	addi	r5,r5,4
   12b08:	39bff936 	bltu	r7,r6,12af0 <__alt_data_end+0xffff2af0>
   12b0c:	303fe91e 	bne	r6,zero,12ab4 <__alt_data_end+0xffff2ab4>
   12b10:	003ff506 	br	12ae8 <__alt_data_end+0xffff2ae8>
   12b14:	10c5c83a 	sub	r2,r2,r3
   12b18:	f800283a 	ret

00012b1c <__register_exitproc>:
   12b1c:	defffa04 	addi	sp,sp,-24
   12b20:	dc000315 	stw	r16,12(sp)
   12b24:	04000074 	movhi	r16,1
   12b28:	84116104 	addi	r16,r16,17796
   12b2c:	80c00017 	ldw	r3,0(r16)
   12b30:	dc400415 	stw	r17,16(sp)
   12b34:	dfc00515 	stw	ra,20(sp)
   12b38:	18805217 	ldw	r2,328(r3)
   12b3c:	2023883a 	mov	r17,r4
   12b40:	10003726 	beq	r2,zero,12c20 <__register_exitproc+0x104>
   12b44:	10c00117 	ldw	r3,4(r2)
   12b48:	010007c4 	movi	r4,31
   12b4c:	20c00e16 	blt	r4,r3,12b88 <__register_exitproc+0x6c>
   12b50:	1a000044 	addi	r8,r3,1
   12b54:	8800221e 	bne	r17,zero,12be0 <__register_exitproc+0xc4>
   12b58:	18c00084 	addi	r3,r3,2
   12b5c:	18c7883a 	add	r3,r3,r3
   12b60:	18c7883a 	add	r3,r3,r3
   12b64:	12000115 	stw	r8,4(r2)
   12b68:	10c7883a 	add	r3,r2,r3
   12b6c:	19400015 	stw	r5,0(r3)
   12b70:	0005883a 	mov	r2,zero
   12b74:	dfc00517 	ldw	ra,20(sp)
   12b78:	dc400417 	ldw	r17,16(sp)
   12b7c:	dc000317 	ldw	r16,12(sp)
   12b80:	dec00604 	addi	sp,sp,24
   12b84:	f800283a 	ret
   12b88:	00800034 	movhi	r2,0
   12b8c:	10800004 	addi	r2,r2,0
   12b90:	10002626 	beq	r2,zero,12c2c <__register_exitproc+0x110>
   12b94:	01006404 	movi	r4,400
   12b98:	d9400015 	stw	r5,0(sp)
   12b9c:	d9800115 	stw	r6,4(sp)
   12ba0:	d9c00215 	stw	r7,8(sp)
   12ba4:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   12ba8:	d9400017 	ldw	r5,0(sp)
   12bac:	d9800117 	ldw	r6,4(sp)
   12bb0:	d9c00217 	ldw	r7,8(sp)
   12bb4:	10001d26 	beq	r2,zero,12c2c <__register_exitproc+0x110>
   12bb8:	81000017 	ldw	r4,0(r16)
   12bbc:	10000115 	stw	zero,4(r2)
   12bc0:	02000044 	movi	r8,1
   12bc4:	22405217 	ldw	r9,328(r4)
   12bc8:	0007883a 	mov	r3,zero
   12bcc:	12400015 	stw	r9,0(r2)
   12bd0:	20805215 	stw	r2,328(r4)
   12bd4:	10006215 	stw	zero,392(r2)
   12bd8:	10006315 	stw	zero,396(r2)
   12bdc:	883fde26 	beq	r17,zero,12b58 <__alt_data_end+0xffff2b58>
   12be0:	18c9883a 	add	r4,r3,r3
   12be4:	2109883a 	add	r4,r4,r4
   12be8:	1109883a 	add	r4,r2,r4
   12bec:	21802215 	stw	r6,136(r4)
   12bf0:	01800044 	movi	r6,1
   12bf4:	12406217 	ldw	r9,392(r2)
   12bf8:	30cc983a 	sll	r6,r6,r3
   12bfc:	4992b03a 	or	r9,r9,r6
   12c00:	12406215 	stw	r9,392(r2)
   12c04:	21c04215 	stw	r7,264(r4)
   12c08:	01000084 	movi	r4,2
   12c0c:	893fd21e 	bne	r17,r4,12b58 <__alt_data_end+0xffff2b58>
   12c10:	11006317 	ldw	r4,396(r2)
   12c14:	218cb03a 	or	r6,r4,r6
   12c18:	11806315 	stw	r6,396(r2)
   12c1c:	003fce06 	br	12b58 <__alt_data_end+0xffff2b58>
   12c20:	18805304 	addi	r2,r3,332
   12c24:	18805215 	stw	r2,328(r3)
   12c28:	003fc606 	br	12b44 <__alt_data_end+0xffff2b44>
   12c2c:	00bfffc4 	movi	r2,-1
   12c30:	003fd006 	br	12b74 <__alt_data_end+0xffff2b74>

00012c34 <__call_exitprocs>:
   12c34:	defff504 	addi	sp,sp,-44
   12c38:	df000915 	stw	fp,36(sp)
   12c3c:	dd400615 	stw	r21,24(sp)
   12c40:	dc800315 	stw	r18,12(sp)
   12c44:	dfc00a15 	stw	ra,40(sp)
   12c48:	ddc00815 	stw	r23,32(sp)
   12c4c:	dd800715 	stw	r22,28(sp)
   12c50:	dd000515 	stw	r20,20(sp)
   12c54:	dcc00415 	stw	r19,16(sp)
   12c58:	dc400215 	stw	r17,8(sp)
   12c5c:	dc000115 	stw	r16,4(sp)
   12c60:	d9000015 	stw	r4,0(sp)
   12c64:	2839883a 	mov	fp,r5
   12c68:	04800044 	movi	r18,1
   12c6c:	057fffc4 	movi	r21,-1
   12c70:	00800074 	movhi	r2,1
   12c74:	10916104 	addi	r2,r2,17796
   12c78:	12000017 	ldw	r8,0(r2)
   12c7c:	45005217 	ldw	r20,328(r8)
   12c80:	44c05204 	addi	r19,r8,328
   12c84:	a0001c26 	beq	r20,zero,12cf8 <__call_exitprocs+0xc4>
   12c88:	a0800117 	ldw	r2,4(r20)
   12c8c:	15ffffc4 	addi	r23,r2,-1
   12c90:	b8000d16 	blt	r23,zero,12cc8 <__call_exitprocs+0x94>
   12c94:	14000044 	addi	r16,r2,1
   12c98:	8421883a 	add	r16,r16,r16
   12c9c:	8421883a 	add	r16,r16,r16
   12ca0:	84402004 	addi	r17,r16,128
   12ca4:	a463883a 	add	r17,r20,r17
   12ca8:	a421883a 	add	r16,r20,r16
   12cac:	e0001e26 	beq	fp,zero,12d28 <__call_exitprocs+0xf4>
   12cb0:	80804017 	ldw	r2,256(r16)
   12cb4:	e0801c26 	beq	fp,r2,12d28 <__call_exitprocs+0xf4>
   12cb8:	bdffffc4 	addi	r23,r23,-1
   12cbc:	843fff04 	addi	r16,r16,-4
   12cc0:	8c7fff04 	addi	r17,r17,-4
   12cc4:	bd7ff91e 	bne	r23,r21,12cac <__alt_data_end+0xffff2cac>
   12cc8:	00800034 	movhi	r2,0
   12ccc:	10800004 	addi	r2,r2,0
   12cd0:	10000926 	beq	r2,zero,12cf8 <__call_exitprocs+0xc4>
   12cd4:	a0800117 	ldw	r2,4(r20)
   12cd8:	1000301e 	bne	r2,zero,12d9c <__call_exitprocs+0x168>
   12cdc:	a0800017 	ldw	r2,0(r20)
   12ce0:	10003226 	beq	r2,zero,12dac <__call_exitprocs+0x178>
   12ce4:	a009883a 	mov	r4,r20
   12ce8:	98800015 	stw	r2,0(r19)
   12cec:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   12cf0:	9d000017 	ldw	r20,0(r19)
   12cf4:	a03fe41e 	bne	r20,zero,12c88 <__alt_data_end+0xffff2c88>
   12cf8:	dfc00a17 	ldw	ra,40(sp)
   12cfc:	df000917 	ldw	fp,36(sp)
   12d00:	ddc00817 	ldw	r23,32(sp)
   12d04:	dd800717 	ldw	r22,28(sp)
   12d08:	dd400617 	ldw	r21,24(sp)
   12d0c:	dd000517 	ldw	r20,20(sp)
   12d10:	dcc00417 	ldw	r19,16(sp)
   12d14:	dc800317 	ldw	r18,12(sp)
   12d18:	dc400217 	ldw	r17,8(sp)
   12d1c:	dc000117 	ldw	r16,4(sp)
   12d20:	dec00b04 	addi	sp,sp,44
   12d24:	f800283a 	ret
   12d28:	a0800117 	ldw	r2,4(r20)
   12d2c:	80c00017 	ldw	r3,0(r16)
   12d30:	10bfffc4 	addi	r2,r2,-1
   12d34:	15c01426 	beq	r2,r23,12d88 <__call_exitprocs+0x154>
   12d38:	80000015 	stw	zero,0(r16)
   12d3c:	183fde26 	beq	r3,zero,12cb8 <__alt_data_end+0xffff2cb8>
   12d40:	95c8983a 	sll	r4,r18,r23
   12d44:	a0806217 	ldw	r2,392(r20)
   12d48:	a5800117 	ldw	r22,4(r20)
   12d4c:	2084703a 	and	r2,r4,r2
   12d50:	10000b26 	beq	r2,zero,12d80 <__call_exitprocs+0x14c>
   12d54:	a0806317 	ldw	r2,396(r20)
   12d58:	2088703a 	and	r4,r4,r2
   12d5c:	20000c1e 	bne	r4,zero,12d90 <__call_exitprocs+0x15c>
   12d60:	89400017 	ldw	r5,0(r17)
   12d64:	d9000017 	ldw	r4,0(sp)
   12d68:	183ee83a 	callr	r3
   12d6c:	a0800117 	ldw	r2,4(r20)
   12d70:	15bfbf1e 	bne	r2,r22,12c70 <__alt_data_end+0xffff2c70>
   12d74:	98800017 	ldw	r2,0(r19)
   12d78:	153fcf26 	beq	r2,r20,12cb8 <__alt_data_end+0xffff2cb8>
   12d7c:	003fbc06 	br	12c70 <__alt_data_end+0xffff2c70>
   12d80:	183ee83a 	callr	r3
   12d84:	003ff906 	br	12d6c <__alt_data_end+0xffff2d6c>
   12d88:	a5c00115 	stw	r23,4(r20)
   12d8c:	003feb06 	br	12d3c <__alt_data_end+0xffff2d3c>
   12d90:	89000017 	ldw	r4,0(r17)
   12d94:	183ee83a 	callr	r3
   12d98:	003ff406 	br	12d6c <__alt_data_end+0xffff2d6c>
   12d9c:	a0800017 	ldw	r2,0(r20)
   12da0:	a027883a 	mov	r19,r20
   12da4:	1029883a 	mov	r20,r2
   12da8:	003fb606 	br	12c84 <__alt_data_end+0xffff2c84>
   12dac:	0005883a 	mov	r2,zero
   12db0:	003ffb06 	br	12da0 <__alt_data_end+0xffff2da0>

00012db4 <__mulsi3>:
   12db4:	0005883a 	mov	r2,zero
   12db8:	20000726 	beq	r4,zero,12dd8 <__mulsi3+0x24>
   12dbc:	20c0004c 	andi	r3,r4,1
   12dc0:	2008d07a 	srli	r4,r4,1
   12dc4:	18000126 	beq	r3,zero,12dcc <__mulsi3+0x18>
   12dc8:	1145883a 	add	r2,r2,r5
   12dcc:	294b883a 	add	r5,r5,r5
   12dd0:	203ffa1e 	bne	r4,zero,12dbc <__alt_data_end+0xffff2dbc>
   12dd4:	f800283a 	ret
   12dd8:	f800283a 	ret

00012ddc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12ddc:	defffd04 	addi	sp,sp,-12
   12de0:	df000215 	stw	fp,8(sp)
   12de4:	df000204 	addi	fp,sp,8
   12de8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12dec:	0001883a 	nop
   12df0:	e0bfff17 	ldw	r2,-4(fp)
   12df4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12df8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12dfc:	10000226 	beq	r2,zero,12e08 <_exit+0x2c>
    ALT_SIM_FAIL();
   12e00:	002af070 	cmpltui	zero,zero,43969
   12e04:	00000106 	br	12e0c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12e08:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12e0c:	003fff06 	br	12e0c <__alt_data_end+0xffff2e0c>
